OBJECT Codeunit 50026 Propac Sales Export
{
  OBJECT-PROPERTIES
  {
    Date=07/14/14;
    Time=12:22:29;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            MasterSetup@1000000010 : Record 50008;
            PurchaseHeader@1000000011 : Record 38;
            PurchCrMemoHdr@1000000012 : Record 124;
            ConversionTableVendor@1000000013 : Record 50003;
            Vend@1000000014 : Record 23;
            ToCheckDate@1000000015 : Automation "{84B43D7D-C0AF-40AB-BCC4-F15BE59A9D62} 1.0:{531EC973-2A03-4C71-82C5-0FEBCEE3C236}:Unknown Automation Server.Unknown Class";
            OrderAddress@1000000016 : Record 224;
            PaymentTerms@1000000017 : Record 3;
            Crrncy@1000000020 : Record 4;
            GeneralLedgerSetup@1000000019 : Record 98;
            DimensionValue@1000000018 : Record 349;
            CurrencyExchangeRate@1000000021 : Record 330;
            CommodityCodePROPAC@1000000023 : Record 50021;
            "PropacSales/RtrnExportReport"@1000000028 : Report 50063;
            MasterCustomerPostingSetup@1000000029 : Record 50012;
            FileName@1000000022 : Text[255];
            LogFileName@1000000009 : Text[255];
            LF@1000000008 : File;
            Outstreamobj@1000000007 : OutStream;
            F@1000000006 : File;
            Instreamobj@1000000005 : InStream;
            Readed@1000000004 : Text[255];
            Ch@1000000003 : Char;
            ErrorInFile@1000000002 : Boolean;
            ErrorInRow@1000000001 : Boolean;
            TransactionDateOK@1000000000 : Boolean;
            CommodityCode@1000000025 : Code[20];
            VATProdCheck@1000000026 : Integer;
            DealerCode1@1000000027 : Code[20];
          BEGIN
            Ch:=9;
            MasterSetup.GET;
            FileName:=MasterSetup."Interface File Path" + '\' + MasterSetup."Propac Sales Inv Exp";
            LogFileName:=MasterSetup."Interface File Path" + '\' + 'LOG-' + MasterSetup."Propac Sales Inv Exp";
            LF.CREATE(LogFileName);
            LF.CREATEOUTSTREAM(Outstreamobj);
            LF.TEXTMODE(TRUE);
            F.OPEN(FileName);
            F.CREATEINSTREAM(Instreamobj);
            ErrorInFile:=FALSE;
            EntryNo:=0;
            CLEAR(ToCheckDate);
            //UPG13C.begin
            //CREATE(ToCheckDate);
            CREATE(ToCheckDate,TRUE,TRUE);
            //UPG13C.end

            MasterCustomerPostingSetup.GET;
            DeleteTempTable();

            WHILE NOT Instreamobj.EOS DO BEGIN
              ErrorInRow:=FALSE;
              TransactionDateOK:=FALSE;

              //Creating Entry No.
              EntryNo+=1;
              Outstreamobj.WRITE(FORMAT(EntryNo));
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));

              //Reading Invoice No.
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(InvoiceNo,Readed);
              IF InvoiceNo='' THEN BEGIN
                Outstreamobj.WRITETEXT('! Invoice No. Is Blank');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
                PurchaseHeader.RESET;
                PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
                PurchaseHeader.SETRANGE("No.",InvoiceNo);
                IF PurchaseHeader.FINDFIRST THEN BEGIN
                  Outstreamobj.WRITETEXT('! Invoice No. Already Exist');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END ELSE BEGIN
                  PurchCrMemoHdr.RESET;
                  PurchCrMemoHdr.SETRANGE("No.",InvoiceNo);
                  IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
                    Outstreamobj.WRITETEXT('! Invoice No. Is Already Posted');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow:=TRUE;
                  END;
                END;
              END;

              //Reading Dealer Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(DealerCode1,Readed);

              //Reading Transaction Date
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              IF NOT (EVALUATE(TransactionDate,Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Transaction Date');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE TransactionDateOK:=TRUE;

              //Reading Invoice Date
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              CLEAR(ToCheckDate);
              //UPG13C.begin
              //CREATE(ToCheckDate);
              CREATE(ToCheckDate,TRUE,TRUE);
              //UPG13C.end

              IF NOT (EVALUATE(InvoiceDate,Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Invoice Date');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;

              //Reading Ext. Doc. No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ExtDocNo,Readed);

              //Reading NPWP No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(NPWPNo,Readed);
              IF NPWPNo <> '' THEN BEGIN
                ConversionTableVendor.RESET;
                ConversionTableVendor.SETRANGE("Propac Code",DealerCode1);
                ConversionTableVendor.SETRANGE(NPWP,NPWPNo);
                IF ConversionTableVendor.FINDFIRST THEN BEGIN
                  IF NOT OrderAddress.GET(ConversionTableVendor.NAV,ConversionTableVendor.NPWP) THEN BEGIN
                    Outstreamobj.WRITETEXT('! NPWP No. Is Not Defined As Ship To Addd. For The Dealer');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow:=TRUE;
                  END;
                END ELSE BEGIN
                  Outstreamobj.WRITETEXT('! NPWP No. Is Not Defined In Conversion Table');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;

              //Reading Payment Term Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              EVALUATE(PaymentTerm,Readed);
              IF PaymentTerm = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Payment Term Code Is Blank');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
                IF NOT PaymentTerms.GET(PaymentTerm) THEN BEGIN
                  Outstreamobj.WRITETEXT('! Payment Term Code Is Not Defined');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END ELSE
                  DueDate:=CALCDATE(PaymentTerms."Due Date Calculation",TransactionDate);
              END;

              //Reading Shop Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ShopCode,Readed);
              IF ShopCode<>'' THEN BEGIN
                GeneralLedgerSetup.GET;
                DimensionValue.RESET;
                DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
                DimensionValue.SETRANGE(DimensionValue.Name,ShopCode);
                IF DimensionValue.FINDFIRST THEN ShopCode:=DimensionValue.Code
                ELSE BEGIN
                  ShopCode:='';
                  Outstreamobj.WRITETEXT('! Error In Shop Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;

              //Reading Model Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ModelCode,Readed);
              IF ModelCode<>'' THEN BEGIN
                GeneralLedgerSetup.GET;
                DimensionValue.RESET;
                DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 2 Code");
                DimensionValue.SETRANGE(DimensionValue.Name,ModelCode);
                IF DimensionValue.FINDFIRST THEN ModelCode:=DimensionValue.Code
                ELSE BEGIN
                  ModelCode:='';
                  Outstreamobj.WRITETEXT('! Error In Model Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;

              //Reading Currency Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(CurrencyCode,Readed);
              IF CurrencyCode='IDR' THEN
                CurrencyCode:=''
              ELSE BEGIN
                Crrncy.RESET;
                Crrncy.SETRANGE(Crrncy.Code,CurrencyCode);
                IF NOT Crrncy.FINDFIRST THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Currency Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END ELSE BEGIN
                  IF TransactionDateOK THEN BEGIN
                    CurrencyExchangeRate.RESET;
                    CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
                    CurrencyExchangeRate.SETRANGE("Starting Date",TransactionDate);
                    IF NOT CurrencyExchangeRate.FINDFIRST THEN BEGIN
                      Outstreamobj.WRITETEXT('! Currency Exchange Rate Is Not Defined For Transaction Date');
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow:=TRUE;
                    END;
                  END;
                END;
              END;

              //Reading AppliedToInvoiceNo
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(AppliedToInvoiceNo,Readed);
              IF AppliedToInvoiceNo<>'' THEN BEGIN
                Outstreamobj.WRITETEXT('! Applied To Invoice No. Is Not Required In Sales');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              DocType:=DocType::"Credit Memo";

              //Reading Account No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(CommodityCode,Readed);
              IF CommodityCode = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Commodity Code Is Balnk');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
                IF NOT CommodityCodePROPAC.GET(CommodityCode) THEN BEGIN
                  Outstreamobj.WRITETEXT('! Commodity Code Is Not Defined');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END ELSE BEGIN
                  AccountNo:=CommodityCodePROPAC."Account No.";
                END;
              END;

              //Reading Amount
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              IF NOT EVALUATE(Amount,Readed) THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Amount');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;

              //Reading Quantity
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,1);
              Quantity:=1;

              //Reading VAT Buss. Posting Group
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(VATBussPostingGrp,Readed);
              IF VATBussPostingGrp <> 'DOMESTIC' THEN BEGIN
                Outstreamobj.WRITETEXT('! VAT Buss. Posting Group Can Only Be DOMESTIC');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;


              //Reading VAT Prod. Posting Group
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,1);
              IF EVALUATE(VATProdCheck,Readed) THEN BEGIN
                IF VATProdCheck = 0 THEN  BEGIN
                  VATProdPostingGrp:='NO VAT';
                  GenProdPostingGrp:='NO VAT';
                END ELSE IF VATProdCheck = 1 THEN BEGIN
                  VATProdPostingGrp:='VAT 10';
                  GenProdPostingGrp:='VAT';
                END ELSE BEGIN
                  Outstreamobj.WRITETEXT('! Error In VAT Prod. Posting Group');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END ELSE BEGIN
                Outstreamobj.WRITETEXT('! Error In VAT Prod. Posting Group');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;

              //Reading Narration
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,250);
              EVALUATE(Narration,Readed);

              IF ErrorInRow THEN ErrorInFile:=TRUE;

              IF (NOT ErrorInRow)  THEN BEGIN
                IF  NOT ErrorInFile THEN InsertInTempTable();
                Outstreamobj.WRITETEXT('Processed Successfully');
              END;

              Instreamobj.READTEXT(Readed,1);
              Outstreamobj.WRITETEXT();

            END;

            LF.CLOSE;

            IF ErrorInFile THEN DeleteTempTable();

            IF NOT ErrorInFile THEN "PropacSales/RtrnExportReport".RUN;
          END;

  }
  CODE
  {
    VAR
      EntryNo@1000000000 : Integer;
      InvoiceNo@1000000001 : Code[20];
      DealerCode@1000000002 : Code[20];
      TransactionDate@1000000003 : Date;
      InvoiceDate@1000000004 : Date;
      ExtDocNo@1000000010 : Code[10];
      NPWPNo@1000000005 : Code[20];
      DueDate@1000000006 : Date;
      ShopCode@1000000007 : Code[10];
      ModelCode@1000000008 : Code[10];
      CurrencyCode@1000000009 : Code[10];
      AppliedToInvoiceNo@1000000011 : Code[20];
      AccountNo@1000000012 : Code[20];
      Amount@1000000013 : Decimal;
      Quantity@1000000014 : Integer;
      VATBussPostingGrp@1000000015 : Code[10];
      VATProdPostingGrp@1000000016 : Code[10];
      Narration@1000000017 : Text[250];
      CustPostingGrp@1000000018 : Code[10];
      GenProdPostingGrp@1000000019 : Code[10];
      DocType@1000000020 : ',Credit Memo,Invoice';
      OldVendor@1000000021 : Code[20];
      PaymentTerm@1000000022 : Code[11];

    PROCEDURE InsertInTempTable@1000000000();
    VAR
      TempTableForPropac@1000000000 : Record 50022;
    BEGIN
      TempTableForPropac.INIT;
      TempTableForPropac."Document Type":=DocType;
      TempTableForPropac."Dealer Code":=DealerCode;
      TempTableForPropac."Invoice No.":=InvoiceNo;
      TempTableForPropac."Entry No.":=EntryNo;
      TempTableForPropac.INSERT;
      TempTableForPropac."Transaction Date":=TransactionDate;
      TempTableForPropac."Invoice Date":=InvoiceDate;
      TempTableForPropac."Ext.Doc.No.":=ExtDocNo;
      TempTableForPropac."Npwp No.":=NPWPNo;
      TempTableForPropac."Due Date":=DueDate;
      TempTableForPropac."Shop Code":=ShopCode;
      TempTableForPropac."Model Code":=ModelCode;
      TempTableForPropac."Currency Code":=CurrencyCode;
      TempTableForPropac."Applied To Invoice No":=AppliedToInvoiceNo;
      TempTableForPropac."Account No.":=AccountNo;
      TempTableForPropac.Amount:=Amount;
      TempTableForPropac.Quantity:=Quantity;
      TempTableForPropac."VAT Buss. Posting Group":=VATBussPostingGrp;
      TempTableForPropac."VAT Prod. Posting Group":=VATProdPostingGrp;
      TempTableForPropac.Narration:=Narration;
      TempTableForPropac."Customer Posting Group":=CustPostingGrp;
      TempTableForPropac."Gen. Prod. Posting Group":=GenProdPostingGrp;
      TempTableForPropac."Payment Term":=PaymentTerm;
      TempTableForPropac.MODIFY;
    END;

    PROCEDURE DeleteTempTable@1000000001();
    VAR
      TempTableForPropac@1000000000 : Record 50022;
    BEGIN
      TempTableForPropac.DELETEALL;
    END;

    BEGIN
    END.
  }
}

