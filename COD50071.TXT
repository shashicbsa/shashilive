OBJECT Codeunit 50071 Gen. Jnl.-Post Line-Consol
{
  OBJECT-PROPERTIES
  {
    Date=05/28/14;
    Time=16:38:43;
    Version List=YIMM-CONSOL;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 17=imd,
                TableData 21=imd,
                TableData 25=imd,
                TableData 45=imd,
                TableData 254=imd,
                TableData 271=imd,
                TableData 272=imd,
                TableData 379=imd,
                TableData 380=imd,
                TableData 5601=rimd,
                TableData 5617=imd,
                TableData 5625=rimd;
    OnRun=VAR
            TempJnlLineDim2@1000 : TEMPORARY Record 356;
          BEGIN
            GLSetup.GET;
            TempJnlLineDim2.RESET;
            TempJnlLineDim2.DELETEALL;
            IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
              TempJnlLineDim2."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim2."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim2."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim2."Journal Line No." := "Line No.";
              TempJnlLineDim2."Dimension Code" := GLSetup."Global Dimension 1 Code";
              TempJnlLineDim2."Dimension Value Code" := "Shortcut Dimension 1 Code";
              TempJnlLineDim2.INSERT;
            END;
            IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
              TempJnlLineDim2."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim2."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim2."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim2."Journal Line No." := "Line No.";
              TempJnlLineDim2."Dimension Code" := GLSetup."Global Dimension 2 Code";
              TempJnlLineDim2."Dimension Value Code" := "Shortcut Dimension 2 Code";
              TempJnlLineDim2.INSERT;
            END;
            RunWithCheck(Rec,TempJnlLineDim2);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 needs to be rounded';
      Text001@1001 : TextConst 'ENU=Sales %1 %2 already exists.';
      Text002@1002 : TextConst 'ENU=Purchase %1 %2 already exists.';
      Text003@1003 : TextConst 'ENU=Purchase %1 %2 already exists for this vendor.';
      Text004@1004 : TextConst 'ENU=must not be filled when %1 is different in %2 and %3.';
      Text005@1005 : TextConst 'ENU=" must be entered when %1 is %2"';
      Text006@1006 : TextConst 'ENU=Check %1 already exists for this Bank Account.';
      GLSetup@1009 : Record 98;
      SalesSetup@1010 : Record 311;
      PurchSetup@1011 : Record 312;
      AccountingPeriod@1012 : Record 50;
      GLAcc@1013 : Record 15;
      GLEntry@1014 : Record 17;
      GLEntryTmp@1015 : TEMPORARY Record 17;
      TempGLEntryVAT@1016 : TEMPORARY Record 17;
      OrigGLEntry@1017 : Record 17;
      VATPostingSetup@1019 : Record 325;
      Cust@1020 : Record 18;
      Vend@1021 : Record 23;
      GenJnlLine@1022 : Record 81;
      GenJnlLine1@1500004 : Record 81;
      GenJnlLine2@1500028 : Record 81;
      CustLedgEntry@1500003 : Record 21;
      CustLedgEntry1@1500002 : Record 21;
      VendLedgEntry@1500001 : Record 25;
      VendLedgEntry1@1500000 : Record 25;
      TempJnlLineDim@1024 : TEMPORARY Record 356;
      TempFAJnlLineDim@1025 : TEMPORARY Record 356;
      GLReg@1029 : Record 45;
      CustPostingGr@1030 : Record 92;
      VendPostingGr@1031 : Record 93;
      Currency@1032 : Record 4;
      AddCurrency@1033 : Record 4;
      ApplnCurrency@1034 : Record 4;
      CurrExchRate@1035 : Record 330;
      VATEntry@1038 : Record 254;
      BankAcc@1039 : Record 270;
      BankAccLedgEntry@1040 : Record 271;
      CheckLedgEntry@1041 : Record 272;
      CheckLedgEntry2@1042 : Record 272;
      BankAccPostingGr@1043 : Record 277;
      GenJnlTemplate@1044 : Record 80;
      TaxJurisdiction@1045 : Record 320;
      TaxDetail@1046 : Record 322;
      FAGLPostBuf@1047 : TEMPORARY Record 5637;
      UnrealizedCustLedgEntry@1084 : Record 21;
      UnrealizedVendLedgEntry@1085 : Record 25;
      GenJnlCheckLine@1048 : Codeunit 11;
      ExchAccGLJnlLine@1049 : Codeunit 366;
      FAJnlPostLine@1050 : Codeunit 5632;
      SalesTaxCalculate@1051 : Codeunit 398;
      GenJnlApply@1052 : Codeunit 225;
      DimMgt@1053 : Codeunit 408;
      JobPostLine@1028 : Codeunit 1001;
      FiscalYearStartDate@1054 : Date;
      NextEntryNo@1055 : Integer;
      BalanceCheckAmount@1056 : Decimal;
      BalanceCheckAmount2@1057 : Decimal;
      BalanceCheckAddCurrAmount@1058 : Decimal;
      BalanceCheckAddCurrAmount2@1059 : Decimal;
      CurrentBalance@1060 : Decimal;
      SalesTaxBaseAmount@1061 : Decimal;
      TotalAddCurrAmount@1062 : Decimal;
      TotalAmount@1063 : Decimal;
      UnrealizedRemainingAmountCust@1037 : Decimal;
      UnrealizedRemainingAmountVend@1074 : Decimal;
      NextVATEntryNo@1064 : Integer;
      FirstNewVATEntryNo@1065 : Integer;
      NextTransactionNo@1066 : Integer;
      NextConnectionNo@1067 : Integer;
      InsertedTempGLEntryVAT@1068 : Integer;
      LastDocNo@1069 : Code[20];
      LastLineNo@1070 : Integer;
      LastDate@1071 : Date;
      LastDocType@1072 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      NextCheckEntryNo@1073 : Integer;
      AddCurrGLEntryVATAmt@1075 : Decimal;
      CurrencyDate@1076 : Date;
      CurrencyFactor@1077 : Decimal;
      UseCurrFactorOnly@1078 : Boolean;
      NonAddCurrCodeOccured@1079 : Boolean;
      FADimAlreadyChecked@1080 : Boolean;
      Text010@1008 : TextConst 'ENU=Residual caused by rounding of %1';
      Text013@1007 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      Text014@1026 : TextConst 'ENU=Reversal found a %1 without a matching %2.';
      Text015@1023 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.';
      Text011@1027 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3';
      AllApplied@1081 : Boolean;
      OverrideDimErr@1018 : Boolean;
      JobLine@1036 : Boolean;
      CheckUnrealizedCust@1082 : Boolean;
      CheckUnrealizedVend@1083 : Boolean;
      CostAccSetup@1150002 : Record 3010558;
      TransferGlEntriesToCA@1150003 : Codeunit 3010554;
      WHTPostingSetup@1500011 : Record 28043;
      TempWHTEntry@1500010 : Record 28044;
      WHTEntry@1500009 : Record 28044;
      SourceCodeSetup@1500008 : Record 242;
      SalesCrMemoHeader@1500007 : Record 114;
      PurchaseCrMemoHeader@1500006 : Record 124;
      ReportSelection@1500005 : Record 77;
      RemAmt@1500016 : Decimal;
      NextWHTEntryNo@1500015 : Integer;
      FirstNewWHTEntryNo@1500014 : Integer;
      WHTManagement@1500013 : Codeunit 28040;
      TaxManagement@1500012 : Codeunit 28070;
      CurrFactor@1500026 : Decimal;
      KeepWHTEntryNo@1500025 : Integer;
      WHTAmount@1500024 : Decimal;
      WHTAmountLCY@1500023 : Decimal;
      HadWHTEntryNo@1500022 : Boolean;
      WHTAmount1@1500021 : Decimal;
      TaxInv@1500020 : Boolean;
      NextNo@1500019 : Integer;
      RemAmtWht@1500018 : Decimal;
      WHTAmount2@1500017 : Decimal;
      UseVendExchRate@1500027 : Boolean;
      EntryType@1500029 : Option;
      Journal@1500030 : Record 230;
      "----YMSLI-----------"@1000000008 : Text[30];
      PurchLine@1000000007 : Record 39;
      "KwitansiNo."@1000000006 : Code[20];
      "CommInvoiceNo."@1000000005 : Code[20];
      CommInvoiceDate@1000000004 : Date;
      "TaxInvoiceNo."@1000000003 : Code[20];
      TaxInvoiceDate@1000000002 : Date;
      Naration@1000000001 : Text[30];
      "//YIMMNTTEN"@1000000000 : Integer;
      "//YIMMNBTRST"@1000000009 : Integer;
      VATExchRate@1000000010 : Record 330;
      VATEntryAmount@1000000011 : Decimal;
      CurrCode@1000000012 : Code[20];
      VATAmt@1000000014 : Decimal;
      WHTAmt@1000000013 : Decimal;
      GLEnt_Des@1000000015 : Record 15;
      MasterSetUp@1000000016 : Record 50008;

    PROCEDURE GetGLReg@10(VAR NewGLReg@1000 : Record 45);
    BEGIN
      NewGLReg := GLReg;
    END;

    PROCEDURE RunWithCheck@45(VAR GenJnlLine2@1000 : Record 81;VAR TempJnlLineDim2@1001 : Record 356);
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim2,TempJnlLineDim);
      Code(TRUE);
      GenJnlLine2 := GenJnlLine;
    END;

    PROCEDURE RunWithoutCheck@21(VAR GenJnlLine2@1000 : Record 81;VAR TempJnlLineDim2@1001 : Record 356);
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim2,TempJnlLineDim);
      Code(FALSE);
      GenJnlLine2 := GenJnlLine;
    END;

    LOCAL PROCEDURE Code@9(CheckLine@1000 : Boolean);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN BEGIN
          LastDocType := "Document Type";
          LastDocNo := "Document No.";
          LastLineNo := "Line No.";
          LastDate := "Posting Date";
          EXIT;
        END;

        Journal.GET(GenJnlLine."Source Code");
        IF Journal.Simulation THEN
          EntryType := GenJnlLine."Entry Type"::Simulation
        ELSE
          EntryType := GenJnlLine."Entry Type"::Definitive;
        IF CheckLine THEN BEGIN
          IF OverrideDimErr THEN
            GenJnlCheckLine.SetOverDimErr;
          GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);
        END;
        IF "Currency Code" = '' THEN BEGIN
          Currency.InitRoundingPrecision;
          "Amount (LCY)" := Amount;
          "VAT Amount (LCY)" := "VAT Amount";
          "VAT Base Amount (LCY)" := "VAT Base Amount";
        END ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          IF NOT "System-Created Entry" THEN BEGIN
            "Source Currency Code" := "Currency Code";
            "Source Currency Amount" := Amount;
            "Source Curr. VAT Base Amount" := "VAT Base Amount";
            "Source Curr. VAT Amount" := "VAT Amount";
          END;
        END;
        IF "Additional-Currency Posting" = "Additional-Currency Posting"::None THEN BEGIN
          IF Amount <> ROUND(Amount,Currency."Amount Rounding Precision") THEN
            FIELDERROR(
              Amount,
              STRSUBSTNO(Text000,Amount));
          IF "Amount (LCY)" <> ROUND("Amount (LCY)") THEN
            FIELDERROR(
              "Amount (LCY)",
              STRSUBSTNO(Text000,"Amount (LCY)"));
        END;

        IF ("Bill-to/Pay-to No." = '') THEN
          CASE TRUE OF
            "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Account No.";
            "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Bal. Account No.";
          END;
        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";
        IF "Due Date" = 0D THEN
          "Due Date" := "Posting Date";

        JobLine := (GenJnlLine."Job No." <> '');

        InitCodeUnit;

        IF ("Account No." <> '') AND ("Bal. Account No." <> '') AND (NOT "System-Created Entry") AND
           ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset"])
        THEN
          ExchAccGLJnlLine.RUN(GenJnlLine);

        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              PostGLAcc;
            "Account Type"::Customer:
              //PostCust;
              IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
              PostCust;
            "Account Type"::Vendor:
              //PostVend;
              IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
              PostVend;
            "Account Type"::"Bank Account":
              //PostBankAcc;
              IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
              PostBankAcc;
            "Account Type"::"Fixed Asset":
              //PostFixedAsset;
              IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
              PostFixedAsset;
            "Account Type"::"IC Partner":
              PostICPartner;
            END;

        IF "Bal. Account No." <> '' THEN BEGIN
          ExchAccGLJnlLine.RUN(GenJnlLine);
          IF "Account No." <> '' THEN
            CASE "Account Type" OF
              "Account Type"::"G/L Account":
                PostGLAcc;
              "Account Type"::Customer:
                //PostCust;
                IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
                PostCust;
              "Account Type"::Vendor:
                //PostVend;
                IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
                PostVend;
              "Account Type"::"Bank Account":
                //PostBankAcc;
                IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
                PostBankAcc;
              "Account Type"::"Fixed Asset":
                //PostFixedAsset;
                IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
                PostFixedAsset;
              "Account Type"::"IC Partner":
                PostICPartner;
            END;
        END;

        FinishCodeunit;
      END;
    END;

    PROCEDURE InitVat@33();
    BEGIN
      WITH GenJnlLine DO
        IF (("Gen. Posting Type" <> 0) AND
            ("Gen. Posting Type" <> "Gen. Posting Type"::Settlement) AND
            (GLSetup.GSTEnabled("Document Date"))) OR
           (("Gen. Posting Type" <> 0) AND
            (NOT GLSetup.GSTEnabled("Document Date")))
        THEN BEGIN
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                GLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
                GLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                GLEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
                GLEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                GLEntry."Tax Area Code" := "Tax Area Code";
                GLEntry."Tax Liable" := "Tax Liable";
                GLEntry."Tax Group Code" := "Tax Group Code";
                GLEntry."Use Tax" := "Use Tax";
                CASE "VAT Calculation Type" OF
                  "VAT Calculation Type"::"Normal VAT":
                    BEGIN
                      IF ("VAT Difference" <> 0) OR ("VAT Difference (ACY)" <> 0) THEN BEGIN
                        GLEntry.Amount := "VAT Base Amount (LCY)";
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                        IF "VAT Base (ACY)" = 0 THEN
                          GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount"
                        ELSE
                          GLEntry."Additional-Currency Amount" := "VAT Base (ACY)";
                        IF "VAT Base (ACY)" <> 0 THEN
                          AddCurrGLEntryVATAmt := "Amount Including VAT (ACY)"-"VAT Base (ACY)"
                        ELSE BEGIN
                        IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                          AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                        ELSE
                          AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                          END;
                      END ELSE BEGIN
                        GLEntry.Amount := ROUND("Amount (LCY)" / (1 + VATPostingSetup."VAT %" / 100));
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                        IF "VAT Base (ACY)" = 0 THEN
                          GLEntry."Additional-Currency Amount" :=
                            ROUND(
                              "Source Currency Amount" / (1 + VATPostingSetup."VAT %" / 100),
                                AddCurrency."Amount Rounding Precision")
                          ELSE
                            GLEntry."Additional-Currency Amount" := "VAT Base (ACY)";
                        IF "VAT Base (ACY)" <> 0 THEN
                          AddCurrGLEntryVATAmt := "Amount Including VAT (ACY)"-"VAT Base (ACY)"
                        ELSE BEGIN
                          IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                            AddCurrGLEntryVATAmt := "Source Currency Amount" - GLEntry."Additional-Currency Amount"
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END;
                      END;
                    END;
                  "VAT Calculation Type"::"Reverse Charge VAT":
                    CASE "Gen. Posting Type" OF
                      "Gen. Posting Type"::Purchase:
                        BEGIN
                          IF "VAT Difference" <> 0 THEN BEGIN
                            GLEntry."VAT Amount" := "VAT Amount (LCY)";
                            IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                              AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                            ELSE
                              AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                          END ELSE BEGIN
                            GLEntry."VAT Amount" := ROUND(GLEntry.Amount * VATPostingSetup."VAT %" / 100);
                            AddCurrGLEntryVATAmt :=
                              ROUND(
                                GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100,
                                AddCurrency."Amount Rounding Precision");
                          END;
                        END;
                      "Gen. Posting Type"::Sale:
                        BEGIN
                          GLEntry."VAT Amount" := 0;
                          AddCurrGLEntryVATAmt := 0;
                        END;
                    END;
                  "VAT Calculation Type"::"Full VAT":
                    BEGIN
                      CASE "Gen. Posting Type" OF
                        "Gen. Posting Type"::Sale:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                          END;
                        "Gen. Posting Type"::Purchase:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                          END;
                      END;
                      GLEntry.Amount := 0;
                      GLEntry."Additional-Currency Amount" := 0;
                      GLEntry."VAT Amount" := "Amount (LCY)";
                      IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                        AddCurrGLEntryVATAmt := "Source Currency Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr("Amount (LCY)");
                    END;
                  "VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                         "Use Tax"
                      THEN BEGIN
                        GLEntry."VAT Amount" :=
                          ROUND(
                            SalesTaxCalculate.CalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry.Amount := "Amount (LCY)";
                      END ELSE BEGIN
                        GLEntry.Amount :=
                          ROUND(
                            SalesTaxCalculate.ReverseCalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      END;
                      GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                      IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END;
                END;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF GenJnlLine."Gen. Posting Type" <> GenJnlLine."Gen. Posting Type"::Settlement THEN BEGIN
                  GLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
                  GLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                  GLEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
                  GLEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                  GLEntry."Tax Area Code" := "Tax Area Code";
                  GLEntry."Tax Liable" := "Tax Liable";
                  GLEntry."Tax Group Code" := "Tax Group Code";
                  GLEntry."Use Tax" := "Use Tax";
                  GLEntry."VAT Amount" := "VAT Amount (LCY)";
                  IF ("Vendor Exchange Rate (ACY)" <> 0) OR
                     (("Vendor Exchange Rate (ACY)" = 1) AND
                      ("Source Currency Code" <> GLSetup."Additional Reporting Currency"))
                  THEN BEGIN
                    GLEntry."Additional-Currency Amount" := "VAT Base (ACY)"
                    + "Line Discount Amt. (ACY)" + "Inv. Discount Amt. (ACY)";
                    AddCurrGLEntryVATAmt := "Amount Including VAT (ACY)" - "VAT Base (ACY)";
                  END ELSE BEGIN
                  IF "Source Currency Code" = GLSetup."Additional Reporting Currency" THEN
                    AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                  ELSE
                    AddCurrGLEntryVATAmt := CalcLCYToAddCurr("VAT Amount (LCY)");
                END;
              END;
          END;
        END;
          GLEntry.Amount := GLEntry.Amount;

          IF "VAT Base (ACY)" <> 0 THEN
            UseVendExchRate := TRUE
          ELSE
            UseVendExchRate := FALSE;
        END;
      GLCalcAddCurrency(GLEntry."Additional-Currency Amount",TRUE,UseVendExchRate);
    END;

    PROCEDURE PostVAT@34();
    VAR
      TaxDetail2@1008 : Record 322;
      VATAmount@1000 : Decimal;
      VATAmount2@1003 : Decimal;
      VATBase@1001 : Decimal;
      VATBase2@1004 : Decimal;
      SrcCurrVATAmount@1002 : Decimal;
      SrcCurrVATBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
      RemSrcCurrVATAmount@1007 : Decimal;
      TaxDetailFound@1006 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post VAT
        // VAT for VAT entry
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            BEGIN
              IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN
                "VAT Base Amount (LCY)" := GLEntry.Amount;
              IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN
                AddCurrGLEntryVATAmt := "Source Curr. VAT Amount";
              InsertVAT(
                GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                GLEntry."Additional-Currency Amount",AddCurrGLEntryVATAmt,"Source Curr. VAT Base Amount");
              NextConnectionNo := NextConnectionNo + 1;
            END;
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              CASE "VAT Posting" OF
                "VAT Posting"::"Automatic VAT Entry":
                  SalesTaxBaseAmount := GLEntry.Amount;
                "VAT Posting"::"Manual VAT Entry":
                  SalesTaxBaseAmount := "VAT Base Amount (LCY)";
              END;
              IF ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
                 ("Gen. Posting Type" = "Gen. Posting Type"::Settlement)
              THEN BEGIN
                TaxDetail."Tax Jurisdiction Code" := "Tax Area Code";
                "Tax Area Code" := '';
                InsertVAT(
                  GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                  "Source Curr. VAT Base Amount","Source Curr. VAT Amount","Source Curr. VAT Base Amount");
              END ELSE BEGIN
                CLEAR(SalesTaxCalculate);
                SalesTaxCalculate.InitSalesTaxLines(
                  "Tax Area Code","Tax Group Code","Tax Liable",
                  SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
                SrcCurrVATAmount := 0;
                SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
                RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
                TaxDetailFound := FALSE;
                WHILE SalesTaxCalculate.GetSalesTaxLine(TaxDetail2,VATAmount,VATBase) DO BEGIN
                  RemSrcCurrVATAmount := RemSrcCurrVATAmount - SrcCurrVATAmount;
                  IF TaxDetailFound THEN
                    InsertVAT(
                      SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                      SrcCurrSalesTaxBaseAmount,SrcCurrVATAmount,SrcCurrVATBase);
                  TaxDetailFound := TRUE;
                  TaxDetail := TaxDetail2;
                  VATAmount2 := VATAmount;
                  VATBase2 := VATBase;
                  SrcCurrVATAmount := CalcLCYToAddCurr(VATAmount);
                  SrcCurrVATBase := CalcLCYToAddCurr(VATBase);
                END;
                IF TaxDetailFound THEN
                  InsertVAT(
                    SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                    SrcCurrSalesTaxBaseAmount,RemSrcCurrVATAmount,SrcCurrVATBase);
                InsertSummarizedVAT;
              END;
            END;
        END;
      END;
    END;

    PROCEDURE InsertVAT@30(GLEntryAmount@1000 : Decimal;GLEntryVATAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryVATAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      VATAmount@1008 : Decimal;
      VATBase@1009 : Decimal;
      UnrealizedVAT@1010 : Boolean;
      SrcCurrVATAmount@1011 : Decimal;
      SrcCurrVATBase@1012 : Decimal;
      VATDifferenceLCY@1013 : Decimal;
      SrcCurrVATDifference@1014 : Decimal;
      VAT_Posting_SETUP@1000000000 : Record 325;
      CurrExchRate@1000000001 : Record 330;
      VAT_100_FLAG@1000000002 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN

      MasterSetUp.GET;
      //YIMMNBTR

       // Post VAT
        // VAT for VAT entry
      //YIMMNBTRST Bank - Tax Rate Calculations.

                    IF (SrcCurrCode<>'') THEN

                    BEGIN

                      IF (GLEntryVATAmount<>0) THEN
                           BEGIN
                                          VATExchRate.RESET;

                                          //IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Foreign_Bus_Posting_Group) THEN
                                          //VATExchRate.SETRANGE("Starting Date","Posting Date");//new added

                                          IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Domestic_Bus_Posting_Group) THEN
                                          VATExchRate.SETRANGE("Starting Date",GLEntry."Tax Invoice Date");//new added

                                          IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Foreign_Bus_Posting_Group)  THEN
                                          VATExchRate.SETRANGE("Starting Date",GLEntry."Document Date");//new added



                                          VATExchRate.SETRANGE(VATExchRate."Currency Code",SrcCurrCode);


                                          //MESSAGE('%1',GLEntryVATAmount);


                                         VAT_Posting_SETUP.RESET;
                                         IF VAT_Posting_SETUP.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                              IF (VAT_Posting_SETUP."VAT %"=100) THEN
                                                BEGIN
                                                VAT_100_FLAG:=TRUE;

                                                CurrExchRate.RESET;
                                                CurrExchRate.SETRANGE(CurrExchRate."Starting Date",GLEntry."Document Date");
                                                CurrExchRate.SETRANGE(CurrExchRate."Currency Code",SrcCurrCode);

                                                IF CurrExchRate.FINDFIRST THEN;

                                                END;

                                          IF  VATExchRate.FIND('-') THEN
                                            BEGIN
                                             IF VAT_100_FLAG THEN
                                                VATEntryAmount:=ROUND(GLEntryVATAmount/CurrExchRate."Relational Exch. Rate Amount")
                                                ELSE
                                              VATEntryAmount:=
                                                 ROUND(GLEntryVATAmount*(SrcCurrGLEntryBaseAmt/GLEntryBaseAmount));

                                              VATEntryAmount:=
                                                  ROUND(VATEntryAmount*(VATExchRate."Rel Tax Rate Amount"/VATExchRate."Tax Rate Amount"));

                                            END;
                           END;

                     //IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Foreign_Bus_Posting_Group) AND ((GLEntryVATAmount<>0)) THEN
                     //VATEntryAmount:=GLEntryVATAmount;
                     END
                     ELSE
                      VATEntryAmount:=GLEntryVATAmount;
      //YIMMNBTREN
        VATEntry.INIT;
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        VATEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        VATEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
        VATEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
        VATEntry."Tax Area Code" := "Tax Area Code";
        VATEntry."Tax Liable" := "Tax Liable";
        VATEntry."Tax Group Code" := "Tax Group Code";
        VATEntry."Use Tax" := "Use Tax";
        VATEntry."Posting Date" := "Posting Date";
        VATEntry."Document Date" := "Document Date";
        VATEntry."Document No." := "Document No.";
        VATEntry."External Document No." := "External Document No.";
        VATEntry."Document Type" := "Document Type";
        VATEntry.Type := "Gen. Posting Type";
        VATEntry."VAT Calculation Type" := "VAT Calculation Type";
        VATEntry."Source Code" := "Source Code";
        VATEntry."Reason Code" := "Reason Code";
        VATEntry."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
        VATEntry."Country/Region Code" := "Country/Region Code";
        VATEntry."VAT Registration No." := "VAT Registration No.";
        VATEntry."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
        VATEntry."EU 3-Party Trade" := "EU 3-Party Trade";
        VATEntry."Transaction No." := NextTransactionNo;
        VATEntry."Sales Tax Connection No." := NextConnectionNo;
        VATEntry."User ID" := USERID;
        VATEntry."No. Series" := "Posting No. Series";
        VATEntry."VAT Base Discount %" := "VAT Base Discount %";

        //YIMMNTTST
          VATEntry."Kwitansi No.":="Kwitansi No.";
          VATEntry."Commercial Invoice No.":="Commercial Invoice No.";
          VATEntry."Commercial Invoice Date":="Commercial Invoice Date";
          VATEntry."Tax Invoice No.":="Tax Invoice No.";
          VATEntry."Tax Invoice Date":="Tax Invoice Date";
          VATEntry.Narration:=Narration;
        //YIMMNTTEN

      //YIMM
          VATEntry."Original Tax Inv. No.":="Original Tax Inv. No.";




      //YIMMNNPWPST
          VATEntry."Order Address Code":="Ship-to Code";
      //YIMMNNPWPEN



        // VAT for VAT entry
        // VAT for G/L entry/entries
        CurrCode := "Source Currency Code"; //YIMMNBTR
      // VATEntry."Currency Code":= "Source Currency Code"; //YIMMNBTR
        VATEntry."Sett. Unrealised Amount (FCY)" := "Source Curr. VAT Amount";
        VATEntry."Sett. Unrealised Base (FCY)" := "Source Curr. VAT Base Amount";
        VATEntry.Adjustment := Adjustment;
        VATEntry."BAS Adjustment" := "BAS Adjustment";
        VATEntry."BAS Doc. No." := "BAS Doc. No.";
        VATEntry."BAS Version" := "BAS Version";
        CASE VATEntry.Type OF
          VATEntry.Type::Purchase:
            IF Vend.GET("Bill-to/Pay-to No.") THEN
              VATEntry."VAT Registration No." := Vend."VAT Registration No.";
          VATEntry.Type::Sale:
            IF Cust.GET("Bill-to/Pay-to No.") THEN
              VATEntry."VAT Registration No." := Cust."VAT Registration No.";
        END;

        IF "VAT Difference" = 0 THEN
          VATDifferenceLCY := 0
        ELSE
          IF "Currency Code" = '' THEN
            VATDifferenceLCY := "VAT Difference"
          ELSE
            VATDifferenceLCY :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date","Currency Code","VAT Difference",
                  CurrExchRate.ExchangeRate("Posting Date","Currency Code")));

        IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
          IF TaxJurisdiction.Code <> TaxDetail."Tax Jurisdiction Code" THEN
            TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
          IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
            VATEntry."Tax Group Used" := TaxDetail."Tax Group Code";
            VATEntry."Tax Type" := TaxDetail."Tax Type";
            VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
          END;
          VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";
        END;

        IF ("Vendor Exchange Rate (ACY)" <> 0) OR
           (("Vendor Exchange Rate (ACY)" = 1) AND
           ("Source Currency Code" <> GLSetup."Additional Reporting Currency"))
        THEN
          SrcCurrGLEntryBaseAmt := "VAT Base (ACY)";

        IF GLSetup."Additional Reporting Currency" <> '' THEN
          IF GLSetup."Additional Reporting Currency" <> SrcCurrCode THEN BEGIN
            IF ("VAT Base (ACY)" = 0) THEN BEGIN
              SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
              SrcCurrGLEntryVATAmt := ExchangeAmtLCYToFCY2(GLEntryVATAmount);
              SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
              SrcCurrVATDifference := ExchangeAmtLCYToFCY2(VATDifferenceLCY);
            END ELSE BEGIN
              SrcCurrGLEntryAmt := "VAT Base (ACY)";
              SrcCurrGLEntryVATAmt := "Amount Including VAT (ACY)"-"VAT Base (ACY)";
              SrcCurrGLEntryBaseAmt := "VAT Base (ACY)";
              SrcCurrVATDifference := "VAT Difference (ACY)";
            END;
          END ELSE
            SrcCurrVATDifference :="VAT Difference";

        UnrealizedVAT :=
          (((VATPostingSetup."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT"])) OR
           ((TaxJurisdiction."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Sales Tax"]))) AND
          ("Document Type" IN
           ["Document Type"::Invoice,
            "Document Type"::"Credit Memo",
            "Document Type"::"Finance Charge Memo",
            "Document Type"::Reminder]);

        IF GLSetup."Prepayment Unrealized VAT" AND NOT GLSetup."Unrealized VAT" AND
          (VATPostingSetup."Unrealized VAT Type" > 0)
        THEN
          UnrealizedVAT := GenJnlLine.Prepayment;

        // VAT for VAT entry
        IF "Gen. Posting Type" <> 0 THEN BEGIN
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                VATAmount := VATEntryAmount; //YIMMNBTR
      //        VATAmount := GLEntryVATAmount;  //YIMMNBTR
                VATBase := GLEntryBaseAmount;
                SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN BEGIN
                  VATAmount := GLEntryAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                  VATEntry.Closed := TRUE;
                END ELSE BEGIN
                  VATAmount := GLEntryVATAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                END;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
          END;

          IF UnrealizedVAT THEN BEGIN
            VATEntry.Amount := 0;
            VATEntry.Base := 0;
            VATEntry."Unrealized Amount" := VATAmount;
            VATEntry."Unrealized Base" := VATBase;
            VATEntry."Remaining Unrealized Amount" := VATEntry."Unrealized Amount";
            VATEntry."Remaining Unrealized Base" := VATEntry."Unrealized Base";
          END ELSE BEGIN
      //      VATEntry.Amount :=  VATEntryAmount; //YIMMNBTRRajes
             VATEntry.Amount := VATAmount;       //YIMMNBTR

            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
          END;

          IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
            VATEntry."Additional-Currency Base" := 0;
            VATEntry."Additional-Currency Amount" := 0;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
          END ELSE
            IF UnrealizedVAT THEN BEGIN
              VATEntry."Additional-Currency Base" := 0;
              VATEntry."Additional-Currency Amount" := 0;
              VATEntry."Add.-Currency Unrealized Base" := SrcCurrVATBase;
              VATEntry."Add.-Currency Unrealized Amt." := SrcCurrVATAmount;
            END ELSE BEGIN
              VATEntry."Additional-Currency Base" := SrcCurrVATBase;
              VATEntry."Additional-Currency Amount" := SrcCurrVATAmount;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
            END;
          VATEntry."Add.-Curr. Rem. Unreal. Amount" := VATEntry."Add.-Currency Unrealized Amt.";
          VATEntry."Add.-Curr. Rem. Unreal. Base" := VATEntry."Add.-Currency Unrealized Base";
          VATEntry."VAT Difference" := VATDifferenceLCY;
          VATEntry."Add.-Curr. VAT Difference" := SrcCurrVATDifference;

          VATEntry.INSERT;
          NextVATEntryNo := NextVATEntryNo + 1;
        END;

        // VAT for G/L entry/entries
        IF (GLEntryVATAmount <> 0) OR
           ((SrcCurrGLEntryVATAmt <> 0) AND (SrcCurrCode = GLSetup."Additional Reporting Currency"))
        THEN BEGIN
          CASE "Gen. Posting Type" OF
            "Gen. Posting Type"::Purchase:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  BEGIN
                    IF "VAT Base (ACY)" <> 0 THEN
                      UseVendExchRate := TRUE
                    ELSE
                      UseVendExchRate := FALSE;
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      InitGLEntry(
                        VATPostingSetup."Purch. VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END ELSE
                  BEGIN
             //         VATPostingSetup.TESTFIELD("Purchase VAT Account");
            //          InitGLEntry(
            //           VATPostingSetup."Purchase VAT Account",
            //            GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

      //YIMMNBTRST

                    IF (CurrCode<>'') THEN
                        BEGIN

                       VATExchRate.RESET;


                       IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Domestic_Bus_Posting_Group) THEN
                       VATExchRate.SETRANGE("Starting Date",GLEntry."Tax Invoice Date");

                       IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Foreign_Bus_Posting_Group) THEN
                       VATExchRate.SETRANGE("Starting Date",GLEntry."Document Date");

                       VATExchRate.SETRANGE(VATExchRate."Currency Code",SrcCurrCode);

                       IF VATExchRate.FIND('-') THEN
                       BEGIN
                         IF VAT_100_FLAG THEN
                          VATAmt:=ROUND(GLEntryVATAmount/CurrExchRate."Relational Exch. Rate Amount")
                         ELSE

                       VATAmt:=ROUND(VATAmount*(SrcCurrGLEntryBaseAmt/GLEntryBaseAmount));


                       VATAmt:=ROUND(VATAmt*(VATExchRate."Rel Tax Rate Amount"/VATExchRate."Tax Rate Amount"));
                       END;


                           VATPostingSetup.TESTFIELD("Purchase VAT Account");

                           InitGLEntry(
                            VATPostingSetup."Purchase VAT Account",
                            VATAmt,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                            InsertGLEntry(TRUE);

                           VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");

                           Currency.RESET;
                           IF Currency.GET(CurrCode) THEN;

                             IF ((GLEntryVATAmount-VATAmt) >= 0) THEN
                               BEGIN
                                 InitGLEntry(
                                 Currency."Unrealized Losses Acc.",
                                 ROUND((GLEntryVATAmount-VATAmt)),SrcCurrGLEntryVATAmt,TRUE,TRUE);
                                 InsertGLEntry(TRUE);
                               END
                             ELSE
                              BEGIN
                                 InitGLEntry(
                                 Currency."Unrealized Gains Acc.",
                                 ROUND((GLEntryVATAmount-VATAmt)),SrcCurrGLEntryVATAmt,TRUE,TRUE);
                                 InsertGLEntry(TRUE);
                              END;

                     END

                    ELSE BEGIN
                              VATPostingSetup.TESTFIELD("Purchase VAT Account");
                              InitGLEntry(
                              VATPostingSetup."Purchase VAT Account",
                              GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                              InsertGLEntry(TRUE);
                         END; // End of Curr Code if
      //YIMMNBTREN
           //           InsertGLEntry(TRUE);

                   END;
                  END;

                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      InitGLEntry(
                        VATPostingSetup."Purch. VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                      VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Unreal. Acc.");
                      InitGLEntry(
                        VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END ELSE BEGIN
                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                      InitGLEntry(
                        VATPostingSetup."Purchase VAT Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                      VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                      InitGLEntry(
                        VATPostingSetup."Reverse Chrg. VAT Acc.",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                  END;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  IF "Use Tax" THEN BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                      TaxJurisdiction.TESTFIELD("Unreal. Rev. Charge (Purch.)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Rev. Charge (Purch.)",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Tax Account (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                      TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Reverse Charge (Purchases)",
                        -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                      SummarizeVAT(
                        GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                    END;
                  END ELSE BEGIN
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                      InitGLEntry(
                        TaxJurisdiction."Tax Account (Purchases)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;
                    SummarizeVAT(
                      GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                  END;
              END;
            "Gen. Posting Type"::Sale:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  BEGIN
                    UseVendExchRate := FALSE;
                    IF UnrealizedVAT THEN BEGIN
                      VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                      InitGLEntry(
                        VATPostingSetup."Sales VAT Unreal. Account",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE
                 BEGIN
             //         VATPostingSetup.TESTFIELD("Sales VAT Account");
            //          InitGLEntry(
            //            VATPostingSetup."Sales VAT Account",
            //           GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);

      //YIMMNBTRST

                   IF (CurrCode<>'') THEN
                      BEGIN




                          VATExchRate.RESET;
                          IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Domestic_Bus_Posting_Group) THEN
                          VATExchRate.SETRANGE("Starting Date",GLEntry."Tax Invoice Date");

                          IF (GLEntry."Gen. Bus. Posting Group"=MasterSetUp.Foreign_Bus_Posting_Group) THEN
                          VATExchRate.SETRANGE("Starting Date",GLEntry."Document Date");

                          VATExchRate.SETRANGE(VATExchRate."Currency Code",SrcCurrCode);


                          IF VATExchRate.FIND('-') THEN

                          BEGIN
                            IF VAT_100_FLAG THEN
                              VATAmt:=ROUND(GLEntryVATAmount/CurrExchRate."Relational Exch. Rate Amount")
                               ELSE
                                  VATAmt:=ROUND(VATAmount*(SrcCurrGLEntryBaseAmt/GLEntryBaseAmount));

                          VATAmt:=ROUND(VATAmt*(VATExchRate."Rel Tax Rate Amount"/VATExchRate."Tax Rate Amount"));
                          END;

                          VATPostingSetup.TESTFIELD("Sales VAT Account");
                          InitGLEntry(
                           VATPostingSetup."Sales VAT Account",
                           VATAmt,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                          InsertGLEntry(TRUE);
                          VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                          Currency.RESET;

                          IF Currency.GET(CurrCode) THEN;
                             IF ((GLEntryVATAmount-VATAmt) >= 0) THEN
                               BEGIN
                                InitGLEntry(
                                 Currency."Unrealized Losses Acc.",
                                 ROUND((GLEntryVATAmount-VATAmt)),SrcCurrGLEntryVATAmt,TRUE,TRUE);
                                 InsertGLEntry(TRUE);
                               END
                             ELSE
                               BEGIN
                                InitGLEntry(
                                 Currency."Unrealized Gains Acc.",
                                 ROUND((GLEntryVATAmount-VATAmt)),SrcCurrGLEntryVATAmt,TRUE,TRUE);
                                 InsertGLEntry(TRUE);

                               END;


                     END

                   ELSE
                           BEGIN

                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                            InitGLEntry(
                             VATPostingSetup."Sales VAT Account",
                             GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                            InsertGLEntry(TRUE);

                           END;

      //YIMMNBTREN


                 END;
       //           InsertGLEntry(TRUE);  //YIMMNBTR
              END;

                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT": ;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    UseVendExchRate := FALSE;
                    IF UnrealizedVAT THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                      InitGLEntry(
                        TaxJurisdiction."Unreal. Tax Acc. (Sales)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                      InitGLEntry(
                        TaxJurisdiction."Tax Account (Sales)",
                        GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    END;
                    SummarizeVAT(
                      GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                  END;
              END;
          END;
        END;
      END;
    END;

    PROCEDURE SummarizeVAT@31(SummarizeGLEntries@1000 : Boolean;VAR GLEntry@1001 : Record 17;VAR TempGLEntryVAT@1002 : Record 17;VAR InsertedTempGLEntryVAT@1003 : Integer);
    VAR
      InsertedTempVAT@1004 : Boolean;
    BEGIN
      InsertedTempVAT := FALSE;
      IF SummarizeGLEntries THEN
        IF TempGLEntryVAT.FINDSET THEN
          REPEAT
            IF (TempGLEntryVAT."G/L Account No." = GLEntry."G/L Account No.") AND
               (TempGLEntryVAT."Bal. Account No." = GLEntry."Bal. Account No.")
            THEN BEGIN
              TempGLEntryVAT.Amount := TempGLEntryVAT.Amount + GLEntry.Amount;
              TempGLEntryVAT."Additional-Currency Amount" :=
                TempGLEntryVAT."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
              TempGLEntryVAT.MODIFY;
              InsertedTempVAT := TRUE;
            END;
          UNTIL (TempGLEntryVAT.NEXT = 0) OR InsertedTempVAT;
      IF NOT InsertedTempVAT OR NOT SummarizeGLEntries THEN BEGIN
        TempGLEntryVAT := GLEntry;
        TempGLEntryVAT."Entry No." :=
          TempGLEntryVAT."Entry No." + InsertedTempGLEntryVAT;
        TempGLEntryVAT.INSERT;
        InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
      END;
    END;

    PROCEDURE InsertSummarizedVAT@37();
    BEGIN
      IF TempGLEntryVAT.FINDSET THEN BEGIN
        REPEAT
          GLEntry := TempGLEntryVAT;
          InsertGLEntry(TRUE);
        UNTIL TempGLEntryVAT.NEXT = 0;
        TempGLEntryVAT.DELETEALL;
        InsertedTempGLEntryVAT := 0;
      END;
      NextConnectionNo := NextConnectionNo + 1;
    END;

    LOCAL PROCEDURE PostGLAcc@11();
    VAR
      TempGenJnlTemp@1500000 : Record 80;
    BEGIN
      WITH GenJnlLine DO BEGIN
        GLSetup.GET;
        WHTAmountLCY := 0;
        IF GLSetup."Enable WHT" THEN
          IF (NOT GenJnlLine."Skip WHT") THEN
            IF (GenJnlLine."Applies-to ID" = '') AND (GenJnlLine."Applies-to Doc. No." = '') THEN BEGIN
              IF ("Document Type" = "Document Type"::Payment) OR
                 ("Document Type" = "Document Type"::Refund)
              THEN
                IF WHTPostingSetup.GET(
                     GenJnlLine."WHT Business Posting Group",
                     GenJnlLine."WHT Product Posting Group")
                THEN BEGIN
                  IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
                    IF (("Account Type" = "Account Type"::Customer) OR
                        ("Bal. Account Type" = "Account Type"::Customer))
                    THEN BEGIN
                      IF GenJnlLine."WHT Absorb Base" <> 0 THEN
                        WHTAmountLCY :=
                          -ABS(ROUND(GenJnlLine."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100))
                      ELSE
                        WHTAmountLCY :=
                          -ABS(ROUND(GenJnlLine.Amount * WHTPostingSetup."WHT %" / 100));
                        IF ("Document Type" = "Document Type"::Refund) THEN
                          WHTAmountLCY := ABS(WHTAmountLCY);
                    END ELSE
                      IF ("Account Type" = "Bal. Account Type"::Vendor) OR
                         ("Bal. Account Type" = "Bal. Account Type"::Vendor)
                      THEN BEGIN
                        IF GenJnlLine."WHT Absorb Base" <> 0 THEN
                          WHTAmountLCY :=
                            ABS(ROUND(GenJnlLine."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100))
                        ELSE
                          WHTAmountLCY :=
                            ABS(ROUND(GenJnlLine.Amount * WHTPostingSetup."WHT %" / 100));

                          IF ("Document Type" = "Document Type"::Refund) THEN
                            WHTAmountLCY := -ABS(WHTAmountLCY);
                      END;
                  END;
                END;
            END ELSE BEGIN
              IF (GenJnlLine."Applies-to ID" <> '') OR (GenJnlLine."Applies-to Doc. No." <> '') THEN BEGIN
                GenJnlLine1.RESET;
                GenJnlLine1.COPY(GenJnlLine);
                IF ("Applies-to Doc. No."<>'') THEN
                  GenJnlLine1.SETRANGE("Applies-to Doc. No.","Applies-to Doc. No.")
                ELSE
                  GenJnlLine1.SETRANGE("Applies-to ID","Applies-to ID");

                GenJnlLine1.SETRANGE("Account Type","Account Type"::Vendor);
                IF ("Account Type" = "Account Type"::Vendor) OR
                   ("Bal. Account Type" = "Bal. Account Type"::Vendor) OR
                   (GenJnlLine1.FIND('-'))
                THEN BEGIN
                  CurrFactor :=
                    CurrExchRate.ExchangeRate(
                      //GenJnlLine."Document Date",GenJnlLine."Currency Code");//YIMMNBTR
                      GenJnlLine."Posting Date",GenJnlLine."Currency Code");//YIMMNBTR
                  IF (GenJnlLine1."Interest Amount" <> 0) THEN
                    GenJnlLine1.VALIDATE(Amount,GenJnlLine1.Amount - GenJnlLine1."Interest Amount");

                  IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) OR
                     (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund)
                  THEN BEGIN
                    IF WHTPostingSetup.GET(
                       GenJnlLine."WHT Business Posting Group",
                       GenJnlLine."WHT Product Posting Group")
                    THEN BEGIN
                      IF (WHTPostingSetup."Realized WHT Type" =
                          WHTPostingSetup."Realized WHT Type"::Earliest)
                      THEN BEGIN
                        IF GenJnlLine1.FIND('-') THEN
                          WHTManagement.CheckApplicationGenPurchWHT(GenJnlLine1);
                        WHTAmountLCY :=
                          CurrExchRate.ExchangeAmtFCYToLCY(
                            GenJnlLine."Posting Date" , //YIMMNBTR
                            //GenJnlLine."Document Date", //YIMMNBTR
                            GenJnlLine."Currency Code",
                            ABS(
                              WHTManagement.CalcVendExtraWHTForEarliest(GenJnlLine1)),CurrFactor);
                      END;

                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Payment)) AND
                         (NOT GLSetup."Manual Sales WHT Calc.")
                      THEN
                        WHTAmountLCY :=
                          CurrExchRate.ExchangeAmtFCYToLCY(
                            GenJnlLine."Posting Date" , //YIMMNBTR
                            //GenJnlLine."Document Date", //YIMMNBTR
                            GenJnlLine."Currency Code",
                            ABS(
                              WHTManagement.WHTAmountJournal(GenJnlLine1,TRUE)),CurrFactor);
                    END;
                  END;
                  IF ("Document Type" = "Document Type"::Refund) THEN
                    WHTAmountLCY := -ABS(WHTAmountLCY);
                END;

                IF (("Account Type"="Account Type"::Customer) OR
                   ("Bal. Account Type" = "Bal. Account Type"::Customer)) AND
                   (NOT GLSetup."Enable GST (Australia)")
                THEN BEGIN
                  CurrFactor :=
                    CurrExchRate.ExchangeRate(
                      GenJnlLine1."Document Date",GenJnlLine."Currency Code");
                  IF ("Bal. Account Type"="Bal. Account Type"::Customer) THEN
                    GenJnlLine1.VALIDATE(Amount,-GenJnlLine1.Amount);

                  IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) OR
                     (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund)
                  THEN BEGIN
                    IF WHTPostingSetup.GET(
                         GenJnlLine."WHT Business Posting Group",
                         GenJnlLine."WHT Product Posting Group")
                    THEN BEGIN
                      IF (WHTPostingSetup."Realized WHT Type" =
                          WHTPostingSetup."Realized WHT Type"::Earliest)
                      THEN BEGIN
                        IF GenJnlLine1.FIND('-') THEN
                          WHTManagement.CheckApplicationGenSalesWHT(GenJnlLine1);
                        WHTAmountLCY :=
                          -CurrExchRate.ExchangeAmtFCYToLCY(
                            GenJnlLine."Posting Date" , //NEW
                            //GenJnlLine."Document Date",
                            GenJnlLine."Currency Code",
                            ABS(
                              WHTManagement.CalcCustExtraWHTForEarliest(GenJnlLine)),CurrFactor);
                      END;

                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Payment)) AND
                         (NOT GLSetup."Manual Sales WHT Calc.")
                      THEN
                        WHTAmountLCY :=
                          -CurrExchRate.ExchangeAmtFCYToLCY(
                          GenJnlLine1."Document Date",
                          GenJnlLine1."Currency Code",
                          ABS(
                            WHTManagement.ApplyCustCalcWHT(GenJnlLine1)),CurrFactor);
                    END;
                  END;

                  IF ("Document Type" = "Document Type"::Refund) THEN
                    WHTAmountLCY := -ABS(WHTAmountLCY);
                END;
                WHTAmountLCY := ROUND(WHTAmountLCY);
                //IF (GLSetup."Round Amount for WHT Calc") THEN
                //  WHTAmountLCY := ROUND(WHTAmountLCY,1,'<');
              END;
            END;

        // Post G/L entry
        InitGLEntry(
          "Account No.","Amount (LCY)" + WHTAmountLCY,
          "Source Currency Amount" + WHTAmountLCY,TRUE,"System-Created Entry");

        IF NOT "System-Created Entry" THEN
          IF "Posting Date" = NORMALDATE("Posting Date") THEN
            GLAcc.TESTFIELD("Direct Posting",TRUE);
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        GLEntry."No. Series" := "Posting No. Series";
        IF "Additional-Currency Posting" =
           "Additional-Currency Posting"::"Additional-Currency Amount Only"
        THEN BEGIN
          GLEntry."Additional-Currency Amount" := Amount;
          GLEntry.Amount := 0;
        END;

        InitVat;
        InsertGLEntry(TRUE);
        //PostJob;
        //PostVAT;
        IF EntryType = GLEntry."Entry Type"::Definitive THEN BEGIN
        PostJob;
        PostVAT;
        END;

      IF ("Document Type" <> "Document Type"::Invoice) THEN
        IF (WHTAmountLCY <> 0) THEN BEGIN
          IF (("Account Type"="Account Type"::Vendor) OR
              ("Bal. Account Type"="Bal. Account Type"::Vendor))
          THEN
            IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
              InitGLEntry(
                WHTPostingSetup."Payable WHT Account Code",
                -WHTAmountLCY,
                -WHTAmountLCY,
                TRUE,
                TRUE);
              InsertGLEntry(TRUE);
             END;

          IF (("Account Type"="Account Type"::Customer) OR
              ("Bal. Account Type"="Bal. Account Type"::Customer))
          THEN
            IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
              InitGLEntry(
                WHTPostingSetup."Prepaid WHT Account Code",
                -WHTAmountLCY,
                -WHTAmountLCY,
                TRUE,
                TRUE);
              InsertGLEntry(TRUE);
             END;
        END;
      END;
    END;

    LOCAL PROCEDURE InitGLEntry@3(GLAccNo@1000 : Code[20];Amount@1001 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1003 : Boolean;SystemCreatedEntry@1004 : Boolean);
    VAR
      TableID@1005 : ARRAY [10] OF Integer;
      AccNo@1006 : ARRAY [10] OF Code[20];
    BEGIN
      IF GLAccNo <> '' THEN BEGIN
        GLAcc.GET(GLAccNo);
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
        IF (NOT
            ((GLAccNo = GenJnlLine."Account No.") AND
             (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account")) OR
            ((GLAccNo = GenJnlLine."Bal. Account No.") AND
             (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account"))) AND
           NOT FADimAlreadyChecked
        THEN BEGIN
          TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
          AccNo[1] := GLAccNo;
          IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
            IF GenJnlLine."Line No." <> 0 THEN
              ERROR(
                Text013,
                GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
                GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
                DimMgt.GetDimValuePostingErr)
            ELSE
              ERROR(DimMgt.GetDimValuePostingErr);
        END;
      END;

      GLEntry.INIT;
      GLEntry."Entry Type" := EntryType;
      GLEntry."Posting Date" := GenJnlLine."Posting Date";
      GLEntry."Document Date" := GenJnlLine."Document Date";
      GLEntry."B/L  Date" := GenJnlLine."B/L Date";   //YIMMNBTR
      GLEntry."Document Type" := GenJnlLine."Document Type";
      GLEntry."Document No." := GenJnlLine."Document No.";
      GLEntry."Ref No." := GenJnlLine."Ref No.";//YIMMAREF
      GLEntry."External Document No." := GenJnlLine."External Document No.";
      GLEntry.Description := GenJnlLine.Description;
      GLEntry."Business Unit Code" := GenJnlLine."Business Unit Code";
      GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      GLEntry."Source Code" := GenJnlLine."Source Code";
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" THEN BEGIN
        GLEntry."Source Type" := GenJnlLine."Source Type";
        GLEntry."Source No." := GenJnlLine."Source No.";
      END ELSE BEGIN
        GLEntry."Source Type" := GenJnlLine."Account Type";
        GLEntry."Source No." := GenJnlLine."Account No.";
      END;
      GLEntry."Job No." := GenJnlLine."Job No.";
      GLEntry.Quantity := GenJnlLine.Quantity;
      GLEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
      GLEntry."Reason Code" := GenJnlLine."Reason Code";
      GLEntry."Entry No." := NextEntryNo;
      GenJnlLine."Entry No." := NextEntryNo;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry."G/L Account No." := GLAccNo;
      GLEntry.Amount := Amount;

      //YIMMNTTST
      GLEntry."Kwitansi No." :=GenJnlLine."Kwitansi No.";
      GLEntry."Commercial Invoice No." := GenJnlLine."Commercial Invoice No.";
      GLEntry."Commercial Invoice Date" := GenJnlLine."Commercial Invoice Date";
      GLEntry."Tax Invoice No." := GenJnlLine."Tax Invoice No.";
      GLEntry."Tax Invoice Date" := GenJnlLine."Tax Invoice Date";
      GLEntry.Narration := GenJnlLine.Narration;
      GLEntry."Bank Name Cust/Vend" := GenJnlLine."Bank Name Cust/Vend";//YIMMCOLL
      GLEntry."Bank Branch No." :=  GenJnlLine."Bank Branch No."; //YIMMCOLL
      GLEntry."Bank Account No." := GenJnlLine."Bank Account No.";//YIMMCOLL
      GLEntry."Type Of Transaction":=GenJnlLine."Type Of Transaction";
      //YIMM

      GLEntry."Original Tax Inv. No.":= GenJnlLine."Original Tax Inv. No.";


      //YIMMNTTEN

      //YIMMASLST
      GLEntry."Slip No." := GenJnlLine."Slip No.";
      GLEntry."Ref. Template" := GenJnlLine."Ref. Template";
      GLEntry."Ref. Batch" := GenJnlLine."Ref. Batch";
      //YIMMASLEN
      //YIMMNNPWPST
      GLEntry."Ship-to Code":=GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN

      GLEntry."Ship-to Address":=GenJnlLine."Ship-to Address";
      GLEntry."Ship-to Address 2":=GenJnlLine."Ship-to Address 2";
      //YIMM

      GLEntry."User ID" := USERID;
      GLEntry."No. Series" := GenJnlLine."Posting No. Series";
      GLEntry."System-Created Entry" := SystemCreatedEntry;
      GLEntry."Prior-Year Entry" := GLEntry."Posting Date" < FiscalYearStartDate;
      GLEntry."IC Partner Code" := GenJnlLine."IC Partner Code";
      GLEntry.Adjustment := GenJnlLine.Adjustment;
      GLEntry."BAS Adjustment" := GenJnlLine."BAS Adjustment";
      GLEntry."BAS Doc. No." := GenJnlLine."BAS Doc. No.";
      GLEntry."BAS Version" := GenJnlLine."BAS Version";

      //YIMMNBTRST

      GLEnt_Des.RESET;

      IF GLEnt_Des.GET(GLAccNo) THEN
      GLEntry.Description :=GLEnt_Des.Name ;


         IF (GenJnlLine."Currency Code"<>'') THEN
           BEGIN
              GLEntry.DebitOri:= GenJnlLine."Debit Amount";
              GLEntry.CreditOri:= GenJnlLine."Credit Amount";
              GLEntry.CurrCode:=GenJnlLine."Currency Code";
           END;

          GLEntry."Office Eq. Type":=GenJnlLine."Office Eq. Type";
          GLEntry."Identity No." :=GenJnlLine."Identity No.";
          GLEntry."Assigned USER":= GenJnlLine."Assigned USER";




      //YIMMNBTREN

      IF GLEntry."G/L Account No." IN
           [VATPostingSetup."Sales VAT Account",VATPostingSetup."Purchase VAT Account"]
      THEN
        GLEntry."BAS Adjustment" := FALSE;
      GLCalcAddCurrency(AmountAddCurr,UseAmountAddCurr,UseVendExchRate);
    END;

    LOCAL PROCEDURE InsertGLEntry@2(CalcAddCurrResiduals@1000 : Boolean);
    BEGIN
      IF GLEntry.Amount <> ROUND(GLEntry.Amount) THEN
        GLEntry.FIELDERROR(
          Amount,
          STRSUBSTNO(Text000,GLEntry.Amount));

      IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + GLEntry.Amount * ((GLEntry."Posting Date" - 01010000D) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + GLEntry.Amount * ((GLEntry."Posting Date" - 01010000D) MOD 98 + 1);
      END ELSE BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + GLEntry.Amount * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + GLEntry.Amount * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 98 + 1);
      END;

      GLEntry."Entry Type" := EntryType;
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount" * ((GLEntry."Posting Date" - 01010000D) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 + GLEntry."Additional-Currency Amount" * ((GLEntry."Posting Date" - 01010000D) MOD 98 + 1);
        END ELSE BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount +
            GLEntry."Additional-Currency Amount" * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 +
            GLEntry."Additional-Currency Amount" * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 98 + 1);
        END;
      END ELSE BEGIN
        BalanceCheckAddCurrAmount := 0;
        BalanceCheckAddCurrAmount2 := 0;
      END;

      IF ((GLEntry.Amount > 0) AND (NOT GenJnlLine.Correction)) OR
         ((GLEntry.Amount < 0) AND GenJnlLine.Correction)
      THEN BEGIN
        GLEntry."Debit Amount" := GLEntry.Amount;
        GLEntry."Credit Amount" := 0
      END ELSE BEGIN
        GLEntry."Debit Amount" := 0;
        GLEntry."Credit Amount" := -GLEntry.Amount;
      END;

      IF ((GLEntry."Additional-Currency Amount" > 0) AND (NOT GenJnlLine.Correction)) OR
         ((GLEntry."Additional-Currency Amount" < 0) AND GenJnlLine.Correction)
      THEN BEGIN
        GLEntry."Add.-Currency Debit Amount" := GLEntry."Additional-Currency Amount";
        GLEntry."Add.-Currency Credit Amount" := 0
      END ELSE BEGIN
        GLEntry."Add.-Currency Debit Amount" := 0;
        GLEntry."Add.-Currency Credit Amount" := -GLEntry."Additional-Currency Amount";
      END;

      GLEntryTmp := GLEntry;
      GLEntryTmp.INSERT;

      //NextEntryNo := NextEntryNo + 1;
      IF EntryType = GLEntry."Entry Type"::Definitive THEN
        NextEntryNo := NextEntryNo + 1
      ELSE
        NextEntryNo := NextEntryNo - 1;

      IF CalcAddCurrResiduals THEN
        HandleAddCurrResidualGLEntry;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntry@1(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;ApplnRoundingPrecision@1004 : Decimal);
    VAR
      OldCustLedgEntry@1005 : Record 21;
      OldCVLedgEntryBuf@1006 : Record 382;
      OldCVLedgEntryBuf2@1007 : Record 382;
      NewCustLedgEntry@1008 : Record 21;
      NewCVLedgEntryBuf2@1019 : Record 382;
      OldCVLedgEntryBuf3@1018 : Record 382;
      TempOldCustLedgEntry@1021 : TEMPORARY Record 21;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      AppliedAmountLCY@1011 : Decimal;
      OldAppliedAmount@1012 : Decimal;
      TempAmount@1013 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      OldRemainingAmtBeforeAppln@1016 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      SourceCodeSetup@1500000 : Record 242;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
           ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
            GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN BEGIN
        // Management of application of already posted entries
        IF NewCVLedgEntryBuf."Currency Code" <> ApplnCurrency.Code THEN
          ApplnCurrency.GET(NewCVLedgEntryBuf."Currency Code");
        ApplnRoundingPrecision := ApplnCurrency."Appln. Rounding Precision";
      END ELSE
          ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      // Find the entry to be applied to
      IF GenJnlLine."Adjustment Applies-to" <> '' THEN BEGIN
        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
        IF GenJnlLine."Applies-to Doc. Type" <> GenJnlLine."Applies-to Doc. Type"::" " THEN
          OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Adjustment Applies-to");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
      END;
      IF OldCustLedgEntry.FIND('-') THEN;
      // Find the first old entry (Invoice) which the new entry (Payment) should apply to
      ApplyingDate := GenJnlLine."Posting Date";

      IF (GenJnlLine."Adjustment Applies-to" <> '') AND (GenJnlLine."Bal. Account No."='') THEN BEGIN
        // Management of posting in multiple currencies
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
        IF GenJnlLine."Applies-to Doc. Type" <> GenJnlLine."Applies-to Doc. Type"::" " THEN
          OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Adjustment Applies-to");
        OldCustLedgEntry.FIND('-');
      END;

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE(Open,TRUE);

        OldCustLedgEntry.FINDFIRST;
        OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldCustLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",
          OldCustLedgEntry."Currency Code",
          GenJnlLine."Account Type"::Customer,
          TRUE);
        TempOldCustLedgEntry := OldCustLedgEntry;
        TempOldCustLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldCustLedgEntry.SETRANGE(Open,TRUE);
        OldCustLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT(Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") THEN
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        // Check Cust Ledger Entry and add to Temp.
        IF SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None THEN
          OldCustLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldCustLedgEntry.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF GenJnlApply.CheckAgainstApplnCurrency(
                NewCVLedgEntryBuf."Currency Code",
                OldCustLedgEntry."Currency Code",
                GenJnlLine."Account Type"::Customer,
                FALSE)
              THEN BEGIN
                IF (OldCustLedgEntry."Posting Date" > ApplyingDate) AND (OldCustLedgEntry."Applies-to ID" <> '') THEN
                  ApplyingDate := OldCustLedgEntry."Posting Date";
                TempOldCustLedgEntry := OldCustLedgEntry;
                TempOldCustLedgEntry.INSERT;
              END;
            UNTIL OldCustLedgEntry.NEXT=0;

        TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldCustLedgEntry.FIND('-') THEN BEGIN

          TempAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldCustLedgEntry.SETRANGE(Positive);
          TempOldCustLedgEntry.FIND('-');
          REPEAT
            TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
            IF NewCVLedgEntryBuf."Currency Code" <> TempOldCustLedgEntry."Currency Code" THEN BEGIN
              TempOldCustLedgEntry."Remaining Amount" :=

                ExchAmount(
                  TempOldCustLedgEntry."Remaining Amount",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldCustLedgEntry."Remaining Pmt. Disc. Possible",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Accepted Payment Tolerance" :=
                ExchAmount(
                  TempOldCustLedgEntry."Accepted Payment Tolerance",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Amount to Apply" :=
                ExchAmount(
                  TempOldCustLedgEntry."Amount to Apply",TempOldCustLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

            END;
            IF CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE)
            THEN
              TempOldCustLedgEntry."Remaining Amount" :=
                TempOldCustLedgEntry."Remaining Amount" - TempOldCustLedgEntry."Remaining Pmt. Disc. Possible";

            TempAmount := TempAmount + TempOldCustLedgEntry."Remaining Amount";

          UNTIL TempOldCustLedgEntry.NEXT = 0;

          TempOldCustLedgEntry.SETRANGE(Positive,TempAmount < 0);
        END ELSE
          TempOldCustLedgEntry.SETRANGE(Positive);

        IF NOT TempOldCustLedgEntry.FIND('-') THEN
          EXIT;
      END;

      GenJnlLine."Posting Date" := ApplyingDate;

      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        TempOldCustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TempOldCustLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        TransferCustLedgEntry(OldCVLedgEntryBuf,TempOldCustLedgEntry,TRUE);

        OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
        OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

        // Management of posting in multiple currencies
        OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
        OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);

        IF NewCVLedgEntryBuf."Currency Code" <> OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
          OldCVLedgEntryBuf2."Remaining Amount" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Amount",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Accepted Payment Tolerance" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Accepted Payment Tolerance",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Amount to Apply" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Amount to Apply",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
        END;

        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,NextTransactionNo,FirstNewVATEntryNo);

        CalcCurrencyApplnRounding(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
          GenJnlLine,ApplnRoundingPrecision);

        FindAmtForAppln(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
          AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

        CalcCurrencyUnrealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

        CalcCurrencyRealizedGainLoss(
          NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

        CalcCurrencyRealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

        CalcApplication(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
          GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
          NewCVLedgEntryBuf2,OldCVLedgEntryBuf3);

        CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2);

        CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

        IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
          UpdateCalcInterest(OldCVLedgEntryBuf);
          UpdateCalcInterest2(OldCVLedgEntryBuf,NewCVLedgEntryBuf);
        END;

        IF (GLSetup."Enable WHT") AND (NOT GLSetup."Enable GST (Australia)") AND
           (GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Refund]) THEN
          IF (GenJnlLine."Applies-to Doc. No."='') AND (GenJnlLine."Applies-to ID"='') THEN BEGIN
            GenJnlLine1.RESET;
            GenJnlLine1.COPY(GenJnlLine);
            GenJnlLine1.VALIDATE(Amount,AppliedAmount);
            GenJnlLine1."Posting Date":=0D;
            GenJnlLine1."Applies-to Doc. Type":=OldCustLedgEntry."Document Type";
            GenJnlLine1."Applies-to Doc. No.":=OldCustLedgEntry."Document No.";
            NextWHTEntryNo := WHTManagement.ProcessPayment(
                                GenJnlLine1,NextTransactionNo,
                                OldCustLedgEntry."Entry No.",1,TRUE);
          END;
        IF GLSetup."Enable Tax Invoices" THEN
          IF GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Refund] THEN
            IF (GenJnlLine."Applies-to Doc. No."='') AND (GenJnlLine."Applies-to ID"='') THEN BEGIN
              GenJnlLine1.RESET;
              GenJnlLine1.COPY(GenJnlLine);
              GenJnlLine1."Posting Date":=0D;
              GenJnlLine1.VALIDATE(Amount,AppliedAmount);
              GenJnlLine1."Applies-to Doc. Type":=OldCustLedgEntry."Document Type";
              GenJnlLine1."Applies-to Doc. No.":=OldCustLedgEntry."Document No.";
              IF OldCustLedgEntry."Document Type"=OldCustLedgEntry."Document Type"::"Credit Memo" THEN
                TaxManagement.TaxInvoiceSalesCrMemo(GenJnlLine1,FALSE,TRUE)
              ELSE
                TaxManagement.TaxInvoiceSales(GenJnlLine1,TaxInv,TRUE);
            END;
        TaxInv:=TRUE;
        RemAmt:=OldCustLedgEntry."Amount to Apply";
        RemAmtWht:=OldCustLedgEntry."Remaining Amount";

        TransferCustLedgEntry(OldCVLedgEntryBuf,TempOldCustLedgEntry,FALSE);
        OldCustLedgEntry := TempOldCustLedgEntry;
        OldCustLedgEntry."Rem. Amt for WHT" := RemAmt;
        OldCustLedgEntry."Rem. Amt" := RemAmtWht;
        // OldCustLedgEntry."Applies-to ID" := '';
        OldCustLedgEntry."Amount to Apply" := 0;
        OldCustLedgEntry.MODIFY;

        GenJnlLine1.RESET;
        GLSetup.GET;
        IF (GLSetup."Enable WHT") AND (NOT GLSetup."Enable GST (Australia)") THEN
          SourceCodeSetup.GET;
        IF GenJnlLine."Source Code"=SourceCodeSetup."Sales Entry Application" THEN
          IF (GenJnlLine."Applies-to Doc. No."<>'') OR (GenJnlLine."Applies-to ID"<>'') THEN BEGIN
            GenJnlLine1.COPY(GenJnlLine);
            GenJnlLine1.VALIDATE(Amount,AppliedAmount);
            GenJnlLine1."WHT Entry No.":=NextEntryNo;
            IF (NOT GenJnlLine."Skip WHT") THEN BEGIN
              KeepWHTEntryNo := NextWHTEntryNo;
              CASE GenJnlLine1."Document Type" OF
              GenJnlLine1."Document Type"::Payment:
                BEGIN
                  NextNo := WHTManagement.ApplyCustInvoiceWHTPosted(CustLedgEntry,GenJnlLine1,NextTransactionNo,0);
                  IF NextWHTEntryNo <> -1 THEN
                    HadWHTEntryNo := TRUE
                  ELSE
                    NextWHTEntryNo := KeepWHTEntryNo;
                END;
              END;
              WHTEntry.SETRANGE("Original Document No.",GenJnlLine."Document No.");
              IF WHTEntry.FIND('-') THEN
                WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                IF (WHTPostingSetup."Realized WHT Type" =
                    WHTPostingSetup."Realized WHT Type"::Payment)
                THEN BEGIN
                  REPEAT
                    GenJnlLine1.COPY(GenJnlLine);
                    GenJnlLine1.Amount := WHTEntry.Amount;
                    GenJnlLine1."Amount (LCY)" := WHTEntry."Amount (LCY)";
                    InsertWHTPostingBufferPosted(WHTEntry,GenJnlLine1,TRUE,0);
                  UNTIL WHTEntry.NEXT = 0;
                  NextWHTEntryNo := WHTEntry."Entry No." + 1;
                END;
            END;
          END;

        IF GLSetup."Unrealized VAT" OR
          (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
        THEN
          IF (TempOldCustLedgEntry."Document Type" IN
               [TempOldCustLedgEntry."Document Type"::Invoice,
                TempOldCustLedgEntry."Document Type"::"Credit Memo",
                TempOldCustLedgEntry."Document Type"::"Finance Charge Memo",
                TempOldCustLedgEntry."Document Type"::Reminder])
          THEN BEGIN
            IF TempOldCustLedgEntry."Currency Code" <> NewCVLedgEntryBuf."Currency Code" THEN BEGIN
              TempOldCustLedgEntry."Remaining Amount" :=
                ExchAmount(
                  TempOldCustLedgEntry."Remaining Amount",NewCVLedgEntryBuf."Currency Code",
                  TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldCustLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldCustLedgEntry."Remaining Pmt. Disc. Possible",NewCVLedgEntryBuf."Currency Code",
                  TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              OldCVLedgEntryBuf."Accepted Payment Tolerance" :=
                ExchAmount(
                  OldCVLedgEntryBuf."Accepted Payment Tolerance",NewCVLedgEntryBuf."Currency Code",
                  OldCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            END;
            IF NOT GenJnlLine."WHT Payment" THEN
              CustUnrealizedVAT(
                TempOldCustLedgEntry,
                ExchAmount(
                  AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                  TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"))
            ELSE
              IF (GLSetup."Manual Sales WHT Calc.") AND
                 (GenJnlLine."Document Type"=GenJnlLine."Document Type"::Refund) AND
                 (GenJnlLine."WHT Payment")
              THEN
                CustUnrealizedVAT(
                  TempOldCustLedgEntry,
                  ExchAmount(
                    AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                    TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          END;

        TempOldCustLedgEntry.DELETE;

          // Find the next old entry for application of the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldCustLedgEntry.GETFILTER(TempOldCustLedgEntry.Positive) <> '' THEN BEGIN
            IF TempOldCustLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldCustLedgEntry.SETRANGE(Positive);
              TempOldCustLedgEntry.FIND('-');
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldCustLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          END ELSE BEGIN
            IF NewCVLedgEntryBuf.Open THEN BEGIN
              Completed := TempOldCustLedgEntry.NEXT = 0
            END ELSE
              Completed := TRUE;
          END;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Cust. Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)", Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF NOT NewCVLedgEntryBuf.Open THEN
        UpdateCalcInterest(NewCVLedgEntryBuf);

      IF GLSetup."Unrealized VAT" OR
        (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF (NewCVLedgEntryBuf."Document Type" IN
             [NewCVLedgEntryBuf."Document Type"::Invoice,
              NewCVLedgEntryBuf."Document Type"::"Credit Memo",
              NewCVLedgEntryBuf."Document Type"::"Finance Charge Memo",
              NewCVLedgEntryBuf."Document Type"::Reminder]) AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          TransferCustLedgEntry(NewCVLedgEntryBuf,NewCustLedgEntry,FALSE);
          CheckUnrealizedCust := TRUE;
          UnrealizedCustLedgEntry := NewCustLedgEntry;
          UnrealizedRemainingAmountCust := NewCustLedgEntry."Remaining Amount" - NewRemainingAmtBeforeAppln;
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerance@61(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;GLSetup@1003 : Record 98;VAR PmtTolAmtToBeApplied@1012 : Decimal;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtTol@1011 : Decimal;
      PmtTolLCY@1010 : Decimal;
      PmtTolAddCurr@1009 : Decimal;
    BEGIN
      IF Cust."Block Payment Tolerance" OR Vend."Block Payment Tolerance" THEN
        EXIT;

      IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" <> 0 THEN BEGIN
        PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
        PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
        PmtTolLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
            NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
        OldCVLedgEntryBuf."Pmt. Tolerance (LCY)" := -PmtTolLCY;

        IF NewCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency" THEN
          PmtTolAddCurr := PmtTol
        ELSE
          PmtTolAddCurr := CalcLCYToAddCurr(PmtTolLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtTolLCY <> 0) THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,
            DtldCVLedgEntryBuf,GenJnlLine,GLSetup,PmtTolLCY,PmtTolAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,3);

        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance";
        DtldCVLedgEntryBuf.Amount := PmtTol;
        DtldCVLedgEntryBuf."Amount (LCY)" := PmtTolLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := PmtTolAddCurr;
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcPmtDisc@50(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine@1004 : Record 81;GLSetup@1005 : Record 98;PmtTolAmtToBeApplied@1012 : Decimal;ApplnRoundingPrecision@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer);
    VAR
      PmtDisc@1009 : Decimal;
      PmtDiscLCY@1010 : Decimal;
      PmtDiscAddCurr@1011 : Decimal;
    BEGIN
      IF (CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND
        ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
        ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))) OR
        (CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
        (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
        ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
        ((ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >=
        ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))))
      THEN BEGIN
        PmtDisc := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
            NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;

        IF (NewCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency") AND
           (GLSetup."Additional Reporting Currency" <> '') THEN
          PmtDiscAddCurr := PmtDisc
        ELSE
          PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
           (PmtDiscLCY <> 0)
        THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,
            DtldCVLedgEntryBuf,GenJnlLine,GLSetup,PmtDiscLCY,PmtDiscAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,1);

        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Discount";
        DtldCVLedgEntryBuf.Amount := PmtDisc;
        DtldCVLedgEntryBuf."Amount (LCY)" := PmtDiscLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := PmtDiscAddCurr;
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscIfAdjVAT@49(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;GLSetup@1004 : Record 98;VAR PmtDiscLCY2@1005 : Decimal;VAR PmtDiscAddCurr2@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;EntryType@1009 : Integer);
    VAR
      VATEntry@1010 : Record 254;
      VATEntry2@1011 : Record 254;
      VATPostingSetup@1012 : Record 325;
      TaxJurisdiction@1013 : Record 320;
      DtldCVLedgEntryBuf2@1015 : Record 383;
      OriginalAmountAddCurr@1016 : Decimal;
      PmtDiscRounding@1017 : Decimal;
      PmtDiscRoundingAddCurr@1018 : Decimal;
      PmtDiscFactorLCY@1019 : Decimal;
      PmtDiscFactorAddCurr@1020 : Decimal;
      VATBase@1021 : Decimal;
      VATBaseAddCurr@1022 : Decimal;
      VATAmount@1023 : Decimal;
      VATAmountAddCurr@1024 : Decimal;
      TotalVATAmount@1025 : Decimal;
      LastConnectionNo@1026 : Integer;
    BEGIN
      IF OldCVLedgEntryBuf."Original Amt. (LCY)" <> 0 THEN BEGIN
        IF (GLSetup."Additional Reporting Currency" = '') OR
           (GLSetup."Additional Reporting Currency" = OldCVLedgEntryBuf."Currency Code")
        THEN
          OriginalAmountAddCurr := OldCVLedgEntryBuf.Amount
        ELSE
          OriginalAmountAddCurr := CalcLCYToAddCurr(OldCVLedgEntryBuf."Original Amt. (LCY)");
        PmtDiscRounding := PmtDiscLCY2;
        PmtDiscRoundingAddCurr := PmtDiscAddCurr2;
        PmtDiscFactorLCY := PmtDiscLCY2 / OldCVLedgEntryBuf."Original Amt. (LCY)";
        IF OriginalAmountAddCurr <> 0 THEN
          PmtDiscFactorAddCurr := PmtDiscAddCurr2 / OriginalAmountAddCurr
        ELSE
          PmtDiscFactorAddCurr := 0;
        VATEntry2.RESET;
        VATEntry2.SETCURRENTKEY("Transaction No.");
        VATEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
        IF OldCVLedgEntryBuf."Transaction No." = NextTransactionNo THEN
          VATEntry2.SETRANGE("Entry No.",0,FirstNewVATEntryNo - 1);
        IF VATEntry2.FINDSET THEN BEGIN
          TotalVATAmount := 0;
          LastConnectionNo := 0;
          REPEAT
            VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
            IF VATEntry2."VAT Calculation Type" =
               VATEntry2."VAT Calculation Type"::"Sales Tax"
            THEN BEGIN
              TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
              VATPostingSetup."Adjust for Payment Discount" :=
                TaxJurisdiction."Adjust for Payment Discount";
            END;
            IF VATPostingSetup."Adjust for Payment Discount" THEN BEGIN
              IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
                IF LastConnectionNo <> 0 THEN BEGIN
                  DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
                  DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
                  InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

                  InsertSummarizedVAT;
                END;

                CASE VATEntry2."VAT Calculation Type" OF
                  VATEntry2."VAT Calculation Type"::"Normal VAT",
                  VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
                  VATEntry2."VAT Calculation Type"::"Full VAT":
                    BEGIN
                      VATBase :=
                        VATEntry2.Base + VATEntry2."Unrealized Base";
                      VATBaseAddCurr :=
                        VATEntry2."Additional-Currency Base" +
                        VATEntry2."Add.-Currency Unrealized Base";
                    END;
                  VATEntry2."VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      VATEntry.RESET;
                      VATEntry.SETCURRENTKEY(VATEntry."Transaction No.");
                      VATEntry.SETRANGE("Transaction No.",VATEntry2."Transaction No.");
                      VATEntry.SETRANGE("Sales Tax Connection No.",VATEntry2."Sales Tax Connection No.");
                      VATEntry := VATEntry2;
                      REPEAT
                        IF VATEntry.Base < 0 THEN
                          VATEntry.SETFILTER(Base,'>%1',VATEntry.Base)
                        ELSE
                          VATEntry.SETFILTER(Base,'<%1',VATEntry.Base);
                      UNTIL NOT VATEntry.FINDLAST;
                      VATEntry.RESET;
                      VATBase :=
                        VATEntry.Base + VATEntry."Unrealized Base";
                      VATBaseAddCurr :=
                        VATEntry."Additional-Currency Base" +
                        VATEntry."Add.-Currency Unrealized Base";
                    END;
                END;

                PmtDiscRounding := PmtDiscRounding + VATBase * PmtDiscFactorLCY;
                VATBase := ROUND(PmtDiscRounding - PmtDiscLCY2);
                PmtDiscLCY2 := PmtDiscLCY2 + VATBase;

                PmtDiscRoundingAddCurr := PmtDiscRoundingAddCurr + VATBaseAddCurr * PmtDiscFactorAddCurr;
                VATBaseAddCurr :=
                  ROUND(PmtDiscRoundingAddCurr - PmtDiscAddCurr2,AddCurrency."Amount Rounding Precision");
                PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATBaseAddCurr;

                DtldCVLedgEntryBuf2.INIT;
                DtldCVLedgEntryBuf2."Posting Date" := GenJnlLine."Posting Date";
                DtldCVLedgEntryBuf2."Document Date" := GenJnlLine."Document Date";
                DtldCVLedgEntryBuf2."Document Type" := GenJnlLine."Document Type";
                DtldCVLedgEntryBuf2."Document No." := GenJnlLine."Document No.";
                DtldCVLedgEntryBuf2.Amount := 0;
                DtldCVLedgEntryBuf2."Amount (LCY)" := -VATBase;
                CASE EntryType OF
                  1:
                    BEGIN
                      DtldCVLedgEntryBuf2."Entry Type" :=
                        DtldCVLedgEntryBuf2."Entry Type"::"Payment Discount (VAT Excl.)";
                      InitOldCVLedgEntry(DtldCVLedgEntryBuf2,NewCVLedgEntryBuf);
                    END;
                  2:
                    BEGIN
                      DtldCVLedgEntryBuf2."Entry Type" :=
                        DtldCVLedgEntryBuf2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)";
                      InitOldCVLedgEntry(DtldCVLedgEntryBuf2,NewCVLedgEntryBuf);

                    END;
                  3:
                    BEGIN
                      DtldCVLedgEntryBuf2."Entry Type" :=
                        DtldCVLedgEntryBuf2."Entry Type"::"Payment Tolerance (VAT Excl.)";
                      InitOldCVLedgEntry(DtldCVLedgEntryBuf2,NewCVLedgEntryBuf);

                    END;
                END;
                // The total payment discount in currency is posted on the entry made in
                // the function CalcPmtDisc.
                DtldCVLedgEntryBuf2."User ID" := USERID;
                DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
                DtldCVLedgEntryBuf2."Gen. Posting Type" := VATEntry2.Type;
                DtldCVLedgEntryBuf2."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
                DtldCVLedgEntryBuf2."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
                DtldCVLedgEntryBuf2."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
                DtldCVLedgEntryBuf2."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
                DtldCVLedgEntryBuf2."Tax Area Code" := VATEntry2."Tax Area Code";
                DtldCVLedgEntryBuf2."Tax Liable" := VATEntry2."Tax Liable";
                DtldCVLedgEntryBuf2."Tax Group Code" := VATEntry2."Tax Group Code";
                DtldCVLedgEntryBuf2."Use Tax" := VATEntry2."Use Tax";
                TotalVATAmount := 0;
                LastConnectionNo := VATEntry2."Sales Tax Connection No.";
              END;

              CASE VATEntry2."VAT Calculation Type" OF
                VATEntry2."VAT Calculation Type"::"Normal VAT",
                VATEntry2."VAT Calculation Type"::"Full VAT":
                  BEGIN
                    IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
                       (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
                    THEN BEGIN
                      PmtDiscRounding :=
                        PmtDiscRounding +
                        (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                      VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                      PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;

                      PmtDiscRoundingAddCurr :=
                        PmtDiscRoundingAddCurr +
                        (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt.") *
                        PmtDiscFactorAddCurr;
                      VATAmountAddCurr :=
                        ROUND(
                          PmtDiscRoundingAddCurr - PmtDiscAddCurr2,AddCurrency."Amount Rounding Precision");
                      PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
                    END ELSE BEGIN
                      VATAmount := 0;
                      VATAmountAddCurr := 0;
                    END;
                  END;
                VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    VATAmount :=
                      ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
                    VATAmountAddCurr :=
                      ROUND(
                        (VATEntry2."Additional-Currency Amount" +
                         VATEntry2."Add.-Currency Unrealized Amt.") *
                        PmtDiscFactorAddCurr,AddCurrency."Amount Rounding Precision");
                  END;
                VATEntry2."VAT Calculation Type"::"Sales Tax":
                  IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                    VATAmount :=
                      ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
                    VATAmountAddCurr :=
                      ROUND(
                        (VATEntry2."Additional-Currency Amount" +
                         VATEntry2."Add.-Currency Unrealized Amt.")
                        * PmtDiscFactorAddCurr,AddCurrency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
                       (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
                    THEN BEGIN
                      PmtDiscRounding :=
                        PmtDiscRounding +
                        (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                      VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                      PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;

                      PmtDiscRoundingAddCurr :=
                        PmtDiscRoundingAddCurr +
                        (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt.") *
                        PmtDiscFactorAddCurr;
                      VATAmountAddCurr :=
                        ROUND(
                          PmtDiscRoundingAddCurr - PmtDiscAddCurr2,AddCurrency."Amount Rounding Precision");
                      PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
                    END ELSE BEGIN
                      VATAmount := 0;
                      VATAmountAddCurr := 0;
                    END;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + VATAmount;

              // Post VAT
              // VAT for VAT entry
              IF VATEntry2.Type <> 0 THEN BEGIN
                VATEntry.LOCKTABLE;
                VATEntry := VATEntry2;
                VATEntry."Entry No." := NextVATEntryNo;
                VATEntry."Posting Date" := GenJnlLine."Posting Date";
                VATEntry."Document No." := GenJnlLine."Document No.";
                VATEntry."External Document No." := GenJnlLine."External Document No.";
                VATEntry."Document Type" := GenJnlLine."Document Type";
                VATEntry."Source Code" := GenJnlLine."Source Code";
                VATEntry."Reason Code" := GenJnlLine."Reason Code";
                VATEntry."Transaction No." := NextTransactionNo;
                VATEntry."Sales Tax Connection No." := NextConnectionNo;
                VATEntry."Unrealized Amount" := 0;
                VATEntry."Unrealized Base" := 0;
                VATEntry."Remaining Unrealized Amount" := 0;
                VATEntry."Remaining Unrealized Base" := 0;
                VATEntry."User ID" := USERID;
                VATEntry."Closed by Entry No." := 0;
                VATEntry.Closed := FALSE;
                VATEntry."Internal Ref. No." := '';
                VATEntry.Amount := VATAmount;
                VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
                VATEntry."VAT Difference" := 0;
                VATEntry."Add.-Curr. VAT Difference" := 0;
                VATEntry."Add.-Currency Unrealized Amt." := 0;
                VATEntry."Add.-Currency Unrealized Base" := 0;
                IF VATEntry2."Tax on Tax" THEN BEGIN
                  VATEntry.Base :=
                    ROUND((VATEntry2.Base + VATEntry2."Unrealized Base") * PmtDiscFactorLCY);
                  VATEntry."Additional-Currency Base" :=
                    ROUND(
                      (VATEntry2."Additional-Currency Base" +
                       VATEntry2."Add.-Currency Unrealized Base") * PmtDiscFactorAddCurr,
                      AddCurrency."Amount Rounding Precision");
                END ELSE BEGIN
                  VATEntry.Base := VATBase;
                  VATEntry."Additional-Currency Base" := VATBaseAddCurr;
                END;

                IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
                  VATEntry."Additional-Currency Base" := 0;
                  VATEntry."Additional-Currency Amount" := 0;
                  VATEntry."Add.-Currency Unrealized Amt." := 0;
                  VATEntry."Add.-Currency Unrealized Base" := 0;
                END;

                VATEntry.INSERT;
                NextVATEntryNo := NextVATEntryNo + 1;
              END;

              // VAT for G/L entry/entries
              DtldCVLedgEntryBuf.INIT;
              CASE EntryType OF
                1:
                  BEGIN
                    InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
                    DtldCVLedgEntryBuf."Entry Type" :=
                      DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)";
                  END;
                2:
                  BEGIN
                    InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
                    DtldCVLedgEntryBuf."Entry Type" :=
                      DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)";
                  END;
                3:
                  BEGIN
                    InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
                    DtldCVLedgEntryBuf."Entry Type" :=
                      DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
                  END;
              END;
              DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
                DtldCVLedgEntryBuf."Document Date" := GenJnlLine."Document Date";
              DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
              DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
              DtldCVLedgEntryBuf.Amount := 0;
              DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
              DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
              DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
              // The total payment discount in currency is posted on the entry made in
              // the function CalcPmtDisc.
              DtldCVLedgEntryBuf."User ID" := USERID;
              DtldCVLedgEntryBuf."Use Additional-Currency Amount" := TRUE;

              CASE VATEntry2.Type OF
                VATEntry2.Type::Purchase:
                  BEGIN
                    CASE VATEntry2."VAT Calculation Type" OF
                      VATEntry2."VAT Calculation Type"::"Normal VAT",
                      VATEntry2."VAT Calculation Type"::"Full VAT":
                        BEGIN
                          VATPostingSetup.TESTFIELD("Purchase VAT Account");
                          InitGLEntry(VATPostingSetup."Purchase VAT Account",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                      VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                        BEGIN
                          VATPostingSetup.TESTFIELD("Purchase VAT Account");
                          InitGLEntry(VATPostingSetup."Purchase VAT Account",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                          InitGLEntry(VATPostingSetup."Reverse Chrg. VAT Acc.",-VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                        END;
                      VATEntry2."VAT Calculation Type"::"Sales Tax":
                        IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                          TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                          InitGLEntry(TaxJurisdiction."Tax Account (Purchases)",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                          InitGLEntry(TaxJurisdiction."Reverse Charge (Purchases)",-VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                        END ELSE BEGIN
                          TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                          InitGLEntry(TaxJurisdiction."Tax Account (Purchases)",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                    END;
                  END;
                VATEntry2.Type::Sale:
                  BEGIN
                    CASE VATEntry2."VAT Calculation Type" OF
                      VATEntry2."VAT Calculation Type"::"Normal VAT",
                      VATEntry2."VAT Calculation Type"::"Full VAT":
                        BEGIN
                          VATPostingSetup.TESTFIELD("Sales VAT Account");
                          InitGLEntry(VATPostingSetup."Sales VAT Account",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                      VATEntry2."VAT Calculation Type"::"Reverse Charge VAT": ;
                      VATEntry2."VAT Calculation Type"::"Sales Tax":
                        BEGIN
                          TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                          InitGLEntry(TaxJurisdiction."Tax Account (Sales)",VATAmount,0,FALSE,TRUE);
                          GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                          SummarizeVAT(
                            GLSetup."Summarize G/L Entries",GLEntry,
                            TempGLEntryVAT,InsertedTempGLEntryVAT);
                          DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                          DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
                        END;
                    END;
                  END;
              END;
            END;
          UNTIL VATEntry2.NEXT = 0;

          IF LastConnectionNo <> 0 THEN BEGIN
            DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
            InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

            InsertSummarizedVAT;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscTolerance@60(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;GLSetup@1003 : Record 98;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtDiscTol@1011 : Decimal;
      PmtDiscTolLCY@1010 : Decimal;
      PmtDiscTolAddCurr@1009 : Decimal;
    BEGIN
      IF Cust."Block Payment Tolerance" OR Vend."Block Payment Tolerance" THEN
        EXIT;
      IF OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" = TRUE THEN BEGIN
        PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscTolLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
            NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;

        IF NewCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency" THEN
          PmtDiscTolAddCurr := PmtDiscTol
        ELSE
          PmtDiscTolAddCurr := CalcLCYToAddCurr(PmtDiscTolLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtDiscTolLCY <> 0) THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,
            DtldCVLedgEntryBuf,GenJnlLine,GLSetup,PmtDiscTolLCY,PmtDiscTolAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,2);

        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance";
        DtldCVLedgEntryBuf.Amount := PmtDiscTol;
        DtldCVLedgEntryBuf."Amount (LCY)" := PmtDiscTolLCY;
        DtldCVLedgEntryBuf."Additional-Currency Amount" := PmtDiscTolAddCurr;
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyApplnRounding@51(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;ApplnRoundingPrecision@1005 : Decimal);
    VAR
      ApplnRounding@1006 : Decimal;
      ApplnRoundingLCY@1007 : Decimal;
    BEGIN
      IF ((NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Payment) AND
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)) OR
         (NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf."Currency Code")
      THEN
        EXIT;

      ApplnRounding := -(NewCVLedgEntryBuf."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount");
      ApplnRoundingLCY := ROUND(ApplnRounding / NewCVLedgEntryBuf."Adjusted Currency Factor");

      IF (ApplnRounding = 0) OR (ABS(ApplnRounding) > ApplnRoundingPrecision) THEN
        EXIT;

      InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
      InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
      DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding";
      DtldCVLedgEntryBuf.Amount := ApplnRounding;
      DtldCVLedgEntryBuf."Amount (LCY)" := ApplnRoundingLCY;
      DtldCVLedgEntryBuf."Additional-Currency Amount" := ApplnRounding;
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
    END;

    PROCEDURE FindAmtForAppln@6(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR AppliedAmount@1003 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1005 : Decimal;ApplnRoundingPrecision@1007 : Decimal);
    BEGIN
      IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN
          AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply"
        ELSE
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END ELSE BEGIN
        IF (OldCVLedgEntryBuf2."Amount to Apply" <> 0) THEN BEGIN
          IF (CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
            (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
            ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
            (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
            (ABS(OldCVLedgEntryBuf2."Amount to Apply" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))) OR
            (OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" =  TRUE)
          THEN BEGIN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
            OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
          END ELSE BEGIN
            IF ABS(NewCVLedgEntryBuf."Remaining Amount") <= ABS(OldCVLedgEntryBuf2."Amount to Apply") THEN
              AppliedAmount := NewCVLedgEntryBuf."Remaining Amount"
            ELSE
              AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply";
          END;
        END ELSE
          IF ABS(NewCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf2."Remaining Amount") THEN
            AppliedAmount := NewCVLedgEntryBuf."Remaining Amount"
          ELSE
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END;

      IF (ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply") < ApplnRoundingPrecision) AND
        (ApplnRoundingPrecision <> 0)
      THEN
        AppliedAmount := AppliedAmount - (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply");

      IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
        AppliedAmountLCY := ROUND(AppliedAmount / OldCVLedgEntryBuf."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      END ELSE BEGIN
        // Management of posting in multiple currencies
        IF AppliedAmount = -OldCVLedgEntryBuf2."Remaining Amount" THEN
          OldAppliedAmount := -OldCVLedgEntryBuf."Remaining Amount"
        ELSE
          OldAppliedAmount :=
            ExchAmount(
              AppliedAmount,NewCVLedgEntryBuf."Currency Code",
              OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date");

        IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
          // Post the realized gain or loss on the NewCVLedgEntryBuf
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldCVLedgEntryBuf."Original Currency Factor")
        ELSE
          // Post the realized gain or loss on the OldCVLedgEntryBuf
          AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyUnrealizedGainLoss@48(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;RemainingAmountBeforeAppln@1007 : Decimal);
    VAR
      UnRealizedGainLossLCY@1006 : Decimal;
      DtldCustLedgEntry@1008 : Record 379;
      DtldVendLedgEntry@1009 : Record 380;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      // Calculate Unrealized GainLoss
      IF (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer) THEN BEGIN
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CVLedgEntryBuf."Entry No.");
        DtldCustLedgEntry.SETRANGE(
          "Entry Type",
          DtldCustLedgEntry."Entry Type"::"Unrealized Loss",
          DtldCustLedgEntry."Entry Type"::"Unrealized Gain");
        DtldCustLedgEntry.CALCSUMS("Amount (LCY)");
        UnRealizedGainLossLCY :=
          ROUND(DtldCustLedgEntry."Amount (LCY)" * ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END ELSE BEGIN
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",CVLedgEntryBuf."Entry No.");
        DtldVendLedgEntry.SETRANGE(
          "Entry Type",
          DtldVendLedgEntry."Entry Type"::"Unrealized Loss",
          DtldVendLedgEntry."Entry Type"::"Unrealized Gain");
        DtldVendLedgEntry.CALCSUMS("Amount (LCY)");
        UnRealizedGainLossLCY :=
          ROUND(DtldVendLedgEntry."Amount (LCY)" * ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END;

      IF UnRealizedGainLossLCY <> 0 THEN BEGIN
        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf);
        IF UnRealizedGainLossLCY < 0 THEN BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss";
          DtldCVLedgEntryBuf."Amount (LCY)" := -UnRealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END ELSE BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain";
          DtldCVLedgEntryBuf."Amount (LCY)" := -UnRealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END;
      END;
    END;

    PROCEDURE CalcCurrencyRealizedGainLoss@62(VAR CVLedgEntryBuf@1005 : Record 382;VAR DtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;GenJnlLine@1002 : Record 81;AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal);
    VAR
      RealizedGainLossLCY@1006 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      // Calculate Realized GainLoss
      RealizedGainLossLCY :=
        AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
      IF RealizedGainLossLCY <> 0 THEN BEGIN
        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf);
        IF RealizedGainLossLCY < 0 THEN BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Realized Loss";
          DtldCVLedgEntryBuf."Amount (LCY)" := RealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END ELSE BEGIN
          DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Realized Gain";
          DtldCVLedgEntryBuf."Amount (LCY)" := RealizedGainLossLCY;
          InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE CalcApplication@55(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;AppliedAmountLCY@1005 : Decimal;OldAppliedAmount@1006 : Decimal;PrevNewCVLedgEntryBuf@1008 : Record 382;PrevOldCVLedgEntryBuf@1007 : Record 382);
    BEGIN
      IF AppliedAmount = 0 THEN
        EXIT;

      InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
      InitOldCVLedgEntry(DtldCVLedgEntryBuf,OldCVLedgEntryBuf);
      DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::Application;
      DtldCVLedgEntryBuf.Amount := OldAppliedAmount;
      DtldCVLedgEntryBuf."Amount (LCY)" := AppliedAmountLCY;
      DtldCVLedgEntryBuf."Applied CV Ledger Entry No." := NewCVLedgEntryBuf."Entry No.";
      DtldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
        PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible";
      DtldCVLedgEntryBuf."Max. Payment Tolerance" := PrevOldCVLedgEntryBuf."Max. Payment Tolerance";
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,OldCVLedgEntryBuf,FALSE);

      OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
        OldCVLedgEntryBuf."Closed by Entry No." := NewCVLedgEntryBuf."Entry No.";
        OldCVLedgEntryBuf."Closed at Date" := GenJnlLine."Posting Date";
        OldCVLedgEntryBuf."Closed by Amount" := -OldAppliedAmount;
        OldCVLedgEntryBuf."Closed by Amount (LCY)" := -AppliedAmountLCY;
        OldCVLedgEntryBuf."Closed by Currency Code" := NewCVLedgEntryBuf."Currency Code";
        OldCVLedgEntryBuf."Closed by Currency Amount" := -AppliedAmount;
      END ELSE
        AllApplied := FALSE;

      InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
      InitOldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf);
      DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::Application;
      DtldCVLedgEntryBuf.Amount := -AppliedAmount;
      DtldCVLedgEntryBuf."Amount (LCY)" := -AppliedAmountLCY;
      DtldCVLedgEntryBuf."Applied CV Ledger Entry No." := NewCVLedgEntryBuf."Entry No.";
      DtldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
        PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible";
      DtldCVLedgEntryBuf."Max. Payment Tolerance" := PrevNewCVLedgEntryBuf."Max. Payment Tolerance";
      InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);

      NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN BEGIN
        NewCVLedgEntryBuf."Closed by Entry No." := OldCVLedgEntryBuf."Entry No.";
        NewCVLedgEntryBuf."Closed at Date" := GenJnlLine."Posting Date";
        NewCVLedgEntryBuf."Closed by Amount" := AppliedAmount;
        NewCVLedgEntryBuf."Closed by Amount (LCY)" := AppliedAmountLCY;
        NewCVLedgEntryBuf."Closed by Currency Code" := OldCVLedgEntryBuf."Currency Code";
        NewCVLedgEntryBuf."Closed by Currency Amount" := OldAppliedAmount;
      END;
    END;

    PROCEDURE CalcRemainingPmtDisc@59(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382);
    VAR
      TempOldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      IF ((((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::"Credit Memo") OR
          (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice)) AND
          ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) OR
          (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo"))) AND
          ((OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0) AND
          (NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0)) OR
          ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0)  AND
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)))
      THEN BEGIN
        TempOldCVLedgEntryBuf2 := OldCVLedgEntryBuf2;
        OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
          ROUND(OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" *
            (OldCVLedgEntryBuf."Remaining Amount" / OldCVLedgEntryBuf."Original Amount"),
            GLSetup."Amount Rounding Precision");
        NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
          ROUND(NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" *
            (NewCVLedgEntryBuf."Remaining Amount" / NewCVLedgEntryBuf."Original Amount"),
            GLSetup."Amount Rounding Precision");

        IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN
          OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
            OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"
        ELSE
          // Management of posting in multiple currencies
          IF OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" = 0 THEN
            OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0
          ELSE
            OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      END;

      IF (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) OR
        (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo")
      THEN
        IF ABS(OldCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf."Max. Payment Tolerance") THEN
          OldCVLedgEntryBuf."Max. Payment Tolerance" := OldCVLedgEntryBuf."Remaining Amount";

      IF NOT NewCVLedgEntryBuf.Open THEN BEGIN
        NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0;
        NewCVLedgEntryBuf."Max. Payment Tolerance" := 0;
      END;

      IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
        OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0;
        OldCVLedgEntryBuf."Max. Payment Tolerance" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcAmtLCYAdjustment@52(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81);
    VAR
      AdjustedAmountLCY@1005 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      AdjustedAmountLCY :=
        ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");

      IF AdjustedAmountLCY <> CVLedgEntryBuf."Remaining Amt. (LCY)" THEN BEGIN
        InitNewCVLedgEntry(DtldCVLedgEntryBuf,GenJnlLine);
        InitOldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" :=
          DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount";
        DtldCVLedgEntryBuf."Amount (LCY)" := AdjustedAmountLCY - CVLedgEntryBuf."Remaining Amt. (LCY)";
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END;
    END;

    PROCEDURE InitNewCVLedgEntry@7(VAR InitDtldCVLedgEntryBuf@1000 : Record 383;GenJnlLine@1001 : Record 81);
    BEGIN
      InitDtldCVLedgEntryBuf.INIT;
      InitDtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      InitDtldCVLedgEntryBuf."Document Date" := GenJnlLine."Document Date";
      InitDtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      InitDtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
      InitDtldCVLedgEntryBuf."User ID" := USERID;
    END;

    PROCEDURE InitOldCVLedgEntry@20(VAR InitDtldCVLedgEntryBuf@1000 : Record 383;OldCVLedgEntryBuf@1001 : Record 382);
    BEGIN
      InitDtldCVLedgEntryBuf."Cust. Ledger Entry No." := OldCVLedgEntryBuf."Entry No.";
      InitDtldCVLedgEntryBuf."Customer No." := OldCVLedgEntryBuf."CV No.";
      InitDtldCVLedgEntryBuf."Currency Code" := OldCVLedgEntryBuf."Currency Code";
      InitDtldCVLedgEntryBuf."Initial Entry Due Date" := OldCVLedgEntryBuf."Due Date";
      InitDtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := OldCVLedgEntryBuf."Global Dimension 1 Code";
      InitDtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := OldCVLedgEntryBuf."Global Dimension 2 Code";
      InitDtldCVLedgEntryBuf."Initial Document Type" := OldCVLedgEntryBuf."Document Type";
    END;

    LOCAL PROCEDURE InsertDtldCVLedgEntry@53(VAR DtldCVLedgEntryBuf@1000 : Record 383;VAR CVLedgEntryBuf@1001 : Record 382;InsertZeroAmout@1004 : Boolean);
    VAR
      NewDtldCVLedgEntryBuf@1002 : Record 383;
      NextDtldBufferEntryNo@1003 : Integer;
    BEGIN
      IF (DtldCVLedgEntryBuf.Amount = 0) AND
         (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0) AND
         (NOT InsertZeroAmout)
      THEN
        EXIT;

      DtldCVLedgEntryBuf.TESTFIELD("Entry Type" );

      NewDtldCVLedgEntryBuf.INIT;
      NewDtldCVLedgEntryBuf := DtldCVLedgEntryBuf;

      IF NextDtldBufferEntryNo = 0 THEN BEGIN
        DtldCVLedgEntryBuf.RESET;
        IF DtldCVLedgEntryBuf.FINDLAST THEN
          NextDtldBufferEntryNo := DtldCVLedgEntryBuf."Entry No." + 1
        ELSE
          NextDtldBufferEntryNo := 1;
      END;

      DtldCVLedgEntryBuf.RESET;
      DtldCVLedgEntryBuf.SETRANGE("Cust. Ledger Entry No.",CVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE("Entry Type",NewDtldCVLedgEntryBuf."Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Posting Date",NewDtldCVLedgEntryBuf."Posting Date");
      DtldCVLedgEntryBuf.SETRANGE("Document Type",NewDtldCVLedgEntryBuf."Document Type");
      DtldCVLedgEntryBuf.SETRANGE("Document No.",NewDtldCVLedgEntryBuf."Document No.");
      DtldCVLedgEntryBuf.SETRANGE("Customer No.",NewDtldCVLedgEntryBuf."Customer No.");
      DtldCVLedgEntryBuf.SETRANGE("Gen. Posting Type",NewDtldCVLedgEntryBuf."Gen. Posting Type");
      DtldCVLedgEntryBuf.SETRANGE(
        "Gen. Bus. Posting Group",NewDtldCVLedgEntryBuf."Gen. Bus. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE(
        "Gen. Prod. Posting Group",NewDtldCVLedgEntryBuf."Gen. Prod. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE(
        "VAT Bus. Posting Group",NewDtldCVLedgEntryBuf."VAT Bus. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE(
        "VAT Prod. Posting Group",NewDtldCVLedgEntryBuf."VAT Prod. Posting Group");
      DtldCVLedgEntryBuf.SETRANGE("Tax Area Code",NewDtldCVLedgEntryBuf."Tax Area Code");
      DtldCVLedgEntryBuf.SETRANGE("Tax Liable",NewDtldCVLedgEntryBuf."Tax Liable");
      DtldCVLedgEntryBuf.SETRANGE("Tax Group Code",NewDtldCVLedgEntryBuf."Tax Group Code");
      DtldCVLedgEntryBuf.SETRANGE("Use Tax",NewDtldCVLedgEntryBuf."Use Tax");
      DtldCVLedgEntryBuf.SETRANGE(
        "Tax Jurisdiction Code",NewDtldCVLedgEntryBuf."Tax Jurisdiction Code");

      IF DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
        DtldCVLedgEntryBuf.Amount := DtldCVLedgEntryBuf.Amount + NewDtldCVLedgEntryBuf.Amount;
        DtldCVLedgEntryBuf."Amount (LCY)" :=
          DtldCVLedgEntryBuf."Amount (LCY)" + NewDtldCVLedgEntryBuf."Amount (LCY)";
        DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
          DtldCVLedgEntryBuf."VAT Amount (LCY)" + NewDtldCVLedgEntryBuf."VAT Amount (LCY)";
        DtldCVLedgEntryBuf."Additional-Currency Amount" :=
          DtldCVLedgEntryBuf."Additional-Currency Amount" +
          NewDtldCVLedgEntryBuf."Additional-Currency Amount";
        DtldCVLedgEntryBuf.MODIFY;
      END ELSE BEGIN
        NewDtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
        NextDtldBufferEntryNo := NextDtldBufferEntryNo + 1;
        DtldCVLedgEntryBuf := NewDtldCVLedgEntryBuf;
        DtldCVLedgEntryBuf.INSERT;
      END;

      CVLedgEntryBuf."Amount to Apply" := NewDtldCVLedgEntryBuf.Amount + CVLedgEntryBuf."Amount to Apply";
      CVLedgEntryBuf."Remaining Amount" := NewDtldCVLedgEntryBuf.Amount + CVLedgEntryBuf."Remaining Amount";
      CVLedgEntryBuf."Remaining Amt. (LCY)" :=
        NewDtldCVLedgEntryBuf."Amount (LCY)" + CVLedgEntryBuf."Remaining Amt. (LCY)";

      //YIMMNTTST
        DtldCVLedgEntryBuf."Kwitansi No.":=GenJnlLine."Kwitansi No.";
        DtldCVLedgEntryBuf."Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
        DtldCVLedgEntryBuf."Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
        DtldCVLedgEntryBuf."Tax Invoice No.":=GenJnlLine."Tax Invoice No.";
        DtldCVLedgEntryBuf."Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
        DtldCVLedgEntryBuf.Narration:=GenJnlLine.Narration;
      //YIMMNTTEN

      //YIMMNNPWPST
        DtldCVLedgEntryBuf."Ship-to Code":=GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN

        DtldCVLedgEntryBuf."Ship-to Address":=GenJnlLine."Ship-to Address";
        DtldCVLedgEntryBuf."Ship-to Address 2":=GenJnlLine."Ship-to Address 2";
      //YIMM

      IF DtldCVLedgEntryBuf."Entry Type" = DtldCVLedgEntryBuf."Entry Type"::"Initial Entry" THEN BEGIN
        CVLedgEntryBuf."Original Amount" := NewDtldCVLedgEntryBuf.Amount;
        CVLedgEntryBuf."Original Amt. (LCY)" := NewDtldCVLedgEntryBuf."Amount (LCY)";
      END;
      DtldCVLedgEntryBuf.RESET;
    END;

    LOCAL PROCEDURE CustUnrealizedVAT@16(VAR CustLedgEntry2@1000 : Record 21;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmount@1012 : Decimal;
      SalesVATAccount@1009 : Code[20];
      SalesVATUnrealAccount@1010 : Code[20];
      LastConnectionNo@1011 : Integer;
    BEGIN
      PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
      IF VATEntry2.FINDSET THEN
        REPEAT
          TotalUnrealVATAmount := TotalUnrealVATAmount - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
        WHTAmount:=0;
        WHTAmount1:=0;
        TempWHTEntry.RESET;
        TempWHTEntry.SETRANGE("Document No.",CustLedgEntry2."Document No.");
        TempWHTEntry.SETFILTER("Applies-to Entry No.",'%1',0);
        IF TempWHTEntry.FIND('-') THEN
          REPEAT
            WHTAmount:=WHTAmount+TempWHTEntry."Unrealized Amount (LCY)";
          UNTIL TempWHTEntry.NEXT=0;

      GLSetup.GET;
      IF WHTAmount <> 0 THEN
        IF GLSetup."Manual Sales WHT Calc." THEN BEGIN
          WHTAmount2 := WHTAmount2 + WHTAmount;
          IF ((GenJnlLine."Posting Date" < CustLedgEntry2."Pmt. Discount Date") AND
              ((ABS(SettledAmount) + ABS(WHTAmount)) >=
               (ABS(CustLedgEntry2."Rem. Amt") - ABS(CustLedgEntry2."Original Pmt. Disc. Possible"))))
          THEN
            SettledAmount := SettledAmount - CustLedgEntry2."Remaining Pmt. Disc. Possible";
        END;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT;
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          IF (VATEntry2.Type <> 0) AND
             (VATEntry2.Amount = 0) AND
             (VATEntry2.Base = 0)
          THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                VATPostingSetup.GET(
                  VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  VATPostingSetup."Unrealized VAT Type" := TaxJurisdiction."Unrealized VAT Type";
                END;
            END;
            IF GenJnlLine."Document Type"=GenJnlLine."Document Type"::Refund THEN BEGIN
              WHTAmount:=0;
            END ELSE BEGIN
              IF GLSetup."Manual Sales WHT Calc." THEN BEGIN
                SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
                SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",CustLedgEntry2."Document No.");
                IF SalesCrMemoHeader.FIND('-') THEN BEGIN
                  TempWHTEntry.RESET;
                  TempWHTEntry.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                  TempWHTEntry.SETFILTER("Applies-to Entry No.",'%1',0);
                  IF TempWHTEntry.FIND('-') THEN
                    REPEAT
                      WHTAmount1:=WHTAmount1+TempWHTEntry."Unrealized Amount (LCY)";
                    UNTIL TempWHTEntry.NEXT=0;
                  GLSetup.GET;
                END;
                WHTAmount:=WHTAmount-WHTAmount1
              END;
            END;
            IF (VATPostingSetup."Unrealized VAT Type" > 0) AND
               ((VATEntry2."Remaining Unrealized Amount" <> 0) OR
                (VATEntry2."Remaining Unrealized Base" <> 0))
            THEN BEGIN
              CASE VATPostingSetup."Unrealized VAT Type" OF
                VATPostingSetup."Unrealized VAT Type"::Percentage:
                  BEGIN
                    IF CustLedgEntry2."Remaining Amt. (LCY)" = 0 THEN
                      VATPart := 1;
                      IF CustLedgEntry2."Currency Code" = '' THEN BEGIN
                        GLSetup.GET;
                        IF GLSetup."Manual Sales WHT Calc." THEN BEGIN
                          IF ABS(SettledAmount)<ABS(CustLedgEntry2."Original Amt. (LCY)") THEN BEGIN
                            IF ABS(CustLedgEntry2."Rem. Amt for WHT")<ABS(CustLedgEntry2."Rem. Amt") THEN
                              VATPart := -SettledAmount / (CustLedgEntry2."Original Amt. (LCY)"+WHTAmount)
                      ELSE
                              VATPart := -SettledAmount / (CustLedgEntry2."Original Amt. (LCY)"+WHTAmount2);
                          END ELSE
                            VATPart := -SettledAmount / CustLedgEntry2."Original Amt. (LCY)";
                        END ELSE
                          VATPart := -SettledAmount / CustLedgEntry2."Original Amt. (LCY)";
                      END ELSE BEGIN
                        GLSetup.GET;
                        IF GLSetup."Manual Sales WHT Calc." THEN
                        VATPart :=
                          (-SettledAmount / CustLedgEntry2."Original Currency Factor") /
                            (CustLedgEntry2."Original Amt. (LCY)"+WHTAmount)
                        ELSE
                          VATPart :=
                            (-SettledAmount / CustLedgEntry2."Original Currency Factor") /CustLedgEntry2."Original Amt. (LCY)";
                      END;
                  END;
                VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)":
                  BEGIN
                    IF NOT CustLedgEntry2.Open OR
                       (VATEntry2."VAT Calculation Type" =
                        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT")
                    THEN
                      VATPart := 1
                    ELSE BEGIN
                      IF ABS(PaidAmount) >= ABS(TotalUnrealVATAmount) THEN
                        VATPart := 1
                      ELSE
                        IF VATPostingSetup."Unrealized VAT Type" = VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)" THEN
                          VATPart := 0
                        ELSE
                          VATPart := PaidAmount / TotalUnrealVATAmount;
                    END;
                  END;
                VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)":
                  BEGIN
                    IF NOT CustLedgEntry2.Open THEN
                      VATPart := 1
                    ELSE
                      IF VATEntry2."VAT Calculation Type" =
                         VATEntry2."VAT Calculation Type"::"Reverse Charge VAT"
                      THEN
                        VATPart := 0
                      ELSE
                        IF ABS(PaidAmount) <= ABS(CustLedgEntry2."Amount (LCY)" - TotalUnrealVATAmount) THEN
                          VATPart := 0
                        ELSE
                          IF VATPostingSetup."Unrealized VAT Type" = VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)" THEN
                            VATPart := 0
                          ELSE
                            VATPart :=
                              (TotalUnrealVATAmount - CustLedgEntry2."Remaining Amt. (LCY)") / TotalUnrealVATAmount;
                  END;
              END;

              IF VATPart <> 0 THEN BEGIN
                CASE VATEntry2."VAT Calculation Type" OF
                  VATEntry2."VAT Calculation Type"::"Normal VAT",
                  VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
                  VATEntry2."VAT Calculation Type"::"Full VAT":
                    BEGIN
                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                      VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                      SalesVATAccount := VATPostingSetup."Sales VAT Account";
                      SalesVATUnrealAccount := VATPostingSetup."Sales VAT Unreal. Account";
                    END;
                  VATEntry2."VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                      SalesVATAccount := TaxJurisdiction."Tax Account (Sales)";
                      SalesVATUnrealAccount := TaxJurisdiction."Unreal. Tax Acc. (Sales)";
                    END;
                END;

                IF VATPart = 1 THEN BEGIN
                  VATAmount := VATEntry2."Remaining Unrealized Amount";
                  VATBase := VATEntry2."Remaining Unrealized Base";
                  VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
                  VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
                END ELSE BEGIN
                  VATAmount := ROUND(VATEntry2."Unrealized Amount" * VATPart);
                  VATBase := ROUND(VATEntry2."Unrealized Base" * VATPart);
                  VATAmountAddCurr :=
                    ROUND(
                      VATEntry2."Add.-Currency Unrealized Amt." * VATPart,
                      AddCurrency."Amount Rounding Precision");
                  VATBaseAddCurr :=
                    ROUND(
                      VATEntry2."Add.-Currency Unrealized Base" * VATPart,
                      AddCurrency."Amount Rounding Precision");
                END;

                InitGLEntry(SalesVATUnrealAccount,-VATAmount,0,FALSE,TRUE);
                GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                GLEntry."Bal. Account No." := SalesVATAccount;
                SummarizeVAT(
                  GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

                InitGLEntry(SalesVATAccount,VATAmount,0,FALSE,TRUE);
                GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                GLEntry."Bal. Account No." := SalesVATUnrealAccount;
                GLEntry."Gen. Posting Type" := VATEntry2.Type;
                GLEntry."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
                GLEntry."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
                GLEntry."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
                GLEntry."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
                GLEntry."Tax Area Code" := VATEntry2."Tax Area Code";
                GLEntry."Tax Liable" := VATEntry2."Tax Liable";
                GLEntry."Tax Group Code" := VATEntry2."Tax Group Code";
                GLEntry."Use Tax" := VATEntry2."Use Tax";
                SummarizeVAT(
                  GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

                VATEntry.LOCKTABLE;
                VATEntry := VATEntry2;
                VATEntry."Entry No." := NextVATEntryNo;
                VATEntry."Posting Date" := GenJnlLine."Posting Date";
                VATEntry."Document No." := GenJnlLine."Document No.";
                VATEntry."External Document No." := GenJnlLine."External Document No.";
                VATEntry."Document Type" := GenJnlLine."Document Type";
                VATEntry.Amount := VATAmount;
                VATEntry.Base := VATBase;
                VATEntry."Unrealized Amount" := 0;
                VATEntry."Unrealized Base" := 0;
                VATEntry."Remaining Unrealized Amount" := 0;
                VATEntry."Remaining Unrealized Base" := 0;
                VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
                VATEntry."Additional-Currency Base" := VATBaseAddCurr;
                VATEntry."Add.-Currency Unrealized Amt." := 0;
                VATEntry."Add.-Currency Unrealized Base" := 0;
                VATEntry."Add.-Curr. Rem. Unreal. Amount" := 0;
                VATEntry."Add.-Curr. Rem. Unreal. Base" := 0;
                VATEntry."User ID" := USERID;
                VATEntry."Source Code" := GenJnlLine."Source Code";
                VATEntry."Reason Code" := GenJnlLine."Reason Code";
                VATEntry."Closed by Entry No." := 0;
                VATEntry.Closed := FALSE;
                VATEntry."Transaction No." := GLEntry."Transaction No.";
                VATEntry."Sales Tax Connection No." := NextConnectionNo;
                VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
                VATEntry."Sett. Unrealized Amount" := VATEntry2."Unrealized Amount";
                VATEntry."Sett. Unrealized Base" := VATEntry2."Unrealized Base";
                VATEntry."Sett. Rem. Unrealized Amount" := VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
                VATEntry."Sett. Rem. Unrealized Base" := VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
                VATEntry.INSERT;
                NextVATEntryNo := NextVATEntryNo + 1;

                VATEntry2."Remaining Unrealized Amount" :=
                  VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
                VATEntry2."Remaining Unrealized Base" :=
                  VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
                VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
                VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
                VATEntry2.MODIFY;
              END;
            END;
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT;
      END;
    END;

    PROCEDURE CustPostApplyCustLedgEntry@22(VAR GenJnlLinePostApply@1000 : Record 81;VAR CustLedgEntryPostApply@1001 : Record 21);
    VAR
      LedgEntryDim@1002 : Record 355;
      CustLedgEntry@1006 : Record 21;
      DtldCustLedgEntry@1003 : Record 379;
      DtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      GenJnlLine."Source Currency Code" := CustLedgEntryPostApply."Currency Code";
      GenJnlLine."Applies-to ID" := CustLedgEntryPostApply."Applies-to ID";
      CustLedgEntry.TRANSFERFIELDS(CustLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.",CustLedgEntry."Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);

        InitCodeUnit;

        IF Cust."No." <> CustLedgEntry."Customer No." THEN
          Cust.GET(CustLedgEntry."Customer No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.TESTFIELD("Receivables Account");

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        // Post the application
        CustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,TRUE);
        ApplyCustLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision");
        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,FALSE);
        CustLedgEntry."Applies-to ID":='';
        CustLedgEntry.MODIFY;

        SourceCodeSetup.GET;
        IF GenJnlLine."Source Code" = SourceCodeSetup."Sales Entry Application" THEN BEGIN
          CustLedgEntry.RESET;
          CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
          IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN BEGIN
            CustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
            IF CustLedgEntry.FIND('-') THEN
              CustLedgEntry.MODIFYALL("Applies-to ID",'');
          END;
        END;

        // Post the Dtld customer entry
        PostDtldCustLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,GLSetup,NextTransactionNo,FALSE);
        FinishCodeunit;
      END;
    END;

    PROCEDURE UnapplyCustLedgEntry@66(GenJnlLine2@1004 : Record 81;DtldCustLedgEntry@1003 : Record 379);
    VAR
      DtldCustLedgEntry2@1013 : Record 379;
      NewDtldCustLedgEntry@1012 : Record 379;
      CustLedgEntry@1011 : Record 21;
      DtldCVLedgEntryBuf@1010 : Record 383;
      VATEntry@1009 : Record 254;
      NewVATEntry@1008 : Record 254;
      VATPostingSetup@1007 : Record 325;
      LedgEntryDim@1006 : Record 355;
      GenPostingSetup@1014 : Record 252;
      TotalAmountLCY@1005 : Decimal;
      TotalAmountAddCurr@1002 : Decimal;
      NextDtldLedgEntryEntryNo@1001 : Integer;
      UnapplyVATEntries@1000 : Boolean;
      DebitAddjustment@1018 : Decimal;
      DebitAddjustmentAddCurr@1017 : Decimal;
      CreditAddjustment@1016 : Decimal;
      CreditAddjustmentAddCurr@1015 : Decimal;
      NewWHTEntry@1500001 : Record 28044;
      WHTPostingSetup@1500000 : Record 28043;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      InitCodeUnit;

      IF Cust."No." <> DtldCustLedgEntry."Customer No." THEN
        Cust.GET(DtldCustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,0,TRUE);

      CustPostingGr.GET(GenJnlLine."Posting Group");
      CustPostingGr.TESTFIELD("Receivables Account");

      VATEntry.LOCKTABLE;
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;

      DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::Application);

      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.FINDLAST;
      NextDtldLedgEntryEntryNo := DtldCustLedgEntry2."Entry No." + 1;
      DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
      DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
      DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      DtldCustLedgEntry2.FINDSET;
      REPEAT
        DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);

        NewDtldCustLedgEntry := DtldCustLedgEntry2;
        NewDtldCustLedgEntry."Entry No." := NextDtldLedgEntryEntryNo;
        NewDtldCustLedgEntry."Posting Date" := GenJnlLine."Posting Date";
        NewDtldCustLedgEntry."Transaction No." := NextTransactionNo;
        NewDtldCustLedgEntry.Amount := -DtldCustLedgEntry2.Amount;
        NewDtldCustLedgEntry."Amount (LCY)" := -DtldCustLedgEntry2."Amount (LCY)";
        NewDtldCustLedgEntry."Debit Amount" := -DtldCustLedgEntry2."Debit Amount";
        NewDtldCustLedgEntry."Credit Amount" := -DtldCustLedgEntry2."Credit Amount";
        NewDtldCustLedgEntry."Debit Amount (LCY)" := -DtldCustLedgEntry2."Debit Amount (LCY)";
        NewDtldCustLedgEntry."Credit Amount (LCY)" := -DtldCustLedgEntry2."Credit Amount (LCY)";
        NewDtldCustLedgEntry.Unapplied := TRUE;
        NewDtldCustLedgEntry."Unapplied by Entry No." := DtldCustLedgEntry2."Entry No.";
        NewDtldCustLedgEntry."Document No." := GenJnlLine."Document No.";
        NewDtldCustLedgEntry."Source Code" := GenJnlLine."Source Code";
        NewDtldCustLedgEntry."User ID" := USERID;
        NewDtldCustLedgEntry.INSERT;
        NextDtldLedgEntryEntryNo := NextDtldLedgEntryEntryNo + 1;

        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.",DtldCustLedgEntry2."Cust. Ledger Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldCustLedgEntry);
        DtldCVLedgEntryBuf."Additional-Currency Amount" :=
          CalcAddCurrForUnapplication(DtldCVLedgEntryBuf."Posting Date",DtldCVLedgEntryBuf."Amount (LCY)");
        IF DtldCustLedgEntry2."Entry Type" IN [
          DtldCustLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)",
          DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)",
          DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]
        THEN BEGIN
          VATEntry.SETCURRENTKEY("Transaction No.");
          VATEntry.SETRANGE("Transaction No.",DtldCustLedgEntry2."Transaction No.");
          VATEntry.SETRANGE("VAT Bus. Posting Group",DtldCustLedgEntry2."VAT Bus. Posting Group");
          VATEntry.SETRANGE("VAT Prod. Posting Group",DtldCustLedgEntry2."VAT Prod. Posting Group");
          IF VATEntry.FINDFIRST THEN
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := VATEntry.Amount;
          CLEAR(VATEntry);
        END;
        TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
        TotalAmountAddCurr := TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";
        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
          DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
          DtldCVLedgEntryBuf."Entry Type"::Application]) THEN
          CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
            CreditAddjustment,CreditAddjustmentAddCurr,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");
        AutoEntrForDtldCustLedgEntries(DtldCVLedgEntryBuf);

        DtldCustLedgEntry2.Unapplied := TRUE;
        DtldCustLedgEntry2."Unapplied by Entry No." := NewDtldCustLedgEntry."Entry No.";
        DtldCustLedgEntry2.MODIFY;

        IF DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::Application THEN BEGIN
          CustLedgEntry.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.");
          CustLedgEntry."Remaining Pmt. Disc. Possible" := DtldCustLedgEntry2."Remaining Pmt. Disc. Possible";
          CustLedgEntry."Max. Payment Tolerance" := DtldCustLedgEntry2."Max. Payment Tolerance";
          CustLedgEntry."Accepted Payment Tolerance" := 0;
          IF NOT CustLedgEntry.Open THEN BEGIN
            CustLedgEntry.Open := TRUE;
            CustLedgEntry."Closed by Entry No." := 0;
            CustLedgEntry."Closed at Date" := 0D;
            CustLedgEntry."Closed by Amount" := 0;
            CustLedgEntry."Closed by Amount (LCY)" := 0;
            CustLedgEntry."Closed by Currency Code" := '';
            CustLedgEntry."Closed by Currency Amount" := 0;
            CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
            CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
          END;
          CustLedgEntry.MODIFY;
        END;
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      IF (TotalAmountLCY <> 0) OR
         (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
      THEN BEGIN
        InitGLEntry(CustPostingGr."Receivables Account",TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
        InsertGLEntry(TRUE);
      END;

      UnapplyVATEntries := FALSE;
      IF DtldCustLedgEntry2.FINDSET THEN
        REPEAT
          IF (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Discount (VAT Adjustment)") OR
             (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Tolerance (VAT Adjustment)") OR
             (DtldCustLedgEntry2."Entry Type" = DtldCustLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)")
          THEN
            UnapplyVATEntries := TRUE
        UNTIL DtldCustLedgEntry2.NEXT = 0;

      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntry.Type::Sale);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",DtldCustLedgEntry."Customer No.");
      VATEntry.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      IF VATEntry.FINDSET(FALSE,FALSE) THEN BEGIN
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        IF (VATPostingSetup."Adjust for Payment Discount") AND
           (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT")
        THEN
          UnapplyVATEntries := TRUE;
        REPEAT
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            NewVATEntry := VATEntry;
            NewVATEntry."Closed by Entry No." := 0;
            NewVATEntry.Closed := FALSE;
            NewVATEntry.Base := -VATEntry.Base;
            NewVATEntry.Amount := -VATEntry.Amount;
            NewVATEntry."Unrealized Amount" := -VATEntry."Unrealized Amount";
            NewVATEntry."Unrealized Base" := -VATEntry."Unrealized Base";
            NewVATEntry."Remaining Unrealized Amount" := -VATEntry."Remaining Unrealized Amount";
            NewVATEntry."Remaining Unrealized Base" := -VATEntry."Remaining Unrealized Base";
            NewVATEntry."Additional-Currency Amount" := -VATEntry."Additional-Currency Amount";
            NewVATEntry."Additional-Currency Base" := -VATEntry."Additional-Currency Base";
            NewVATEntry."Add.-Currency Unrealized Amt." := -VATEntry."Add.-Currency Unrealized Amt.";
            NewVATEntry."Add.-Currency Unrealized Base" := -VATEntry."Add.-Currency Unrealized Base";
            NewVATEntry."Add.-Curr. Rem. Unreal. Amount" := -VATEntry."Add.-Curr. Rem. Unreal. Amount";
            NewVATEntry."Add.-Curr. Rem. Unreal. Base" := -VATEntry."Add.-Curr. Rem. Unreal. Base";
            NewVATEntry."User ID" := USERID;
            NewVATEntry."Transaction No." := NextTransactionNo;
            NewVATEntry."Entry No." := NextVATEntryNo;
            NextVATEntryNo := NextVATEntryNo + 1;
            NewVATEntry.INSERT;
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT",
                  VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT"]
              THEN BEGIN
                VATPostingSetup.TESTFIELD("Sales VAT Unreal. Account");
                VATPostingSetup.TESTFIELD("Sales VAT Account");
                PostUnrealVATByUnapply(
                  VATPostingSetup."Sales VAT Unreal. Account",
                  VATPostingSetup."Sales VAT Account",
                  VATEntry,NewVATEntry);
              END ELSE BEGIN
                VATEntry.TESTFIELD("Tax Jurisdiction Code");
                TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
                TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
                TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                PostUnrealVATByUnapply(
                  TaxJurisdiction."Unreal. Tax Acc. (Sales)",
                  TaxJurisdiction."Tax Account (Sales)",
                  VATEntry,NewVATEntry);
              END;
            END;
            IF (VATPostingSetup."Adjust for Payment Discount") AND
               (VATPostingSetup."VAT Calculation Type" =
                 VATPostingSetup."VAT Calculation Type" :: "Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0)
            THEN BEGIN
              VATPostingSetup.TESTFIELD("Sales VAT Account");
              GenPostingSetup.GET(VATEntry."Gen. Bus. Posting Group",VATEntry."Gen. Prod. Posting Group");
              PostPmtDiscountVATByUnapply(
                VATPostingSetup."Reverse Chrg. VAT Acc.",
                VATPostingSetup."Sales VAT Account",
                VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
      END;

      WHTEntry.SETCURRENTKEY("Transaction Type","Bill-to/Pay-to No.","Transaction No.");
      WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
      WHTEntry.SETRANGE("Bill-to/Pay-to No.",DtldCustLedgEntry."Customer No.");
      WHTEntry.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      IF WHTEntry.FIND('-') THEN
        REPEAT
          NewWHTEntry := WHTEntry;
          NewWHTEntry."Closed by Entry No." := 0;
          NewWHTEntry.Closed := FALSE;
          NewWHTEntry.Base := -WHTEntry.Base;
      //YIMMNWHTR
          NewWHTEntry."Area Code" := WHTEntry."Area Code";
      //YIMMNWHTR
          NewWHTEntry.Amount := -WHTEntry.Amount;
          NewWHTEntry."Base (LCY)":= -WHTEntry."Base (LCY)";
          NewWHTEntry."Amount (LCY)" := -WHTEntry."Amount (LCY)";
          NewWHTEntry."Unrealized Amount" := -WHTEntry."Unrealized Amount";
          NewWHTEntry."Unrealized Base" := -WHTEntry."Unrealized Base";
          NewWHTEntry."Remaining Unrealized Amount" := -WHTEntry."Remaining Unrealized Amount";
          NewWHTEntry."Remaining Unrealized Base" := -WHTEntry."Remaining Unrealized Base";
          NewWHTEntry."Original Document No.":=WHTEntry."Document No.";
          NewWHTEntry."Transaction No." := NextTransactionNo;
          NewWHTEntry."Entry No." := NextWHTEntryNo;
          NextWHTEntryNo := NextWHTEntryNo + 1;
          NewWHTEntry.INSERT;
          IF WHTEntry."Unrealized WHT Entry No." <> 0 THEN BEGIN
            WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
            GenJnlLine1.COPY(GenJnlLine);
            GenJnlLine1.Amount:=-WHTEntry.Amount;
            GenJnlLine1."Amount (LCY)":=-WHTEntry."Amount (LCY)";
            InsertWHTPostingBufferPosted(WHTEntry,GenJnlLine1,FALSE,0);
            TempWHTEntry.RESET;
            TempWHTEntry.SETRANGE("Entry No.",WHTEntry."Unrealized WHT Entry No.");
            IF TempWHTEntry.FIND('-') THEN BEGIN
              TempWHTEntry."Remaining Unrealized Amount":=TempWHTEntry."Remaining Unrealized Amount"+WHTEntry.Amount;
              TempWHTEntry."Remaining Unrealized Base":=TempWHTEntry."Remaining Unrealized Base"+WHTEntry.Base;
              TempWHTEntry."Rem Unrealized Amount (LCY)":=TempWHTEntry."Rem Unrealized Amount (LCY)"+WHTEntry."Amount (LCY)";
              TempWHTEntry."Rem Unrealized Base (LCY)":=TempWHTEntry."Rem Unrealized Base (LCY)"+WHTEntry."Base (LCY)";
              TempWHTEntry.Closed:=FALSE;
              TempWHTEntry.MODIFY;
            END;
          END;
          WHTEntry."Original Document No." := NewWHTEntry."Document No.";
          WHTEntry.MODIFY;
        UNTIL WHTEntry.NEXT = 0;

      IF NOT GLEntryTmp.FINDFIRST THEN BEGIN
        InitGLEntry(CustPostingGr."Receivables Account",0,0,FALSE,TRUE);
        InsertGLEntry(FALSE);
      END;

      FinishCodeunit;
    END;

    PROCEDURE TransferCustLedgEntry@8(VAR CVLedgEntryBuf@1000 : Record 382;VAR CustLedgEntry@1001 : Record 21;CustToCV@1002 : Boolean);
    BEGIN
      IF CustToCV THEN BEGIN
        CVLedgEntryBuf.TRANSFERFIELDS(CustLedgEntry);
        CVLedgEntryBuf.Amount := CustLedgEntry.Amount;
        CVLedgEntryBuf."Amount (LCY)" := CustLedgEntry."Amount (LCY)";
        CVLedgEntryBuf."Remaining Amount" := CustLedgEntry."Remaining Amount";
        CVLedgEntryBuf."Remaining Amt. (LCY)" := CustLedgEntry."Remaining Amt. (LCY)";
        CVLedgEntryBuf."Original Amount" := CustLedgEntry."Original Amount";
        CVLedgEntryBuf."Original Amt. (LCY)" := CustLedgEntry."Original Amt. (LCY)";
      END ELSE BEGIN
        CustLedgEntry.TRANSFERFIELDS(CVLedgEntryBuf);
        CustLedgEntry.Amount := CVLedgEntryBuf.Amount;
        CustLedgEntry."Amount (LCY)" := CVLedgEntryBuf."Amount (LCY)";
        CustLedgEntry."Remaining Amount" := CVLedgEntryBuf."Remaining Amount";
        CustLedgEntry."Remaining Amt. (LCY)" := CVLedgEntryBuf."Remaining Amt. (LCY)";
        CustLedgEntry."Original Amount" := CVLedgEntryBuf."Original Amount";
        CustLedgEntry."Original Amt. (LCY)" := CVLedgEntryBuf."Original Amt. (LCY)";
      END;
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntries@46(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1002 : Record 92;GLSetup@1003 : Record 98;NextTransactionNo@1004 : Integer;CustLedgEntryInserted@1012 : Boolean);
    VAR
      DtldCustLedgEntry@1005 : Record 379;
      Currency@1007 : Record 4;
      GenPostingSetup@1008 : Record 252;
      TotalAmountLCY@1009 : Decimal;
      TotalAmountAddCurr@1010 : Decimal;
      PaymentDiscAcc@1011 : Code[20];
      DtldCustLedgEntryNoOffset@1006 : Integer;
      PaymentTolAcc@1013 : Code[20];
      SaveEntryNo@1014 : Integer;
      DebitAddjustment@1015 : Decimal;
      DebitAddjustmentAddCurr@1016 : Decimal;
      CreditAddjustment@1017 : Decimal;
      CreditAddjustmentAddCurr@1018 : Decimal;
    BEGIN
      TotalAmountLCY := 0;
      TotalAmountAddCurr := 0;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN BEGIN
        IF DtldCustLedgEntry.FINDLAST THEN
          DtldCustLedgEntryNoOffset := DtldCustLedgEntry."Entry No."
        ELSE
          DtldCustLedgEntryNoOffset := 0;
        DtldCVLedgEntryBuf.RESET;
        IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
          IF CustLedgEntryInserted THEN BEGIN
            SaveEntryNo := NextEntryNo;
            NextEntryNo := NextEntryNo + 1;
          END;
          REPEAT
            CLEAR(DtldCustLedgEntry);
            DtldCustLedgEntry.TRANSFERFIELDS(DtldCVLedgEntryBuf);
            DtldCustLedgEntry."Entry No." :=
              DtldCustLedgEntryNoOffset + DtldCVLedgEntryBuf."Entry No.";
            DtldCustLedgEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
            DtldCustLedgEntry."Reason Code" := GenJnlLine."Reason Code";
            DtldCustLedgEntry."Source Code" := GenJnlLine."Source Code";
            DtldCustLedgEntry."Transaction No." := NextTransactionNo;
            DtldCustLedgEntry."Document Date" := GenJnlLine."Document Date";

      //YIMMNTTST
            DtldCustLedgEntry."Kwitansi No." :=GenJnlLine."Kwitansi No.";
            DtldCustLedgEntry."Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
            DtldCustLedgEntry."Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
            DtldCustLedgEntry."Tax Invoice No.":=GenJnlLine."Tax Invoice No.";
            DtldCustLedgEntry."Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
            DtldCustLedgEntry.Narration :=GenJnlLine.Narration;
      //YIMMNTTEN

      //YIMMNNPWPST
        DtldCustLedgEntry."Ship-to Code":=GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN
        DtldCustLedgEntry."Ship-to Address":=GenJnlLine."Ship-to Address";
        DtldCustLedgEntry."Ship-to Address 2":=GenJnlLine."Ship-to Address 2";


            CustUpdateDebitCredit(GenJnlLine.Correction,DtldCustLedgEntry);
            DtldCustLedgEntry.INSERT;

            TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
            TotalAmountAddCurr :=
              TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";

            // Post automatic entries.
            IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
               ((GLSetup."Additional Reporting Currency" <> '') AND
                (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
            THEN
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
                DtldCVLedgEntryBuf."Entry Type"::Application:;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Losses Acc.");
                    InitGLEntry(
                      Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Gains Acc.");
                    InitGLEntry(
                      Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Losses Acc.");
                    InitGLEntry(
                      Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Gains Acc.");
                    InitGLEntry(
                      Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
                  BEGIN
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                      PaymentDiscAcc := CustPostingGr."Payment Disc. Debit Acc.";
                    END ELSE BEGIN
                      CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                      PaymentDiscAcc := CustPostingGr."Payment Disc. Credit Acc.";
                    END;
                    InitGLEntry(
                      PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                    END ELSE BEGIN
                      GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                    END;
                    InitGLEntry(PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        CustPostingGr."Debit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);

                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        CustPostingGr."Credit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);

                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Debit Rounding Account");
                      InitGLEntry(
                        CustPostingGr."Debit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      CustPostingGr.TESTFIELD("Credit Rounding Account");
                      InitGLEntry(
                        CustPostingGr."Credit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
                  BEGIN
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
                  BEGIN
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := CustPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                ELSE
                  DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
              END;

          UNTIL DtldCVLedgEntryBuf.NEXT = 0;
        END;

        IF CustLedgEntryInserted OR (TotalAmountLCY <> 0) OR
           (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
        THEN BEGIN
          HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
            TotalAmountLCY,TotalAmountAddCurr,CustPostingGr."Receivables Account");
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          IF CustLedgEntryInserted THEN BEGIN
            GLEntry."Entry No." := SaveEntryNo;
            NextEntryNo := NextEntryNo - 1;
          END;
          InsertGLEntry(TRUE);
        END;

        IF NOT GLEntryTmp.FINDFIRST AND DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
          InitGLEntry(CustPostingGr."Receivables Account",0,0,FALSE,TRUE);
          InsertGLEntry(FALSE);
        END;
        DtldCVLedgEntryBuf.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE AutoEntrForDtldCustLedgEntries@65(DtldCVLedgEntryBuf@1001 : Record 383);
    VAR
      GenPostingSetup@1005 : Record 252;
      VATPostingSetup@1004 : Record 325;
      TaxJurisdiction@1003 : Record 320;
      AccNo@1002 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         ((GLSetup."Additional Reporting Currency" = '') OR
          (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
        DtldCVLedgEntryBuf."Entry Type"::Application:;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Losses Acc.");
            InitGLEntry(
              Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Gains Acc.");
            InitGLEntry(
              Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Losses Acc.");
            InitGLEntry(
              Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Gains Acc.");
            InitGLEntry(
              Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
          BEGIN
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
              AccNo := CustPostingGr."Payment Disc. Debit Acc.";
            END ELSE BEGIN
              CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
              AccNo := CustPostingGr."Payment Disc. Credit Acc.";
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            DtldCVLedgEntryBuf.TESTFIELD("Gen. Prod. Posting Group");
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
              AccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
            END ELSE BEGIN
              GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
              AccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
          BEGIN
            VATPostingSetup.GET(
              DtldCVLedgEntryBuf."VAT Bus. Posting Group",
              DtldCVLedgEntryBuf."VAT Prod. Posting Group");
            CASE VATPostingSetup."VAT Calculation Type" OF
              VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Sales VAT Account");
                  AccNo := VATPostingSetup."Sales VAT Account";
                END;
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT": ;
              VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  DtldCVLedgEntryBuf.TESTFIELD("Tax Jurisdiction Code");
                  TaxJurisdiction.GET(DtldCVLedgEntryBuf."Tax Jurisdiction Code");
                  TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
                  AccNo := TaxJurisdiction."Tax Account (Sales)"
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
          IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
            CASE TRUE OF
              -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                  AccNo := CustPostingGr."Debit Curr. Appln. Rndg. Acc.";
                END;
              -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                  AccNo := CustPostingGr."Credit Curr. Appln. Rndg. Acc.";
                END;
            END;
            InitGLEntry(
              AccNo,
              -DtldCVLedgEntryBuf."Amount (LCY)",
              -DtldCVLedgEntryBuf."Additional-Currency Amount",
              TRUE,TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
          IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
            CASE TRUE OF
              -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Debit Rounding Account");
                  AccNo := CustPostingGr."Debit Rounding Account";
                END;
              -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                BEGIN
                  CustPostingGr.TESTFIELD("Credit Rounding Account");
                  AccNo := CustPostingGr."Credit Rounding Account";
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := 0;
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
          BEGIN
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Credit Acc.";
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Credit Acc.";
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
          BEGIN
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                  AccNo := CustPostingGr."Payment Tolerance Credit Acc.";
                END;
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Debit Acc.";
                END ELSE BEGIN
                  CustPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                  AccNo := CustPostingGr."Payment Disc. Credit Acc.";
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" :=
              -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            DtldCVLedgEntryBuf.TESTFIELD("Gen. Prod. Posting Group");
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                END;
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                END;
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Tol. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Tol. Credit Acc.";
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Debit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Debit Acc.";
                END ELSE BEGIN
                  GenPostingSetup.TESTFIELD("Sales Pmt. Disc. Credit Acc.");
                  AccNo := GenPostingSetup."Sales Pmt. Disc. Credit Acc.";
                END;
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);
          END;
        ELSE
          DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
      END;
    END;

    LOCAL PROCEDURE CustUpdateDebitCredit@19(Correction@1000 : Boolean;VAR DtldCustLedgEntry@1001 : Record 379);
    BEGIN
      WITH DtldCustLedgEntry DO BEGIN
        IF ((Amount > 0)  OR ("Amount (LCY)" > 0)) AND NOT Correction OR
           ((Amount < 0) OR ("Amount (LCY)" < 0)) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0;
          "Debit Amount (LCY)" := "Amount (LCY)";
          "Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
          "Debit Amount (LCY)" := 0;
          "Credit Amount (LCY)" := -"Amount (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntry@4(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;ApplnRoundingPrecision@1004 : Decimal);
    VAR
      OldVendLedgEntry@1005 : Record 25;
      OldCVLedgEntryBuf@1006 : Record 382;
      OldCVLedgEntryBuf2@1007 : Record 382;
      NewVendLedgEntry@1008 : Record 25;
      NewCVLedgEntryBuf2@1019 : Record 382;
      OldCVLedgEntryBuf3@1018 : Record 382;
      TempOldVendLedgEntry@1003 : TEMPORARY Record 25;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      AppliedAmountLCY@1011 : Decimal;
      OldAppliedAmount@1012 : Decimal;
      TempAmount@1013 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      OldRemainingAmtBeforeAppln@1016 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      SourceCodeSetup@1500000 : Record 242;
      SrcCodeSetup@1000000000 : Record 242;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
           ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
            GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN BEGIN
        // Management of application of already posted entries
        IF NewCVLedgEntryBuf."Currency Code" <> ApplnCurrency.Code THEN
          ApplnCurrency.GET(NewCVLedgEntryBuf."Currency Code");
        ApplnRoundingPrecision := ApplnCurrency."Appln. Rounding Precision";
      END ELSE
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      ApplyingDate := GenJnlLine."Posting Date";

      // Find the entry to be applied to
      IF GenJnlLine."Adjustment Applies-to" <> '' THEN BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
        IF GenJnlLine."Applies-to Doc. Type" <> GenJnlLine."Applies-to Doc. Type"::" " THEN
          OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Adjustment Applies-to");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
      END;
      IF OldVendLedgEntry.FIND('-') THEN;
      // Management of posting in multiple currencies

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.SETRANGE("On Hold",'');

      //YIMM-APP-DOC-NO
      SrcCodeSetup.GET;
         IF (GenJnlLine."Source Code"=SrcCodeSetup."General Journal") THEN
            OldVendLedgEntry.SETRANGE(OldVendLedgEntry."Entry No.",GenJnlLine."CV_Ledger_Entry No.");




        OldVendLedgEntry.FINDFIRST;
        OldVendLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldVendLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",
          OldVendLedgEntry."Currency Code",
          GenJnlLine."Account Type"::Vendor,
          TRUE);
        TempOldVendLedgEntry := OldVendLedgEntry;
        TempOldVendLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT(Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") THEN
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        //Check and Move Ledger Entries to Temp
        IF PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None THEN
          OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldVendLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",
                 OldVendLedgEntry."Currency Code",
                 GenJnlLine."Account Type"::Vendor,
                 FALSE)
            THEN BEGIN
              IF (OldVendLedgEntry."Posting Date" > ApplyingDate) AND (OldVendLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldVendLedgEntry."Posting Date";
              TempOldVendLedgEntry := OldVendLedgEntry;
              TempOldVendLedgEntry.INSERT;
            END;
          UNTIL OldVendLedgEntry.NEXT=0;

        TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldVendLedgEntry.FIND('-') THEN BEGIN
          TempAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldVendLedgEntry.SETRANGE(Positive);
          TempOldVendLedgEntry.FIND('-');
          REPEAT
            TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
            IF NewCVLedgEntryBuf."Currency Code" <> TempOldVendLedgEntry."Currency Code" THEN BEGIN
              TempOldVendLedgEntry."Remaining Amount" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Amount",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Pmt. Disc. Possible",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Accepted Payment Tolerance" :=
                ExchAmount(
                  TempOldVendLedgEntry."Accepted Payment Tolerance",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Amount to Apply" :=
                ExchAmount(
                  TempOldVendLedgEntry."Amount to Apply",TempOldVendLedgEntry."Currency Code",
                  NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

            END;
            IF CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE)
            THEN
              TempOldVendLedgEntry."Remaining Amount" :=
                TempOldVendLedgEntry."Remaining Amount" - TempOldVendLedgEntry."Remaining Pmt. Disc. Possible";

            TempAmount := TempAmount + TempOldVendLedgEntry."Remaining Amount";

          UNTIL TempOldVendLedgEntry.NEXT = 0;
          TempOldVendLedgEntry.SETRANGE(Positive,TempAmount < 0);
        END ELSE
          TempOldVendLedgEntry.SETRANGE(Positive);

        IF NOT TempOldVendLedgEntry.FIND('-') THEN
          EXIT;
      END;
      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        TempOldVendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TransferVendLedgEntry(OldCVLedgEntryBuf,TempOldVendLedgEntry,TRUE);
        TempOldVendLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);

        OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
        OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

        // Management of posting in multiple currencies
        OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
        OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
        IF NewCVLedgEntryBuf."Currency Code" <> OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
          OldCVLedgEntryBuf2."Remaining Amount" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Amount",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Accepted Payment Tolerance" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Accepted Payment Tolerance",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
          OldCVLedgEntryBuf2."Amount to Apply" :=
            ExchAmount(
              OldCVLedgEntryBuf2."Amount to Apply",OldCVLedgEntryBuf2."Currency Code",
              NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
        END;

        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup,NextTransactionNo,FirstNewVATEntryNo);

        CalcCurrencyApplnRounding(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
          GenJnlLine,ApplnRoundingPrecision);

        FindAmtForAppln(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
          AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision);

        CalcCurrencyUnrealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

        CalcCurrencyRealizedGainLoss(
          NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

        CalcCurrencyRealizedGainLoss(
          OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

        CalcApplication(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
          GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
          NewCVLedgEntryBuf2,OldCVLedgEntryBuf3);

        CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2);

        CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

        // Update the Old Entry
        IF (GLSetup."Enable WHT") AND
           (GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Refund]) THEN
          IF (GenJnlLine."Applies-to Doc. No."='') AND (GenJnlLine."Applies-to ID"='') THEN BEGIN
            GenJnlLine1.RESET;
            GenJnlLine1.COPY(GenJnlLine);
            GenJnlLine1.VALIDATE(Amount,AppliedAmount - GenJnlLine1."Interest Amount");
            GenJnlLine1."Applies-to Doc. Type":=OldVendLedgEntry."Document Type";
            GenJnlLine1."Applies-to Doc. No.":=OldVendLedgEntry."Document No.";
            NextWHTEntryNo := WHTManagement.ProcessPayment(GenJnlLine1,NextTransactionNo,
            OldVendLedgEntry."Entry No.",0,TRUE);
          END;
        IF GLSetup."Enable Tax Invoices" THEN
          IF GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Refund] THEN
            IF (GenJnlLine."Applies-to Doc. No."='') AND (GenJnlLine."Applies-to ID"='') THEN BEGIN
              GenJnlLine1.RESET;
              GenJnlLine1.COPY(GenJnlLine);
              GenJnlLine1."WHT Payment":=FALSE;
              GenJnlLine1.VALIDATE(Amount,AppliedAmount - GenJnlLine."Interest Amount");
              GenJnlLine1."Applies-to Doc. Type":=OldVendLedgEntry."Document Type";
              GenJnlLine1."Applies-to Doc. No.":=OldVendLedgEntry."Document No.";
              IF OldVendLedgEntry."Document Type"=OldVendLedgEntry."Document Type"::"Credit Memo" THEN
                TaxManagement.TaxInvoicePurchaseCrMemo(GenJnlLine1,FALSE,TRUE)
              ELSE
                TaxManagement.TaxInvoicePurchase(GenJnlLine1,TRUE);
            END;
        TaxInv:=TRUE;
        RemAmt:=OldVendLedgEntry."Amount to Apply";
        RemAmtWht:=OldVendLedgEntry."Remaining Amount";
        TransferVendLedgEntry(OldCVLedgEntryBuf,TempOldVendLedgEntry,FALSE);

        OldVendLedgEntry := TempOldVendLedgEntry;
        OldVendLedgEntry."Rem. Amt for WHT" := RemAmt;
        OldVendLedgEntry."Rem. Amt" := RemAmtWht;
        // OldVendLedgEntry."Applies-to ID" := '';
        OldVendLedgEntry."Amount to Apply" := 0;
        OldVendLedgEntry.MODIFY;

        GenJnlLine1.RESET;
        GLSetup.GET;
        SourceCodeSetup.GET;
        IF GLSetup."Enable WHT" THEN
        IF GenJnlLine."Source Code"=SourceCodeSetup."Purchase Entry Application" THEN
          IF (GenJnlLine."Applies-to Doc. No."<>'') OR (GenJnlLine."Applies-to ID"<>'') THEN BEGIN
            GenJnlLine1.COPY(GenJnlLine);
            GenJnlLine1.VALIDATE(Amount,AppliedAmount);
            GenJnlLine1."WHT Entry No.":=NextEntryNo;
            IF (NOT GenJnlLine."Skip WHT") THEN BEGIN
              KeepWHTEntryNo := NextWHTEntryNo;
              CASE GenJnlLine1."Document Type" OF
                GenJnlLine1."Document Type"::Payment:
                  BEGIN
                    NextNo := WHTManagement.ApplyVendInvoiceWHTPosted(VendLedgEntry,GenJnlLine1,NextTransactionNo);
                    IF NextWHTEntryNo <> -1 THEN
                      HadWHTEntryNo := TRUE
                    ELSE
                      NextWHTEntryNo := KeepWHTEntryNo;
                    WHTEntry.SETRANGE("Original Document No.",GenJnlLine."Document No.");
                    IF WHTEntry.FIND('-') THEN
                      IF WHTPostingSetup.GET(
                           WHTEntry."WHT Bus. Posting Group",
                           WHTEntry."WHT Prod. Posting Group")
                      THEN
                        IF (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Payment)
                        THEN BEGIN
                          REPEAT
                            GenJnlLine1.COPY(GenJnlLine);
                            GenJnlLine1.Amount := WHTEntry.Amount;
                            GenJnlLine1."Amount (LCY)" := WHTEntry."Amount (LCY)";
                            InsertWHTPostingBufferPosted(WHTEntry,GenJnlLine1,TRUE,1);
                          UNTIL WHTEntry.NEXT=0;
                          NextWHTEntryNo := WHTEntry."Entry No." + 1;
                        END;
                  END;
              END;
            END;
          END;

        IF GLSetup."Unrealized VAT" OR
          (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
        THEN
          IF (TempOldVendLedgEntry."Document Type" IN
               [TempOldVendLedgEntry."Document Type"::Invoice,
                TempOldVendLedgEntry."Document Type"::"Credit Memo",
                TempOldVendLedgEntry."Document Type"::"Finance Charge Memo",
                TempOldVendLedgEntry."Document Type"::Reminder])
          THEN BEGIN
            IF TempOldVendLedgEntry."Currency Code" <> NewCVLedgEntryBuf."Currency Code" THEN BEGIN
              TempOldVendLedgEntry."Remaining Amount" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Amount",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Remaining Pmt. Disc. Possible" :=
                ExchAmount(
                  TempOldVendLedgEntry."Remaining Pmt. Disc. Possible",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Accepted Payment Tolerance" :=
                ExchAmount(
                  TempOldVendLedgEntry."Accepted Payment Tolerance",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
              TempOldVendLedgEntry."Amount to Apply" :=
                ExchAmount(
                  TempOldVendLedgEntry."Amount to Apply",NewCVLedgEntryBuf."Currency Code",
                  TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");

            END;
            VendUnrealizedVAT(
              TempOldVendLedgEntry,
              ExchAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          END;

        TempOldVendLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldVendLedgEntry.GETFILTER(TempOldVendLedgEntry.Positive) <> '' THEN BEGIN
            IF TempOldVendLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldVendLedgEntry.SETRANGE(Positive);
              TempOldVendLedgEntry.FIND('-');
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldVendLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          END ELSE BEGIN
            IF NewCVLedgEntryBuf.Open THEN BEGIN
              Completed := TempOldVendLedgEntry.NEXT = 0;
            END ELSE
              Completed := TRUE;
          END;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("Cust. Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)", Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF GLSetup."Unrealized VAT" OR
        (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF (NewCVLedgEntryBuf."Document Type" IN
             [NewCVLedgEntryBuf."Document Type"::Invoice,
              NewCVLedgEntryBuf."Document Type"::"Credit Memo",
              NewCVLedgEntryBuf."Document Type"::"Finance Charge Memo",
              NewCVLedgEntryBuf."Document Type"::Reminder]) AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          TransferVendLedgEntry(NewCVLedgEntryBuf,NewVendLedgEntry,FALSE);
          CheckUnrealizedVend := TRUE;
          UnrealizedVendLedgEntry := NewVendLedgEntry;
          UnrealizedRemainingAmountVend := -(NewRemainingAmtBeforeAppln - NewVendLedgEntry."Remaining Amount");
        END;
    END;

    PROCEDURE VendPostApplyVendLedgEntry@41(VAR GenJnlLinePostApply@1000 : Record 81;VAR VendLedgEntryPostApply@1001 : Record 25);
    VAR
      LedgEntryDim@1002 : Record 355;
      VendLedgEntry@1006 : Record 25;
      DtldVendLedgEntry@1003 : Record 380;
      DtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      GenJnlLine."Source Currency Code" := VendLedgEntryPostApply."Currency Code";
      GenJnlLine."Applies-to ID" := VendLedgEntryPostApply."Applies-to ID";
      VendLedgEntry.TRANSFERFIELDS(VendLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.",VendLedgEntry."Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim);

        InitCodeUnit;

        IF Vend."No." <> VendLedgEntry."Vendor No." THEN
          Vend.GET(VendLedgEntry."Vendor No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.TESTFIELD("Payables Account");

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        // Post the application
        VendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,TRUE);
        ApplyVendLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision");
        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,FALSE);
        VendLedgEntry."Applies-to ID":='';
        VendLedgEntry.MODIFY;

       SourceCodeSetup.GET;
       IF GenJnlLine."Source Code" = SourceCodeSetup."Purchase Entry Application" THEN BEGIN
         VendLedgEntry.RESET;
         VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
         IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
           VendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
           IF VendLedgEntry.FIND('-') THEN
             VendLedgEntry.MODIFYALL("Applies-to ID",'');
         END;
       END;

        // Post Dtld vendor entry
        PostDtldVendLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,NextTransactionNo,FALSE);
        FinishCodeunit;
      END;
    END;

    PROCEDURE UnapplyVendLedgEntry@64(GenJnlLine2@1003 : Record 81;DtldVendLedgEntry@1002 : Record 380;VoidCheck@1500001 : Boolean);
    VAR
      DtldVendLedgEntry2@1012 : Record 380;
      NewDtldVendLedgEntry@1011 : Record 380;
      VendLedgEntry@1010 : Record 25;
      DtldCVLedgEntryBuf@1009 : Record 383;
      VATEntry@1008 : Record 254;
      NewVATEntry@1007 : Record 254;
      VATPostingSetup@1006 : Record 325;
      LedgEntryDim@1005 : Record 355;
      GenPostingSetup@1014 : Record 252;
      TotalAmountLCY@1004 : Decimal;
      TotalAmountAddCurr@1001 : Decimal;
      NextDtldLedgEntryEntryNo@1000 : Integer;
      UnapplyVATEntries@1013 : Boolean;
      DebitAddjustment@1018 : Decimal;
      DebitAddjustmentAddCurr@1017 : Decimal;
      CreditAddjustment@1016 : Decimal;
      CreditAddjustmentAddCurr@1015 : Decimal;
      NewWHTEntry@1500000 : Record 28044;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      InitCodeUnit;

      IF Vend."No." <> DtldVendLedgEntry."Vendor No." THEN
        Vend.GET(DtldVendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,0,TRUE);

      VendPostingGr.GET(GenJnlLine."Posting Group");
      VendPostingGr.TESTFIELD("Payables Account");

      VATEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;

      DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::Application);

      DtldVendLedgEntry2.RESET;
      DtldVendLedgEntry2.FINDLAST;
      NextDtldLedgEntryEntryNo := DtldVendLedgEntry2."Entry No." + 1;
      DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
      DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
      DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      DtldVendLedgEntry2.FINDSET;
      REPEAT
        DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);

        NewDtldVendLedgEntry := DtldVendLedgEntry2;
        NewDtldVendLedgEntry."Entry No." := NextDtldLedgEntryEntryNo;
        NewDtldVendLedgEntry."Posting Date" := GenJnlLine."Posting Date";
        NewDtldVendLedgEntry."Transaction No." := NextTransactionNo;
        NewDtldVendLedgEntry.Amount := -DtldVendLedgEntry2.Amount;
        NewDtldVendLedgEntry."Amount (LCY)" := -DtldVendLedgEntry2."Amount (LCY)";
        NewDtldVendLedgEntry."Debit Amount" := -DtldVendLedgEntry2."Debit Amount";
        NewDtldVendLedgEntry."Credit Amount" := -DtldVendLedgEntry2."Credit Amount";
        NewDtldVendLedgEntry."Debit Amount (LCY)" := -DtldVendLedgEntry2."Debit Amount (LCY)";
        NewDtldVendLedgEntry."Credit Amount (LCY)" := -DtldVendLedgEntry2."Credit Amount (LCY)";
        NewDtldVendLedgEntry.Unapplied := TRUE;
        NewDtldVendLedgEntry."Unapplied by Entry No." := DtldVendLedgEntry2."Entry No.";
        NewDtldVendLedgEntry."Document No." := GenJnlLine."Document No.";
        NewDtldVendLedgEntry."Source Code" := GenJnlLine."Source Code";
        NewDtldVendLedgEntry."User ID" := USERID;
        NewDtldVendLedgEntry.INSERT;
        NextDtldLedgEntryEntryNo := NextDtldLedgEntryEntryNo + 1;

        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.",DtldVendLedgEntry2."Vendor Ledger Entry No.");
        TempJnlLineDim.RESET;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);

        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldVendLedgEntry);
        DtldCVLedgEntryBuf."Additional-Currency Amount" :=
          CalcAddCurrForUnapplication(DtldCVLedgEntryBuf."Posting Date",DtldCVLedgEntryBuf."Amount (LCY)");
        IF DtldVendLedgEntry2."Entry Type" IN [
          DtldVendLedgEntry2."Entry Type"::"Payment Discount (VAT Excl.)",
          DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Excl.)",
          DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]
        THEN BEGIN
          VATEntry.SETRANGE("Transaction No.",DtldVendLedgEntry2."Transaction No.");
          VATEntry.SETRANGE("VAT Bus. Posting Group",DtldVendLedgEntry2."VAT Bus. Posting Group");
          VATEntry.SETRANGE("VAT Prod. Posting Group",DtldVendLedgEntry2."VAT Prod. Posting Group");
          IF VATEntry.FINDFIRST THEN
            DtldCVLedgEntryBuf."VAT Amount (LCY)" := VATEntry.Amount;
          CLEAR(VATEntry);
        END;
        TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)";
        TotalAmountAddCurr := TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";
        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
          DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
          DtldCVLedgEntryBuf."Entry Type"::Application]) THEN
          CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
            CreditAddjustment,CreditAddjustmentAddCurr,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");
        AutoEntrForDtldVendLedgEntries(DtldCVLedgEntryBuf);

        DtldVendLedgEntry2.Unapplied := TRUE;
        DtldVendLedgEntry2."Unapplied by Entry No." := NewDtldVendLedgEntry."Entry No.";
        DtldVendLedgEntry2.MODIFY;

        IF DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::Application THEN BEGIN
          VendLedgEntry.GET(DtldVendLedgEntry2."Vendor Ledger Entry No.");
          VendLedgEntry."Remaining Pmt. Disc. Possible" := DtldVendLedgEntry2."Remaining Pmt. Disc. Possible";
          VendLedgEntry."Max. Payment Tolerance" := DtldVendLedgEntry2."Max. Payment Tolerance";
          VendLedgEntry."Accepted Payment Tolerance" := 0;
          IF NOT VendLedgEntry.Open THEN BEGIN
            VendLedgEntry.Open := TRUE;
            VendLedgEntry."Closed by Entry No." := 0;
            VendLedgEntry."Closed at Date" := 0D;
            VendLedgEntry."Closed by Amount" := 0;
            VendLedgEntry."Closed by Amount (LCY)" := 0;
            VendLedgEntry."Closed by Currency Code" := '';
            VendLedgEntry."Closed by Currency Amount" := 0;
            VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
            VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
          END;
          VendLedgEntry.MODIFY;
        END;
      UNTIL DtldVendLedgEntry2.NEXT = 0;

      IF (TotalAmountLCY <> 0) OR
         (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
      THEN BEGIN
        HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
          TotalAmountLCY,TotalAmountAddCurr,VendPostingGr."Payables Account");
        InsertGLEntry(TRUE);
      END;

      UnapplyVATEntries := FALSE;
      IF DtldVendLedgEntry2.FINDSET THEN
        REPEAT
          IF (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Discount (VAT Adjustment)") OR
             (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Tolerance (VAT Adjustment)") OR
             (DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)")
          THEN
            UnapplyVATEntries := TRUE
        UNTIL DtldVendLedgEntry2.NEXT = 0;

      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntry.Type::Purchase);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",DtldVendLedgEntry."Vendor No.");
      VATEntry.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      IF VATEntry.FINDSET(FALSE,FALSE) THEN BEGIN
        VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
        IF (VATPostingSetup."Adjust for Payment Discount") AND
           (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type" :: "Reverse Charge VAT")
        THEN
          UnapplyVATEntries := TRUE;
        REPEAT
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            NewVATEntry := VATEntry;
            NewVATEntry."Closed by Entry No." := 0;
            NewVATEntry.Closed := FALSE;
            NewVATEntry.Base := -VATEntry.Base;
            NewVATEntry.Amount := -VATEntry.Amount;
            NewVATEntry."Unrealized Amount" := -VATEntry."Unrealized Amount";
            NewVATEntry."Unrealized Base" := -VATEntry."Unrealized Base";
            NewVATEntry."Remaining Unrealized Amount" := -VATEntry."Remaining Unrealized Amount";
            NewVATEntry."Remaining Unrealized Base" := -VATEntry."Remaining Unrealized Base";
            NewVATEntry."Additional-Currency Amount" := -VATEntry."Additional-Currency Amount";
            NewVATEntry."Additional-Currency Base" := -VATEntry."Additional-Currency Base";
            NewVATEntry."Add.-Currency Unrealized Amt." := -VATEntry."Add.-Currency Unrealized Amt.";
            NewVATEntry."Add.-Currency Unrealized Base" := -VATEntry."Add.-Currency Unrealized Base";
            NewVATEntry."Add.-Curr. Rem. Unreal. Amount" := -VATEntry."Add.-Curr. Rem. Unreal. Amount";
            NewVATEntry."Add.-Curr. Rem. Unreal. Base" := -VATEntry."Add.-Curr. Rem. Unreal. Base";
            NewVATEntry."User ID" := USERID;
            NewVATEntry."Transaction No." := NextTransactionNo;
            NewVATEntry."Entry No." := NextVATEntryNo;
            NextVATEntryNo := NextVATEntryNo + 1;
            NewVATEntry.INSERT;
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT"]
              THEN BEGIN
                VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                VATPostingSetup.TESTFIELD("Purchase VAT Account");
                PostUnrealVATByUnapply(
                  VATPostingSetup."Purch. VAT Unreal. Account",
                  VATPostingSetup."Purchase VAT Account",
                  VATEntry,NewVATEntry);
              END ELSE
                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                  VATPostingSetup.TESTFIELD("Purchase VAT Account");
                  PostUnrealVATByUnapply(
                    VATPostingSetup."Purch. VAT Unreal. Account",
                    VATPostingSetup."Purchase VAT Account",
                    VATEntry,NewVATEntry);

                  VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                  VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Unreal. Acc.");

                  InitGLEntry(VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.",-VATEntry.Amount,0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" :=
                    CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
                  InsertGLEntry(TRUE);

                  InitGLEntry(VATPostingSetup."Reverse Chrg. VAT Acc.",VATEntry.Amount,0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" :=
                    CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
                  InsertGLEntry(TRUE)
                END ELSE BEGIN
                  VATEntry.TESTFIELD("Tax Jurisdiction Code");
                  TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
                  TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                  TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                  PostUnrealVATByUnapply(
                    TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
                    TaxJurisdiction."Tax Account (Purchases)",
                    VATEntry,NewVATEntry);
                END;
            END;
            IF (VATPostingSetup."Adjust for Payment Discount") AND
               (VATPostingSetup."VAT Calculation Type" =
                 VATPostingSetup."VAT Calculation Type" :: "Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0)
            THEN BEGIN
              VATPostingSetup.TESTFIELD("Purchase VAT Account");
              GenPostingSetup.GET(VATEntry."Gen. Bus. Posting Group",VATEntry."Gen. Prod. Posting Group");
              PostPmtDiscountVATByUnapply(
                VATPostingSetup."Reverse Chrg. VAT Acc.",
                VATPostingSetup."Purchase VAT Account",
                VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
      END;

      WHTEntry.SETCURRENTKEY("Transaction Type","Bill-to/Pay-to No.","Transaction No.");
      WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
      WHTEntry.SETRANGE("Bill-to/Pay-to No.",DtldVendLedgEntry."Vendor No.");
      WHTEntry.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      IF WHTEntry.FIND('-') THEN
        REPEAT
          NewWHTEntry := WHTEntry;
          NewWHTEntry."Closed by Entry No." := 0;
          NewWHTEntry.Closed := FALSE;
          NewWHTEntry.Base := -WHTEntry.Base;
      //YIMMNWHTR
          NewWHTEntry."Area Code" := WHTEntry."Area Code";
      //YIMMNWHTR
          NewWHTEntry.Amount := -WHTEntry.Amount;
          NewWHTEntry."Base (LCY)" := -WHTEntry."Base (LCY)";
          NewWHTEntry."Amount (LCY)" := -WHTEntry."Amount (LCY)";
          NewWHTEntry."Unrealized Amount" := -WHTEntry."Unrealized Amount";
          NewWHTEntry."Unrealized Base" := -WHTEntry."Unrealized Base";
          NewWHTEntry."Remaining Unrealized Amount" := -WHTEntry."Remaining Unrealized Amount";
          NewWHTEntry."Remaining Unrealized Base" := -WHTEntry."Remaining Unrealized Base";
          NewWHTEntry."Rem Unrealized Amount (LCY)":=-WHTEntry."Rem Unrealized Amount (LCY)";
          NewWHTEntry."Rem Unrealized Base (LCY)":=-WHTEntry."Rem Unrealized Base (LCY)";
          NewWHTEntry."Original Document No.":=WHTEntry."Document No.";
          NewWHTEntry."Transaction No." := NextTransactionNo;
          NewWHTEntry."Entry No." := NextWHTEntryNo;
          NextWHTEntryNo := NextWHTEntryNo + 1;
          NewWHTEntry.INSERT;
          IF WHTEntry."Unrealized WHT Entry No." <> 0 THEN BEGIN
            WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
            IF NOT VoidCheck THEN BEGIN
              GenJnlLine1.COPY(GenJnlLine);
              GenJnlLine1.Amount := -WHTEntry.Amount;
              GenJnlLine1."Amount (LCY)" := -WHTEntry."Amount (LCY)";
              InsertWHTPostingBufferPosted(WHTEntry,GenJnlLine1,FALSE,1);
            END ELSE BEGIN
              IF GLSetup."Enable GST (Australia)" THEN
                IF GenJnlLine."Bill-to/Pay-to No."='' THEN BEGIN
                  Vend.GET(GenJnlLine."Account No.");
                  IF Vend.ABN<>'' THEN
                    EXIT;
                END ELSE BEGIN
                  Vend.GET(GenJnlLine."Bill-to/Pay-to No.");
                  IF Vend.ABN<>'' THEN
                    EXIT;
                END;
              IF (WHTEntry."Amount (LCY)" <> 0) THEN BEGIN
                WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                InitGLEntry(WHTPostingSetup."Payable WHT Account Code",WHTEntry."Amount (LCY)",0,FALSE,TRUE);
                InsertGLEntry(TRUE);
              END;
            END;

            TempWHTEntry.RESET;
            TempWHTEntry.SETRANGE("Entry No.",WHTEntry."Unrealized WHT Entry No.");
            IF TempWHTEntry.FIND('-') THEN BEGIN
              TempWHTEntry."Remaining Unrealized Amount":=TempWHTEntry."Remaining Unrealized Amount"+WHTEntry.Amount;
              TempWHTEntry."Remaining Unrealized Base":=TempWHTEntry."Remaining Unrealized Base"+WHTEntry.Base;
              TempWHTEntry."Rem Unrealized Amount (LCY)":=TempWHTEntry."Rem Unrealized Amount (LCY)"+WHTEntry."Amount (LCY)";
              TempWHTEntry."Rem Unrealized Base (LCY)":=TempWHTEntry."Rem Unrealized Base (LCY)"+WHTEntry."Base (LCY)";
              TempWHTEntry.Closed:=FALSE;
              TempWHTEntry.MODIFY;
            END;
          END;
          WHTEntry."Original Document No.":=NewWHTEntry."Document No.";
          WHTEntry.MODIFY;
        UNTIL WHTEntry.NEXT = 0;

      IF NOT VoidCheck THEN
      IF NOT GLEntryTmp.FINDFIRST THEN BEGIN
        InitGLEntry(VendPostingGr."Payables Account",0,0,FALSE,TRUE);
        InsertGLEntry(FALSE);
      END;

      FinishCodeunit;
    END;

    PROCEDURE TransferVendLedgEntry@5(VAR CVLedgEntryBuf@1000 : Record 382;VAR VendLedgEntry@1001 : Record 25;VendToCV@1002 : Boolean);
    BEGIN
      IF VendToCV THEN BEGIN
        CVLedgEntryBuf."Entry No." := VendLedgEntry."Entry No.";
        CVLedgEntryBuf."CV No." := VendLedgEntry."Vendor No.";
        CVLedgEntryBuf."Posting Date" := VendLedgEntry."Posting Date";
        CVLedgEntryBuf."Document Type" := VendLedgEntry."Document Type";
        CVLedgEntryBuf."Document No." := VendLedgEntry."Document No.";
        CVLedgEntryBuf.Description := VendLedgEntry.Description;
        CVLedgEntryBuf."Currency Code" := VendLedgEntry."Currency Code";
        CVLedgEntryBuf.Amount := VendLedgEntry.Amount;
        CVLedgEntryBuf."Remaining Amount" := VendLedgEntry."Remaining Amount";
        CVLedgEntryBuf."Original Amount" := VendLedgEntry."Original Amount";
        CVLedgEntryBuf."Original Amt. (LCY)" := VendLedgEntry."Original Amt. (LCY)";
        CVLedgEntryBuf."Remaining Amt. (LCY)" := VendLedgEntry."Remaining Amt. (LCY)";
        CVLedgEntryBuf."Amount (LCY)" := VendLedgEntry."Amount (LCY)";
        CVLedgEntryBuf."Sales/Purchase (LCY)" := VendLedgEntry."Purchase (LCY)";
        CVLedgEntryBuf."Inv. Discount (LCY)" := VendLedgEntry."Inv. Discount (LCY)";
        CVLedgEntryBuf."Bill-to/Pay-to CV No." := VendLedgEntry."Buy-from Vendor No.";
        CVLedgEntryBuf."CV Posting Group" := VendLedgEntry."Vendor Posting Group";
        CVLedgEntryBuf."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
        CVLedgEntryBuf."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
        CVLedgEntryBuf."Salesperson Code" := VendLedgEntry."Purchaser Code";
        CVLedgEntryBuf."User ID" := VendLedgEntry."User ID";
      //YIMMNTTST
        CVLedgEntryBuf."Kwitansi No.":=GenJnlLine."Kwitansi No.";
        CVLedgEntryBuf."Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
        CVLedgEntryBuf."Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
        CVLedgEntryBuf."Tax Invoice No.":=GenJnlLine."Tax Invoice No.";
        CVLedgEntryBuf."Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
        CVLedgEntryBuf.Narration:=GenJnlLine.Narration;
      //YIMMNTTEN

      //YIMMNNPWPST
       CVLedgEntryBuf."Ship-to Code":=GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN
       CVLedgEntryBuf."Ship-to Address":=GenJnlLine."Ship-to Address";
       CVLedgEntryBuf."Ship-to Address 2":=GenJnlLine."Ship-to Address 2";


        CVLedgEntryBuf."Source Code" := VendLedgEntry."Source Code";
        CVLedgEntryBuf."On Hold" := VendLedgEntry."On Hold";
        CVLedgEntryBuf."Applies-to Doc. Type" := VendLedgEntry."Applies-to Doc. Type";
        CVLedgEntryBuf."Applies-to Doc. No." := VendLedgEntry."Applies-to Doc. No.";
        CVLedgEntryBuf.Open := VendLedgEntry.Open;
        CVLedgEntryBuf."Due Date" := VendLedgEntry."Due Date" ;
        CVLedgEntryBuf."Pmt. Discount Date" := VendLedgEntry."Pmt. Discount Date";
        CVLedgEntryBuf."Original Pmt. Disc. Possible" := VendLedgEntry."Original Pmt. Disc. Possible";
        CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := VendLedgEntry."Remaining Pmt. Disc. Possible";
        CVLedgEntryBuf."Pmt. Disc. Given (LCY)" := VendLedgEntry."Pmt. Disc. Rcd.(LCY)";
        CVLedgEntryBuf.Positive := VendLedgEntry.Positive;
        CVLedgEntryBuf."Closed by Entry No." := VendLedgEntry."Closed by Entry No.";
        CVLedgEntryBuf."Closed at Date" := VendLedgEntry."Closed at Date";
        CVLedgEntryBuf."Closed by Amount" := VendLedgEntry."Closed by Amount";
        CVLedgEntryBuf."Applies-to ID" := VendLedgEntry."Applies-to ID";
        CVLedgEntryBuf."Journal Batch Name" := VendLedgEntry."Journal Batch Name";
        CVLedgEntryBuf."Reason Code" := VendLedgEntry."Reason Code";
        CVLedgEntryBuf."Bal. Account Type" := VendLedgEntry."Bal. Account Type";
        CVLedgEntryBuf."Bal. Account No." := VendLedgEntry."Bal. Account No.";
        CVLedgEntryBuf."Transaction No." := VendLedgEntry."Transaction No.";
        CVLedgEntryBuf."Closed by Amount (LCY)" := VendLedgEntry."Closed by Amount (LCY)";
        CVLedgEntryBuf."Debit Amount" := VendLedgEntry."Debit Amount";
        CVLedgEntryBuf."Credit Amount" := VendLedgEntry."Credit Amount";
        CVLedgEntryBuf."Debit Amount (LCY)" := VendLedgEntry."Debit Amount (LCY)";
        CVLedgEntryBuf."Credit Amount (LCY)" := VendLedgEntry."Credit Amount (LCY)";
        CVLedgEntryBuf."Document Date" := VendLedgEntry."Document Date";
        CVLedgEntryBuf."External Document No." := VendLedgEntry."External Document No.";
        CVLedgEntryBuf."No. Series" := VendLedgEntry."No. Series";
        CVLedgEntryBuf."Closed by Currency Code" := VendLedgEntry."Closed by Currency Code";
        CVLedgEntryBuf."Closed by Currency Amount" := VendLedgEntry."Closed by Currency Amount";
        CVLedgEntryBuf."Adjusted Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
        CVLedgEntryBuf."Original Currency Factor" := VendLedgEntry."Original Currency Factor";
        CVLedgEntryBuf."Pmt. Disc. Tolerance Date" := VendLedgEntry."Pmt. Disc. Tolerance Date";
        CVLedgEntryBuf."Max. Payment Tolerance" := VendLedgEntry."Max. Payment Tolerance";
        CVLedgEntryBuf."Accepted Payment Tolerance" := VendLedgEntry."Accepted Payment Tolerance";
        CVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := VendLedgEntry."Accepted Pmt. Disc. Tolerance";
        CVLedgEntryBuf."Amount to Apply" := VendLedgEntry."Amount to Apply";
        CVLedgEntryBuf.Prepayment := VendLedgEntry.Prepayment;
      END ELSE BEGIN
        VendLedgEntry."Entry No." := CVLedgEntryBuf."Entry No.";
        VendLedgEntry."Vendor No." := CVLedgEntryBuf."CV No.";
        VendLedgEntry."Posting Date" := CVLedgEntryBuf."Posting Date";
        VendLedgEntry."Document Type" := CVLedgEntryBuf."Document Type";
        VendLedgEntry."Document No." := CVLedgEntryBuf."Document No.";
        VendLedgEntry.Description := CVLedgEntryBuf.Description;
        VendLedgEntry."Currency Code" := CVLedgEntryBuf."Currency Code";
        VendLedgEntry.Amount := CVLedgEntryBuf.Amount;
        VendLedgEntry."Remaining Amount" := CVLedgEntryBuf."Remaining Amount";
        VendLedgEntry."Original Amount" := CVLedgEntryBuf."Original Amount";
        VendLedgEntry."Original Amt. (LCY)" := CVLedgEntryBuf."Original Amt. (LCY)";
        VendLedgEntry."Remaining Amt. (LCY)" := CVLedgEntryBuf."Remaining Amt. (LCY)";
        VendLedgEntry."Amount (LCY)" := CVLedgEntryBuf."Amount (LCY)";
        VendLedgEntry."Purchase (LCY)" := CVLedgEntryBuf."Sales/Purchase (LCY)";
        VendLedgEntry."Inv. Discount (LCY)" := CVLedgEntryBuf."Inv. Discount (LCY)";
        VendLedgEntry."Buy-from Vendor No." := CVLedgEntryBuf."Bill-to/Pay-to CV No.";
        VendLedgEntry."Vendor Posting Group" := CVLedgEntryBuf."CV Posting Group";
        VendLedgEntry."Global Dimension 1 Code" := CVLedgEntryBuf."Global Dimension 1 Code";
        VendLedgEntry."Global Dimension 2 Code" := CVLedgEntryBuf."Global Dimension 2 Code";
        VendLedgEntry."Purchaser Code" := CVLedgEntryBuf."Salesperson Code";
        VendLedgEntry."User ID" := CVLedgEntryBuf."User ID";

       //YIMMNTTST
        VendLedgEntry."Kwitansi No.":=GenJnlLine."Kwitansi No.";
        VendLedgEntry."Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
        VendLedgEntry."Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
        VendLedgEntry."Tax Invoice No.":= GenJnlLine."Tax Invoice No.";
        VendLedgEntry."Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
        VendLedgEntry.Narration:=GenJnlLine.Narration;
       //YIMMNTTEN

      //YIMMNNPWPST
        VendLedgEntry."Order Address Code" := GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN

        VendLedgEntry."Source Code" := CVLedgEntryBuf."Source Code";
        VendLedgEntry."On Hold" := CVLedgEntryBuf."On Hold";
        VendLedgEntry."Applies-to Doc. Type" := CVLedgEntryBuf."Applies-to Doc. Type";
        VendLedgEntry."Applies-to Doc. No." := CVLedgEntryBuf."Applies-to Doc. No.";
        VendLedgEntry.Open := CVLedgEntryBuf.Open;
        VendLedgEntry."Due Date" := CVLedgEntryBuf."Due Date" ;
        VendLedgEntry."Pmt. Discount Date" := CVLedgEntryBuf."Pmt. Discount Date";
        VendLedgEntry."Original Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        VendLedgEntry."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Remaining Pmt. Disc. Possible";
        VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := CVLedgEntryBuf."Pmt. Disc. Given (LCY)";
        VendLedgEntry.Positive := CVLedgEntryBuf.Positive;
        VendLedgEntry."Closed by Entry No." := CVLedgEntryBuf."Closed by Entry No.";
        VendLedgEntry."Closed at Date" := CVLedgEntryBuf."Closed at Date";
        VendLedgEntry."Closed by Amount" := CVLedgEntryBuf."Closed by Amount";
        VendLedgEntry."Applies-to ID" := CVLedgEntryBuf."Applies-to ID";
        VendLedgEntry."Journal Batch Name" := CVLedgEntryBuf."Journal Batch Name";
        VendLedgEntry."Reason Code" := CVLedgEntryBuf."Reason Code";
        VendLedgEntry."Bal. Account Type" := CVLedgEntryBuf."Bal. Account Type";
        VendLedgEntry."Bal. Account No." := CVLedgEntryBuf."Bal. Account No.";
        VendLedgEntry."Transaction No." := CVLedgEntryBuf."Transaction No.";
        VendLedgEntry."Closed by Amount (LCY)" := CVLedgEntryBuf."Closed by Amount (LCY)";
        VendLedgEntry."Debit Amount" := CVLedgEntryBuf."Debit Amount";
        VendLedgEntry."Credit Amount" := CVLedgEntryBuf."Credit Amount";
        VendLedgEntry."Debit Amount (LCY)" := CVLedgEntryBuf."Debit Amount (LCY)";
        VendLedgEntry."Credit Amount (LCY)" := CVLedgEntryBuf."Credit Amount (LCY)";
        VendLedgEntry."Document Date" := CVLedgEntryBuf."Document Date";
        VendLedgEntry."External Document No." := CVLedgEntryBuf."External Document No.";
        VendLedgEntry."No. Series" := CVLedgEntryBuf."No. Series";
        VendLedgEntry."Closed by Currency Code" := CVLedgEntryBuf."Closed by Currency Code";
        VendLedgEntry."Closed by Currency Amount" := CVLedgEntryBuf."Closed by Currency Amount";
        VendLedgEntry."Adjusted Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";
        VendLedgEntry."Original Currency Factor" := CVLedgEntryBuf."Original Currency Factor";
        VendLedgEntry."Pmt. Disc. Tolerance Date" := CVLedgEntryBuf."Pmt. Disc. Tolerance Date";
        VendLedgEntry."Max. Payment Tolerance" := CVLedgEntryBuf."Max. Payment Tolerance";
        VendLedgEntry."Accepted Payment Tolerance" := CVLedgEntryBuf."Accepted Payment Tolerance";
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := CVLedgEntryBuf."Accepted Pmt. Disc. Tolerance";
        VendLedgEntry."Pmt. Tolerance (LCY)" := CVLedgEntryBuf."Pmt. Tolerance (LCY)";
        VendLedgEntry."Amount to Apply" := CVLedgEntryBuf."Amount to Apply";
        VendLedgEntry.Prepayment := CVLedgEntryBuf.Prepayment;
      END;
    END;

    PROCEDURE PostDtldVendLedgEntries@32(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1002 : Record 93;NextTransactionNo@1003 : Integer;VendLedgEntryInserted@1011 : Boolean);
    VAR
      DtldVendLedgEntry@1004 : Record 380;
      Currency@1006 : Record 4;
      GenPostingSetup@1007 : Record 252;
      TotalAmountLCY@1008 : Decimal;
      TotalAmountAddCurr@1009 : Decimal;
      PaymentDiscAcc@1010 : Code[20];
      DtldVendLedgEntryNoOffset@1005 : Integer;
      PaymentTolAcc@1012 : Code[20];
      SaveEntryNo@1013 : Integer;
      DebitAddjustment@1014 : Decimal;
      DebitAddjustmentAddCurr@1015 : Decimal;
      CreditAddjustment@1016 : Decimal;
      CreditAddjustmentAddCurr@1017 : Decimal;
    BEGIN
      TotalAmountLCY := 0;
      TotalAmountAddCurr := 0;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
        IF DtldVendLedgEntry.FINDLAST THEN
          DtldVendLedgEntryNoOffset := DtldVendLedgEntry."Entry No."
        ELSE
          DtldVendLedgEntryNoOffset := 0;

        DtldCVLedgEntryBuf.RESET;
        IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
          IF VendLedgEntryInserted THEN BEGIN
            SaveEntryNo := NextEntryNo;
            NextEntryNo := NextEntryNo + 1;
          END;
          REPEAT
            CLEAR(DtldVendLedgEntry);
            DtldVendLedgEntry.TRANSFERFIELDS(DtldCVLedgEntryBuf);
            DtldVendLedgEntry."Entry No." :=
              DtldVendLedgEntryNoOffset + DtldCVLedgEntryBuf."Entry No.";
            DtldVendLedgEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
            DtldVendLedgEntry."Reason Code" := GenJnlLine."Reason Code";
            DtldVendLedgEntry."Source Code" := GenJnlLine."Source Code";
            DtldVendLedgEntry."Transaction No." := NextTransactionNo;
            DtldVendLedgEntry."Document Date" := GenJnlLine."Document Date";
      //YIMMNTTST
            DtldVendLedgEntry."Kwitansi No.":=GenJnlLine."Kwitansi No.";
            DtldVendLedgEntry."Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
            DtldVendLedgEntry."Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
            DtldVendLedgEntry."Tax Invoice No.":=GenJnlLine."Tax Invoice No.";
            DtldVendLedgEntry."Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
            DtldVendLedgEntry.Narration:=GenJnlLine.Narration;

      //YIMMNTTEN

            VendUpdateDebitCredit(GenJnlLine.Correction,DtldVendLedgEntry);
            DtldVendLedgEntry.INSERT;

            TotalAmountLCY := TotalAmountLCY + DtldCVLedgEntryBuf."Amount (LCY)" - WHTAmountLCY;
            TotalAmountAddCurr :=
              TotalAmountAddCurr + DtldCVLedgEntryBuf."Additional-Currency Amount";

            // Post automatic entries.
            IF (DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
               ((GLSetup."Additional Reporting Currency" <> '') AND
                (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
            THEN
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
                DtldCVLedgEntryBuf."Entry Type"::Application:;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Losses Acc.");
                    InitGLEntry(
                      Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Unrealized Gains Acc.");
                    InitGLEntry(
                      Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Losses Acc.");
                    InitGLEntry(
                      Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
                  BEGIN
                    IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
                      IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                        CLEAR(Currency)
                      ELSE
                        Currency.GET(DtldCVLedgEntryBuf."Currency Code");
                    END;
                    CheckNonAddCurrCodeOccurred(Currency.Code);
                    Currency.TESTFIELD("Realized Gains Acc.");
                    InitGLEntry(
                      Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
                      TRUE);

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
                  BEGIN
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                      PaymentDiscAcc := VendPostingGr."Payment Disc. Debit Acc.";
                    END ELSE BEGIN
                      VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                      PaymentDiscAcc := VendPostingGr."Payment Disc. Credit Acc.";
                    END;
                    InitGLEntry(
                      PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                      GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                    END ELSE BEGIN
                      GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                      PaymentDiscAcc := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                    END;
                    InitGLEntry(PaymentDiscAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        VendPostingGr."Debit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                      InitGLEntry(
                        VendPostingGr."Credit Curr. Appln. Rndg. Acc.",
                        -DtldCVLedgEntryBuf."Amount (LCY)",
                        -DtldCVLedgEntryBuf."Additional-Currency Amount",
                        TRUE,TRUE);
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
                  BEGIN
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Debit Rounding Account");
                      InitGLEntry(
                        VendPostingGr."Debit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                    IF -DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                      VendPostingGr.TESTFIELD("Credit Rounding Account");
                      InitGLEntry(
                        VendPostingGr."Credit Rounding Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                        0,FALSE,TRUE);
                      GLEntry."Additional-Currency Amount" := 0;

                      CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                        CreditAddjustment,CreditAddjustmentAddCurr,
                        GLEntry.Amount,GLEntry."Additional-Currency Amount");
                      InsertGLEntry(TRUE);
                    END;
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
                  BEGIN
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
                  BEGIN
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Tolerance Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" >= 0) THEN BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Debit Acc.";
                      END ELSE BEGIN
                        VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                        PaymentTolAcc := VendPostingGr."Payment Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(
                      PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",
                      0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" :=
                      -DtldCVLedgEntryBuf."Additional-Currency Amount";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Payment Tolerance Posting" =
                      GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  BEGIN
                    GenPostingSetup.GET(
                      DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
                      DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
                    IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                      END;
                    END ELSE IF GLSetup."Pmt. Disc. Tolerance Posting" =
                      GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts"
                    THEN BEGIN
                      IF (DtldCVLedgEntryBuf."Amount (LCY)" <= 0) THEN BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                      END ELSE BEGIN
                        GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                        PaymentTolAcc := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                      END;
                    END;
                    InitGLEntry(PaymentTolAcc,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                    GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                    GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
                    GLEntry."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type";
                    GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
                    GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
                    GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
                    GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
                    GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
                    GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
                    GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
                    GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";

                    CollectAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,
                      CreditAddjustment,CreditAddjustmentAddCurr,
                      GLEntry.Amount,GLEntry."Additional-Currency Amount");
                    InsertGLEntry(TRUE);
                  END;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
                  BEGIN
                    // The g/l entries for this entry type are posted by the VAT functions.
                  END;
                ELSE
                  DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
              END;

          UNTIL DtldCVLedgEntryBuf.NEXT = 0;
        END;

        IF VendLedgEntryInserted OR (TotalAmountLCY <> 0) OR
           (TotalAmountAddCurr <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
        THEN BEGIN
          IF GenJnlLine."Amount Including VAT (ACY)" <> 0 THEN
            UseVendExchRate := TRUE
          ELSE
            UseVendExchRate := FALSE;
          HandlDtlAddjustment(DebitAddjustment,DebitAddjustmentAddCurr,CreditAddjustment,CreditAddjustmentAddCurr,
            TotalAmountLCY + GenJnlLine."Interest Amount (LCY)",
            TotalAmountAddCurr + GenJnlLine."Interest Amount",
            VendPostingGr."Payables Account");
          IF (GenJnlLine."Gen. Posting Type" = GenJnlLine."Gen. Posting Type"::Settlement) AND
             (GLSetup.GSTEnabled(GenJnlLine."Document Date"))
          THEN
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Settlement;
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          IF VendLedgEntryInserted THEN BEGIN
            GLEntry."Entry No." := SaveEntryNo;
            NextEntryNo := NextEntryNo - 1;
          END;
          InsertGLEntry(TRUE);
          IF GenJnlLine."Interest Amount (LCY)"<>0 THEN BEGIN
            VendPostingGr.TESTFIELD("Interest Account");
            InitGLEntry(
              VendPostingGr."Payables Account",GenJnlLine."Interest Amount (LCY)",GenJnlLine."Interest Amount",TRUE,TRUE);
            GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
            GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
            InsertGLEntry(TRUE);
            InitGLEntry(
              VendPostingGr."Interest Account",-GenJnlLine."Interest Amount (LCY)",-GenJnlLine."Interest Amount",TRUE,TRUE);
            GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
            GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
            InsertGLEntry(TRUE);
          END;
        END;

        IF NOT GLEntryTmp.FINDFIRST AND DtldCVLedgEntryBuf.FINDFIRST THEN BEGIN
          InitGLEntry(VendPostingGr."Payables Account",0,0,FALSE,TRUE);
          InsertGLEntry(FALSE);
        END;
        DtldCVLedgEntryBuf.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE AutoEntrForDtldVendLedgEntries@69(DtldCVLedgEntryBuf@1001 : Record 383);
    VAR
      GenPostingSetup@1005 : Record 252;
      VATPostingSetup@1004 : Record 325;
      TaxJurisdiction@1003 : Record 320;
      AccNo@1002 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         ((GLSetup."Additional Reporting Currency" = '') OR
          (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Initial Entry":;
        DtldCVLedgEntryBuf."Entry Type"::Application:;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Losses Acc.");
            InitGLEntry(
              Currency."Unrealized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Unrealized Gains Acc.");
            InitGLEntry(
              Currency."Unrealized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
           InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Loss":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Losses Acc.");
            InitGLEntry(
              Currency."Realized Losses Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Realized Gain":
          BEGIN
            IF Currency.Code <> DtldCVLedgEntryBuf."Currency Code" THEN BEGIN
              IF DtldCVLedgEntryBuf."Currency Code" = '' THEN
                CLEAR(Currency)
              ELSE
                Currency.GET(DtldCVLedgEntryBuf."Currency Code");
            END;
            CheckNonAddCurrCodeOccurred(Currency.Code);
            Currency.TESTFIELD("Realized Gains Acc.");
            InitGLEntry(
              Currency."Realized Gains Acc.",-DtldCVLedgEntryBuf."Amount (LCY)",
              0,DtldCVLedgEntryBuf."Currency Code" = GLSetup."Additional Reporting Currency",
              TRUE);
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount":
          BEGIN
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
              AccNo := VendPostingGr."Payment Disc. Debit Acc.";
            END ELSE BEGIN
              VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
              AccNo := VendPostingGr."Payment Disc. Credit Acc.";
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
              AccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
            END ELSE BEGIN
              GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
              AccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."VAT Amount" := -DtldCVLedgEntryBuf."VAT Amount (LCY)";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
          BEGIN
            VATPostingSetup.GET(
              DtldCVLedgEntryBuf."VAT Bus. Posting Group",
              DtldCVLedgEntryBuf."VAT Prod. Posting Group");
            CASE VATPostingSetup."VAT Calculation Type" OF
              VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Purchase VAT Account");
                  InitGLEntry(
                    VATPostingSetup."Purchase VAT Account",-DtldCVLedgEntryBuf."Amount (LCY)",
                    0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END;
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                  VATPostingSetup.TESTFIELD("Purchase VAT Account");
                  InitGLEntry(
                    VATPostingSetup."Purchase VAT Account",-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                  InitGLEntry(
                    VATPostingSetup."Reverse Chrg. VAT Acc.",DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END;
              VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                IF DtldCVLedgEntryBuf."Use Tax" THEN BEGIN
                  TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                  InitGLEntry(
                    TaxJurisdiction."Tax Account (Purchases)",-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                  TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                  InitGLEntry(
                    TaxJurisdiction."Reverse Charge (Purchases)",DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END ELSE BEGIN
                  TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                  InitGLEntry(
                    TaxJurisdiction."Tax Account (Purchases)",-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
                  InsertGLEntry(TRUE);
                END;
              END;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding":
          BEGIN
            IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
              CASE TRUE OF
                -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Debit Curr. Appln. Rndg. Acc.");
                    AccNo := VendPostingGr."Debit Curr. Appln. Rndg. Acc.";
                  END;
                -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Credit Curr. Appln. Rndg. Acc.");
                    AccNo := VendPostingGr."Credit Curr. Appln. Rndg. Acc.";
                  END;
              END;
              InitGLEntry(
                AccNo,
                -DtldCVLedgEntryBuf."Amount (LCY)",
                -DtldCVLedgEntryBuf."Additional-Currency Amount",
                TRUE,TRUE);
              InsertGLEntry(TRUE);
            END;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount":
          BEGIN
            IF -DtldCVLedgEntryBuf."Amount (LCY)" <> 0 THEN BEGIN
              CASE TRUE OF
                -DtldCVLedgEntryBuf."Amount (LCY)" < 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Debit Rounding Account");
                    AccNo := VendPostingGr."Debit Rounding Account";
                  END;
                -DtldCVLedgEntryBuf."Amount (LCY)" > 0:
                  BEGIN
                    VendPostingGr.TESTFIELD("Credit Rounding Account");
                    AccNo := VendPostingGr."Credit Rounding Account";
                  END;
              END;
              InitGLEntry(
                AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",
                0,FALSE,TRUE);
              GLEntry."Additional-Currency Amount" := 0;
              InsertGLEntry(TRUE);
            END;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance":
          BEGIN
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Debit Acc.";
                  END ELSE BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Credit Acc.";
                  END;
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                    VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                    AccNo := VendPostingGr."Payment Disc. Debit Acc.";
                  END ELSE BEGIN
                    VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                    AccNo := VendPostingGr."Payment Disc. Credit Acc.";
                  END;
                END;
            END;
            InitGLEntry(
              AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance":
          BEGIN
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Debit Acc.";
                  END ELSE BEGIN
                    VendPostingGr.TESTFIELD("Payment Tolerance Credit Acc.");
                    AccNo := VendPostingGr."Payment Tolerance Credit Acc.";
                  END;
                END;
               GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                 BEGIN
                   IF DtldCVLedgEntryBuf."Amount (LCY)" < 0 THEN BEGIN
                     VendPostingGr.TESTFIELD("Payment Disc. Debit Acc.");
                     AccNo := VendPostingGr."Payment Disc. Debit Acc.";
                   END ELSE BEGIN
                     VendPostingGr.TESTFIELD("Payment Disc. Credit Acc.");
                     AccNo := VendPostingGr."Payment Disc. Credit Acc.";
                   END;
                 END;
             END;
             InitGLEntry(
               AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
             GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
             InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                  END;
                END;
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                  END;
                END;
            END;
            InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
            GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
            GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
            GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
            GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
            GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
            GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
            InsertGLEntry(TRUE);
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            GenPostingSetup.GET(
              DtldCVLedgEntryBuf."Gen. Bus. Posting Group",
              DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Tol. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Tol. Credit Acc.";
                  END;
                END;
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                BEGIN
                  IF DtldCVLedgEntryBuf."Amount (LCY)" > 0 THEN BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Debit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Debit Acc.";
                  END ELSE BEGIN
                    GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
                    AccNo := GenPostingSetup."Purch. Pmt. Disc. Credit Acc.";
                  END;
                END;
              END;
              InitGLEntry(AccNo,-DtldCVLedgEntryBuf."Amount (LCY)",0,FALSE,TRUE);
              GLEntry."Additional-Currency Amount" := -DtldCVLedgEntryBuf."Additional-Currency Amount";
              GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
              GLEntry."Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
              GLEntry."Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
              GLEntry."VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
              GLEntry."VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
              GLEntry."Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
              GLEntry."Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
              GLEntry."Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
              GLEntry."Use Tax" := DtldCVLedgEntryBuf."Use Tax";
              InsertGLEntry(TRUE);
          END;
        ELSE
          DtldCVLedgEntryBuf.FIELDERROR("Entry Type");
      END;
    END;

    LOCAL PROCEDURE VendUpdateDebitCredit@47(Correction@1000 : Boolean;VAR DtldVendLedgEntry@1001 : Record 380);
    BEGIN
      WITH DtldVendLedgEntry DO BEGIN
        IF ((Amount > 0) OR ("Amount (LCY)" > 0)) AND NOT Correction OR
           ((Amount < 0) OR ("Amount (LCY)" < 0)) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0;
          "Debit Amount (LCY)" := "Amount (LCY)";
          "Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
          "Debit Amount (LCY)" := 0;
          "Credit Amount (LCY)" := -"Amount (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE VendUnrealizedVAT@18(VAR VendLedgEntry2@1000 : Record 25;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmount@1014 : Decimal;
      PurchVATAccount@1009 : Code[20];
      PurchVATUnrealAccount@1010 : Code[20];
      PurchReverseAccount@1011 : Code[20];
      PurchReverseUnrealAccount@1012 : Code[20];
      LastConnectionNo@1013 : Integer;
    BEGIN
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
      PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
      IF VATEntry2.FINDSET THEN
        REPEAT
          TotalUnrealVATAmount := TotalUnrealVATAmount + VATEntry2."Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT;
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          IF (VATEntry2.Type <> 0) AND
             (VATEntry2.Amount = 0) AND
             (VATEntry2.Base = 0)
          THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                VATPostingSetup.GET(
                  VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  VATPostingSetup."Unrealized VAT Type" := TaxJurisdiction."Unrealized VAT Type";
                END;
            END;
            IF GenJnlLine."Document Type"=GenJnlLine."Document Type"::Refund THEN BEGIN
              WHTAmount:=0;
              WHTAmount1:=0;
              GLSetup.GET;
              IF GLSetup."Manual Sales WHT Calc." THEN BEGIN
                PurchaseCrMemoHeader.SETRANGE("No.",VendLedgEntry2."Document No.");
                IF PurchaseCrMemoHeader.FIND('-') THEN BEGIN
                  TempWHTEntry.RESET;
                  TempWHTEntry.SETRANGE("Document No.",PurchaseCrMemoHeader."No.");
                  TempWHTEntry.SETFILTER("Applies-to Entry No.",'%1',0);
                  IF TempWHTEntry.FIND('-') THEN
                    REPEAT
                      WHTAmount1:=WHTAmount1+TempWHTEntry."Unrealized Amount (LCY)";
                    UNTIL TempWHTEntry.NEXT=0;
                END;
                WHTAmount:=WHTAmount-WHTAmount1;
              END;
            END;
            IF (VATPostingSetup."Unrealized VAT Type" > 0) AND
               ((VATEntry2."Remaining Unrealized Amount" <> 0) OR
                (VATEntry2."Remaining Unrealized Base" <> 0))
            THEN BEGIN
              CASE VATPostingSetup."Unrealized VAT Type" OF
                VATPostingSetup."Unrealized VAT Type"::Percentage:
                  BEGIN
                    IF VendLedgEntry2."Remaining Amt. (LCY)" = 0 THEN
                      VATPart := 1
                    ELSE
                      IF VendLedgEntry2."Currency Code" = '' THEN
                        VATPart := -SettledAmount / (VendLedgEntry2."Original Amt. (LCY)" - WHTAmount)
                      ELSE
                        VATPart :=
                          (-SettledAmount / VendLedgEntry2."Original Currency Factor") /
                          (VendLedgEntry2."Original Amt. (LCY)" - WHTAmount);
                  END;
                VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)":
                  BEGIN
                    IF NOT VendLedgEntry2.Open OR
                       (VATEntry2."VAT Calculation Type" =
                        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
                       ((VATEntry2."VAT Calculation Type" =
                         VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                        VATEntry2."Use Tax")
                    THEN
                      VATPart := 1
                    ELSE BEGIN
                      IF ABS(PaidAmount) >= ABS(TotalUnrealVATAmount) THEN
                        VATPart := 1
                      ELSE
                        IF VATPostingSetup."Unrealized VAT Type" = VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)" THEN
                          VATPart := 0
                        ELSE
                          VATPart := PaidAmount / TotalUnrealVATAmount;
                    END;
                  END;
                VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)":
                  BEGIN
                    IF NOT VendLedgEntry2.Open THEN
                      VATPart := 1
                    ELSE
                      IF (VATEntry2."VAT Calculation Type" =
                          VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
                         ((VATEntry2."VAT Calculation Type" =
                           VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                          VATEntry2."Use Tax")
                      THEN
                        VATPart := 0
                      ELSE
                        IF ABS(PaidAmount) <= ABS(-VendLedgEntry2."Amount (LCY)" - TotalUnrealVATAmount) THEN
                          VATPart := 0
                        ELSE
                          IF VATPostingSetup."Unrealized VAT Type" = VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)" THEN
                            VATPart := 0
                          ELSE
                            VATPart :=
                              (TotalUnrealVATAmount + VendLedgEntry2."Remaining Amt. (LCY)") / TotalUnrealVATAmount;
                  END;
              END;

              IF VATPart <> 0 THEN BEGIN
                CASE VATEntry2."VAT Calculation Type" OF
                  VATEntry2."VAT Calculation Type"::"Normal VAT",
                  VATEntry2."VAT Calculation Type"::"Full VAT":
                    BEGIN
                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      PurchVATAccount := VATPostingSetup."Purchase VAT Account";
                      PurchVATUnrealAccount := VATPostingSetup."Purch. VAT Unreal. Account";
                    END;
                  VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                    BEGIN
                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                      VATPostingSetup.TESTFIELD("Purch. VAT Unreal. Account");
                      VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Acc.");
                      VATPostingSetup.TESTFIELD("Reverse Chrg. VAT Unreal. Acc.");
                      PurchVATAccount := VATPostingSetup."Purchase VAT Account";
                      PurchVATUnrealAccount := VATPostingSetup."Purch. VAT Unreal. Account";
                      PurchReverseAccount := VATPostingSetup."Reverse Chrg. VAT Acc.";
                      PurchReverseUnrealAccount := VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.";
                    END;
                  VATEntry2."VAT Calculation Type"::"Sales Tax":
                    IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                      TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                      TaxJurisdiction.TESTFIELD("Unreal. Rev. Charge (Purch.)");
                      PurchVATAccount := TaxJurisdiction."Tax Account (Purchases)";
                      PurchVATUnrealAccount := TaxJurisdiction."Unreal. Tax Acc. (Purchases)";
                      PurchReverseAccount := TaxJurisdiction."Reverse Charge (Purchases)";
                      PurchReverseUnrealAccount := TaxJurisdiction."Unreal. Rev. Charge (Purch.)";
                    END ELSE BEGIN
                      TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
                      TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
                      PurchVATAccount := TaxJurisdiction."Tax Account (Purchases)";
                      PurchVATUnrealAccount := TaxJurisdiction."Unreal. Tax Acc. (Purchases)";
                    END;
                END;

                IF VATPart = 1 THEN BEGIN
                  VATAmount := VATEntry2."Remaining Unrealized Amount";
                  VATBase := VATEntry2."Remaining Unrealized Base";
                  VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
                  VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
                END ELSE BEGIN
                  VATAmount := ROUND(VATEntry2."Unrealized Amount" * VATPart);
                  VATBase := ROUND(VATEntry2."Unrealized Base" * VATPart);
                  VATAmountAddCurr :=
                    ROUND(
                      VATEntry2."Add.-Currency Unrealized Amt." * VATPart,
                      AddCurrency."Amount Rounding Precision");
                  VATBaseAddCurr :=
                    ROUND(
                      VATEntry2."Add.-Currency Unrealized Base" * VATPart,
                      AddCurrency."Amount Rounding Precision");
                END;

                InitGLEntry(PurchVATUnrealAccount,-VATAmount,0,FALSE,TRUE);
                GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                GLEntry."Bal. Account No." := PurchVATAccount;
                SummarizeVAT(
                  GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

                InitGLEntry(PurchVATAccount,VATAmount,0,FALSE,TRUE);
                GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                GLEntry."Gen. Posting Type" := VATEntry2.Type;
                GLEntry."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
                GLEntry."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
                GLEntry."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
                GLEntry."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
                GLEntry."Tax Area Code" := VATEntry2."Tax Area Code";
                GLEntry."Tax Liable" := VATEntry2."Tax Liable";
                GLEntry."Tax Group Code" := VATEntry2."Tax Group Code";
                GLEntry."Use Tax" := VATEntry2."Use Tax";
                GLEntry."Bal. Account No." := PurchVATUnrealAccount;
                SummarizeVAT(
                  GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

                IF (VATEntry2."VAT Calculation Type" =
                    VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
                   ((VATEntry2."VAT Calculation Type" =
                     VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                    (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax")
                THEN BEGIN
                  InitGLEntry(PurchReverseUnrealAccount,VATAmount,0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := VATAmountAddCurr;
                  GLEntry."Bal. Account No." := PurchReverseAccount;
                  SummarizeVAT(
                    GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);

                  InitGLEntry(PurchReverseAccount,-VATAmount,0,FALSE,TRUE);
                  GLEntry."Additional-Currency Amount" := -VATAmountAddCurr;
                  GLEntry."Gen. Posting Type" := VATEntry2.Type;
                  GLEntry."Gen. Bus. Posting Group" := VATEntry2."Gen. Bus. Posting Group";
                  GLEntry."Gen. Prod. Posting Group" := VATEntry2."Gen. Prod. Posting Group";
                  GLEntry."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
                  GLEntry."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
                  GLEntry."Tax Area Code" := VATEntry2."Tax Area Code";
                  GLEntry."Tax Liable" := VATEntry2."Tax Liable";
                  GLEntry."Tax Group Code" := VATEntry2."Tax Group Code";
                  GLEntry."Use Tax" := VATEntry2."Use Tax";
                  GLEntry."Bal. Account No." := PurchReverseUnrealAccount;
                  SummarizeVAT(
                    GLSetup."Summarize G/L Entries",GLEntry,TempGLEntryVAT,InsertedTempGLEntryVAT);
                END;

                VATEntry.LOCKTABLE;
                VATEntry := VATEntry2;
                VATEntry."Entry No." := NextVATEntryNo;
                VATEntry."Posting Date" := GenJnlLine."Posting Date";
                VATEntry."Document No." := GenJnlLine."Document No.";
                VATEntry."External Document No." := GenJnlLine."External Document No.";
                VATEntry."Document Type" := GenJnlLine."Document Type";
                VATEntry.Amount := VATAmount;
                VATEntry.Base := VATBase;
                VATEntry."Unrealized Amount" := 0;
                VATEntry."Unrealized Base" := 0;
                VATEntry."Remaining Unrealized Amount" := 0;
                VATEntry."Remaining Unrealized Base" := 0;
                VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
                VATEntry."Additional-Currency Base" := VATBaseAddCurr;
                VATEntry."Add.-Currency Unrealized Amt." := 0;
                VATEntry."Add.-Currency Unrealized Base" := 0;
                VATEntry."Add.-Curr. Rem. Unreal. Amount" := 0;
                VATEntry."Add.-Curr. Rem. Unreal. Base" := 0;
                VATEntry."User ID" := USERID;
                VATEntry."Source Code" := GenJnlLine."Source Code";
                VATEntry."Reason Code" := GenJnlLine."Reason Code";
                VATEntry."Closed by Entry No." := 0;
                VATEntry.Closed := FALSE;
                VATEntry."Transaction No." := GLEntry."Transaction No.";
                VATEntry."Sales Tax Connection No." := NextConnectionNo;
                VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
                VATEntry."Sett. Unrealized Amount" := VATEntry2."Unrealized Amount";
                VATEntry."Sett. Unrealized Base" := VATEntry2."Unrealized Base";
                VATEntry."Sett. Rem. Unrealized Amount" := VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
                VATEntry."Sett. Rem. Unrealized Base" := VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
                VATEntry.INSERT;
                NextVATEntryNo := NextVATEntryNo + 1;

                VATEntry2."Remaining Unrealized Amount" :=
                  VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
                VATEntry2."Remaining Unrealized Base" :=
                  VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
                VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
                VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
                VATEntry2.MODIFY;
              END;
            END;
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT;
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATByUnapply@80(UnrealVATAccNo@1000 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1005 : Record 254;NewVATEntry@1004 : Record 254);
    VAR
      VATEntry2@1003 : Record 254;
    BEGIN
      InitGLEntry(UnrealVATAccNo,VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      InsertGLEntry(TRUE);

      InitGLEntry(VATAccNo,-VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
      InsertGLEntry(TRUE);

      WITH VATEntry2 DO BEGIN
        GET(VATEntry."Unrealized VAT Entry No.");
        "Remaining Unrealized Amount" :=  "Remaining Unrealized Amount" - NewVATEntry.Amount;
        "Remaining Unrealized Base" := "Remaining Unrealized Base" - NewVATEntry.Base;
        "Add.-Curr. Rem. Unreal. Amount" :=
          "Add.-Curr. Rem. Unreal. Amount" - NewVATEntry."Additional-Currency Amount";
        "Add.-Curr. Rem. Unreal. Base" :=
          "Add.-Curr. Rem. Unreal. Base" - NewVATEntry."Additional-Currency Base";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest@28(VAR CVLedgEntryBuf@1000 : Record 382);
    VAR
      CustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf2@1002 : Record 382;
    BEGIN
      WITH CVLedgEntryBuf DO BEGIN
        IF CustLedgEntry.GET("Closed by Entry No.") THEN BEGIN
          CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
          UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
        END;
        CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
        CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
        IF CustLedgEntry.FINDSET THEN
          REPEAT
            CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
            UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
          UNTIL CustLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest2@27(VAR CVLedgEntryBuf@1000 : Record 382;VAR CVLedgEntryBuf2@1001 : Record 382);
    BEGIN
      WITH CVLedgEntryBuf DO
        IF "Due Date" < CVLedgEntryBuf2."Document Date" THEN
          "Calculate Interest" := TRUE;
    END;

    PROCEDURE GLCalcAddCurrency@35(AddCurrAmount@1000 : Decimal;UseAddCurrAmount@1001 : Boolean;UseVendExchRateCheck@1500000 : Boolean);
    BEGIN
      IF (GLSetup."Additional Reporting Currency" <> '') AND
         (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None)
      THEN BEGIN
        IF (GenJnlLine."Source Currency Code" = GLSetup."Additional Reporting Currency") AND
           UseAddCurrAmount
        THEN
          GLEntry."Additional-Currency Amount" := AddCurrAmount
        ELSE BEGIN
          IF (PurchSetup.GET) AND (PurchSetup."Enable Vendor GST Amount (ACY)") AND (UseVendExchRateCheck) THEN
            GLEntry."Additional-Currency Amount" := AddCurrAmount
          ELSE
            GLEntry."Additional-Currency Amount" := ExchangeAmtLCYToFCY2(GLEntry.Amount);
        END;
      END;
      UseVendExchRate:=FALSE;
    END;

    PROCEDURE HandleAddCurrResidualGLEntry@38();
    VAR
      TableID@1001 : ARRAY [10] OF Integer;
      AccNo@1000 : ARRAY [10] OF Code[20];
    BEGIN
      IF GLSetup."Additional Reporting Currency" = '' THEN
        EXIT;

      TotalAddCurrAmount := TotalAddCurrAmount + GLEntry."Additional-Currency Amount";
      TotalAmount := TotalAmount + GLEntry.Amount;

      IF (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) AND
          (TotalAmount = 0) AND  (TotalAddCurrAmount <> 0) AND
          CheckNonAddCurrCodeOccurred(GenJnlLine."Source Currency Code")
      THEN BEGIN
        OrigGLEntry := GLEntry;
        GLEntry.INIT;
        GLEntry."Posting Date" := GenJnlLine."Posting Date";
        GLEntry."Document Date" := GenJnlLine."Document Date";
        GLEntry."Document Type" := GenJnlLine."Document Type";
        GLEntry."Document No." := GenJnlLine."Document No.";
        GLEntry."External Document No." := '';
        GLEntry.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text010,
              GLEntry.FIELDCAPTION("Additional-Currency Amount")),
            1,MAXSTRLEN(GLEntry.Description));
        GLEntry."Business Unit Code" := GenJnlLine."Business Unit Code";
        GLEntry."Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
        GLEntry."Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
        GLEntry."Source Code" := GenJnlLine."Source Code";
        GLEntry."Source Type" := 0;
        GLEntry."Source No." := '';
        GLEntry."Job No." := '';
        GLEntry.Quantity := 0;
        GLEntry."Journal Batch Name" := GenJnlLine."Journal Batch Name";
        GLEntry."Reason Code" := GenJnlLine."Reason Code";
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Transaction No." := NextTransactionNo;
        IF TotalAddCurrAmount < 0 THEN
          GLEntry."G/L Account No." := AddCurrency."Residual Losses Account"
        ELSE
          GLEntry."G/L Account No." := AddCurrency."Residual Gains Account";
        GLEntry.Amount := 0;
        GLEntry."User ID" := USERID;
        GLEntry."No. Series" := GenJnlLine."Posting No. Series";
        GLEntry."System-Created Entry" := TRUE;
        GLEntry."Prior-Year Entry" := GLEntry."Posting Date" < FiscalYearStartDate;
        GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        InsertGLEntry(FALSE);

        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
        AccNo[1] := GLEntry."G/L Account No.";
        IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
          IF GenJnlLine."Line No." <> 0 THEN
            ERROR(
              Text013,
              GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
              GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);

        GLEntry := OrigGLEntry;
        TotalAddCurrAmount := 0;
      END;
    END;

    LOCAL PROCEDURE CalcLCYToAddCurr@42(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      IF GLSetup."Additional Reporting Currency" = '' THEN
        EXIT;
      EXIT(ExchangeAmtLCYToFCY2(AmountLCY));
    END;

    PROCEDURE CalcAddCurrFactor@17(Numerator@1000 : Decimal;Denominator@1001 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);

      IF Numerator <> 0 THEN
        EXIT(Numerator / Denominator)
      ELSE
        IF GLSetup."Additional Reporting Currency" <> '' THEN
          CalcLCYToAddCurr(1)
        ELSE
          EXIT(0);
    END;

    PROCEDURE GetCurrencyExchRate@39();
    VAR
      NewCurrencyDate@1000 : Date;
    BEGIN
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        IF GLSetup."Additional Reporting Currency" <> AddCurrency.Code THEN BEGIN
          AddCurrency.GET(GLSetup."Additional Reporting Currency");
          AddCurrency.TESTFIELD("Amount Rounding Precision");
          AddCurrency.TESTFIELD("Residual Gains Account");
          AddCurrency.TESTFIELD("Residual Losses Account");
        END;
        NewCurrencyDate := GenJnlLine."Posting Date";
        IF GenJnlLine."Reversing Entry" THEN
          NewCurrencyDate := NewCurrencyDate - 1;
        IF (NewCurrencyDate <> CurrencyDate) OR
           UseCurrFactorOnly
        THEN BEGIN
          UseCurrFactorOnly := FALSE;
          CurrencyDate := NewCurrencyDate;
          IF (GenJnlLine."Source Currency Code"='') AND (GenJnlLine."Vendor Exchange Rate (ACY)"<>0) THEN
            CurrencyFactor :=
              CurrExchRate.ExchangeRateFactorFRS21(
                CurrencyDate,GLSetup."Additional Reporting Currency",GenJnlLine."Vendor Exchange Rate (ACY)")
          ELSE
            CurrencyFactor :=
              CurrExchRate.ExchangeRate(
                CurrencyDate,GLSetup."Additional Reporting Currency");
        END;
        IF (GenJnlLine."FA Add.-Currency Factor" <> 0) AND
           (GenJnlLine."FA Add.-Currency Factor" <> CurrencyFactor)
        THEN BEGIN
          UseCurrFactorOnly := TRUE;
          CurrencyDate := 0D;
          CurrencyFactor := GenJnlLine."FA Add.-Currency Factor";
        END;
      END;
    END;

    PROCEDURE ExchAmount@43(Amount@1000 : Decimal;FromCurrencyCode@1001 : Code[10];ToCurrencyCode@1002 : Code[10];UsePostingDate@1003 : Date) : Decimal;
    VAR
      ToCurrency@1004 : Record 4;
    BEGIN
      IF (FromCurrencyCode = ToCurrencyCode) OR (Amount = 0) THEN
        EXIT(Amount);

      Amount :=
        CurrExchRate.ExchangeAmtFCYToFCY(
          UsePostingDate,FromCurrencyCode,ToCurrencyCode,Amount);

      IF ToCurrencyCode <> '' THEN BEGIN
        ToCurrency.GET(ToCurrencyCode);
        Amount := ROUND(Amount,ToCurrency."Amount Rounding Precision");
      END ELSE
        Amount := ROUND(Amount);

      EXIT(Amount);
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY2@40(Amount@1000 : Decimal) : Decimal;
    BEGIN
      IF UseCurrFactorOnly THEN
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(Amount,CurrencyFactor),
            AddCurrency."Amount Rounding Precision"));
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrencyDate,GLSetup."Additional Reporting Currency",Amount,CurrencyFactor),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CalcAddCurrForUnapplication@73(Date@1001 : Date;Amt@1002 : Decimal) : Decimal;
    VAR
      AddCurrency@1000 : Record 4;
    BEGIN
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        IF GLSetup."Additional Reporting Currency" <> AddCurrency.Code THEN BEGIN
          AddCurrency.GET(GLSetup."Additional Reporting Currency");
          AddCurrency.TESTFIELD("Amount Rounding Precision");
        END;
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              Date,
              GLSetup."Additional Reporting Currency",
              Amt,
              CurrExchRate.ExchangeRate(Date,GLSetup."Additional Reporting Currency")),
            AddCurrency."Amount Rounding Precision"));
      END;
    END;

    LOCAL PROCEDURE InsertFAAllocDim@44(EntryNo@1000 : Integer) : Boolean;
    VAR
      FAAllocDim@1001 : Record 5648;
    BEGIN
      IF FAGLPostBuf.GET(EntryNo) THEN BEGIN
        TempFAJnlLineDim.DELETEALL;
        FAAllocDim.SETRANGE(Code,FAGLPostBuf."FA Posting Group");
        FAAllocDim.SETRANGE("Allocation Type",FAGLPostBuf."FA Allocation Type");
        FAAllocDim.SETRANGE("Line No.",FAGLPostBuf."FA Allocation Line No.");
        IF FAAllocDim.FINDSET THEN
          REPEAT
            TempFAJnlLineDim."Dimension Code" := FAAllocDim."Dimension Code";
            TempFAJnlLineDim."Dimension Value Code" := FAAllocDim."Dimension Value Code";
            TempFAJnlLineDim.INSERT;
          UNTIL FAAllocDim.NEXT = 0;
          DimMgt.MoveJnlLineDimToLedgEntryDim(
            TempFAJnlLineDim,DATABASE::"G/L Entry",EntryNo);
        FAGLPostBuf.DELETE;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckNonAddCurrCodeOccurred@54(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      NonAddCurrCodeOccured :=
        NonAddCurrCodeOccured OR (GLSetup."Additional Reporting Currency" <>  CurrencyCode);
      EXIT(NonAddCurrCodeOccured);
    END;

    PROCEDURE CheckCalcPmtDisc@15(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1001 : Boolean;CheckAmount@1004 : Boolean) : Boolean;
    BEGIN
      IF (((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Refund) OR
           (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment)) AND
          (((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::"Credit Memo") AND
            (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) AND
            (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) OR
            ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::Invoice) AND
             (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date"))))
      THEN BEGIN
        IF CheckFilter THEN BEGIN
          IF CheckAmount THEN BEGIN
            IF (OldCVLedgEntryBuf2.GETFILTER(Positive) <> '') OR
              (ABS(NewCVLedgEntryBuf."Remaining Amount") + ApplnRoundingPrecision >=
              ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))
            THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END ELSE BEGIN
            IF (OldCVLedgEntryBuf2.GETFILTER(Positive) <> '')
            THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END;
        END ELSE BEGIN
          IF CheckAmount THEN BEGIN
            IF (ABS(NewCVLedgEntryBuf."Remaining Amount") + ApplnRoundingPrecision >=
              ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))
            THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(TRUE);
        END;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CheckCalcPmtDiscCVCust@23(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCustLedgEntry2@1002 : Record 21;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1001 : Boolean) : Boolean;
    VAR
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      OldCustLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferCustLedgEntry(OldCVLedgEntryBuf2,OldCustLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscCust@26(VAR NewCustLedgEntry@1000 : Record 21;VAR OldCustLedgEntry2@1002 : Record 21;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1006 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      TransferCustLedgEntry(NewCVLedgEntryBuf,NewCustLedgEntry,TRUE);
      OldCustLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferCustLedgEntry(OldCVLedgEntryBuf2,OldCustLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscGenJnlCust@36(GenJnlLine@1000 : Record 81;OldCustLedgEntry2@1002 : Record 21;ApplnRoundingPrecision@1004 : Decimal;CheckAmount@1005 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1003 : Record 382;
    BEGIN
      NewCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      NewCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      NewCVLedgEntryBuf."Remaining Amount" := GenJnlLine.Amount;
      TransferCustLedgEntry(OldCVLedgEntryBuf2,OldCustLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscCVVend@57(VAR NewCVLedgEntrybuf@1000 : Record 382;VAR OldVendLedgEntry2@1002 : Record 25;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1001 : Boolean) : Boolean;
    VAR
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      OldVendLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferVendLedgEntry(OldCVLedgEntryBuf2,OldVendLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntrybuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscVend@56(VAR NewVendLedgEntry@1000 : Record 25;VAR OldVendLedgEntry2@1002 : Record 25;ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1006 : Boolean;CheckAmount@1005 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1004 : Record 382;
    BEGIN
      TransferVendLedgEntry(NewCVLedgEntryBuf,NewVendLedgEntry,TRUE);
      OldVendLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      TransferVendLedgEntry(OldCVLedgEntryBuf2,OldVendLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    PROCEDURE CheckCalcPmtDiscGenJnlVend@58(GenJnlLine@1000 : Record 81;OldVendLedgEntry2@1002 : Record 25;ApplnRoundingPrecision@1005 : Decimal;CheckAmount@1004 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record 382;
      OldCVLedgEntryBuf2@1003 : Record 382;
    BEGIN
      NewCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      NewCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      NewCVLedgEntryBuf."Remaining Amount" := GenJnlLine.Amount;
      TransferVendLedgEntry(OldCVLedgEntryBuf2,OldVendLedgEntry2,TRUE);
      EXIT(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,CheckAmount));
    END;

    PROCEDURE Reverse@72(VAR ReversalEntry@1002 : Record 179;VAR ReversalEntry2@1000 : Record 179);
    VAR
      SourceCodeSetup@1016 : Record 242;
      GLEntry2@1003 : Record 17;
      ReversedGLEntry@1001 : Record 17;
      GLReg2@1021 : Record 45;
      CustLedgEntry@1004 : Record 21;
      TempCustLedgEntry@1005 : TEMPORARY Record 21;
      VendLedgEntry@1008 : Record 25;
      TempVendLedgEntry@1012 : TEMPORARY Record 25;
      BankAccLedgEntry@1009 : Record 271;
      TempBankAccLedgEntry@1015 : TEMPORARY Record 271;
      VATEntry@1010 : Record 254;
      FALedgEntry@1007 : Record 5601;
      MaintenanceLedgEntry@1011 : Record 5625;
      LedgEntryDim@1017 : Record 355;
      RevertTransactionNo@1024 : TEMPORARY Record 2000000026;
      FAInsertLedgEntry@1006 : Codeunit 5600;
      UpdateAnalysisView@1020 : Codeunit 410;
      NextDtldCustLedgEntryEntryNo@1014 : Integer;
      NextDtldVendLedgEntryEntryNo@1013 : Integer;
      TableID@1019 : ARRAY [10] OF Integer;
      AccNo@1018 : ARRAY [10] OF Code[20];
      WHTEntry@1500000 : Record 28044;
    BEGIN
      SourceCodeSetup.GET;
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
        GLReg2."No." := ReversalEntry2."G/L Register No.";

      ReversalEntry.CopyFilters(
        GLEntry2,CustLedgEntry,VendLedgEntry,BankAccLedgEntry,VATEntry,FALedgEntry,MaintenanceLedgEntry,WHTEntry);

      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        IF ReversalEntry2.FINDSET(FALSE,FALSE) THEN
          REPEAT
            RevertTransactionNo.Number := ReversalEntry2."Transaction No.";
            IF RevertTransactionNo.INSERT THEN;
          UNTIL ReversalEntry2.NEXT = 0;
      END;

      CLEAR(GenJnlLine);
      GenJnlLine."Source Code" := SourceCodeSetup.Reversal;

      InitCodeUnit;
      GLReg.Reversed := TRUE;

      IF CustLedgEntry.FINDSET THEN
        REPEAT
          IF CustLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          TempCustLedgEntry := CustLedgEntry;
          TempCustLedgEntry.INSERT;
        UNTIL CustLedgEntry.NEXT = 0;
      IF VendLedgEntry.FINDSET THEN
        REPEAT
          IF VendLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          TempVendLedgEntry := VendLedgEntry;
          TempVendLedgEntry.INSERT;
        UNTIL VendLedgEntry.NEXT = 0;
      IF BankAccLedgEntry.FINDSET THEN
        REPEAT
          IF BankAccLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          TempBankAccLedgEntry := BankAccLedgEntry;
          TempBankAccLedgEntry.INSERT;
        UNTIL BankAccLedgEntry.NEXT = 0;

      IF RevertTransactionNo.FIND('-') THEN;
      REPEAT
        IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN
          GLEntry2.SETRANGE("Transaction No.",RevertTransactionNo.Number);
        WITH GLEntry2 DO
          IF FIND('+') THEN
            REPEAT
              IF "Reversed by Entry No." <> 0 THEN
                ERROR(Text015);
              LedgEntryDim.SETRANGE("Table ID",DATABASE::"G/L Entry");
              LedgEntryDim.SETRANGE("Entry No.","Entry No.");
              TempJnlLineDim.RESET;
              TempJnlLineDim.DELETEALL;
              DimMgt.CopyLedgEntryDimToJnlLineDim(LedgEntryDim,TempJnlLineDim);
              IF NOT DimMgt.CheckDimIDConsistency(TempJnlLineDim) THEN
                ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
              CLEAR(TableID);
              CLEAR(AccNo);
              TableID[1] := DATABASE::"G/L Account";
              AccNo[1] := "G/L Account No.";
              IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                ERROR(DimMgt.GetDimValuePostingErr);
              GLEntry := GLEntry2;
              IF "FA Entry No." <> 0 THEN
                FAInsertLedgEntry.InsertReverseEntry(
                  NextEntryNo,"FA Entry Type","FA Entry No.",GLEntry."FA Entry No.",NextTransactionNo,ReversalEntry2);
              GLEntry.Amount := -Amount;
              GLEntry."Cost Entry No." := 0;
              GLEntry.Quantity := -Quantity;
              GLEntry."VAT Amount" := -"VAT Amount";
              GLEntry."Debit Amount" := -"Debit Amount";
              GLEntry."Credit Amount" := -"Credit Amount";
              GLEntry."Additional-Currency Amount" := -"Additional-Currency Amount";
              GLEntry."Add.-Currency Debit Amount" := -"Add.-Currency Debit Amount";
              GLEntry."Add.-Currency Credit Amount" := -"Add.-Currency Credit Amount";
              GLEntry."Entry No." := NextEntryNo;
              GLEntry."Transaction No." := NextTransactionNo;
              GLEntry."User ID" := USERID;
              GenJnlLine.Correction :=
                (GLEntry."Debit Amount" < 0) OR (GLEntry."Credit Amount" < 0) OR
                (GLEntry."Add.-Currency Debit Amount" < 0) OR (GLEntry."Add.-Currency Credit Amount" < 0);
              GLEntry."Prior-Year Entry" := GLEntry."Posting Date" < FiscalYearStartDate;
              GLEntry."Journal Batch Name" := '';
              GLEntry."Source Code" := GenJnlLine."Source Code";
              SetReversalDescription(
                ReversalEntry."Entry Type"::"G/L Account","Entry No.",ReversalEntry2,GLEntry.Description);
              GLEntry."Reversed Entry No." := "Entry No.";
              GLEntry.Reversed := TRUE;
              // Reversal of Reversal
              IF "Reversed Entry No." <> 0 THEN BEGIN
                ReversedGLEntry.GET(GLEntry2."Reversed Entry No.");
                ReversedGLEntry."Reversed by Entry No." := 0;
                ReversedGLEntry.Reversed := FALSE;
                ReversedGLEntry.MODIFY;
                "Reversed Entry No." := GLEntry."Entry No.";
                GLEntry."Reversed by Entry No." := "Entry No.";
              END;
              "Reversed by Entry No." := GLEntry."Entry No.";
              Reversed := TRUE;
              MODIFY;
              InsertGLEntry(FALSE);

              DimMgt.CopyLedgEntryDimToLedgEntryDim(
                DATABASE::"G/L Entry","Entry No.",DATABASE::"G/L Entry",GLEntry."Entry No.");

              CASE TRUE OF
                TempCustLedgEntry.GET("Entry No."):
                  BEGIN
                    IF NOT DimMgt.CheckDimIDConsistency(TempJnlLineDim) THEN
                      ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
                    CLEAR(TableID);
                    CLEAR(AccNo);
                    TableID[1] := DATABASE::Customer;
                    AccNo[1] := TempCustLedgEntry."Customer No.";
                    TableID[2] := DATABASE::"Salesperson/Purchaser";
                    AccNo[2] := TempCustLedgEntry."Salesperson Code";
                    IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                      ERROR(DimMgt.GetDimValuePostingErr);
                    ReverseCustLedgEntry(
                      TempCustLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,NextDtldCustLedgEntryEntryNo,ReversalEntry2);
                    TempCustLedgEntry.DELETE;
                  END;
                TempVendLedgEntry.GET("Entry No."):
                  BEGIN
                    IF NOT DimMgt.CheckDimIDConsistency(TempJnlLineDim) THEN
                      ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
                    CLEAR(TableID);
                    CLEAR(AccNo);
                    TableID[1] := DATABASE::Vendor;
                    AccNo[1] := TempVendLedgEntry."Vendor No.";
                    TableID[2] := DATABASE::"Salesperson/Purchaser";
                    AccNo[2] := TempVendLedgEntry."Purchaser Code";
                    IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                      ERROR(DimMgt.GetDimValuePostingErr);
                    ReverseVendLedgEntry(
                      TempVendLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,NextDtldVendLedgEntryEntryNo,ReversalEntry2);
                    TempVendLedgEntry.DELETE;
                  END;
                TempBankAccLedgEntry.GET("Entry No."):
                  BEGIN
                    IF NOT DimMgt.CheckDimIDConsistency(TempJnlLineDim) THEN
                      ERROR(Text011,TABLECAPTION,"Entry No.",DimMgt.GetDimCombErr);
                    CLEAR(TableID);
                    CLEAR(AccNo);
                    TableID[1] := DATABASE::"Bank Account";
                    AccNo[1] := TempBankAccLedgEntry."Bank Account No.";
                    IF NOT DimMgt.CheckJnlLineDimValuePosting(TempJnlLineDim,TableID,AccNo) THEN
                      ERROR(DimMgt.GetDimValuePostingErr);
                    ReverseBankAccLedgEntry(TempBankAccLedgEntry,GLEntry."Entry No.",ReversalEntry2);
                    TempBankAccLedgEntry.DELETE;
                  END;
              END;
            UNTIL NEXT(-1) = 0;
      UNTIL RevertTransactionNo.NEXT = 0;

      IF FALedgEntry.FINDSET THEN
        REPEAT
          FAInsertLedgEntry.CheckFAReverseEntry(FALedgEntry)
        UNTIL FALedgEntry.NEXT = 0;

      IF MaintenanceLedgEntry.FINDSET THEN
        REPEAT
          FAInsertLedgEntry.CheckMaintReverseEntry(MaintenanceLedgEntry)
        UNTIL FALedgEntry.NEXT = 0;

      FAInsertLedgEntry.FinishFAReverseEntry(GLReg);

      IF NOT TempCustLedgEntry.ISEMPTY THEN
        ERROR(Text014,CustLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);
      IF NOT TempVendLedgEntry.ISEMPTY THEN
        ERROR(Text014,VendLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);
      IF NOT TempBankAccLedgEntry.ISEMPTY THEN
        ERROR(Text014,BankAccLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);

      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        RevertTransactionNo.FIND('-');
        REPEAT
          VATEntry.SETRANGE("Transaction No.",RevertTransactionNo.Number);
          ReverseVAT(VATEntry);
        UNTIL RevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseVAT(VATEntry);
      ReverseWHT(WHTEntry);

      TempJnlLineDim.DELETEALL;
      FinishCodeunit;

      IF GLReg2."No." <> 0 THEN
        IF GLReg2.GET(GLReg2."No.") THEN BEGIN
          GLReg2.Reversed := TRUE;
          GLReg2.MODIFY;
        END;

      UpdateAnalysisView.UpdateAll(0,TRUE);
    END;

    LOCAL PROCEDURE ReverseCustLedgEntry@71(CustLedgEntry@1000 : Record 21;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;VAR NextDtldCustLedgEntryEntryNo@1003 : Integer;VAR ReversalEntry@1008 : Record 179);
    VAR
      NewCustLedgEntry@1002 : Record 21;
      ReversedCustLedgEntry@1007 : Record 21;
      DtldCustLedgEntry@1005 : Record 379;
      NewDtldCustLedgEntry@1004 : Record 379;
    BEGIN
      WITH NewCustLedgEntry DO BEGIN
        NewCustLedgEntry := CustLedgEntry;
        "Sales (LCY)" := -"Sales (LCY)";
        "Profit (LCY)" := -"Profit (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Given (LCY)" := -"Pmt. Disc. Given (LCY)";
        Positive := NOT Positive;
        "Adjusted Currency Factor" := -"Adjusted Currency Factor";
        "Original Currency Factor" := -"Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := NextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := GenJnlLine."Source Code";
        SetReversalDescription(
          ReversalEntry."Entry Type"::Customer,CustLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := CustLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF CustLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedCustLedgEntry.GET(CustLedgEntry."Reversed Entry No.");
          ReversedCustLedgEntry."Reversed by Entry No." := 0;
          ReversedCustLedgEntry.Reversed := FALSE;
          ReversedCustLedgEntry.MODIFY;
          CustLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := CustLedgEntry."Entry No.";
        END;
        CustLedgEntry."Applies-to ID" := '';
        CustLedgEntry."Reversed by Entry No." := "Entry No.";
        CustLedgEntry.Reversed := TRUE;
        CustLedgEntry.MODIFY;
        INSERT;

        IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
          DtldCustLedgEntry.FINDLAST;
          NextDtldCustLedgEntryEntryNo := DtldCustLedgEntry."Entry No." + 1;
        END;
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
        DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldCustLedgEntry.FINDSET;
        REPEAT
          DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::"Initial Entry");
          NewDtldCustLedgEntry := DtldCustLedgEntry;
          NewDtldCustLedgEntry.Amount := -NewDtldCustLedgEntry.Amount;
          NewDtldCustLedgEntry."Amount (LCY)" := -NewDtldCustLedgEntry."Amount (LCY)";
          CustUpdateDebitCredit(Correction,NewDtldCustLedgEntry);
          NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
          NewDtldCustLedgEntry."User ID" := USERID;
          NewDtldCustLedgEntry."Transaction No." := NextTransactionNo;
          NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
          NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
          NewDtldCustLedgEntry.INSERT;
        UNTIL DtldCustLedgEntry.NEXT = 0;

        ApplyCustLedgEntryByReversal(
          CustLedgEntry,NewCustLedgEntry,NewDtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
        ApplyCustLedgEntryByReversal(
          NewCustLedgEntry,CustLedgEntry,DtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);

        DimMgt.CopyLedgEntryDimToLedgEntryDim(
          DATABASE::"Cust. Ledger Entry",CustLedgEntry."Entry No.",DATABASE::"Cust. Ledger Entry",NewEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseVendLedgEntry@70(VendLedgEntry@1000 : Record 25;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;VAR NextDtldVendLedgEntryEntryNo@1003 : Integer;VAR ReversalEntry@1007 : Record 179);
    VAR
      NewVendLedgEntry@1002 : Record 25;
      ReversedVendLedgEntry@1008 : Record 25;
      DtldVendLedgEntry@1005 : Record 380;
      NewDtldVendLedgEntry@1004 : Record 380;
    BEGIN
      WITH NewVendLedgEntry DO BEGIN
        NewVendLedgEntry := VendLedgEntry;
        "Purchase (LCY)" := -"Purchase (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Rcd.(LCY)" := -"Pmt. Disc. Rcd.(LCY)";
        Positive := NOT Positive;
        "Adjusted Currency Factor" := -"Adjusted Currency Factor";
        "Original Currency Factor" := -"Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := NextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := GenJnlLine."Source Code";
        SetReversalDescription(
          ReversalEntry."Entry Type"::Vendor,VendLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := VendLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF VendLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedVendLedgEntry.GET(VendLedgEntry."Reversed Entry No.");
          ReversedVendLedgEntry."Reversed by Entry No." := 0;
          ReversedVendLedgEntry.Reversed := FALSE;
          ReversedVendLedgEntry.MODIFY;
          VendLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := VendLedgEntry."Entry No.";
        END;
        VendLedgEntry."Applies-to ID" := '';
        VendLedgEntry."Reversed by Entry No." := "Entry No.";
        VendLedgEntry.Reversed := TRUE;
        VendLedgEntry.MODIFY;
        INSERT;

        IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
          DtldVendLedgEntry.FINDLAST;
          NextDtldVendLedgEntryEntryNo := DtldVendLedgEntry."Entry No." + 1;
        END;
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
        DtldVendLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldVendLedgEntry.FINDSET;
        REPEAT
          DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::"Initial Entry");
          NewDtldVendLedgEntry := DtldVendLedgEntry;
          NewDtldVendLedgEntry.Amount := -NewDtldVendLedgEntry.Amount;
          NewDtldVendLedgEntry."Amount (LCY)" := -NewDtldVendLedgEntry."Amount (LCY)";
          VendUpdateDebitCredit(Correction,NewDtldVendLedgEntry);
          NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
          NewDtldVendLedgEntry."User ID" := USERID;
          NewDtldVendLedgEntry."Transaction No." := NextTransactionNo;
          NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
          NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
          NewDtldVendLedgEntry.INSERT;
        UNTIL DtldVendLedgEntry.NEXT = 0;

        ApplyVendLedgEntryByReversal(
          VendLedgEntry,NewVendLedgEntry,NewDtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
        ApplyVendLedgEntryByReversal(
          NewVendLedgEntry,VendLedgEntry,DtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);

        DimMgt.CopyLedgEntryDimToLedgEntryDim(
          DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.",
          DATABASE::"Vendor Ledger Entry",NewEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseBankAccLedgEntry@68(BankAccLedgEntry@1000 : Record 271;NewEntryNo@1001 : Integer;VAR ReversalEntry@1003 : Record 179);
    VAR
      NewBankAccLedgEntry@1002 : Record 271;
      ReversedBankAccLedgEntry@1004 : Record 271;
    BEGIN
      WITH NewBankAccLedgEntry DO BEGIN
        NewBankAccLedgEntry := BankAccLedgEntry;
        Amount := -Amount;
        "Remaining Amount" := -"Remaining Amount";
        "Amount (LCY)" := -"Amount (LCY)";
        "Debit Amount" := -"Debit Amount";
        "Credit Amount" := -"Credit Amount";
        "Debit Amount (LCY)" := -"Debit Amount (LCY)";
        "Credit Amount (LCY)" := -"Credit Amount (LCY)";
        Positive := NOT Positive;
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := NextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := GenJnlLine."Source Code";
        SetReversalDescription(
          ReversalEntry."Entry Type"::"Bank Account",BankAccLedgEntry."Entry No.",ReversalEntry,Description);
        "Reversed Entry No." := BankAccLedgEntry."Entry No.";
        Reversed := TRUE;
        // Reversal of Reversal
        IF BankAccLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedBankAccLedgEntry.GET(BankAccLedgEntry."Reversed Entry No.");
          ReversedBankAccLedgEntry."Reversed by Entry No." := 0;
          ReversedBankAccLedgEntry.Reversed := FALSE;
          ReversedBankAccLedgEntry.MODIFY;
          BankAccLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
        END;
        BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
        BankAccLedgEntry.Reversed := TRUE;
        BankAccLedgEntry.MODIFY;
        INSERT;

        DimMgt.CopyLedgEntryDimToLedgEntryDim(
          DATABASE::"Bank Account Ledger Entry",BankAccLedgEntry."Entry No.",
          DATABASE::"Bank Account Ledger Entry",NewEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseVAT@67(VAR VATEntry@1000 : Record 254);
    VAR
      NewVATEntry@1001 : Record 254;
      ReversedVATEntry@1002 : Record 254;
    BEGIN
      IF VATEntry.FINDSET THEN
        REPEAT
          IF VATEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          WITH NewVATEntry DO BEGIN
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := - "Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := NextTransactionNo;
            "Source Code" := GenJnlLine."Source Code";
            "User ID" := USERID;
            "Entry No." := NextVATEntryNo;
             "Reversed Entry No." := VATEntry."Entry No.";
             Reversed := TRUE;
             // Reversal of Reversal
             IF VATEntry."Reversed Entry No." <> 0 THEN BEGIN
               ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
               ReversedVATEntry."Reversed by Entry No." := 0;
               ReversedVATEntry.Reversed := FALSE;
               ReversedVATEntry.MODIFY;
               VATEntry."Reversed Entry No." := "Entry No.";
               "Reversed by Entry No." := VATEntry."Entry No.";
             END;
             VATEntry."Reversed by Entry No." := "Entry No.";
             VATEntry.Reversed := TRUE;
             VATEntry.MODIFY;
            INSERT;
            NextVATEntryNo := NextVATEntryNo + 1;
          END;
        UNTIL VATEntry.NEXT = 0;
    END;

    PROCEDURE ReverseWHT@1500002(VAR WHTEntry@1000 : Record 28044);
    VAR
      NewWHTEntry@1001 : Record 28044;
      ReversedWHTEntry@1002 : Record 28044;
    BEGIN
      IF WHTEntry.FIND('-') THEN
        REPEAT
          IF WHTEntry."Reversed by Entry No." <> 0 THEN
            ERROR(Text015);
          WITH NewWHTEntry DO BEGIN
            NewWHTEntry := WHTEntry;
            Base := -Base;
            Amount := -Amount;
            "Base (LCY)" := -"Base (LCY)";
            "Amount (LCY)" := -"Amount (LCY)";
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Rem Realized Amount (LCY)" := -"Rem Realized Amount (LCY)";
            "Rem Realized Base (LCY)" := -"Rem Realized Base (LCY)";
            "Rem Realized Amount" := -"Rem Realized Amount";
            "Rem Realized Base" := -"Rem Realized Base";
            "WHT Difference" := -"WHT Difference";
            "Transaction No." := NextTransactionNo;
            "Source Code" := GenJnlLine."Source Code";
            "User ID" := USERID;
            "Entry No." := NextWHTEntryNo;
             "Reversed Entry No." := WHTEntry."Entry No.";
             Reversed := TRUE;
             // Reversal of Reversal
             IF WHTEntry."Reversed Entry No." <> 0 THEN BEGIN
               ReversedWHTEntry.GET(WHTEntry."Reversed Entry No.");
               ReversedWHTEntry."Reversed by Entry No." := 0;
               ReversedWHTEntry.Reversed := FALSE;
               ReversedWHTEntry.MODIFY;
               WHTEntry."Reversed Entry No." := "Entry No.";
               "Reversed by Entry No." := WHTEntry."Entry No.";
             END;
             WHTEntry."Reversed by Entry No." := "Entry No.";
             WHTEntry.Reversed := TRUE;
             WHTEntry.MODIFY;
            INSERT;
            NextWHTEntryNo := NextWHTEntryNo + 1;
          END;
        UNTIL WHTEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SetReversalDescription@74(EntryType@1000 : ' ,G/L Account,Customer,Vendor,Bank Account,Fixed Asset,Maintenance,VAT';EntryNo@1001 : Integer;VAR ReversalEntry@1002 : Record 179;VAR Description@1003 : Text[50]);
    BEGIN
      ReversalEntry.RESET;
      ReversalEntry.SETRANGE("Entry Type",EntryType);
      ReversalEntry.SETRANGE("Entry No.",EntryNo);
      IF ReversalEntry.FINDFIRST THEN
        Description := ReversalEntry.Description;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntryByReversal@75(CustLedgEntry@1000 : Record 21;CustLedgEntry2@1001 : Record 21;DtldCustLedgEntry2@1002 : Record 379;AppliedEntryNo@1005 : Integer;VAR NextDtldCustLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldCustLedgEntry@1003 : Record 379;
    BEGIN
      CustLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      CustLedgEntry."Closed by Entry No." := CustLedgEntry2."Entry No.";
      CustLedgEntry."Closed at Date" := CustLedgEntry2."Posting Date";
      CustLedgEntry."Closed by Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry."Closed by Amount (LCY)" := -CustLedgEntry2."Remaining Amt. (LCY)";
      CustLedgEntry."Closed by Currency Code" := CustLedgEntry2."Currency Code";
      CustLedgEntry."Closed by Currency Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry.Open := FALSE;
      CustLedgEntry.MODIFY;

      NewDtldCustLedgEntry := DtldCustLedgEntry2;
      NewDtldCustLedgEntry."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
      NewDtldCustLedgEntry."Entry Type" := NewDtldCustLedgEntry."Entry Type"::Application;
      NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
      NewDtldCustLedgEntry."User ID" := USERID;
      NewDtldCustLedgEntry."Transaction No." := NextTransactionNo;
      NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
      NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
      NewDtldCustLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntryByReversal@76(VendLedgEntry@1000 : Record 25;VendLedgEntry2@1001 : Record 25;DtldVendLedgEntry2@1002 : Record 380;AppliedEntryNo@1005 : Integer;VAR NextDtldVendLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldVendLedgEntry@1003 : Record 380;
    BEGIN
      VendLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      VendLedgEntry."Closed by Entry No." := VendLedgEntry2."Entry No.";
      VendLedgEntry."Closed at Date" := VendLedgEntry2."Posting Date";
      VendLedgEntry."Closed by Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry."Closed by Amount (LCY)" := -VendLedgEntry2."Remaining Amt. (LCY)";
      VendLedgEntry."Closed by Currency Code" := VendLedgEntry2."Currency Code";
      VendLedgEntry."Closed by Currency Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry.Open := FALSE;
      VendLedgEntry.MODIFY;

      NewDtldVendLedgEntry := DtldVendLedgEntry2;
      NewDtldVendLedgEntry."Vendor Ledger Entry No." := VendLedgEntry."Entry No.";
      NewDtldVendLedgEntry."Entry Type" := NewDtldVendLedgEntry."Entry Type"::Application;
      NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
      NewDtldVendLedgEntry."User ID" := USERID;
      NewDtldVendLedgEntry."Transaction No." := NextTransactionNo;
      NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
      NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
      NewDtldVendLedgEntry.INSERT;
    END;

    PROCEDURE PostPmtDiscountVATByUnapply@77(ReverseChargeVATAccNo@1002 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1000 : Record 254);
    BEGIN
      InitGLEntry(ReverseChargeVATAccNo,VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      InsertGLEntry(TRUE);

      InitGLEntry(VATAccNo,-VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
      InsertGLEntry(TRUE);
    END;

    LOCAL PROCEDURE HandlDtlAddjustment@82(DebitAddjustment@1000 : Decimal;DebitAddjustmentAddCurr@1001 : Decimal;CreditAddjustment@1002 : Decimal;CreditAddjustmentAddCurr@1003 : Decimal;TotalAmountLCY@1004 : Decimal;TotalAmountAddCurr@1005 : Decimal;GLAcc@1007 : Code[20]);
    VAR
      GLInitDone@1006 : Boolean;
    BEGIN
      GLInitDone := FALSE;
      IF (TotalAmountLCY > 0) OR ((TotalAmountLCY = 0) AND (TotalAmountAddCurr > 0)) THEN BEGIN
        IF ((DebitAddjustment <> 0) OR (DebitAddjustmentAddCurr <> 0)) AND
           ((TotalAmountLCY + DebitAddjustment <> 0) OR (TotalAmountAddCurr + DebitAddjustmentAddCurr <> 0)) THEN BEGIN
          InitGLEntry(
             GLAcc,-DebitAddjustment,-DebitAddjustmentAddCurr,TRUE,TRUE);
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          InsertGLEntry(TRUE);
          InitGLEntry(
            GLAcc,TotalAmountLCY + DebitAddjustment,
            TotalAmountAddCurr + DebitAddjustmentAddCurr,TRUE,TRUE);
          GLInitDone := TRUE;
        END;
      END ELSE IF TotalAmountLCY < 0 THEN BEGIN
        IF ((CreditAddjustment <> 0) OR (CreditAddjustmentAddCurr <> 0)) AND
           ((TotalAmountLCY + CreditAddjustment <> 0) OR (TotalAmountAddCurr + CreditAddjustmentAddCurr <> 0)) THEN BEGIN
          InitGLEntry(
             GLAcc,-CreditAddjustment,-CreditAddjustmentAddCurr,TRUE,TRUE);
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          InsertGLEntry(TRUE);
          InitGLEntry(
            GLAcc,TotalAmountLCY + CreditAddjustment,
            TotalAmountAddCurr + CreditAddjustmentAddCurr,TRUE,TRUE);
          GLInitDone := TRUE;
        END;
      END;

      IF NOT GLInitDone THEN
        InitGLEntry(GLAcc,TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CollectAddjustment@81(VAR DebitAddjustment@1003 : Decimal;VAR DebitAddjustmentAddCurr@1002 : Decimal;VAR CreditAddjustment@1001 : Decimal;VAR CreditAddjustmentAddCurr@1000 : Decimal;Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal);
    BEGIN
      IF (Amount > 0) OR ((Amount = 0) AND (AmountAddCurr > 0)) THEN BEGIN
        DebitAddjustment := DebitAddjustment + Amount;
        DebitAddjustmentAddCurr := DebitAddjustmentAddCurr + AmountAddCurr;
      END ELSE BEGIN
        CreditAddjustment := CreditAddjustment + Amount;
        CreditAddjustmentAddCurr := CreditAddjustmentAddCurr + AmountAddCurr;
      END;
    END;

    PROCEDURE SetOverDimErr@79();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    LOCAL PROCEDURE PostJob@78();
    BEGIN
      IF JobLine THEN BEGIN
        JobLine := FALSE;
        JobPostLine.PostGenJnlLine(GenJnlLine,GLEntry,TempJnlLineDim);
      END;
    END;

    PROCEDURE InsertWHTPostingBufferPosted@1500000(VAR WHTEntryGL@1500003 : Record 28044;VAR GenJnlLine@1500002 : Record 81;Apply@1500001 : Boolean;Source@1500000 : 'Sales,Purchase');
    VAR
      NextBufferEntryNo@1500008 : Integer;
      PurchSetup@1500007 : Record 98;
      GenJnlLine2@1500006 : Record 81;
      GenJnlLine3@1500005 : Record 81;
      HighestLineNo@1500004 : Integer;
      Vendor@1500009 : Record 23;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No."='' THEN BEGIN
          Vendor.GET(GenJnlLine."Account No.");
          IF Vendor.ABN<>'' THEN
            EXIT;
        END ELSE BEGIN
          Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
          IF Vendor.ABN<>'' THEN
            EXIT;
        END;
      IF (WHTEntryGL."Amount (LCY)" <> 0) THEN BEGIN
        WHTPostingSetup.GET(WHTEntryGL."WHT Bus. Posting Group",WHTEntryGL."WHT Prod. Posting Group");
        PurchSetup.GET;
        GenJnlLine3.RESET;
        GenJnlLine3 := GenJnlLine;
        GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        GenJnlLine3."Line No." := 10000;

        GenJnlLine3.INIT;
        GenJnlLine3.VALIDATE("Posting Date",GenJnlLine."Posting Date");
        GenJnlLine3."Document Type" := GenJnlLine."Document Type";
        GenJnlLine3."Account Type" := GenJnlLine3."Account Type"::"G/L Account";
        GenJnlLine3.VALIDATE("Currency Code",WHTEntryGL."Currency Code");
        IF Apply THEN
          GenJnlLine3.VALIDATE(Amount,WHTEntryGL.Amount)
        ELSE
          GenJnlLine3.VALIDATE(Amount,-WHTEntryGL.Amount);

        IF Source = Source::Purchase THEN BEGIN
          IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN BEGIN
            GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Purch. WHT Adj. Account No.");
          END ELSE BEGIN
            GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Payable WHT Account Code");
          END;

          CASE WHTPostingSetup."Bal. Payable Account Type" OF
            WHTPostingSetup."Bal. Payable Account Type"::"Bank Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"Bank Account";
            WHTPostingSetup."Bal. Payable Account Type"::"G/L Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"G/L Account";
          END;
          GenJnlLine3.VALIDATE("Bal. Account No.",WHTPostingSetup."Bal. Payable Account No.");
        END;

        IF Source = Source::Sales THEN BEGIN
          IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN BEGIN
            GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Sales WHT Adj. Account No.");
          END ELSE BEGIN
            GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Prepaid WHT Account Code");
          END;

          CASE WHTPostingSetup."Bal. Prepaid Account Type" OF
            WHTPostingSetup."Bal. Prepaid Account Type"::"Bank Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"Bank Account";
            WHTPostingSetup."Bal. Prepaid Account Type"::"G/L Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"G/L Account";
          END;
          GenJnlLine3.VALIDATE("Bal. Account No.",WHTPostingSetup."Bal. Prepaid Account No.");
        END;
        GenJnlLine3.VALIDATE("Currency Code",WHTEntryGL."Currency Code");
        IF Apply THEN BEGIN
          GenJnlLine3.VALIDATE(Amount,WHTEntryGL.Amount);
          GenJnlLine3."Amount (LCY)" := WHTEntryGL."Amount (LCY)";
        END ELSE BEGIN
          GenJnlLine3.VALIDATE(Amount,-WHTEntryGL.Amount);
          GenJnlLine3."Amount (LCY)" := -WHTEntryGL."Amount (LCY)";
        END;
        GenJnlLine3.TESTFIELD("Bal. Account No.");
        GenJnlLine3."Source Code" := GenJnlLine."Source Code";
        GenJnlLine3."Reason Code" := GenJnlLine."Reason Code";
        GenJnlLine3."Shortcut Dimension 1 Code":=GenJnlLine."Shortcut Dimension 1 Code";
        GenJnlLine3."Shortcut Dimension 2 Code":=GenJnlLine."Shortcut Dimension 2 Code";
        GenJnlLine3."Allow Zero-Amount Posting" := TRUE;
        GenJnlLine3."WHT Business Posting Group" := WHTEntryGL."WHT Bus. Posting Group";
        GenJnlLine3."WHT Product Posting Group" := WHTEntryGL."WHT Prod. Posting Group";
        GenJnlLine3."Document Type" := GenJnlLine."Document Type";
        GenJnlLine3."Document No." := GenJnlLine."Document No.";
        GenJnlLine3."External Document No." := GenJnlLine."External Document No.";
        IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
          GenJnlLine3."Gen. Posting Type" := GenJnlLine3."Gen. Posting Type"::" ";

        IF NextEntryNo=0 THEN
          NextEntryNo:=GenJnlLine."WHT Entry No.";
        IF Apply THEN BEGIN
          IF Source = Source::Purchase THEN BEGIN
            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
              InitGLEntry(WHTPostingSetup."Purch. WHT Adj. Account No.",-WHTEntryGL."Amount (LCY)",0,FALSE,TRUE)
            ELSE
              InitGLEntry(WHTPostingSetup."Payable WHT Account Code",-WHTEntryGL."Amount (LCY)",0,FALSE,TRUE);
          END;

          IF Source = Source::Sales THEN BEGIN
            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
              InitGLEntry(WHTPostingSetup."Sales WHT Adj. Account No.",-WHTEntryGL."Amount (LCY)",0,FALSE,TRUE)
            ELSE
              InitGLEntry(WHTPostingSetup."Prepaid WHT Account Code",-WHTEntryGL."Amount (LCY)",0,FALSE,TRUE);
          END;

          GLEntry."Posting Date":=GenJnlLine3."Posting Date";
          GLEntry."Additional-Currency Amount" := -WHTEntryGL.Amount;
        END ELSE BEGIN
          IF Source = Source::Purchase THEN BEGIN
            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
              InitGLEntry(WHTPostingSetup."Purch. WHT Adj. Account No.",WHTEntryGL."Amount (LCY)",0,FALSE,TRUE)
            ELSE
              InitGLEntry(WHTPostingSetup."Payable WHT Account Code",WHTEntryGL."Amount (LCY)",0,FALSE,TRUE);
          END;

          IF Source = Source::Sales THEN BEGIN
            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
              InitGLEntry(WHTPostingSetup."Sales WHT Adj. Account No.",WHTEntryGL."Amount (LCY)",0,FALSE,TRUE)
            ELSE
              InitGLEntry(WHTPostingSetup."Prepaid WHT Account Code",WHTEntryGL."Amount (LCY)",0,FALSE,TRUE);
          END;

          GLEntry."Posting Date":=GenJnlLine3."Posting Date";
          GLEntry."Additional-Currency Amount" := WHTEntryGL.Amount;
        END;

        GLEntry."Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
        GLEntry."Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
        GLEntry."Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
        GLEntry."VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
        GLEntry."VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
        InsertGLEntry(TRUE);

        WITH GenJnlLine3 DO BEGIN
          BankAccLedgEntry.LOCKTABLE;
          IF BankAcc."No." <> "Bal. Account No." THEN
            BankAcc.GET("Bal. Account No.");
          BankAcc.TESTFIELD(Blocked,FALSE);
          IF "Currency Code" = '' THEN
            BankAcc.TESTFIELD("Currency Code",'')
          ELSE
            IF BankAcc."Currency Code" <> '' THEN
              TESTFIELD("Currency Code",BankAcc."Currency Code");

          BankAcc.TESTFIELD("Bank Acc. Posting Group");
          BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");

          BankAccLedgEntry.INIT;
          BankAccLedgEntry."Bank Account No." := "Bal. Account No.";
          BankAccLedgEntry."Posting Date" := "Posting Date";
          BankAccLedgEntry."Document Date" := "Document Date";
          BankAccLedgEntry."Document Type" := "Document Type";
          BankAccLedgEntry."Document No." := "Document No.";
          BankAccLedgEntry."External Document No." := "External Document No.";
          BankAccLedgEntry.Description := Description;
          BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
          BankAccLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
          BankAccLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
          BankAccLedgEntry."Our Contact Code" := "Salespers./Purch. Code";
          BankAccLedgEntry."Source Code" := "Source Code";
          BankAccLedgEntry."Journal Batch Name" := "Journal Batch Name";
          BankAccLedgEntry."Reason Code" := "Reason Code";
          BankAccLedgEntry."Entry No." := NextEntryNo;
          BankAccLedgEntry."Transaction No." := NextTransactionNo;
          BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";
          //YIMMACOLLST
          BankAccLedgEntry."Post Dated Check No." := "Check No.";
          BankAccLedgEntry."Bank Branch No." := "Bank Branch No.";
          BankAccLedgEntry."C/V Bank Account No." := "Bank Account No.";
          BankAccLedgEntry."Customer/Vendor Bank" := "Customer/Vendor Bank";
          BankAccLedgEntry."Bank Name Cust/Vend" := "Bank Name Cust/Vend";
          BankAccLedgEntry.Narration:=Narration;
          //YIMMACOLLEN
          IF BankAcc."Currency Code" <> '' THEN
            BankAccLedgEntry.Amount := Amount
          ELSE
            BankAccLedgEntry.Amount := "Amount (LCY)";
          BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
          BankAccLedgEntry."User ID" := USERID;
          IF BankAccLedgEntry.Amount <> 0 THEN BEGIN
            BankAccLedgEntry.Open := TRUE;
            BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
          END;
          BankAccLedgEntry.Positive := BankAccLedgEntry.Amount > 0;
          BankAccLedgEntry."Bal. Account Type" := "Bal. Account Type";
          BankAccLedgEntry."Bal. Account No." := "Bal. Account No.";
          IF (Amount > 0) AND (NOT Correction) OR
             ("Amount (LCY)" > 0) AND (NOT Correction) OR
             (Amount < 0) AND Correction OR
             ("Amount (LCY)" < 0) AND Correction
          THEN BEGIN
            BankAccLedgEntry."Debit Amount" := BankAccLedgEntry.Amount;
            BankAccLedgEntry."Credit Amount" := 0;
            BankAccLedgEntry."Debit Amount (LCY)" := BankAccLedgEntry."Amount (LCY)";
            BankAccLedgEntry."Credit Amount (LCY)" := 0;
          END ELSE BEGIN
            BankAccLedgEntry."Debit Amount" := 0;
            BankAccLedgEntry."Credit Amount" := -BankAccLedgEntry.Amount;
            BankAccLedgEntry."Debit Amount (LCY)" := 0;
            BankAccLedgEntry."Credit Amount (LCY)" := -BankAccLedgEntry."Amount (LCY)";
          END;
          BankAccLedgEntry.INSERT;
          DimMgt.MoveJnlLineDimToLedgEntryDim(
            TempJnlLineDim,DATABASE::"Bank Account Ledger Entry",BankAccLedgEntry."Entry No.");

          IF ((Amount <= 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
             ((Amount  < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
          THEN BEGIN
            IF BankAcc."Currency Code" <> "Currency Code" THEN
              FIELDERROR(
                "Bank Payment Type",
                STRSUBSTNO(
                  Text004,
                  FIELDCAPTION("Currency Code"),TABLECAPTION,BankAcc.TABLECAPTION));
            CASE "Bank Payment Type" OF
              "Bank Payment Type"::"Computer Check":
                BEGIN
                  TESTFIELD("Check Printed",TRUE);
                  CheckLedgEntry.LOCKTABLE;
                  CheckLedgEntry.RESET;
                  CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                  CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                  CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                  CheckLedgEntry.SETRANGE("Check No.","Document No.");
                  IF CheckLedgEntry.FIND('-') THEN
                    REPEAT
                      CheckLedgEntry2 := CheckLedgEntry;
                      CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                      CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                      CheckLedgEntry2.MODIFY;
                    UNTIL CheckLedgEntry.NEXT = 0;
                END;
              "Bank Payment Type"::"Manual Check":
                BEGIN
                  IF "Document No." = '' THEN
                    FIELDERROR(
                      "Document No.",
                      STRSUBSTNO(
                        Text005,
                        FIELDCAPTION("Bank Payment Type"),"Bank Payment Type"));
                  CheckLedgEntry.RESET;
                  IF NextCheckEntryNo = 0 THEN BEGIN
                    CheckLedgEntry.LOCKTABLE;
                    IF CheckLedgEntry.FIND('+') THEN
                      NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                    ELSE
                      NextCheckEntryNo := 1;
                  END;

                  CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                  CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                  CheckLedgEntry.SETFILTER(
                    "Entry Status",'%1|%2|%3',
                    CheckLedgEntry."Entry Status"::Printed,
                    CheckLedgEntry."Entry Status"::Posted,
                    CheckLedgEntry."Entry Status"::"Financially Voided");
                  CheckLedgEntry.SETRANGE("Check No.","Document No.");
                  IF CheckLedgEntry.FIND('-') THEN
                    ERROR(Text006,"Document No.");

                  CheckLedgEntry.INIT;
                  CheckLedgEntry."Entry No." := NextCheckEntryNo;
                  CheckLedgEntry."Bank Account No." := BankAccLedgEntry."Bank Account No.";
                  CheckLedgEntry."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                  CheckLedgEntry."Posting Date" := BankAccLedgEntry."Posting Date";
                  CheckLedgEntry."Document Type" := BankAccLedgEntry."Document Type";
                  CheckLedgEntry."Document No." := BankAccLedgEntry."Document No.";
                  CheckLedgEntry."External Document No." := BankAccLedgEntry."External Document No.";
                  CheckLedgEntry.Description := BankAccLedgEntry.Description;
                  CheckLedgEntry."Bank Payment Type" := "Bank Payment Type";
                  CheckLedgEntry."Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
                  CheckLedgEntry."Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
                  CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Posted;
                  CheckLedgEntry.Open := TRUE;
                  CheckLedgEntry."User ID" := USERID;
                  CheckLedgEntry."Check Date" := BankAccLedgEntry."Posting Date";
                  CheckLedgEntry."Check No." := BankAccLedgEntry."Document No.";
                  GLSetup.GET;
                  GenJnlLine1.RESET;
                  GenJnlLine1.COPY(GenJnlLine);
                  IF GLSetup."Enable WHT" THEN
                    IF NOT GenJnlLine."Skip WHT" THEN
                      CheckLedgEntry."WHT Amount":=-WHTManagement.WHTAmountJournal(GenJnlLine1,FALSE);
                  CheckLedgEntry."Interest Amount":="Interest Amount";
                  IF BankAcc."Currency Code" <> '' THEN
                    CheckLedgEntry.Amount := -Amount-CheckLedgEntry."WHT Amount"
                  ELSE
                    CheckLedgEntry.Amount := -"Amount (LCY)"-CheckLedgEntry."WHT Amount";
                  CheckLedgEntry.INSERT;
                  NextCheckEntryNo := NextCheckEntryNo + 1;
                END;
            END;
          END;

          BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
          InitGLEntry(
            BankAccPostingGr."G/L Bank Account No.","Amount (LCY)","Source Currency Amount",TRUE,TRUE);
          GLEntry."Posting Date":="Posting Date";
          GLEntry."Bal. Account Type" := "Bal. Account Type";
          GLEntry."Bal. Account No." := "Bal. Account No.";
          InsertGLEntry(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE PostUnrealWHTByUnapply@1500001(UnrealVATAccNo@1500003 : Code[20];VATAccNo@1500002 : Code[20];VATEntry@1500001 : Record 28044;NewVATEntry@1500000 : Record 28044);
    VAR
      VATEntry2@1500004 : Record 28044;
    BEGIN
      InitGLEntry(UnrealVATAccNo,VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      InsertGLEntry(TRUE);

      InitGLEntry(VATAccNo,-VATEntry.Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" :=
        CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount);
      InsertGLEntry(TRUE);
    END;

    PROCEDURE IncreaseWHTEntryNo@1500003();
    BEGIN
      NextWHTEntryNo := NextWHTEntryNo + 1;
    END;

    LOCAL PROCEDURE InitCodeUnit@24();
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF NextEntryNo = 0 THEN BEGIN
          GLEntry.LOCKTABLE;
          //IF GLEntry.FIND('+') THEN BEGIN
          //  NextEntryNo := GLEntry."Entry No." + 1;
          //  NextTransactionNo := GLEntry."Transaction No." + 1;
          IF EntryType = GLEntry."Entry Type"::Definitive THEN BEGIN
            IF GLEntry.FINDLAST THEN BEGIN
              NextEntryNo := GLEntry."Entry No." + 1;
              NextTransactionNo := GLEntry."Transaction No." + 1;
            END ELSE BEGIN
              NextEntryNo := 1;
              NextTransactionNo := 1;
            END
          END ELSE BEGIN
            //NextEntryNo := 1;
            //NextTransactionNo := 1;
            IF GLEntry.FINDFIRST THEN BEGIN
              NextEntryNo := GLEntry."Entry No." - 1;
              IF NextEntryNo = 0 THEN
                NextEntryNo := -1;
              NextTransactionNo := GLEntry."Transaction No." - 1;
            END ELSE BEGIN
              NextEntryNo := -1;
              NextTransactionNo := -1;
            END;
          END;

          LastDocType := "Document Type";
          LastDocNo := "Document No.";
          LastLineNo := "Line No.";
          LastDate := "Posting Date";
          CurrentBalance := 0;

          AccountingPeriod.RESET;
          AccountingPeriod.SETCURRENTKEY(Closed);
          AccountingPeriod.SETRANGE(Closed,FALSE);
          AccountingPeriod.FINDFIRST;
          FiscalYearStartDate := AccountingPeriod."Starting Date";

          GLSetup.GET;

          SalesSetup.GET;
          PurchSetup.GET;

          IF NOT GenJnlTemplate.GET("Journal Template Name") THEN
            GenJnlTemplate.INIT;

          VATEntry.LOCKTABLE;
          IF VATEntry.FINDLAST THEN
            NextVATEntryNo := VATEntry."Entry No." + 1
          ELSE
            NextVATEntryNo := 1;
          NextConnectionNo := 1;
          FirstNewVATEntryNo := NextVATEntryNo;

          WHTEntry.LOCKTABLE;
          IF WHTEntry.FIND('+') THEN
            NextWHTEntryNo := WHTEntry."Entry No." + 1
          ELSE
            NextWHTEntryNo := 1;
          IF NOT GLSetup."Enable WHT" THEN
            NextWHTEntryNo := 0;
          FirstNewWHTEntryNo := NextWHTEntryNo;

          GLReg.LOCKTABLE;
          //IF GLReg.FIND('+') THEN
          //  GLReg."No." := GLReg."No." + 1
          //ELSE
          //  GLReg."No." := 1;
          IF EntryType = GLEntry."Entry Type"::Definitive THEN BEGIN
            IF GLReg.FINDLAST THEN
              GLReg."No." := GLReg."No." + 1
            ELSE
              GLReg."No." := 1;
          END ELSE BEGIN
            IF GLReg.FINDFIRST THEN BEGIN
              GLReg."No." := GLReg."No." - 1;
              IF GLReg."No." = 0 THEN
                GLReg."No." := -1;
            END ELSE
              GLReg."No." := -1;
          END;
          GLReg.INIT;
          GLReg."From Entry No." := NextEntryNo;
          //GLReg."From VAT Entry No." := NextVATEntryNo;
          IF EntryType = GLEntry."Entry Type"::Definitive THEN
            GLReg."From VAT Entry No." := NextVATEntryNo;
          GLReg."From WHT Entry No." := NextWHTEntryNo;
          GLReg."Creation Date" := TODAY;
          GLReg."Source Code" := "Source Code";
          GLReg."Journal Batch Name" := "Journal Batch Name";
          GLReg."User ID" := USERID;
        END ELSE
          IF (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
             (LastDate <> "Posting Date") OR (CurrentBalance = 0) AND NOT "System-Created Entry"
          THEN BEGIN
            //NextTransactionNo := NextTransactionNo + 1;
            IF EntryType = GLEntry."Entry Type"::Definitive THEN
              NextTransactionNo := NextTransactionNo + 1
            ELSE
              NextTransactionNo := NextTransactionNo - 1;
            LastDocType := "Document Type";
            LastDocNo := "Document No.";
            LastLineNo := "Line No.";
            LastDate := "Posting Date";
            FirstNewVATEntryNo := NextVATEntryNo;
            FirstNewWHTEntryNo := NextWHTEntryNo;
          END;

        GetCurrencyExchRate;
        GLEntryTmp.DELETEALL;
        IF ("Account No." <> '') AND ("Bal. Account No." = '') THEN
          CurrentBalance := CurrentBalance + "Amount (LCY)";
        IF ("Account No." = '') AND ("Bal. Account No." <> '') THEN
          CurrentBalance := CurrentBalance - "Amount (LCY)";
      END;
    END;

    LOCAL PROCEDURE PostCust@12();
    VAR
      CustLedgEntry@1000 : Record 21;
      OldCustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf@1002 : Record 382;
      DtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldCustLedgEntry@1004 : Record 379;
      TempGenJnlTemp@1500000 : Record 80;
      SalesTaxInvHeader@1500001 : Record 28071;
      CustLedgEntryInsentive@1000000001 : Record 21;
      "Cust-editInsentive"@1000000000 : Codeunit 103;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF Cust."No." <> "Account No." THEN
          Cust.GET("Account No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.TESTFIELD("Receivables Account");

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        CustLedgEntry.INIT;
        CustLedgEntry."Customer No." := "Account No.";
        CustLedgEntry."Posting Date" := "Posting Date";
        CustLedgEntry."Document Date" := "Document Date";
        CustLedgEntry."Document Type" := "Document Type";
        CustLedgEntry."Document No." := "Document No.";
        CustLedgEntry."External Document No." := "External Document No.";
        CustLedgEntry.Description := Description;
        CustLedgEntry."Currency Code" := "Currency Code";
        CustLedgEntry."Sales (LCY)" := "Sales/Purch. (LCY)";
        CustLedgEntry."Profit (LCY)" := "Profit (LCY)";
        CustLedgEntry."Inv. Discount (LCY)" := "Inv. Discount (LCY)";
        CustLedgEntry."Sell-to Customer No." := "Sell-to/Buy-from No.";
        CustLedgEntry."Customer Posting Group" := "Posting Group";
        CustLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        CustLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        CustLedgEntry."Salesperson Code" := "Salespers./Purch. Code";
        CustLedgEntry."Source Code" := "Source Code";
        CustLedgEntry."On Hold" := "On Hold";
        CustLedgEntry."Applies-to Doc. Type" := "Applies-to Doc. Type";
        CustLedgEntry."Applies-to Doc. No." := "Applies-to Doc. No.";
        CustLedgEntry."Due Date" := "Due Date";
        CustLedgEntry."Pmt. Discount Date" := "Pmt. Discount Date";
        CustLedgEntry."Applies-to ID" := "Applies-to ID";
        CustLedgEntry."Journal Batch Name" := "Journal Batch Name";
        CustLedgEntry."Reason Code" := "Reason Code";
        CustLedgEntry."Entry No." := NextEntryNo;
        CustLedgEntry."Transaction No." := NextTransactionNo;

      //YIMMNTTST
        CustLedgEntry."Kwitansi No.":=GenJnlLine."Kwitansi No.";
        CustLedgEntry."Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
        CustLedgEntry."Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
        CustLedgEntry."Tax Invoice No.":=GenJnlLine."Tax Invoice No.";
        CustLedgEntry."Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
        CustLedgEntry.Narration:=GenJnlLine.Narration;
      //YIMMNTTEN

      //YIMMRBDTL-St

        CustLedgEntry."Bank Code":=GenJnlLine."Customer/Vendor Bank";
        CustLedgEntry."Bank Account No":=GenJnlLine."Bank Account No.";
        CustLedgEntry."Vend/Cust Bank Name":=GenJnlLine."Bank Name Cust/Vend";
        CustLedgEntry."Bank Address":=GenJnlLine."Bank Address";
        CustLedgEntry.BeniName:=GenJnlLine.BeniName;


      //YIMMRBDTL-EN


      //YIMMNNPWPST
        CustLedgEntry."Ship-to Code":=GenJnlLine."Ship-to Code";

      //YIMMREXPST

      MasterSetUp.GET;
      IF ("Document Type"="Document Type"::Invoice) AND ("Reason Code"=MasterSetUp."Reason (Normal)") THEN
      CustLedgEntry.DocType:='Sales Invoice';

      IF ("Document Type"="Document Type"::Invoice) AND ("Reason Code"=MasterSetUp."Reason (Sale as Purchase)") THEN
      CustLedgEntry.DocType:='Purchase Return';

      IF ("Document Type"="Document Type"::"Credit Memo") AND ("Reason Code"=MasterSetUp."Reason (Normal)") THEN
      CustLedgEntry.DocType:='Sales Return';

      IF ("Document Type"="Document Type"::"Credit Memo") AND ("Reason Code"=MasterSetUp."Reason (Sale as Purchase)") THEN
      CustLedgEntry.DocType:='Purchase Invoice';

      IF ("Document Type"<>"Document Type"::"Credit Memo") AND (("Document Type"<>"Document Type"::Invoice)) THEN
      CustLedgEntry.DocType:=FORMAT("Document Type");



      //YIMMREXPEN
      //YIMMNNPWPEN
        CustLedgEntry."Ship-to Address":=GenJnlLine."Ship-to Address";
        CustLedgEntry."Ship-to Address 2":=GenJnlLine."Ship-to Address 2";

      //YIMMAEXPST
        CustLedgEntry."Type Of Transaction" := "Type Of Transaction";
        CustLedgEntry."Incentive Month" := "Incentive Month";
      //YIMMAEXPEN
        CustLedgEntry."User ID" := USERID;
        CustLedgEntry."Bal. Account Type" := "Bal. Account Type";
        CustLedgEntry."Bal. Account No." := "Bal. Account No.";
        CustLedgEntry."No. Series" := "Posting No. Series";
        CustLedgEntry.Adjustment := Adjustment;
        CustLedgEntry."BAS Adjustment" := "BAS Adjustment";
        CustLedgEntry."Adjustment Applies-to" := "Adjustment Applies-to";
        CustLedgEntry."IC Partner Code" := "IC Partner Code";
        CustLedgEntry.Prepayment := Prepayment;
        WHTAmountLCY := 0;
        SourceCodeSetup.GET;
        IF (GenJnlLine."Source Code" = SourceCodeSetup."Payment Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."Purchase Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."Sales Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."General Journal")
        THEN BEGIN
          GLSetup.GET;
          GenJnlLine1.RESET;
          GenJnlLine1.COPY(GenJnlLine);
          IF GLSetup."Enable WHT" THEN
            IF (NOT GenJnlLine1."Skip WHT") THEN BEGIN
              IF (GenJnlLine1."Applies-to Doc. No." = '') AND
                 (GenJnlLine1."Applies-to ID" = '')
              THEN BEGIN
                IF (((GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) OR
                     (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::"Credit Memo")) AND
                    ((GenJnlLine1."Account Type" = GenJnlLine1."Account Type"::"G/L Account") OR
                     (GenJnlLine1."Bal. Account Type" = GenJnlLine1."Bal. Account Type"::"G/L Account")))
                THEN BEGIN
                  IF WHTPostingSetup.GET(
                       GenJnlLine1."WHT Business Posting Group",
                       GenJnlLine1."WHT Product Posting Group")
                  THEN
                    IF (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Invoice) OR
                       (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest)
                    THEN BEGIN
                      IF GenJnlLine1."WHT Absorb Base" <> 0 THEN
                        WHTAmountLCY :=
                          -ROUND(GenJnlLine1."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100)
                      ELSE
                        WHTAmountLCY :=
                          ROUND(GenJnlLine1.Amount * WHTPostingSetup."WHT %" / 100);
                    END;
                END;
              END ELSE BEGIN
                IF (((GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) OR
                     (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::"Credit Memo")) AND
                    ((GenJnlLine1."Account Type" = GenJnlLine1."Account Type"::"G/L Account") OR
                     (GenJnlLine1."Bal. Account Type" = GenJnlLine1."Bal. Account Type"::"G/L Account")))
                THEN BEGIN
                  IF WHTPostingSetup.GET(
                       GenJnlLine1."WHT Business Posting Group",
                       GenJnlLine1."WHT Product Posting Group")
                  THEN BEGIN
                    IF (WHTPostingSetup."Realized WHT Type" =
                        WHTPostingSetup."Realized WHT Type"::Earliest)
                    THEN BEGIN
                      GenJnlLine1.RESET;
                      GenJnlLine1.COPY(GenJnlLine);
                      IF GenJnlLine1.FIND('-') THEN
                        WHTManagement.CheckApplicationGenSalesWHT(GenJnlLine1);
                      WHTAmountLCY := ROUND(WHTManagement.CalcCustExtraWHTForEarliest(GenJnlLine1));
                    END;

                    IF (WHTPostingSetup."Realized WHT Type" =
                        WHTPostingSetup."Realized WHT Type"::Invoice)
                    THEN BEGIN
                      GenJnlLine1.RESET;
                      GenJnlLine1.COPY(GenJnlLine);
                      IF GenJnlLine1.FIND('-') THEN
                        WHTManagement.CheckApplicationGenSalesWHT(GenJnlLine1);
                      IF GenJnlLine1."WHT Absorb Base" <> 0 THEN
                        WHTAmountLCY :=
                          -ROUND(GenJnlLine1."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100)
                      ELSE
                        WHTAmountLCY :=
                          ROUND(GenJnlLine1.Amount * WHTPostingSetup."WHT %" / 100);
                    END;
                  END;
                END;
              END;
            END;
          IF (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) THEN
            WHTAmountLCY := ABS(WHTAmountLCY)
          ELSE
            WHTAmountLCY := -ABS(WHTAmountLCY);
        END;

        CustLedgEntry."Amount to Apply" := Amount;
        IF NOT Cust."Block Payment Tolerance" AND
           ((CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) OR
            (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo"))
        THEN BEGIN

          IF (CustLedgEntry."Pmt. Discount Date" <> 0D) AND
             (CustLedgEntry."Pmt. Discount Date" <> CustLedgEntry."Document Date")
          THEN
            CustLedgEntry."Pmt. Disc. Tolerance Date" :=
              CALCDATE(GLSetup."Payment Discount Grace Period",CustLedgEntry."Pmt. Discount Date")
          ELSE
            CustLedgEntry."Pmt. Disc. Tolerance Date" := CustLedgEntry."Pmt. Discount Date";

          IF CustLedgEntry."Currency Code" = '' THEN BEGIN
            IF (GLSetup."Max. Payment Tolerance Amount" <
               (ABS(GLSetup."Payment Tolerance %" / 100 * "Amount (LCY)"))) OR (GLSetup."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (GLSetup."Max. Payment Tolerance Amount" = 0) AND (GLSetup."Payment Tolerance %" > 0) THEN
                CustLedgEntry."Max. Payment Tolerance" :=
                  ROUND(GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100,GLSetup."Amount Rounding Precision")
              ELSE
                IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" THEN
                  CustLedgEntry."Max. Payment Tolerance" := -GLSetup."Max. Payment Tolerance Amount"
                ELSE
                  CustLedgEntry."Max. Payment Tolerance" := GLSetup."Max. Payment Tolerance Amount"
            END ELSE
              CustLedgEntry."Max. Payment Tolerance" :=
                GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100
          END ELSE BEGIN
            IF (Currency."Max. Payment Tolerance Amount" <
               (ABS(Currency."Payment Tolerance %" / 100 * Amount))) OR (Currency."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (Currency."Max. Payment Tolerance Amount" = 0) AND (Currency."Payment Tolerance %" > 0) THEN
                CustLedgEntry."Max. Payment Tolerance" :=
                  ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision")
              ELSE
                IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" THEN
                  CustLedgEntry."Max. Payment Tolerance" := -Currency."Max. Payment Tolerance Amount"
                ELSE
                  CustLedgEntry."Max. Payment Tolerance" := Currency."Max. Payment Tolerance Amount"
            END ELSE
              CustLedgEntry."Max. Payment Tolerance" :=
                ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision");
          END;
          IF ABS(CustLedgEntry."Max. Payment Tolerance") > ABS(Amount) THEN
            CustLedgEntry."Max. Payment Tolerance" := Amount;

        END;

        DtldCVLedgEntryBuf.DELETEALL;
        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Initial Entry";
        DtldCVLedgEntryBuf."Posting Date" := "Posting Date";
        DtldCVLedgEntryBuf."Document Type" := "Document Type";
        DtldCVLedgEntryBuf."Document No." := "Document No.";
        DtldCVLedgEntryBuf.Amount := Amount;
        DtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)" - WHTAmountLCY;
        DtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)";
        DtldCVLedgEntryBuf."Additional-Currency Amount" := Amount;
        DtldCVLedgEntryBuf."Customer No." := "Account No.";
        DtldCVLedgEntryBuf."Currency Code" := "Currency Code";
        DtldCVLedgEntryBuf."User ID" := USERID;
        DtldCVLedgEntryBuf."Initial Entry Due Date" := "Due Date";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := "Shortcut Dimension 1 Code";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := "Shortcut Dimension 2 Code";
        DtldCVLedgEntryBuf."Initial Document Type" := "Document Type";

        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,TRUE);
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF GLSetup."Pmt. Disc. Excl. VAT" THEN
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          ELSE
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;
          CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
            ROUND(
              CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,
              Currency."Amount Rounding Precision");

          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        END;

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Original Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Original Currency Factor" := 1;
        CVLedgEntryBuf."Adjusted Currency Factor" := CVLedgEntryBuf."Original Currency Factor";

        // Check the document no.
        IF "Recurring Method" = 0 THEN
          IF "Document Type" IN
             ["Document Type"::Invoice,
              "Document Type"::"Credit Memo",
              "Document Type"::"Finance Charge Memo",
              "Document Type"::Reminder]
          THEN BEGIN
            OldCustLedgEntry.RESET;
            IF NOT RECORDLEVELLOCKING THEN
              OldCustLedgEntry.SETCURRENTKEY("Document No.");
            OldCustLedgEntry.SETRANGE("Document No.",CVLedgEntryBuf."Document No.");
            OldCustLedgEntry.SETRANGE("Document Type",CVLedgEntryBuf."Document Type");
            IF NOT OldCustLedgEntry.ISEMPTY THEN
              ERROR(
                Text001,
                "Document Type","Document No.");

            IF SalesSetup."Ext. Doc. No. Mandatory" THEN
              IF "Document Type" IN
                 ["Document Type"::Invoice,
                  "Document Type"::"Credit Memo",
                  "Document Type"::Payment,
                  "Document Type"::Refund,
                  "Document Type"::" "]
              THEN
                TESTFIELD("External Document No.");
          END;

        // Post the application
        ApplyCustLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,GLSetup."Appln. Rounding Precision");

        // Post customer entry
        TransferCustLedgEntry(CVLedgEntryBuf,CustLedgEntry,FALSE);
        CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Applies-to Doc. No." := '';
        CustLedgEntry.INSERT;

        DimMgt.MoveJnlLineDimToLedgEntryDim(
          TempJnlLineDim,DATABASE::"Cust. Ledger Entry",CustLedgEntry."Entry No.");

        // Post Dtld. customer entry
        PostDtldCustLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,GLSetup,NextTransactionNo,TRUE);
        IF (WHTAmountLCY <> 0) THEN BEGIN
          IF ((GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) OR
              (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::"Credit Memo"))
          THEN
            IF (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Invoice) OR
               (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest)
            THEN BEGIN
              InitGLEntry(
                WHTPostingSetup."Prepaid WHT Account Code",
                WHTAmountLCY,
                WHTAmountLCY,
                TRUE,
                TRUE);
              InsertGLEntry(TRUE);
            END;
        END;

        IF GenJnlLine."Source Code"<>SourceCodeSetup."Financially Voided Check" THEN BEGIN
          GenJnlLine1.RESET;
          GenJnlLine1.COPY(GenJnlLine);
          GLSetup.GET;
          IF (GLSetup."Enable WHT") AND (NOT GLSetup."Enable GST (Australia)") THEN
            IF (NOT GenJnlLine."Skip WHT") THEN BEGIN
              IF (GenJnlLine."Applies-to Doc. No."<>'') OR (GenJnlLine."Applies-to ID"<>'') THEN BEGIN
                KeepWHTEntryNo := NextWHTEntryNo;
                CASE "Document Type" OF
                  "Document Type"::Payment:
                    BEGIN
                      GLSetup.GET;
                      IF (GLSetup."Manual Sales WHT Calc.") THEN BEGIN
                        IF GenJnlLine."WHT Payment" THEN
                          NextWHTEntryNo := WHTManagement.ApplyManualCustInvoiceWHT(CustLedgEntry,GenJnlLine1);
                      END ELSE BEGIN
                        IF WHTPostingSetup.GET(
                             GenJnlLine."WHT Business Posting Group",
                             GenJnlLine."WHT Product Posting Group")
                        THEN BEGIN
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Payment)
                          THEN BEGIN
                            NextWHTEntryNo := WHTManagement.ApplyCustInvoiceWHT(CustLedgEntry,GenJnlLine1);
                            IF NextWHTEntryNo <> -1 THEN
                              HadWHTEntryNo := TRUE
                            ELSE
                              NextWHTEntryNo := KeepWHTEntryNo;
                          END;

                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine);
                            IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          END;
                        END;
                      END;
                    END;
                  "Document Type"::Invoice:
                    BEGIN
                      IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                          ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                          ("Source Code" = SourceCodeSetup."Sales Journal") OR
                          ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                          ("Source Code" = SourceCodeSetup."General Journal"))
                      THEN BEGIN
                        IF WHTPostingSetup.GET(
                          GenJnlLine."WHT Business Posting Group",
                          GenJnlLine."WHT Product Posting Group")
                        THEN
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Invoice) OR
                             (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            GenJnlLine2.RESET;
                            GenJnlLine2.COPY(GenJnlLine);
                            GenJnlLine2.Amount := ABS(GenJnlLine2.Amount);
                            GenJnlLine2."WHT Absorb Base" := ABS(GenJnlLine2."WHT Absorb Base");
                            NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine2);
                            IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          END;
                      END;

                      IF SourceCodeSetup.Sales = "Source Code" THEN BEGIN
                        WHTEntry.RESET;
                        WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                        IF WHTEntry.FIND('-') THEN
                          REPEAT
                            WHTPostingSetup.GET(
                              WHTEntry."WHT Bus. Posting Group",
                              WHTEntry."WHT Prod. Posting Group");
                            IF (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Invoice) OR
                               (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Earliest)
                            THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          UNTIL WHTEntry.NEXT = 0;
                      END;
                    END;
                  "Document Type"::"Credit Memo":
                    BEGIN
                      IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                          ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                          ("Source Code" = SourceCodeSetup."Sales Journal") OR
                          ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                          ("Source Code" = SourceCodeSetup."General Journal"))
                      THEN BEGIN
                        IF WHTPostingSetup.GET(
                          GenJnlLine."WHT Business Posting Group",
                          GenJnlLine."WHT Product Posting Group")
                        THEN
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Invoice) OR
                             (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            GenJnlLine2.RESET;
                            GenJnlLine2.COPY(GenJnlLine);
                            GenJnlLine2.Amount := ABS(GenJnlLine2.Amount);
                            GenJnlLine2."WHT Absorb Base" := ABS(GenJnlLine2."WHT Absorb Base");
                            NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine2);
                            IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          END;
                      END;

                      IF SourceCodeSetup.Sales = "Source Code" THEN BEGIN
                        WHTEntry.RESET;
                        WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                        IF WHTEntry.FIND('-') THEN
                          REPEAT
                            WHTPostingSetup.GET(
                              WHTEntry."WHT Bus. Posting Group",
                              WHTEntry."WHT Prod. Posting Group");
                            IF (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Invoice) OR
                               (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Earliest)
                            THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          UNTIL WHTEntry.NEXT = 0;
                      END;
                    END;
                  "Document Type"::Refund:
                    BEGIN
                    GLSetup.GET;
                    IF (GLSetup."Manual Sales WHT Calc.") THEN BEGIN
                     IF GenJnlLine."WHT Payment" THEN
                       NextWHTEntryNo := WHTManagement.ApplyManualCustInvoiceWHT(CustLedgEntry,GenJnlLine1);
                     END ELSE BEGIN
                      IF WHTPostingSetup.GET(
                           GenJnlLine."WHT Business Posting Group",
                           GenJnlLine."WHT Product Posting Group")
                      THEN BEGIN
                        IF (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Payment)
                        THEN BEGIN
                          NextWHTEntryNo := WHTManagement.ApplyCustInvoiceWHT(CustLedgEntry,GenJnlLine1);
                          IF NextWHTEntryNo <> -1 THEN
                            HadWHTEntryNo := TRUE
                          ELSE
                            NextWHTEntryNo := KeepWHTEntryNo;
                        END;

                        IF (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Earliest)
                        THEN BEGIN
                          NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine);
                          IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                            WHTEntry."Transaction No." := NextTransactionNo;
                            WHTEntry.MODIFY;
                          END;
                          END;
                        END;
                      END;
                    END;
                  END;
                // Payment Method Code.Begin
                TempGenJnlTemp.SETRANGE(Type,TempGenJnlTemp.Type::Sales);
                IF TempGenJnlTemp.FIND('-') THEN BEGIN
                  IF GenJnlLine."Journal Template Name"=TempGenJnlTemp.Name THEN BEGIN
                    WHTEntry.RESET;
                    WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Payment);
                    WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                    WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
                    IF WHTEntry.FIND('-') THEN
                      REPEAT
                        WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                        WHTPostingSetup.TESTFIELD("Prepaid WHT Account Code");
                        InitGLEntry(
                          WHTPostingSetup."Prepaid WHT Account Code",-WHTEntry."Amount (LCY)","Source Currency Amount",TRUE,TRUE);
                        InsertGLEntry(TRUE);
                      UNTIL WHTEntry.NEXT=0;
                  END;
                END;
                // Payment Method Code.End
              END ELSE BEGIN
                KeepWHTEntryNo := NextWHTEntryNo;
                CASE "Document Type" OF
                  "Document Type"::Invoice:
                     BEGIN
                       IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                           ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                           ("Source Code" = SourceCodeSetup."Sales Journal") OR
                           ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                           ("Source Code" = SourceCodeSetup."General Journal"))
                       THEN BEGIN
                         GenJnlLine2.RESET;
                         GenJnlLine2.COPY(GenJnlLine);
                         GenJnlLine2.Amount := -ABS(GenJnlLine2.Amount);
                         GenJnlLine2."WHT Absorb Base" := -ABS(GenJnlLine2."WHT Absorb Base");
                         NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine2);
                       END;

                       WHTEntry.RESET;
                       WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                       IF WHTEntry.FIND('-') THEN
                         REPEAT
                           WHTPostingSetup.GET(
                             WHTEntry."WHT Bus. Posting Group",
                             WHTEntry."WHT Prod. Posting Group");
                           IF (WHTPostingSetup."Realized WHT Type" =
                               WHTPostingSetup."Realized WHT Type"::Invoice) OR
                              (WHTPostingSetup."Realized WHT Type" =
                               WHTPostingSetup."Realized WHT Type"::Earliest)
                           THEN BEGIN
                             WHTEntry."Transaction No." := NextTransactionNo;
                             WHTEntry.MODIFY;
                           END;
                         UNTIL WHTEntry.NEXT = 0;
                     END;
                  "Document Type"::"Credit Memo":
                    BEGIN
                      IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                          ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                          ("Source Code" = SourceCodeSetup."Sales Journal") OR
                          ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                          ("Source Code" = SourceCodeSetup."General Journal"))
                      THEN BEGIN
                        GenJnlLine2.RESET;
                        GenJnlLine2.COPY(GenJnlLine);
                        GenJnlLine2.Amount := ABS(GenJnlLine2.Amount);
                        GenJnlLine2."WHT Absorb Base" := ABS(GenJnlLine2."WHT Absorb Base");
                        NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine2);
                      END;

                      WHTEntry.RESET;
                      WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                      IF WHTEntry.FIND('-') THEN
                        REPEAT
                          WHTPostingSetup.GET(
                            WHTEntry."WHT Bus. Posting Group",
                            WHTEntry."WHT Prod. Posting Group");
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Invoice) OR
                             (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            WHTEntry."Transaction No." := NextTransactionNo;
                            WHTEntry.MODIFY;
                          END;
                        UNTIL WHTEntry.NEXT = 0;
                    END;
                  "Document Type"::Payment:
                    IF WHTPostingSetup.GET(GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group") THEN
                      IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
                        GenJnlLine2.RESET;
                        GenJnlLine2.COPY(GenJnlLine);
                        GenJnlLine2.Amount := -ABS(GenJnlLine2.Amount);
                        GenJnlLine2."WHT Absorb Base" := -ABS(GenJnlLine2."WHT Absorb Base");
                        NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine2);
                        IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                          WHTEntry."Transaction No." := NextTransactionNo;
                          WHTEntry.MODIFY;
                        END;
                      END;
                  "Document Type"::Refund:
                    IF WHTPostingSetup.GET(GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group") THEN
                      IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
                        GenJnlLine2.RESET;
                        GenJnlLine2.COPY(GenJnlLine);
                        GenJnlLine2.Amount := -ABS(GenJnlLine2.Amount);
                        GenJnlLine2."WHT Absorb Base" := -ABS(GenJnlLine2."WHT Absorb Base");
                        NextWHTEntryNo := WHTManagement.InsertCustJournalWHT(GenJnlLine2);
                        IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                          WHTEntry."Transaction No." := NextTransactionNo;
                          WHTEntry.MODIFY;
                        END;
                      END;
                END
              END;
            END;
          IF NextWHTEntryNo = 0 THEN
            NextWHTEntryNo := KeepWHTEntryNo;

          GenJnlLine1.RESET;
          GenJnlLine1.COPY(GenJnlLine);
          IF GLSetup."Enable Tax Invoices" THEN BEGIN
            IF (GenJnlLine."Applies-to Doc. No."<>'') OR (GenJnlLine."Applies-to ID"<>'') THEN BEGIN
              CASE "Document Type" OF
                "Document Type"::Payment:
                  BEGIN
                    TaxManagement.ApplyCustInvoiceWHT(CustLedgEntry,GenJnlLine1);
                  END;
                "Document Type"::Refund:
                  BEGIN
                   TaxManagement.ApplyCustCreditWHT(CustLedgEntry,GenJnlLine1);
                  END;
              END;
            END ELSE BEGIN
              ReportSelection.RESET;
              ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"WHT Certificate");
              IF ReportSelection.FIND('-') THEN BEGIN
                REPEAT
                  SalesTaxInvHeader.SETRANGE("Posting Description",GenJnlLine."Document No.");
                  IF SalesTaxInvHeader.FIND('-') THEN
                    REPORT.RUN(ReportSelection."Report ID",SalesSetup."Print Dialog",FALSE,SalesTaxInvHeader);
                UNTIL ReportSelection.NEXT=0;
              END;
            END;
          END;

          IF (GenJnlLine."Applies-to ID" <> '') THEN BEGIN
            CustLedgEntry.RESET;
            CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
            CustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
            CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            IF CustLedgEntry.FIND('-') THEN
              CustLedgEntry.MODIFYALL("Applies-to ID",'');
          END;
        END;
      //YIMMAEXPST
        IF NOT Interfaced AND ("Document Type" = "Document Type"::"Credit Memo" )THEN

        IF  ("Type Of Transaction" IN ["Type Of Transaction"::"Selling In","Type Of Transaction"::"Selling Out"]) THEN BEGIN

            CustLedgEntryInsentive.RESET;
            CustLedgEntryInsentive.SETCURRENTKEY("Customer No.","Document Type","Type Of Transaction","Incentive Month");
            CustLedgEntryInsentive.SETRANGE(CustLedgEntryInsentive."Customer No.","Account No.");
            CustLedgEntryInsentive.SETRANGE(CustLedgEntryInsentive."Document Type",CustLedgEntryInsentive."Document Type"::"Credit Memo");
            CustLedgEntryInsentive.SETRANGE(CustLedgEntryInsentive."Type Of Transaction","Type Of Transaction");
            CustLedgEntryInsentive.SETRANGE(CustLedgEntryInsentive."Incentive Month","Incentive Month");
            CustLedgEntryInsentive.SETFILTER(CustLedgEntryInsentive."Document No.",'<>%1',"Document No.");
            IF CustLedgEntryInsentive.FINDFIRST THEN REPEAT
              CustLedgEntryInsentive."External Document No." := "External Document No.";
              CustLedgEntryInsentive."Due Date" := "Due Date";
              "Cust-editInsentive".RUN(CustLedgEntryInsentive);
            UNTIL CustLedgEntryInsentive.NEXT = 0;
          END;
      //YIMMAEXPEN
      END;
    END;

    LOCAL PROCEDURE PostVend@13();
    VAR
      VendLedgEntry@1000 : Record 25;
      OldVendLedgEntry@1001 : Record 25;
      CVLedgEntryBuf@1002 : Record 382;
      DtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldVendLedgEntry@1004 : Record 380;
      PurchTaxInvHeader@1500001 : Record 28075;
      TempGenJnlTemp@1500000 : Record 80;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF Vend."No." <> "Account No." THEN
          Vend.GET("Account No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.TESTFIELD("Payables Account");

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        VendLedgEntry.INIT;
        VendLedgEntry."Vendor No." := "Account No.";
        VendLedgEntry."Posting Date" := "Posting Date";
        VendLedgEntry."Document Date" := "Document Date";
        VendLedgEntry."Document Type" := "Document Type";
        VendLedgEntry."Document No." := "Document No.";
        VendLedgEntry."External Document No." := "External Document No.";
        VendLedgEntry.Description := Description;
        VendLedgEntry."Currency Code" := "Currency Code";
        VendLedgEntry."Purchase (LCY)" := "Sales/Purch. (LCY)";
        VendLedgEntry."Inv. Discount (LCY)" := "Inv. Discount (LCY)";
        VendLedgEntry."Buy-from Vendor No." := "Sell-to/Buy-from No.";
        VendLedgEntry."Vendor Posting Group" := "Posting Group";
        VendLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        VendLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        VendLedgEntry."Purchaser Code" := "Salespers./Purch. Code";
        VendLedgEntry."Source Code" := "Source Code";
        VendLedgEntry."On Hold" := "On Hold";
        VendLedgEntry."Applies-to Doc. Type" := "Applies-to Doc. Type";
        VendLedgEntry."Applies-to Doc. No." := "Applies-to Doc. No.";
        VendLedgEntry."Due Date" := "Due Date";
        VendLedgEntry."Pmt. Discount Date" := "Pmt. Discount Date";
        VendLedgEntry."Applies-to ID" := "Applies-to ID";
        VendLedgEntry."Journal Batch Name" := "Journal Batch Name";
        VendLedgEntry."Reason Code" := "Reason Code";
        VendLedgEntry."Entry No." := NextEntryNo;
        VendLedgEntry."Transaction No." := NextTransactionNo;

      //YIMMNTTST
        VendLedgEntry."Kwitansi No." :=GenJnlLine."Kwitansi No.";
        VendLedgEntry."Commercial Invoice No." :=GenJnlLine."Commercial Invoice No.";
        VendLedgEntry."Commercial Invoice Date" :=GenJnlLine."Commercial Invoice Date";
        VendLedgEntry."Tax Invoice No."  := GenJnlLine."Tax Invoice No.";
        VendLedgEntry."Tax Invoice Date" := GenJnlLine."Tax Invoice Date";
        VendLedgEntry.Narration :=GenJnlLine.Narration;
      //YIMMNTTEN
      //YIMMNNPWPST
        VendLedgEntry."Order Address Code" := GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN
      //YIMMATOP
        VendLedgEntry."Type Of Transaction" :=GenJnlLine."Type Of Transaction";
      //YIMMREXPST

      //YIMMRBDTL

        VendLedgEntry."Bank Code":=GenJnlLine."Customer/Vendor Bank";
        VendLedgEntry."Bank Account No":=GenJnlLine."Bank Account No.";
        VendLedgEntry."Vend/Cust Bank Name":=GenJnlLine."Bank Name Cust/Vend";
        VendLedgEntry."Bank Address":=GenJnlLine."Bank Address";
        VendLedgEntry.BeniName:=GenJnlLine.BeniName;


      //YIMMRBDTL



      MasterSetUp.GET;

      IF ("Document Type"="Document Type"::Invoice) AND ("Reason Code"=MasterSetUp."Reason (Normal)") THEN
      VendLedgEntry.DocType:='Purchase Invoice';

      IF ("Document Type"="Document Type"::Invoice) AND ("Reason Code"=MasterSetUp."Reason (Purchase as Sale)") THEN
      VendLedgEntry.DocType:='Sales Return';

      IF ("Document Type"="Document Type"::"Credit Memo") AND ("Reason Code"=MasterSetUp."Reason (Normal)") THEN
      VendLedgEntry.DocType:='Purchase Return';

      IF ("Document Type"="Document Type"::"Credit Memo") AND ("Reason Code"=MasterSetUp."Reason (Purchase as Sale)") THEN
      VendLedgEntry.DocType:='Sales Invoice';
      //YIMMREXPEN
      //YIMMATOP

        VendLedgEntry."User ID" := USERID;
        VendLedgEntry."Bal. Account Type" := "Bal. Account Type";
        VendLedgEntry."Bal. Account No." := "Bal. Account No.";
        VendLedgEntry."No. Series" := "Posting No. Series";
        VendLedgEntry.Adjustment := Adjustment;
        VendLedgEntry."BAS Adjustment" := "BAS Adjustment";
        VendLedgEntry."Adjustment Applies-to" := "Adjustment Applies-to";
        VendLedgEntry."Financialy Voided Cheque" := "Financialy Voided Cheque";
        VendLedgEntry."IC Partner Code" := "IC Partner Code";
        VendLedgEntry.Prepayment := Prepayment;
        WHTAmountLCY := 0;
        SourceCodeSetup.GET;
        IF (GenJnlLine."Source Code" = SourceCodeSetup."Payment Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."Purchase Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."Sales Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
           (GenJnlLine."Source Code" = SourceCodeSetup."General Journal")
        THEN BEGIN
          GLSetup.GET;
          GenJnlLine1.RESET;
          GenJnlLine1.COPY(GenJnlLine);
          IF GLSetup."Enable WHT" THEN
            IF (NOT GenJnlLine1."Skip WHT") THEN BEGIN
              IF (GenJnlLine1."Applies-to Doc. No." = '') AND
                 (GenJnlLine1."Applies-to ID" = '')
              THEN BEGIN
                IF (((GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) OR
                     (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::"Credit Memo")) AND
                    ((GenJnlLine1."Account Type" = GenJnlLine1."Account Type"::"G/L Account") OR
                     (GenJnlLine1."Bal. Account Type" = GenJnlLine1."Bal. Account Type"::"G/L Account")))

                THEN BEGIN
                  IF WHTPostingSetup.GET(
                       GenJnlLine1."WHT Business Posting Group",
                       GenJnlLine1."WHT Product Posting Group")
                  THEN
                    IF (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Invoice) OR
                       (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest)
                    THEN BEGIN
                      IF GenJnlLine1."WHT Absorb Base" <> 0 THEN
                        WHTAmountLCY :=
                          -ROUND(GenJnlLine1."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100)
                      ELSE
                        WHTAmountLCY :=
                          ROUND(GenJnlLine1.Amount * WHTPostingSetup."WHT %" / 100);
                    END;
                END;
              END ELSE BEGIN
                IF (((GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) OR
                     (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::"Credit Memo")) AND
                    ((GenJnlLine1."Account Type" = GenJnlLine1."Account Type"::"G/L Account") OR
                     (GenJnlLine1."Bal. Account Type" = GenJnlLine1."Bal. Account Type"::"G/L Account")))
                THEN BEGIN
                  IF WHTPostingSetup.GET(
                       GenJnlLine1."WHT Business Posting Group",
                       GenJnlLine1."WHT Product Posting Group")
                  THEN BEGIN
                    IF (WHTPostingSetup."Realized WHT Type" =
                        WHTPostingSetup."Realized WHT Type"::Earliest)
                    THEN BEGIN
                      GenJnlLine1.RESET;
                      GenJnlLine1.COPY(GenJnlLine);
                      IF GenJnlLine1.FIND('-') THEN
                        WHTManagement.CheckApplicationGenPurchWHT(GenJnlLine1);
                      WHTAmountLCY := ROUND(WHTManagement.CalcVendExtraWHTForEarliest(GenJnlLine1));
                    END;

                    IF (WHTPostingSetup."Realized WHT Type" =
                        WHTPostingSetup."Realized WHT Type"::Invoice)
                    THEN BEGIN
                      GenJnlLine1.RESET;
                      GenJnlLine1.COPY(GenJnlLine);
                      IF GenJnlLine1.FIND('-') THEN
                        WHTManagement.CheckApplicationGenPurchWHT(GenJnlLine1);
                      IF GenJnlLine1."WHT Absorb Base" <> 0 THEN
                        WHTAmountLCY :=
                          -ROUND(GenJnlLine1."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100)
                      ELSE
                        WHTAmountLCY :=
                          ROUND(GenJnlLine1.Amount * WHTPostingSetup."WHT %" / 100);
                    END;
                  END;
                END;
              END;
            END;
          IF (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) THEN
            WHTAmountLCY := -ABS(WHTAmountLCY)
          ELSE
            WHTAmountLCY := ABS(WHTAmountLCY);
        END;

        VendLedgEntry."Amount to Apply" := Amount;

        IF NOT Vend."Block Payment Tolerance" AND
          ((VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice) OR
          (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo"))
        THEN BEGIN

          IF (VendLedgEntry."Pmt. Discount Date" <> 0D) AND
             (VendLedgEntry."Pmt. Discount Date" <> VendLedgEntry."Document Date")
          THEN
            VendLedgEntry."Pmt. Disc. Tolerance Date" :=
              CALCDATE(GLSetup."Payment Discount Grace Period",VendLedgEntry."Pmt. Discount Date")
          ELSE
            VendLedgEntry."Pmt. Disc. Tolerance Date" := VendLedgEntry."Pmt. Discount Date";

          IF VendLedgEntry."Currency Code" = '' THEN BEGIN
            IF (GLSetup."Max. Payment Tolerance Amount" <
               (ABS(GLSetup."Payment Tolerance %" / 100 * "Amount (LCY)"))) OR (GLSetup."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (GLSetup."Max. Payment Tolerance Amount" = 0) AND (GLSetup."Payment Tolerance %" > 0) THEN
                VendLedgEntry."Max. Payment Tolerance" :=
                  ROUND(GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100,GLSetup."Amount Rounding Precision")
              ELSE
                IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN
                  VendLedgEntry."Max. Payment Tolerance" := GLSetup."Max. Payment Tolerance Amount"
                ELSE
                  VendLedgEntry."Max. Payment Tolerance" := -GLSetup."Max. Payment Tolerance Amount"
            END ELSE
              VendLedgEntry."Max. Payment Tolerance" :=
                GLSetup."Payment Tolerance %" * "Amount (LCY)" / 100
          END ELSE BEGIN
            IF (Currency."Max. Payment Tolerance Amount" <
               (ABS(Currency."Payment Tolerance %" / 100 * Amount))) OR (Currency."Payment Tolerance %" = 0)
            THEN BEGIN
              IF (Currency."Max. Payment Tolerance Amount" = 0) AND (Currency."Payment Tolerance %" > 0) THEN
                VendLedgEntry."Max. Payment Tolerance" :=
                  ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision")
              ELSE
                IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN
                  VendLedgEntry."Max. Payment Tolerance" := Currency."Max. Payment Tolerance Amount"
                ELSE
                  VendLedgEntry."Max. Payment Tolerance" := -Currency."Max. Payment Tolerance Amount"
            END ELSE
              VendLedgEntry."Max. Payment Tolerance" :=
                ROUND(Currency."Payment Tolerance %" * Amount / 100,Currency."Amount Rounding Precision");
          END;
          IF ABS(VendLedgEntry."Max. Payment Tolerance") > ABS(Amount) THEN
            VendLedgEntry."Max. Payment Tolerance" := Amount;

        END;

        DtldCVLedgEntryBuf.DELETEALL;
        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf."Cust. Ledger Entry No." := VendLedgEntry."Entry No.";
        DtldCVLedgEntryBuf."Entry Type" := DtldCVLedgEntryBuf."Entry Type"::"Initial Entry";
        DtldCVLedgEntryBuf."Posting Date" := "Posting Date";
        DtldCVLedgEntryBuf."Document Type" := "Document Type";
        DtldCVLedgEntryBuf."Document No." := "Document No.";
        DtldCVLedgEntryBuf.Amount := Amount;
        DtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)";
        DtldCVLedgEntryBuf."Additional-Currency Amount" := Amount;
        DtldCVLedgEntryBuf."Customer No." := "Account No.";
        DtldCVLedgEntryBuf."Currency Code" := "Currency Code";
        DtldCVLedgEntryBuf."User ID" := USERID;
        DtldCVLedgEntryBuf."Initial Entry Due Date" := "Due Date";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := "Shortcut Dimension 1 Code";
        DtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := "Shortcut Dimension 2 Code";
        DtldCVLedgEntryBuf."Initial Document Type" := "Document Type";

        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,TRUE);
        InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;

        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF GLSetup."Pmt. Disc. Excl. VAT" THEN
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
          ELSE
            CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;

          CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
            ROUND(
              CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,
              Currency."Amount Rounding Precision");
          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        END;

        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Adjusted Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Adjusted Currency Factor" := 1;
        CVLedgEntryBuf."Original Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";

        // Check the document no.
        IF "Recurring Method" = 0 THEN
          IF "Document Type" IN
             ["Document Type"::Invoice,
             "Document Type"::"Credit Memo",
             "Document Type"::"Finance Charge Memo",
             "Document Type"::Reminder]
          THEN BEGIN
            // Test Internal number
            OldVendLedgEntry.RESET;
            IF NOT RECORDLEVELLOCKING THEN
              OldVendLedgEntry.SETCURRENTKEY("Document No.");
            OldVendLedgEntry.SETRANGE("Document No.",CVLedgEntryBuf."Document No.");
            OldVendLedgEntry.SETRANGE("Document Type",CVLedgEntryBuf."Document Type");
            IF NOT OldVendLedgEntry.ISEMPTY THEN
              ERROR(
                Text002,
                CVLedgEntryBuf."Document Type",CVLedgEntryBuf."Document No.");

            IF PurchSetup."Ext. Doc. No. Mandatory" OR
               (CVLedgEntryBuf."External Document No." <> '')
            THEN BEGIN
              // Test vendor number
              TESTFIELD("External Document No.");
              OldVendLedgEntry.RESET;
              IF NOT RECORDLEVELLOCKING THEN
                OldVendLedgEntry.SETCURRENTKEY("External Document No.");
              OldVendLedgEntry.SETRANGE("External Document No.",CVLedgEntryBuf."External Document No.");
              OldVendLedgEntry.SETRANGE("Document Type",CVLedgEntryBuf."Document Type");
              OldVendLedgEntry.SETRANGE("Vendor No.",CVLedgEntryBuf."CV No.");
              IF NOT OldVendLedgEntry.ISEMPTY THEN
                ERROR(
                  Text003,
                  CVLedgEntryBuf."Document Type",CVLedgEntryBuf."External Document No.");
            END;
          END;

        // Post the application
        ApplyVendLedgEntry(
          CVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,
          GLSetup."Appln. Rounding Precision");

        // Post Vendor entry
        TransferVendLedgEntry(CVLedgEntryBuf,VendLedgEntry,FALSE);
        VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Applies-to Doc. No." := '';
        VendLedgEntry.INSERT;

        DimMgt.MoveJnlLineDimToLedgEntryDim(
          TempJnlLineDim,DATABASE::"Vendor Ledger Entry",VendLedgEntry."Entry No.");

        // Post Dtld Vendor entry
        PostDtldVendLedgEntries(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,NextTransactionNo,TRUE);

        IF (WHTAmountLCY <> 0) THEN BEGIN
          IF (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Invoice) OR
             (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::"Credit Memo")
          THEN
            IF (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Invoice) OR
               (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest)
            THEN BEGIN
              InitGLEntry(
                WHTPostingSetup."Payable WHT Account Code",
                WHTAmountLCY,
                WHTAmountLCY,
                TRUE,
                TRUE);
              InsertGLEntry(TRUE);
            END;
        END;

        IF GenJnlLine."Source Code"<>SourceCodeSetup."Financially Voided Check" THEN BEGIN
          GenJnlLine1.RESET;
          GLSetup.GET;
          IF GLSetup."Enable WHT" THEN
            IF (GenJnlLine."Applies-to Doc. No."<>'') OR (GenJnlLine."Applies-to ID"<>'') THEN BEGIN
              GenJnlLine1.COPY(GenJnlLine);
              IF (GenJnlLine1."Interest Amount"<>0) THEN
                GenJnlLine1.VALIDATE(Amount,GenJnlLine1.Amount - GenJnlLine1."Interest Amount");
              IF (NOT GenJnlLine."Skip WHT") THEN BEGIN
                KeepWHTEntryNo := NextWHTEntryNo;
                CASE "Document Type" OF
                  "Document Type"::"Credit Memo":
                    BEGIN
                      IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                          ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                          ("Source Code" = SourceCodeSetup."Sales Journal") OR
                          ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                          ("Source Code" = SourceCodeSetup."General Journal"))
                      THEN BEGIN
                        IF WHTPostingSetup.GET(
                          GenJnlLine."WHT Business Posting Group",
                          GenJnlLine."WHT Product Posting Group")
                        THEN
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Invoice) OR
                             (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            GenJnlLine2.RESET;
                            GenJnlLine2.COPY(GenJnlLine);
                            GenJnlLine2.Amount := -ABS(GenJnlLine2.Amount);
                            GenJnlLine2."WHT Absorb Base" := -ABS(GenJnlLine2."WHT Absorb Base");
                            NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine2);
                            IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          END;
                      END;

                      IF SourceCodeSetup.Purchases = "Source Code" THEN BEGIN
                        WHTEntry.RESET;
                        WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                        IF WHTEntry.FIND('-') THEN
                          REPEAT
                            WHTPostingSetup.GET(
                              WHTEntry."WHT Bus. Posting Group",
                              WHTEntry."WHT Prod. Posting Group");
                            IF (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Invoice) OR
                               (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Earliest)
                            THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          UNTIL WHTEntry.NEXT = 0;
                      END
                    END;
                  "Document Type"::Payment:
                    BEGIN
                      IF WHTPostingSetup.GET(
                           GenJnlLine."WHT Business Posting Group",
                           GenJnlLine."WHT Product Posting Group")
                      THEN BEGIN
                        IF (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Payment)
                        THEN BEGIN
                          NextWHTEntryNo := WHTManagement.ApplyVendInvoiceWHT(VendLedgEntry,GenJnlLine1);
                          IF NextWHTEntryNo <> -1 THEN
                            HadWHTEntryNo := TRUE
                          ELSE
                            NextWHTEntryNo := KeepWHTEntryNo;
                        END;

                        IF (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Earliest)
                        THEN BEGIN
                          NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine);
                          IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                            WHTEntry."Transaction No." := NextTransactionNo;
                            WHTEntry.MODIFY;
                          END;
                        END;
                      END;
                    END;
                  "Document Type"::Refund:
                    BEGIN
                      IF (GLSetup."Manual Sales WHT Calc.") THEN BEGIN
                        IF GenJnlLine."WHT Payment" THEN
                          NextWHTEntryNo := WHTManagement.ProcessManualReceipt(
                            GenJnlLine1,VendLedgEntry."Transaction No.",VendLedgEntry."Entry No.",0);
                      END ELSE BEGIN
                        IF WHTPostingSetup.GET(
                             GenJnlLine."WHT Business Posting Group",
                             GenJnlLine."WHT Product Posting Group")
                        THEN BEGIN
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Payment)
                          THEN BEGIN
                            NextWHTEntryNo := WHTManagement.ApplyVendInvoiceWHT(VendLedgEntry,GenJnlLine1);

                            IF NextWHTEntryNo <> -1 THEN
                              HadWHTEntryNo := TRUE
                            ELSE
                              NextWHTEntryNo := KeepWHTEntryNo;
                          END;

                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine);
                            IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          END;
                        END;
                      END;
                    END;
                  "Document Type"::Invoice:
                    BEGIN
                      IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                          ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                          ("Source Code" = SourceCodeSetup."Sales Journal") OR
                          ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                          ("Source Code" = SourceCodeSetup."General Journal"))
                      THEN BEGIN
                        IF WHTPostingSetup.GET(
                          GenJnlLine."WHT Business Posting Group",
                          GenJnlLine."WHT Product Posting Group")
                        THEN
                          IF (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Invoice) OR
                             (WHTPostingSetup."Realized WHT Type" =
                              WHTPostingSetup."Realized WHT Type"::Earliest)
                          THEN BEGIN
                            GenJnlLine2.RESET;
                            GenJnlLine2.COPY(GenJnlLine);
                            GenJnlLine2.Amount := -ABS(GenJnlLine2.Amount);
                            GenJnlLine2."WHT Absorb Base" := -ABS(GenJnlLine2."WHT Absorb Base");
                            NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine2);
                            IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          END;
                      END;

                      IF SourceCodeSetup.Purchases = "Source Code" THEN BEGIN
                        WHTEntry.RESET;
                        WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                        IF WHTEntry.FIND('-') THEN
                          REPEAT
                            WHTPostingSetup.GET(
                              WHTEntry."WHT Bus. Posting Group",
                              WHTEntry."WHT Prod. Posting Group");
                            IF (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Invoice) OR
                               (WHTPostingSetup."Realized WHT Type" =
                                WHTPostingSetup."Realized WHT Type"::Earliest)
                            THEN BEGIN
                              WHTEntry."Transaction No." := NextTransactionNo;
                              WHTEntry.MODIFY;
                            END;
                          UNTIL WHTEntry.NEXT = 0;
                      END;
                    END;
                END;
              END;

              // Payment Method Code.Begin
              TempGenJnlTemp.SETRANGE(Type,TempGenJnlTemp.Type::Purchases);
              IF TempGenJnlTemp.FIND('-') THEN BEGIN
                IF GenJnlLine."Journal Template Name"=TempGenJnlTemp.Name THEN BEGIN
                  WHTEntry.RESET;
                  WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Payment);
                  WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                  WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
                  IF WHTEntry.FIND('-') THEN
                  REPEAT
                    WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    WHTPostingSetup.TESTFIELD("Payable WHT Account Code");
                    InitGLEntry(
                      WHTPostingSetup."Payable WHT Account Code",-WHTEntry."Amount (LCY)","Source Currency Amount",TRUE,TRUE);
                    InsertGLEntry(TRUE);
                  UNTIL WHTEntry.NEXT=0;
                END;
              END;
              // Payment Method Code.End

            END ELSE BEGIN
              KeepWHTEntryNo := NextWHTEntryNo;
              CASE "Document Type" OF
                "Document Type"::Invoice:
                  BEGIN
                    IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                        ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                        ("Source Code" = SourceCodeSetup."Sales Journal") OR
                        ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                        ("Source Code" = SourceCodeSetup."General Journal"))
                    THEN BEGIN
                      GenJnlLine2.RESET;
                      GenJnlLine2.COPY(GenJnlLine);
                      GenJnlLine2."WHT Absorb Base" := -ABS(GenJnlLine2."WHT Absorb Base");
                      NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine2);
                    END;

                    WHTEntry.RESET;
                    WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                    IF WHTEntry.FIND('-') THEN
                      REPEAT
                        WHTPostingSetup.GET(
                          WHTEntry."WHT Bus. Posting Group",
                          WHTEntry."WHT Prod. Posting Group");
                        IF (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Invoice) OR
                           (WHTPostingSetup."Realized WHT Type" =
                            WHTPostingSetup."Realized WHT Type"::Earliest)
                        THEN BEGIN
                          WHTEntry."Transaction No." := NextTransactionNo;
                          WHTEntry.MODIFY;
                        END;
                      UNTIL WHTEntry.NEXT = 0;
                  END;
                "Document Type"::"Credit Memo":
                  BEGIN
                    IF (("Source Code" = SourceCodeSetup."Payment Journal") OR
                        ("Source Code" = SourceCodeSetup."Purchase Journal") OR
                        ("Source Code" = SourceCodeSetup."Sales Journal") OR
                        ("Source Code" = SourceCodeSetup."Cash Receipt Journal") OR
                        ("Source Code" = SourceCodeSetup."General Journal"))
                    THEN BEGIN
                      GenJnlLine2.RESET;
                      GenJnlLine2.COPY(GenJnlLine);
                      GenJnlLine2."WHT Absorb Base" := ABS(GenJnlLine2."WHT Absorb Base");
                      NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine2);
                    END;

                    WHTEntry.RESET;
                    WHTEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
                    IF WHTEntry.FIND('-') THEN
                      REPEAT
                        WHTPostingSetup.GET(
                          WHTEntry."WHT Bus. Posting Group",
                          WHTEntry."WHT Prod. Posting Group");
                        IF (WHTPostingSetup."Realized WHT Type" =
                          WHTPostingSetup."Realized WHT Type"::Invoice) OR
                          (WHTPostingSetup."Realized WHT Type" =
                          WHTPostingSetup."Realized WHT Type"::Earliest)
                        THEN BEGIN
                          WHTEntry."Transaction No." := NextTransactionNo;
                          WHTEntry.MODIFY;
                        END;
                      UNTIL WHTEntry.NEXT = 0;
                  END;
                "Document Type"::Payment:
                  BEGIN
                    IF WHTPostingSetup.GET(GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group") THEN
                      IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
                        NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine);
                        IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                          WHTEntry."Transaction No." := NextTransactionNo;
                          WHTEntry.MODIFY;
                        END;
                      END;
                  END;
                "Document Type"::Refund:
                  BEGIN
                    IF WHTPostingSetup.GET(GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group") THEN
                      IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
                        NextWHTEntryNo := WHTManagement.InsertVendJournalWHT(GenJnlLine);
                        IF WHTEntry.GET(NextWHTEntryNo - 1) THEN BEGIN
                          WHTEntry."Transaction No." := NextTransactionNo;
                          WHTEntry.MODIFY;
                        END;
                      END;
                  END;
                "Document Type"::" ":
                  NextWHTEntryNo := KeepWHTEntryNo;
              END;
            END;
          IF NextWHTEntryNo = 0 THEN
            NextWHTEntryNo := KeepWHTEntryNo;

          GLSetup.GET;
          GenJnlLine1.RESET;
          GenJnlLine1.COPY(GenJnlLine);
          IF GLSetup."Enable Tax Invoices" THEN BEGIN
            IF (GenJnlLine."Applies-to Doc. No." <> '') OR (GenJnlLine."Applies-to ID" <> '') THEN BEGIN
              CASE "Document Type" OF
                "Document Type"::Payment:
                  BEGIN
                    TaxManagement.ApplyVendInvoiceWHT(VendLedgEntry,GenJnlLine1);
                  END;
                "Document Type"::Refund:
                  BEGIN
                    TaxManagement.ApplyVendCreditWHT(VendLedgEntry,GenJnlLine1);
                  END;
               END;
            END ELSE BEGIN
              ReportSelection.RESET;
              ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Order Pick Instruction");
              IF ReportSelection.FIND('-') THEN BEGIN
                REPEAT
                  PurchTaxInvHeader.SETRANGE("Posting Description",GenJnlLine."Document No.");
                  IF PurchTaxInvHeader.FIND('-') THEN
                    REPORT.RUN(ReportSelection."Report ID",PurchSetup."Print Dialog",FALSE,PurchTaxInvHeader);
                UNTIL ReportSelection.NEXT=0;
              END;
            END;
          END;

          IF (GenJnlLine."Applies-to ID" <> '') THEN BEGIN
            VendLedgEntry.RESET;
            VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
            VendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
            VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            IF VendLedgEntry.FIND('-') THEN
              VendLedgEntry.MODIFYALL("Applies-to ID",'');
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostBankAcc@14();
    BEGIN
      WITH GenJnlLine DO BEGIN
        BankAccLedgEntry.LOCKTABLE;
        IF BankAcc."No." <> "Account No." THEN
          BankAcc.GET("Account No.");
        BankAcc.TESTFIELD(Blocked,FALSE);
        IF "Currency Code" = '' THEN
          BankAcc.TESTFIELD("Currency Code",'')
        ELSE
          IF BankAcc."Currency Code" <> '' THEN
            TESTFIELD("Currency Code",BankAcc."Currency Code");

        BankAcc.TESTFIELD("Bank Acc. Posting Group");
        BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");

        BankAccLedgEntry.INIT;
        BankAccLedgEntry."Bank Account No." := "Account No.";
        BankAccLedgEntry."Posting Date" := "Posting Date";
        BankAccLedgEntry."Document Date" := "Document Date";
        BankAccLedgEntry."Document Type" := "Document Type";
        BankAccLedgEntry."Document No." := "Document No.";
        BankAccLedgEntry."External Document No." := "External Document No.";
        BankAccLedgEntry.Description := Description;
        BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
        BankAccLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        BankAccLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        BankAccLedgEntry."Our Contact Code" := "Salespers./Purch. Code";
        BankAccLedgEntry."Source Code" := "Source Code";
        BankAccLedgEntry."Journal Batch Name" := "Journal Batch Name";
        BankAccLedgEntry."Reason Code" := "Reason Code";
        BankAccLedgEntry."Entry No." := NextEntryNo;
        BankAccLedgEntry."Transaction No." := NextTransactionNo;
        BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";
        //YIMMACOLLST
        BankAccLedgEntry."Post Dated Check No." := "Check No.";
        BankAccLedgEntry."Bank Branch No." := "Bank Branch No.";
        BankAccLedgEntry."C/V Bank Account No." := "Bank Account No.";
        BankAccLedgEntry."Customer/Vendor Bank" := "Customer/Vendor Bank";
        BankAccLedgEntry."Bank Name Cust/Vend" := "Bank Name Cust/Vend";
        //YIMMACOLLEN
        GLSetup.GET;
        WHTAmountLCY := 0;
        IF GLSetup."Enable WHT" THEN
          IF (NOT GenJnlLine."Skip WHT") THEN
            IF (GenJnlLine."Applies-to ID" = '') AND (GenJnlLine."Applies-to Doc. No." = '') THEN BEGIN
              IF ("Document Type" = "Document Type"::Payment) OR
                 ("Document Type" = "Document Type"::Refund)
              THEN
                IF WHTPostingSetup.GET(
                     GenJnlLine."WHT Business Posting Group",
                     GenJnlLine."WHT Product Posting Group")
                THEN BEGIN
                  IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
                    IF (("Account Type" = "Account Type"::Customer) OR
                        ("Bal. Account Type" = "Account Type"::Customer))
                    THEN BEGIN
                      IF GenJnlLine."WHT Absorb Base" <> 0 THEN
                        WHTAmountLCY :=
                          -ABS(ROUND(GenJnlLine."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100))
                      ELSE
                        WHTAmountLCY :=
                          -ABS(ROUND(GenJnlLine.Amount * WHTPostingSetup."WHT %" / 100));
                        IF ("Document Type" = "Document Type"::Refund) THEN
                          WHTAmountLCY := ABS(WHTAmountLCY);
                    END ELSE
                      IF ("Account Type" = "Bal. Account Type"::Vendor) OR
                         ("Bal. Account Type" = "Bal. Account Type"::Vendor)
                      THEN BEGIN
                        IF GenJnlLine."WHT Absorb Base" <> 0 THEN
                          WHTAmountLCY :=
                            ABS(ROUND(GenJnlLine."WHT Absorb Base" * WHTPostingSetup."WHT %" / 100))
                        ELSE
                          WHTAmountLCY :=
                            ABS(ROUND(GenJnlLine.Amount * WHTPostingSetup."WHT %" / 100));
                        IF ("Document Type" = "Document Type"::Refund) THEN
                          WHTAmountLCY := -ABS(WHTAmountLCY);
                      END;
                  END;
                END;
                IF ((WHTPostingSetup."Realized WHT Type" =
                  WHTPostingSetup."Realized WHT Type"::Payment)) AND
                   (NOT GLSetup."Manual Sales WHT Calc.")
                   THEN
                     WHTAmountLCY :=
                     CurrExchRate.ExchangeAmtFCYToLCY(
                     GenJnlLine1."Document Date",
                     GenJnlLine1."Currency Code",
                     ABS(
                     WHTManagement.WHTAmountJournal(GenJnlLine1,TRUE)),CurrFactor);
            END ELSE BEGIN
              IF (GenJnlLine."Applies-to ID" <> '') OR (GenJnlLine."Applies-to Doc. No." <> '') THEN BEGIN
                GenJnlLine1.RESET;
                GenJnlLine1.COPY(GenJnlLine);
                IF ("Applies-to Doc. No."<>'') THEN
                  GenJnlLine1.SETRANGE("Applies-to Doc. No.","Applies-to Doc. No.")
                ELSE
                  GenJnlLine1.SETRANGE("Applies-to ID","Applies-to ID");

                GenJnlLine1.SETRANGE("Account Type","Account Type"::Vendor);
                IF ("Account Type" = "Account Type"::Vendor) OR
                   ("Bal. Account Type" = "Bal. Account Type"::Vendor) OR
                   (GenJnlLine1.FIND('-'))
                THEN BEGIN
                  CurrFactor :=
                    CurrExchRate.ExchangeRate(
                      GenJnlLine."Document Date",GenJnlLine."Currency Code");
                  IF (GenJnlLine1."Interest Amount" <> 0) THEN
                    GenJnlLine1.VALIDATE(Amount,GenJnlLine1.Amount - GenJnlLine1."Interest Amount");

                  IF (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Payment) OR
                     (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Refund)
                  THEN BEGIN
                    IF WHTPostingSetup.GET(
                       GenJnlLine1."WHT Business Posting Group",
                       GenJnlLine1."WHT Product Posting Group")
                    THEN BEGIN
                      IF (WHTPostingSetup."Realized WHT Type" =
                          WHTPostingSetup."Realized WHT Type"::Earliest)
                      THEN BEGIN
                          IF GenJnlLine1.FIND('-') THEN
                            WHTManagement.CheckApplicationGenPurchWHT(GenJnlLine1);
                          WHTAmountLCY :=
                            CurrExchRate.ExchangeAmtFCYToLCY(
                              GenJnlLine."Document Date",
                              GenJnlLine."Currency Code",
                              ABS(
                                WHTManagement.CalcVendExtraWHTForEarliest(GenJnlLine1)),CurrFactor);
                      END;

                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Payment)) AND
                         (NOT GLSetup."Manual Sales WHT Calc.")
                      THEN
                        WHTAmountLCY :=
                          CurrExchRate.ExchangeAmtFCYToLCY(
                            GenJnlLine1."Document Date",
                            GenJnlLine1."Currency Code",
                            ABS(
                              WHTManagement.WHTAmountJournal(GenJnlLine1,TRUE)),CurrFactor);
                    END;
                  END;

                  IF ("Document Type" = "Document Type"::Refund) THEN
                    WHTAmountLCY := -ABS(WHTAmountLCY);
                END;

                IF (("Account Type"="Account Type"::Customer) OR
                   ("Bal. Account Type"="Bal. Account Type"::Customer)) AND
                   (NOT GLSetup."Enable GST (Australia)")
                THEN BEGIN
                  CurrFactor :=
                    CurrExchRate.ExchangeRate(
                      GenJnlLine1."Document Date",GenJnlLine."Currency Code");
                  IF ("Bal. Account Type"="Bal. Account Type"::Customer) THEN
                    GenJnlLine1.VALIDATE(Amount,-GenJnlLine1.Amount);

                  IF (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Payment) OR
                     (GenJnlLine1."Document Type" = GenJnlLine1."Document Type"::Refund)
                  THEN BEGIN
                    IF WHTPostingSetup.GET(
                         GenJnlLine1."WHT Business Posting Group",
                         GenJnlLine1."WHT Product Posting Group")
                    THEN BEGIN
                      IF (WHTPostingSetup."Realized WHT Type" =
                          WHTPostingSetup."Realized WHT Type"::Earliest)
                      THEN BEGIN
                        IF GenJnlLine1.FIND('-') THEN
                          WHTManagement.CheckApplicationGenSalesWHT(GenJnlLine1);
                        WHTAmountLCY :=
                          -CurrExchRate.ExchangeAmtFCYToLCY(
                            GenJnlLine1."Document Date",
                            GenJnlLine1."Currency Code",
                            ABS(
                              WHTManagement.CalcCustExtraWHTForEarliest(GenJnlLine1)),CurrFactor);
                      END;

                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Payment)) AND
                         (NOT GLSetup."Manual Sales WHT Calc.")
                      THEN
                        WHTAmountLCY :=
                          -CurrExchRate.ExchangeAmtFCYToLCY(
                          GenJnlLine1."Document Date",
                          GenJnlLine1."Currency Code",
                          ABS(
                            WHTManagement.ApplyCustCalcWHT(GenJnlLine1)),CurrFactor);
                    END;
                  END;

                  IF "Document Type"="Document Type"::Refund THEN
                    WHTAmountLCY := ABS(WHTAmountLCY);
                END;
                WHTAmountLCY := ROUND(WHTAmountLCY);

                IF GLSetup."Round Amount for WHT Calc" THEN
                  WHTAmountLCY := ROUND(WHTAmountLCY,1,'<');
              END ELSE BEGIN
                IF GenJnlLine."Bank Payment Type" =
                  GenJnlLine."Bank Payment Type"::"Computer Check"
                THEN BEGIN
                  TESTFIELD("Check Printed",TRUE);
                  CheckLedgEntry.LOCKTABLE;
                  CheckLedgEntry.RESET;
                  CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                  CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                  CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                  CheckLedgEntry.SETRANGE("Check No.","Document No.");
                  IF CheckLedgEntry.FIND('-') THEN
                    WHTAmountLCY := ABS(CheckLedgEntry."WHT Amount")
                END;
              END;
            END;
        IF BankAcc."Currency Code" <> '' THEN
          BankAccLedgEntry.Amount := Amount
        ELSE
          BankAccLedgEntry.Amount := "Amount (LCY)" + WHTAmountLCY;
        BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)" + WHTAmountLCY;
        BankAccLedgEntry."User ID" := USERID;
        IF BankAccLedgEntry.Amount <> 0 THEN BEGIN
          BankAccLedgEntry.Open := TRUE;
          BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
        END;
        BankAccLedgEntry.Positive := BankAccLedgEntry.Amount > 0;
        BankAccLedgEntry."Bal. Account Type" := "Bal. Account Type";
        BankAccLedgEntry."Bal. Account No." := "Bal. Account No.";
        IF (Amount > 0) AND (NOT Correction) OR
           ("Amount (LCY)" > 0) AND (NOT Correction) OR
           (Amount < 0) AND Correction OR
           ("Amount (LCY)" < 0) AND Correction
        THEN BEGIN
          BankAccLedgEntry."Debit Amount" := BankAccLedgEntry.Amount;
          BankAccLedgEntry."Credit Amount" := 0;
          BankAccLedgEntry."Debit Amount (LCY)" := BankAccLedgEntry."Amount (LCY)";
          BankAccLedgEntry."Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          BankAccLedgEntry."Debit Amount" := 0;
          BankAccLedgEntry."Credit Amount" := -BankAccLedgEntry.Amount;
          BankAccLedgEntry."Debit Amount (LCY)" := 0;
          BankAccLedgEntry."Credit Amount (LCY)" := -BankAccLedgEntry."Amount (LCY)";
        END;
        BankAccLedgEntry.INSERT;
        DimMgt.MoveJnlLineDimToLedgEntryDim(
          TempJnlLineDim,DATABASE::"Bank Account Ledger Entry",BankAccLedgEntry."Entry No.");

        IF ((Amount <= 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
           ((Amount  < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
        THEN BEGIN
          IF BankAcc."Currency Code" <> "Currency Code" THEN
            FIELDERROR(
              "Bank Payment Type",
              STRSUBSTNO(
                Text004,
                FIELDCAPTION("Currency Code"),TABLECAPTION,BankAcc.TABLECAPTION));
          CASE "Bank Payment Type" OF
            "Bank Payment Type"::"Computer Check":
              BEGIN
                TESTFIELD("Check Printed",TRUE);
                CheckLedgEntry.LOCKTABLE;
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF CheckLedgEntry.FINDSET THEN
                  REPEAT
                    CheckLedgEntry2 := CheckLedgEntry;
                    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                    CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                    CheckLedgEntry2.MODIFY;
                  UNTIL CheckLedgEntry.NEXT = 0;
              END;
            "Bank Payment Type"::"Manual Check":
              BEGIN
                IF "Document No." = '' THEN
                  FIELDERROR(
                    "Document No.",
                    STRSUBSTNO(
                      Text005,
                      FIELDCAPTION("Bank Payment Type"),"Bank Payment Type"));
                CheckLedgEntry.RESET;
                IF NextCheckEntryNo = 0 THEN BEGIN
                  CheckLedgEntry.LOCKTABLE;
                  IF CheckLedgEntry.FINDLAST THEN
                    NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                  ELSE
                    NextCheckEntryNo := 1;
                END;

                IF NOT RECORDLEVELLOCKING THEN
                  CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETFILTER(
                  "Entry Status",'%1|%2|%3',
                  CheckLedgEntry."Entry Status"::Printed,
                  CheckLedgEntry."Entry Status"::Posted,
                  CheckLedgEntry."Entry Status"::"Financially Voided");
                CheckLedgEntry.SETRANGE("Check No.","Document No.");
                IF CheckLedgEntry.FINDFIRST THEN
                  ERROR(Text006,"Document No.");

                CheckLedgEntry.INIT;
                CheckLedgEntry."Entry No." := NextCheckEntryNo;
                CheckLedgEntry."Bank Account No." := BankAccLedgEntry."Bank Account No.";
                CheckLedgEntry."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                CheckLedgEntry."Posting Date" := BankAccLedgEntry."Posting Date";
                CheckLedgEntry."Document Type" := BankAccLedgEntry."Document Type";
                CheckLedgEntry."Document No." := BankAccLedgEntry."Document No.";
                CheckLedgEntry."External Document No." := BankAccLedgEntry."External Document No.";
                CheckLedgEntry.Description := BankAccLedgEntry.Description;
                CheckLedgEntry."Bank Payment Type" := "Bank Payment Type";
                CheckLedgEntry."Bal. Account Type" := BankAccLedgEntry."Bal. Account Type";
                CheckLedgEntry."Bal. Account No." := BankAccLedgEntry."Bal. Account No.";
                CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Posted;
                CheckLedgEntry.Open := TRUE;
                CheckLedgEntry."User ID" := USERID;
                CheckLedgEntry."Check Date" := BankAccLedgEntry."Posting Date";
                CheckLedgEntry."Check No." := BankAccLedgEntry."Document No.";
                GLSetup.GET;
                GenJnlLine1.RESET;
                GenJnlLine1.COPY(GenJnlLine);
                IF GLSetup."Enable WHT" THEN
                  IF NOT GenJnlLine."Skip WHT" THEN
                    CheckLedgEntry."WHT Amount" := -WHTManagement.WHTAmountJournal(GenJnlLine1,FALSE);
                CheckLedgEntry."Interest Amount" := "Interest Amount";
                IF BankAcc."Currency Code" <> '' THEN
                  CheckLedgEntry.Amount := -Amount - CheckLedgEntry."WHT Amount"
                ELSE
                  CheckLedgEntry.Amount := -"Amount (LCY)" - CheckLedgEntry."WHT Amount";
                CheckLedgEntry.INSERT;
                NextCheckEntryNo := NextCheckEntryNo + 1;
              END;
          END;
        END;

        BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
        InitGLEntry(
          BankAccPostingGr."G/L Bank Account No.",
          "Amount (LCY)" + WHTAmountLCY,
          "Source Currency Amount" + WHTAmountLCY,
          TRUE,
          TRUE);
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InsertGLEntry(TRUE);
        IF (WHTAmountLCY <> 0) THEN BEGIN
          IF (("Account Type"="Account Type"::Vendor) OR
              ("Bal. Account Type"="Bal. Account Type"::Vendor))
          THEN
            IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
              InitGLEntry(
                WHTPostingSetup."Payable WHT Account Code",
                -WHTAmountLCY,
                -WHTAmountLCY,
                TRUE,
                TRUE);
              InsertGLEntry(TRUE);
             END;

          IF (("Account Type"="Account Type"::Customer) OR
              ("Bal. Account Type"="Bal. Account Type"::Customer))
          THEN
            IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
              InitGLEntry(
                WHTPostingSetup."Prepaid WHT Account Code",
                -WHTAmountLCY,
                -WHTAmountLCY,
                TRUE,
                TRUE);
              InsertGLEntry(TRUE);
             END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostFixedAsset@29();
    VAR
      TempGLEntry@1000 : Record 17;
      TempFAGLPostBuf@1001 : Record 5637;
      FAReg@1002 : Record 5617;
      FAAutomaticEntry@1003 : Codeunit 5607;
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2@1006 : Boolean;
      NetDisposalNo@1007 : Integer;
      FALedgEntry@1120000 : Record 5601;
      FALedgEntryNo@1120001 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        InitGLEntry('',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry");
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InitVat;
        TempGLEntry := GLEntry;
        FAJnlPostLine.GenJnlPostLine(
          GenJnlLine,TempGLEntry.Amount,TempGLEntry."VAT Amount",NextTransactionNo,NextEntryNo,TempJnlLineDim);
        ShortcutDim1Code := "Shortcut Dimension 1 Code";
        ShortcutDim2Code := "Shortcut Dimension 2 Code";
        Correction2 := Correction;
      END;
      WITH TempFAGLPostBuf DO
        IF FAJnlPostLine.FindFirstGLAcc(TempFAGLPostBuf) THEN
          REPEAT
            GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
            GenJnlLine.Correction := Correction;
            FADimAlreadyChecked := TempFAGLPostBuf."FA Posting Group"  <> '';
            IF "Original General Journal Line" THEN
              InitGLEntry("Account No.",Amount,TempGLEntry."Additional-Currency Amount",TRUE,TRUE)
            ELSE BEGIN
              CheckNonAddCurrCodeOccurred('');
              InitGLEntry("Account No.",Amount,0,FALSE,TRUE);
            END;
            FADimAlreadyChecked := FALSE;
            GLEntry."Gen. Posting Type" := TempGLEntry."Gen. Posting Type";
            GLEntry."Gen. Bus. Posting Group" := TempGLEntry."Gen. Bus. Posting Group";
            GLEntry."Gen. Prod. Posting Group" := TempGLEntry."Gen. Prod. Posting Group";
            GLEntry."VAT Bus. Posting Group" := TempGLEntry."VAT Bus. Posting Group";
            GLEntry."VAT Prod. Posting Group" := TempGLEntry."VAT Prod. Posting Group";
            GLEntry."Tax Area Code" := TempGLEntry."Tax Area Code";
            GLEntry."Tax Liable" := TempGLEntry."Tax Liable";
            GLEntry."Tax Group Code" := TempGLEntry."Tax Group Code";
            GLEntry."Use Tax" := TempGLEntry."Use Tax";
            GLEntry."VAT Amount" := TempGLEntry."VAT Amount";
            GLEntry."Bal. Account Type" := TempGLEntry."Bal. Account Type";
            GLEntry."Bal. Account No." := TempGLEntry."Bal. Account No.";
            GLEntry."FA Entry Type" := "FA Entry Type";
            GLEntry."FA Entry No." := "FA Entry No.";
            IF "Net Disposal" THEN
              NetDisposalNo := NetDisposalNo + 1
            ELSE
              NetDisposalNo := 0;
           IF "Automatic Entry" AND NOT "Net Disposal" THEN
              FAAutomaticEntry.AdjustGLEntry(GLEntry);
            IF NetDisposalNo > 1 THEN
               GLEntry."VAT Amount" := 0;
            IF TempFAGLPostBuf."FA Posting Group" <> '' THEN BEGIN
              FAGLPostBuf := TempFAGLPostBuf;
              FAGLPostBuf."Entry No." := NextEntryNo;
              FAGLPostBuf.INSERT;
            END;
            InsertGLEntry(TRUE);
          UNTIL FAJnlPostLine.GetNextGLAcc(TempFAGLPostBuf) = 0;
      GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
      GenJnlLine.Correction := Correction2;
      GLEntry := TempGLEntry;
      GLEntryTmp := GLEntry;
      PostVAT;

      IF FAReg.FINDLAST THEN BEGIN
        FAReg."G/L Register No." := GLReg."No.";
        FAReg.MODIFY;
      END;
    END;

    PROCEDURE PostICPartner@63();
    VAR
      ICPartner@1001 : Record 413;
      AccountNo@1000 : Code[30];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF GenJnlLine."Account No." <> ICPartner.Code THEN
          ICPartner.GET("Account No.");
          IF GenJnlLine.Amount > 0 THEN BEGIN
            ICPartner.TESTFIELD("Receivables Account");
            AccountNo := ICPartner."Receivables Account";
          END ELSE BEGIN
            ICPartner.TESTFIELD("Payables Account");
            AccountNo := ICPartner."Payables Account";
          END;
          InitGLEntry(AccountNo,"Amount (LCY)","Source Currency Amount",TRUE,TRUE);
          GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
          GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
          InsertGLEntry(TRUE);
      END;
    END;

    LOCAL PROCEDURE FinishCodeunit@25();
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF Journal.Simulation THEN BEGIN
          IF GLEntryTmp.FINDLAST THEN BEGIN
            REPEAT
              GLEntry := GLEntryTmp;
              IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
                GLEntry."Additional-Currency Amount" := 0;
                GLEntry."Add.-Currency Debit Amount" := 0;
                GLEntry."Add.-Currency Credit Amount" := 0;
              END;
              GLEntry.INSERT;
              IF NOT InsertFAAllocDim(GLEntry."Entry No.") THEN
                DimMgt.MoveJnlLineDimToLedgEntryDim(
                  TempJnlLineDim,DATABASE::"G/L Entry",GLEntry."Entry No.");
            UNTIL GLEntryTmp.NEXT(-1) = 0;
          END;
        END ELSE BEGIN
          IF GLEntryTmp.FINDSET THEN BEGIN
            REPEAT
              GLEntry := GLEntryTmp;
              IF GLSetup."Additional Reporting Currency" = '' THEN BEGIN
                GLEntry."Additional-Currency Amount" := 0;
                GLEntry."Add.-Currency Debit Amount" := 0;
                GLEntry."Add.-Currency Credit Amount" := 0;
              END;
              GLEntry.INSERT;
              IF NOT InsertFAAllocDim(GLEntry."Entry No.") THEN
                DimMgt.MoveJnlLineDimToLedgEntryDim(
                  TempJnlLineDim,DATABASE::"G/L Entry",GLEntry."Entry No.");
            UNTIL GLEntryTmp.NEXT = 0;
          END;
        END;
        IF GLEntry."Entry Type" = GLEntry."Entry Type"::Definitive THEN
          GLReg."To VAT Entry No." := NextVATEntryNo - 1;
        //  IF GLReg."To Entry No." = 0 THEN BEGIN
        //    GLReg."To Entry No." := GLEntry."Entry No.";
        //    GLReg.INSERT;
        //  END ELSE BEGIN
        //    GLReg."To Entry No." := GLEntry."Entry No.";
        //    GLReg.MODIFY;
        //  END;
        //END;
        GLReg."To Entry No." := GLEntry."Entry No.";
        IF NOT GLReg.MODIFY THEN
          GLReg.INSERT;
        GLEntry.CONSISTENT(
          (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
          (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0));
      END;
    END;

    BEGIN
    {
      //YIMMNTT
       1) Code added to float the value of fields to various tables related to Tender Terima.
      //YIMMNNPWP
       2) Code added to float the value of fields to various tables related to NPWP No.
      //YIMMATOP
       3) field is flow From G/L journal to Vend Ledger Entry
      //YIMMNBTR
       4) Code added for Bank Rate / Tax Rate calculations with tags (YIMMNBTRST and YIMMNBTREN)
      //YIMMAEXP
       5) VARIOUS FIELD IS FLOW FROM CREDIT MEMO TO CUSTOMER LEDGER
       6) IF
      //YIMMACOLL
      7)  Various Fields flow from PDC table to BAnk Ledger(Customer/Vendor Bank Account information)

      //YIMMNWHTR
       For WHT Area Code.

      //YIMMRBDTL
      1)To flow the bank details to Cust and Vend Ledger Entry
    }
    END.
  }
}

