OBJECT Codeunit 50051 AccPac Retrun Interface Batch
{
  OBJECT-PROPERTIES
  {
    Date=07/16/14;
    Time=12:12:29;
    Modified=Yes;
    Version List=TBI1.0,TBI1.1;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            AccPacInterfaceLocal@1000000000 : Record 60001;
          BEGIN

            MasterSetup.GET;
            GeneralLedgerSetup.GET;

            //FileName := CommonDialogMgt.OpenFile(Text010,'',1,'',0);
            FileName:=MasterSetup."Interface File Path" + '\' + MasterSetup."AccPac Purch. Return";
            LogFileName:=MasterSetup."Interface File Path"+ '\' + 'LOG-' + MasterSetup."AccPac Purch. Return";
            LF.CREATE(LogFileName);
            LF.CREATEOUTSTREAM(OutStreamObj);
            LF.TEXTMODE(TRUE);

            IF NOT (F.OPEN(FileName)) THEN BEGIN
              LF.CLOSE;
              EXIT;
            END;

            IF ValidateData THEN BEGIN
              AccPacInterfaceUpload.RUN;
            END ELSE BEGIN
              AccPacInterfaceLocal.RESET;
              AccPacInterfaceLocal.SETRANGE(Return,TRUE);
              AccPacInterfaceLocal.DELETEALL;
            END;
          END;

  }
  CODE
  {
    VAR
      MasterSetup@1000000000 : Record 50008;
      GeneralLedgerSetup@1000000011 : Record 98;
      FileName@1000000001 : Text[255];
      LogFileName@1000000002 : Text[255];
      LF@1000000003 : File;
      OutStreamObj@1000000004 : OutStream;
      F@1000000005 : File;
      InStreamObj@1000000006 : InStream;
      AccPacValue@1000000007 : Text[255];
      EntryNo@1000000032 : Integer;
      AccPacKwitansiNo@1000000031 : Code[20];
      AccPacReceiptNo@1000000030 : Code[20];
      AccPacVendInvoiceDate@1000000054 : Date;
      AccPacVendCode@1000000029 : Code[20];
      AccPacTransactionType@1000000055 : ' ,Direct,Indirect,Others';
      AccPacTransactionDate@1000000028 : Date;
      AccPacVendInvoiceNo@1000000056 : Code[20];
      AccPacNpwpNo@1000000057 : Code[20];
      AccPacPaymentDate@1000000027 : Date;
      AccPacDimension1Code@1000000023 : Code[20];
      AccPacDimension2Code@1000000022 : Code[20];
      AccPacDimension3Code@1000000025 : Code[20];
      AccPacCurrencyCode@1000000021 : Code[10];
      AccPacTaxInvoiceNo@1000000020 : Code[20];
      AccPacTaxInvoiceDate@1000000026 : Date;
      AccPacAccountCode@1000000058 : Code[20];
      AccPacAmt@1000000019 : Decimal;
      "AccPacVAT%"@1000000059 : Decimal;
      AccPacDescription@1000000018 : Text[250];
      "AccPacB/LDate"@1000000016 : Date;
      AccPacWHTAreaCode@1000000012 : Code[10];
      AccPacWHTProdPostGroup@1000000013 : Code[10];
      LineNo@1000000008 : Integer;
      PreReceiptNo@1000000009 : Code[20];
      PreAccPacTransactionType@1000000010 : ' ,Direct,Indirect,Others';
      Text010@1000000038 : TextConst 'ENU=Import Text File';
      VATProdPostingGroupCode@1000000015 : Code[10];
      VATBusPostingGroupCode@1000000014 : Code[10];
      GLAccountCode@1000000017 : Code[20];
      WHTBusPostingGroupCode@1000000033 : Code[10];
      GenBusPostingGroupCode@1000000024 : Code[10];
      AccPacInterfaceUpload@1000000034 : Report 60051;
      Part1@1000000039 : Code[10];
      Part2@1000000037 : Code[10];
      Part3@1000000036 : Code[10];
      Part4@1000000035 : Code[10];
      VATApplicable@1000000040 : Boolean;
      NavAppliesToDocNo@1000000041 : Code[20];
      NavVendorCode@1000000042 : Code[20];

    PROCEDURE InsertInTempTable@1000000000();
    VAR
      AccPacInterfaceLocal@1000000000 : Record 60001;
    BEGIN

      AccPacInterfaceLocal.INIT;
      AccPacInterfaceLocal."Entry No." := EntryNo;
      AccPacInterfaceLocal.INSERT;

      AccPacInterfaceLocal."Receipt No." := AccPacReceiptNo;
      AccPacInterfaceLocal."Line No." := LineNo;
      AccPacInterfaceLocal."Kwitansi No." := AccPacKwitansiNo;
      AccPacInterfaceLocal."Vendor Invoice Date" := AccPacVendInvoiceDate;
      AccPacInterfaceLocal."Vendor Code" := AccPacVendCode;
      AccPacInterfaceLocal."Transaction Type" := AccPacTransactionType;
      AccPacInterfaceLocal."Transaction Date" := AccPacTransactionDate;
      AccPacInterfaceLocal."Vendor Invoice No." := AccPacVendInvoiceNo;
      AccPacInterfaceLocal."Npwp No." := AccPacNpwpNo;
      AccPacInterfaceLocal."Payment Date" := AccPacPaymentDate;
      AccPacInterfaceLocal."Dimension Code 1" := AccPacDimension1Code;
      AccPacInterfaceLocal."Dimension Code 2" := AccPacDimension2Code;
      AccPacInterfaceLocal."Dimension Code 3" := AccPacDimension3Code;
      AccPacInterfaceLocal.Currency := AccPacCurrencyCode;
      AccPacInterfaceLocal."Tax Invoice No." := AccPacTaxInvoiceNo;
      AccPacInterfaceLocal."Tax Invoice Date" := AccPacTaxInvoiceDate;
      AccPacInterfaceLocal."Account Code" := AccPacAccountCode;
      AccPacInterfaceLocal.Amount := AccPacAmt;
      AccPacInterfaceLocal."VAT %" := "AccPacVAT%";
      AccPacInterfaceLocal.Description := AccPacDescription;//TBI1.1
      AccPacInterfaceLocal."B/L Date" := "AccPacB/LDate";
      AccPacInterfaceLocal.Return := TRUE;
      AccPacInterfaceLocal."Applies To Doc No." := NavAppliesToDocNo;
      AccPacInterfaceLocal."WHT Area Code" := AccPacWHTAreaCode;
      AccPacInterfaceLocal."WHT Prod. Posting Group" := AccPacWHTProdPostGroup;
      AccPacInterfaceLocal."VAT Prod. Posting Group" := VATProdPostingGroupCode;
      AccPacInterfaceLocal."VAT Applicable" := VATApplicable;
      AccPacInterfaceLocal."Nav Vendor Code" := NavVendorCode;
      AccPacInterfaceLocal.MODIFY;
    END;

    PROCEDURE ErrorTaxInvoiceNoFormat@1000000001(VAR TaxInvNo@1000000000 : Code[20]) : Boolean;
    VAR
      Length@1000000001 : Integer;
      I@1000000007 : Integer;
      CheckVar@1000000006 : Code[10];
      CheckNumeric@1000000008 : Integer;
      ErrorInTaxInvNo@1000000011 : Boolean;
    BEGIN

        Length:=STRLEN(TaxInvNo);
        CASE Length OF
          16: BEGIN
            FOR I:=1 TO 16 DO BEGIN
              CheckVar:=COPYSTR(TaxInvNo,I,5);
              IF NOT (EVALUATE(CheckNumeric,CheckVar)) THEN
                ErrorInTaxInvNo := TRUE;
              I:=I+5;
            END;
          END; //End Of 16

          19: BEGIN
            Part1:=COPYSTR(TaxInvNo,1,3);
            Part2:=COPYSTR(TaxInvNo,5,3);
            Part3:=COPYSTR(TaxInvNo,9,2);
            Part4:=COPYSTR(TaxInvNo,12,8);

            IF NOT (EVALUATE(CheckNumeric,Part1)) THEN
              ErrorInTaxInvNo := TRUE;

            IF NOT (EVALUATE(CheckNumeric,Part2)) THEN
              ErrorInTaxInvNo := TRUE;

            IF NOT (EVALUATE(CheckNumeric,Part3)) THEN
              ErrorInTaxInvNo := TRUE;

            IF NOT (EVALUATE(CheckNumeric,Part4)) THEN
              ErrorInTaxInvNo := TRUE;

            Part1:=COPYSTR(TaxInvNo,4,1);
            Part2:=COPYSTR(TaxInvNo,8,1);
            Part3:=COPYSTR(TaxInvNo,11,1);

            //IF (Part1 <> '.') OR (Part2 <> '.') OR (Part3 <> '-') THEN //temp for TBI
            IF (Part1 <> '.') OR (Part2 <> '-') OR (Part3 <> '.') THEN
              ErrorInTaxInvNo := TRUE;

          END; //End Of 19

          ELSE
            ErrorInTaxInvNo := TRUE;
        END;

      EXIT(ErrorInTaxInvNo);
    END;

    PROCEDURE ValidateData@1000000026() : Boolean;
    VAR
      ErrorInFile@1000000001 : Boolean;
      ErrorInRow@1000000000 : Boolean;
      Ch@1000000002 : Char;
      AccPacVendConv@1000000019 : Record 60003;
      CurrencyRec@1000000018 : Record 4;
      DimensionValue@1000000016 : Record 349;
      Vend@1000000015 : Record 23;
      Cust@1000000029 : Record 18;
      VendOK@1000000014 : Boolean;
      SpecialVendor@1000000012 : Boolean;
      PaymentTerm@1000000011 : Record 3;
      ToCheckDate@1000000010 : Automation "{84B43D7D-C0AF-40AB-BCC4-F15BE59A9D62} 1.0:{531EC973-2A03-4C71-82C5-0FEBCEE3C236}:Unknown Automation Server.Unknown Class";
      "B/LDateOK"@1000000009 : Boolean;
      PurchInvHeader@1000000008 : Record 122;
      PurchaseHeader@1000000007 : Record 38;
      PurchCrMemoHdr@1000000006 : Record 124;
      DuplicateInvoiceNo@1000000005 : Boolean;
      DuplicateReceiptNo@1000000004 : Boolean;
      CurrencyExRate@1000000003 : Record 330;
      MasterVendPostingSetup@1000000027 : Record 60000;
      OrderAddress@1000000026 : Record 224;
      VATPostingSetup@1000000025 : Record 325;
      VATProdPostingGroup@1000000024 : Record 324;
      VATSetupFound@1000000023 : Boolean;
      AccPacAccountConversion@1000000022 : Record 60002;
      ErrorAccPacAccountSetup@1000000021 : Boolean;
      GLAccount@1000000020 : Record 15;
      AreaCode@1000000017 : Record 50017;
      WHTProdPostingGroup@1000000028 : Record 28041;
      WHTPostingSetup@1000000035 : Record 28043;
      SalesInvHeader@1000000032 : Record 112;
      SalesHeader@1000000031 : Record 36;
      SalesCrMemoHdr@1000000030 : Record 114;
      ShipToAddress@1000000033 : Record 222;
      PurchInvLine@1000000037 : Record 123;
      PurchLine@1000000036 : Record 39;
      PurchCrMemoLine@1000000038 : Record 125;
      DuplicateTaxInvNo@1000000034 : Boolean;
      SalesInvLine@1000000040 : Record 113;
      SalesLine@1000000039 : Record 37;
      SalesCrMemoLine@1000000041 : Record 115;
      FetchValue@1000000044 : ARRAY [5] OF Code[10];
      Counter@1000000043 : Integer;
      DimKeyFromDimVAl@1000000042 : Code[10];
      I@1000000045 : Integer;
      PartyType@1000000046 : ' ,Third Party,Related Party,Others';
      IsNPWP@1000000048 : Boolean;
      ReasonCode@1000000047 : Code[10];
      WHTProdPostingGrpName@1000000049 : Text[30];
      VendLedgEntry@1000000050 : Record 25;
      CustLedgEntry@1000000051 : Record 21;
      AccPacInterface@1000000052 : Record 60001;
    BEGIN

      Ch:=9;
      ErrorInFile:=FALSE;
      EntryNo:=0;

      F.CREATEINSTREAM(InStreamObj);

      AccPacInterface.RESET;
      IF AccPacInterface.FINDLAST THEN
        EntryNo := AccPacInterface."Entry No."
      ELSE
        EntryNo := 0;



      WHILE NOT InStreamObj.EOS DO BEGIN

        EntryNo += 1;

        NavAppliesToDocNo := '';
        ErrorInRow:=FALSE;
        DuplicateReceiptNo:=FALSE;
        DuplicateInvoiceNo:=FALSE;
        DuplicateTaxInvNo := FALSE;
        VendOK := TRUE;
        NavVendorCode := '';
        SpecialVendor := FALSE;
        VATSetupFound := FALSE;
        ErrorAccPacAccountSetup := FALSE;
        GenBusPostingGroupCode := '';
        WHTBusPostingGroupCode := '';
        VATBusPostingGroupCode := '';
        VATProdPostingGroupCode := '';
        VATApplicable := FALSE;
        IsNPWP := FALSE;
        ReasonCode := '';


        //Creating Log Entry No.
        OutStreamObj.WRITE(FORMAT(EntryNo));
        OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));

        //Reading Kwitansi No.  ===============================================================
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacKwitansiNo,AccPacValue);

        //Reading Receipt No.  ================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacReceiptNo,AccPacValue);
        IF AccPacReceiptNo = '' THEN BEGIN
          OutStreamObj.WRITETEXT('! Receipt No. cannot be blank.');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Vendor Invoice Date  ========================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,11);
        AccPacValue := RightTrim(AccPacValue);
        CLEAR(ToCheckDate);
        CREATE(ToCheckDate,FALSE,TRUE);
        IF NOT (EVALUATE(AccPacVendInvoiceDate,AccPacValue) AND ToCheckDate.CHECK(AccPacValue)) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in Vendor Invoice Date.');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Vendor Code  ================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacVendCode,AccPacValue);
        IF AccPacVendCode = '' THEN BEGIN
          OutStreamObj.WRITETEXT('! Vendor Code cannot be blank.');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
          VendOK := FALSE;
        END ELSE BEGIN
          IF AccPacVendConv.GET(AccPacVendCode) THEN BEGIN
            IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Vendor THEN
            BEGIN
              ReasonCode := MasterSetup."Reason (Normal)";
              Vend.RESET;
              IF Vend.GET(AccPacVendConv."Nav Account Code") THEN BEGIN
                GenBusPostingGroupCode := Vend."Gen. Bus. Posting Group";
                WHTBusPostingGroupCode := Vend."WHT Business Posting Group";
                VATBusPostingGroupCode := Vend."VAT Bus. Posting Group";
                PartyType := Vend."Vendor Type";
                NavVendorCode := Vend."No.";
                IF Vend."Vendor Type" = 3 THEN BEGIN
                  OutStreamObj.WRITETEXT('! Vendor Type is not specified for Vendor No. ');
                  OutStreamObj.WRITE(Vend."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
                IF Vend."Gen. Bus. Posting Group" = '' THEN BEGIN
                  OutStreamObj.WRITETEXT('! Gen. Bus. Posting Group is not defined for Vendor No. ');
                  OutStreamObj.WRITE(Vend."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
                IF Vend."VAT Bus. Posting Group" = '' THEN BEGIN
                  OutStreamObj.WRITETEXT('! VAT Bus. Posting Group is not defined for Vendor No. ');
                  OutStreamObj.WRITE(Vend."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
                IF Vend."WHT Business Posting Group" = '' THEN BEGIN
                  OutStreamObj.WRITETEXT('! WHT Bus. Posting Group is not defined for Vendor No. ');
                  OutStreamObj.WRITE(Vend."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
              END ELSE BEGIN
                OutStreamObj.WRITETEXT('! Error in Nav Account Code in AccPac Vendor Conversion Setup.');
                OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
                VendOK := FALSE;
              END;
            END ELSE IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Customer THEN
            BEGIN
              ReasonCode := MasterSetup."Reason (Sale as Purchase)";
              Cust.RESET;
              IF Cust.GET(AccPacVendConv."Nav Account Code") THEN BEGIN
                NavVendorCode := Cust."No.";
                GenBusPostingGroupCode := Cust."Gen. Bus. Posting Group";
                WHTBusPostingGroupCode := Cust."WHT Business Posting Group";
                VATBusPostingGroupCode := Cust."VAT Bus. Posting Group";
                PartyType := Cust."Customer Type";

                IF Cust."Customer Type" = 3 THEN BEGIN
                  OutStreamObj.WRITETEXT('! Customer Type is not specified for Customer No. ');
                  OutStreamObj.WRITE(Cust."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
                IF Cust."Gen. Bus. Posting Group" = '' THEN BEGIN
                  OutStreamObj.WRITETEXT('! Gen. Bus. Posting Group is not defined for Customer No. ');
                  OutStreamObj.WRITE(Cust."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
                IF Cust."VAT Bus. Posting Group" = '' THEN BEGIN
                  OutStreamObj.WRITETEXT('! VAT Bus. Posting Group is not defined for Customer No. ');
                  OutStreamObj.WRITE(Cust."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
                IF Cust."WHT Business Posting Group" = '' THEN BEGIN
                  OutStreamObj.WRITETEXT('! WHT Bus. Posting Group is not defined for Customer No. ');
                  OutStreamObj.WRITE(Cust."No.");
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                  VendOK := FALSE;
                END;
              END ELSE BEGIN
                OutStreamObj.WRITETEXT('! Error in Nav Account Code in AccPac Vendor Conversion Setup.');
                OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
                VendOK := FALSE;
              END;
            END ELSE BEGIN
              OutStreamObj.WRITETEXT('! Nav Account Type is not defined in AccPac Vendor Conversion Setup.');
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
              VendOK := FALSE;
            END;
          END ELSE BEGIN
            OutStreamObj.WRITETEXT('! Vendor is not defined in AccPac Vendor Conversion Setup');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
            VendOK := FALSE;
          END;
        END;

        //Checking Duplicity in Receipt No. ==================================================
        IF VendOK AND (AccPacReceiptNo <> '') THEN BEGIN
          IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Vendor THEN
          BEGIN
            PurchaseHeader.RESET;
            PurchaseHeader.SETCURRENTKEY("Document Type","No.");
            PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
            PurchaseHeader.SETRANGE("No.",AccPacReceiptNo);
            IF PurchaseHeader.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Receipt No. : Tanda Terima Return ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacReceiptNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

            PurchCrMemoHdr.RESET;
            PurchCrMemoHdr.SETRANGE("No.",AccPacReceiptNo);
            IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Receipt No. : Posted Tanda Terima Return ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacReceiptNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

          END
          ELSE IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Customer THEN
          BEGIN

            SalesHeader.RESET;
            SalesHeader.SETCURRENTKEY("Document Type","No.");
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
            SalesHeader.SETRANGE("No.",AccPacReceiptNo);
            IF SalesHeader.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Receipt No. : Customer Purch. Return ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacReceiptNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

            SalesInvHeader.RESET;
            SalesInvHeader.SETRANGE("No.",AccPacReceiptNo);
            IF SalesInvHeader.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Receipt No. : Posted Customer Purch. Return ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacReceiptNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

          END;

        END;

        //Reading Transaction Type  =========================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        AccPacValue := RightTrim(AccPacValue);
        IF NOT EVALUATE(AccPacTransactionType,AccPacValue) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in Transaction Type');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE IF (PreReceiptNo = AccPacReceiptNo) AND (AccPacTransactionType <> PreAccPacTransactionType) THEN BEGIN
          OutStreamObj.WRITETEXT('! Transaction Type differs from the previous line(s) with the same Receipt No.');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Checking Master Vendor Posting Setup ===============================================
        IF (VendOK AND (NOT MasterVendPostingSetup.GET(GenBusPostingGroupCode,
            PartyType,AccPacTransactionType,AccPacVendConv."Nav Account Type"))) THEN
        BEGIN
          OutStreamObj.WRITETEXT('! AccPac Vendor Posting Setup is not defined for  Gen. Business Posting Group = ');
          OutStreamObj.WRITETEXT(FORMAT(GenBusPostingGroupCode));
          OutStreamObj.WRITETEXT(', Party Type = ' + FORMAT(PartyType));
          OutStreamObj.WRITETEXT(', Transaction Type = ' + FORMAT(AccPacTransactionType));
          OutStreamObj.WRITETEXT(', and Nav Account Type = ' + FORMAT(AccPacVendConv."Nav Account Type"));
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Transaction date  ==========================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,11);
        AccPacValue := RightTrim(AccPacValue);
        CLEAR(ToCheckDate);
        CREATE(ToCheckDate,FALSE,TRUE);
        IF NOT (EVALUATE(AccPacTransactionDate,AccPacValue) AND ToCheckDate.CHECK(AccPacValue) ) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in Transaction Date');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Vendor Invoice No. ==============================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacVendInvoiceNo,AccPacValue);

        IF (AccPacVendInvoiceNo = '') THEN BEGIN
          OutStreamObj.WRITETEXT('! Vendor Invoice No. cannot be blank.');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;

        END ELSE IF VendOK THEN BEGIN

           IF (COPYSTR(AccPacVendInvoiceNo,1,1) = '+') THEN BEGIN
              AccPacVendInvoiceNo := COPYSTR(AccPacVendInvoiceNo,2);
              VATApplicable := TRUE;
           END;

          IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Vendor THEN
          BEGIN
            PurchaseHeader.RESET;
            PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
            PurchaseHeader.SETRANGE("Vendor Invoice No.",AccPacVendInvoiceNo);
            PurchaseHeader.SETRANGE("Pay-to Vendor No.",NavVendorCode);
            IF PurchaseHeader.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Vednor Invoice No. : Tanda Terima Return with Vendor Invoice No. ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

            VendLedgEntry.RESET;
            VendLedgEntry.SETCURRENTKEY("External Document No.");
            VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
            VendLedgEntry.SETRANGE("External Document No.",AccPacVendInvoiceNo);
            VendLedgEntry.SETRANGE("Vendor No.",NavVendorCode);
            IF VendLedgEntry.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Vednor Invoice No. : Posted Tanda Terima Return with Vendor Invoice No. ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

          END
          ELSE IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Customer THEN
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
            SalesHeader.SETRANGE("Reason Code",MasterSetup."Reason (Sale as Purchase)");
            SalesHeader.SETRANGE("External Document No.",AccPacVendInvoiceNo);
            IF SalesHeader.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Vednor Invoice No. : Customer Purch. Return with Vendor Invoice No. ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

            SalesInvHeader.RESET;
            SalesInvHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
            SalesInvHeader.SETRANGE("Reason Code",MasterSetup."Reason (Sale as Purchase)");
            SalesInvHeader.SETRANGE("External Document No.",AccPacVendInvoiceNo);
            SalesInvHeader.SETRANGE("Sell-to Customer No.",NavVendorCode);
            IF SalesInvHeader.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Vednor Invoice No. : Posted Customer Purch. Return with Vendor Invoice No. ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
               OutStreamObj.WRITETEXT(' already exists in the system. ');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

          END;
        END;

        IF ((AccPacVendInvoiceNo <> '') AND (AccPacReceiptNo <> '')) THEN BEGIN
           AccPacInterface.RESET;
           AccPacInterface.SETFILTER("Receipt No.",'<>%1',AccPacReceiptNo);
           AccPacInterface.SETRANGE("Nav Vendor Code",NavVendorCode);
           AccPacInterface.SETRANGE("Vendor Invoice No.",AccPacVendInvoiceNo);
           IF AccPacInterface.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Vednor Invoice No. : Vendor Invoice No. ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
               OutStreamObj.WRITETEXT(' is also asigned for Receipt No. ' + FORMAT(AccPacInterface."Receipt No."));
               OutStreamObj.WRITETEXT(' in This Data File');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
           END;
        END;


        //Reading Npwp No.  =====================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacNpwpNo,AccPacValue);
        IF AccPacNpwpNo <> '' THEN BEGIN
          IsNPWP := TRUE;
          IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Vendor THEN
          BEGIN
            IF ((NOT OrderAddress.GET(NavVendorCode,AccPacNpwpNo)) AND VendOK) THEN BEGIN
              OutStreamObj.WRITETEXT('! NPWP No. ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacNpwpNo));
              OutStreamObj.WRITETEXT(' is not registered for Vendor No. ');
              OutStreamObj.WRITETEXT(FORMAT(NavVendorCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE
              SpecialVendor := Vend."Special Vendor";
          END ELSE IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Customer THEN
          BEGIN
            IF ((NOT ShipToAddress.GET(NavVendorCode,AccPacNpwpNo)) AND VendOK) THEN BEGIN
              OutStreamObj.WRITETEXT('! NPWP No. ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacNpwpNo));
              OutStreamObj.WRITETEXT(' is not registered for Customer No. ');
              OutStreamObj.WRITETEXT(FORMAT(NavVendorCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE
              SpecialVendor := Cust."Special Customer";
          END;
        END;


        //Reading Payment Date  ===================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,11);
        AccPacValue := RightTrim(AccPacValue);
        CLEAR(ToCheckDate);
        CREATE(ToCheckDate,FALSE,TRUE);
        IF NOT (EVALUATE(AccPacPaymentDate,AccPacValue) AND ToCheckDate.CHECK(AccPacValue)) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in Payment Date');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE IF (AccPacPaymentDate < AccPacTransactionDate) OR (AccPacPaymentDate < AccPacVendInvoiceDate) THEN BEGIN
          OutStreamObj.WRITETEXT('! Payment Date cannot be earlier than Transaction Date or Invoice Date');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Dimension 1 Code ===============================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        EVALUATE(AccPacDimension1Code,AccPacValue);
        IF AccPacDimension1Code <> '' THEN BEGIN
          IF GeneralLedgerSetup."Global Dimension 1 Code" <> '' THEN BEGIN
            DimensionValue.RESET;
            DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
            DimensionValue.SETRANGE(Code,AccPacDimension1Code);
            IF NOT DimensionValue.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! Error in ');
              OutStreamObj.WRITE(GeneralLedgerSetup."Global Dimension 1 Code");
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE
              DimKeyFromDimVAl := DimensionValue.DimKey
          END ELSE
            AccPacDimension1Code := '';
        END ELSE BEGIN
          OutStreamObj.WRITETEXT('! No value given for ');
          OutStreamObj.WRITE(GeneralLedgerSetup."Global Dimension 1 Code");
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Dimension 2 Code  ===============================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        EVALUATE(AccPacDimension2Code,AccPacValue);
        IF AccPacDimension2Code <> '' THEN BEGIN
          IF GeneralLedgerSetup."Global Dimension 2 Code" <> '' THEN BEGIN
            DimensionValue.RESET;
            DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 2 Code");
            DimensionValue.SETRANGE(Code,AccPacDimension2Code);
            IF NOT DimensionValue.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! Error in ');
              OutStreamObj.WRITE(GeneralLedgerSetup."Global Dimension 2 Code");
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END ELSE
            AccPacDimension2Code := '';
        END;
        { ELSE BEGIN
          OutStreamObj.WRITETEXT('! No value given for ');
          OutStreamObj.WRITE(GeneralLedgerSetup."Global Dimension 2 Code");
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;
        }

        //Reading Dimension 3 Code ================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        EVALUATE(AccPacDimension3Code,AccPacValue);
        IF AccPacDimension3Code <> '' THEN BEGIN
          IF GeneralLedgerSetup."Shortcut Dimension 3 Code" <> '' THEN BEGIN
            DimensionValue.RESET;
            DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Shortcut Dimension 3 Code");
            DimensionValue.SETRANGE(Code,AccPacDimension3Code);
            IF NOT DimensionValue.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! Error in ');
              OutStreamObj.WRITE(GeneralLedgerSetup."Shortcut Dimension 3 Code");
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END ELSE
            AccPacDimension3Code := '';
        END;
        { ELSE BEGIN
          OutStreamObj.WRITETEXT('! No value given for ');
          OutStreamObj.WRITE(GeneralLedgerSetup."Shortcut Dimension 3 Code");
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;
        }

        //Reading Currency Code  ==================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        EVALUATE(AccPacCurrencyCode,AccPacValue);
        IF AccPacCurrencyCode <> '' THEN BEGIN
          CurrencyRec.RESET;
          CurrencyRec.SETRANGE(Code,AccPacCurrencyCode);
          IF NOT CurrencyRec.FINDFIRST THEN BEGIN
            OutStreamObj.WRITETEXT('! Currency Code' + FORMAT(AccPacCurrencyCode) + ' does not exist in Currecy Setup.');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;
        END;

        //Reading Tax Invoice No.  ===============================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacTaxInvoiceNo,AccPacValue);

        IF (NOT SpecialVendor) AND (AccPacTaxInvoiceNo <> '') THEN
          IF ErrorTaxInvoiceNoFormat(AccPacTaxInvoiceNo) THEN BEGIN
            OutStreamObj.WRITETEXT('! Error in Tax Invoice No. FORMAT');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

        IF AccPacTaxInvoiceNo <> '' THEN BEGIN

          IF STRLEN(AccPacTaxInvoiceNo) = 16 THEN BEGIN
            Part1:=COPYSTR(AccPacTaxInvoiceNo,1,3);
            Part2:=COPYSTR(AccPacTaxInvoiceNo,4,3);
            Part3:=COPYSTR(AccPacTaxInvoiceNo,7,2);
            Part4:=COPYSTR(AccPacTaxInvoiceNo,9,16);
            AccPacTaxInvoiceNo := STRSUBSTNO('%1.%2-%3.%4',Part1,Part2,Part3,Part4);
          END;

          IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Vendor THEN
          BEGIN
            PurchLine.RESET;
            PurchLine.SETCURRENTKEY("Tax Invoice No.");
            PurchLine.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
            PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Credit Memo");
            //PurchLine.SETRANGE("Reason Code",MasterSetup."Reason (Normal)");
            PurchLine.SETRANGE("New NPWP",AccPacNpwpNo);
            IF PurchLine.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! Duplicity in Tax Invoice No. : Tax Invoice No. ' + FORMAT(AccPacTaxInvoiceNo));
              OutStreamObj.WRITETEXT(' already exists in Tanda Terima Return No. ' + FORMAT(PurchLine."Document No."));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;

            PurchCrMemoLine.RESET;
            PurchCrMemoLine.SETCURRENTKEY("Tax Invoice No.");
            PurchCrMemoLine.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
            //PurchCrMemoLine.SETRANGE("Reason Code",MasterSetup."Reason (Normal)");
            PurchCrMemoLine.SETRANGE("New NPWP",AccPacNpwpNo);
            IF PurchCrMemoLine.FINDFIRST THEN BEGIN
              PurchInvHeader.RESET;
              PurchInvHeader.SETRANGE("Applies-to Doc. Type",PurchInvHeader."Applies-to Doc. Type"::"Credit Memo");
              PurchInvHeader.SETRANGE("Applies-to Doc. No.",PurchCrMemoLine."Document No.");
              PurchInvHeader.SETRANGE(ActualCreditMemo,FALSE);
              IF NOT PurchInvHeader.FINDFIRST THEN BEGIN
                 OutStreamObj.WRITETEXT('! Duplicity in Tax Invoice No. : Tax Invoice No. ' + FORMAT(AccPacTaxInvoiceNo));
                 OutStreamObj.WRITETEXT(' already exists in Posted Tanda Terima Return No. ' + FORMAT(PurchCrMemoLine."Document No."));
                 OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                 ErrorInRow:=TRUE;
              END ELSE BEGIN
                PurchInvLine.RESET;
                PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
                PurchInvLine.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
                IF NOT PurchInvLine.FINDFIRST THEN BEGIN
                   OutStreamObj.WRITETEXT('! Duplicity in Tax Invoice No. : Tax Invoice No. ' + FORMAT(AccPacTaxInvoiceNo));
                   OutStreamObj.WRITETEXT(' already exists in Posted Tanda Terima Return No. ' + FORMAT(PurchCrMemoLine."Document No."));
                   OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                   ErrorInRow:=TRUE;
                END;
              END;

            END;

          END ELSE IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Customer THEN
          BEGIN
            SalesLine.RESET;
            SalesLine.SETCURRENTKEY("Tax Invoice No.");
            SalesLine.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
            //SalesLine.SETRANGE("Reason Code",MasterSetup."Reason (Sale as Purchase)");
            SalesLine.SETRANGE("New NPWP.",AccPacNpwpNo);
            IF SalesLine.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Duplicity in Tax Invoice No. : Tax Invoice No. ' + FORMAT(AccPacTaxInvoiceNo));
               OutStreamObj.WRITETEXT(' already exists in Customer Purch. Return No. ' + FORMAT(SalesLine."Document No."));
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;

            SalesInvLine.RESET;
            SalesInvLine.SETCURRENTKEY("Tax Invoice No.");
            SalesInvLine.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
            //SalesInvLine.SETRANGE("Reason Code",MasterSetup."Reason (Sale as Purchase)");
            SalesInvLine.SETRANGE("New NPWP.",AccPacNpwpNo);
            IF SalesInvLine.FINDFIRST THEN BEGIN
              SalesCrMemoHdr.RESET;
              SalesCrMemoHdr.SETRANGE("Applies-to Doc. Type",SalesCrMemoHdr."Applies-to Doc. Type"::Invoice);
              SalesCrMemoHdr.SETRANGE("Applies-to Doc. No.",SalesInvLine."Document No.");
              SalesCrMemoHdr.SETRANGE(ActualCreditMemo,FALSE);
              IF NOT SalesCrMemoHdr.FINDFIRST THEN BEGIN
                 OutStreamObj.WRITETEXT('! Duplicity in Tax Invoice No. : Tax Invoice No. ' + FORMAT(AccPacTaxInvoiceNo));
                 OutStreamObj.WRITETEXT(' already exists in Posted Customer Purch. Return No. '
                   + FORMAT(SalesInvLine."Document No."));
                 OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                 ErrorInRow:=TRUE;
              END ELSE BEGIN
                SalesCrMemoLine.RESET;
                SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHdr."No.");
                SalesCrMemoLine.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
                SalesCrMemoLine.SETRANGE("New NPWP.",AccPacNpwpNo);
                IF NOT SalesCrMemoLine.FINDFIRST THEN BEGIN
                   OutStreamObj.WRITETEXT('! Duplicity in Tax Invoice No. : Tax Invoice No. ' + FORMAT(AccPacTaxInvoiceNo));
                   OutStreamObj.WRITETEXT(' already exists in Posted Customer Purch. Return No. '
                     + FORMAT(SalesInvLine."Document No."));
                   OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                   ErrorInRow:=TRUE;
                END;
              END;
            END;
          END;

          IF (AccPacReceiptNo <> '') THEN BEGIN
            AccPacInterface.RESET;
            AccPacInterface.SETFILTER("Receipt No.",'<>%1',AccPacReceiptNo);
            AccPacInterface.SETRANGE("Npwp No.",AccPacNpwpNo);
            AccPacInterface.SETRANGE("Tax Invoice No.",AccPacTaxInvoiceNo);
            IF AccPacInterface.FINDFIRST THEN BEGIN
               OutStreamObj.WRITETEXT('! Dulicity in Tax Invoice No. : Tax Invoice No. ');
               OutStreamObj.WRITETEXT(FORMAT(AccPacTaxInvoiceNo));
               OutStreamObj.WRITETEXT(' is also asigned for Receipt No. ' + FORMAT(AccPacInterface."Receipt No."));
               OutStreamObj.WRITETEXT(' in This Data File');
               OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               ErrorInRow:=TRUE;
            END;
          END;

        END;


        //Reading Tax invoice Date  ==============================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,11);
        AccPacValue := RightTrim(AccPacValue);
        CLEAR(ToCheckDate);
        CREATE(ToCheckDate,FALSE,TRUE);
        IF AccPacValue <> '' THEN BEGIN
           IF NOT (EVALUATE(AccPacTaxInvoiceDate,AccPacValue) AND ToCheckDate.CHECK(AccPacValue) ) THEN BEGIN
              OutStreamObj.WRITETEXT('! Error in Tax Invoice Date');
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
           END ELSE IF (CheckTaxDate(AccPacTaxInvoiceDate)) THEN BEGIN
              OutStreamObj.WRITETEXT('! Tax Invoice Date is expired');
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
           END;

        END ELSE
           AccPacTaxInvoiceDate := 0D;


        //Reading Account Code  ==================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        EVALUATE(AccPacAccountCode,AccPacValue);
        IF (AccPacAccountCode = '') THEN BEGIN
          OutStreamObj.WRITETEXT('! Account Code cannot be blank.');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;

        END ELSE IF VendOK THEN BEGIN

          AccPacAccountConversion.RESET;
          AccPacAccountConversion.SETRANGE("Account Code",AccPacAccountCode);
          AccPacAccountConversion.SETRANGE("Gen. Bus. Posting Group",GenBusPostingGroupCode);
          AccPacAccountConversion.SETRANGE("Party Type",PartyType);
          IF NOT AccPacAccountConversion.FINDFIRST THEN BEGIN
            AccPacAccountConversion.SETRANGE("Party Type");
            IF NOT AccPacAccountConversion.FINDFIRST THEN BEGIN
              AccPacAccountConversion.SETRANGE("Gen. Bus. Posting Group");
              AccPacAccountConversion.SETRANGE("Party Type",PartyType);
              IF NOT AccPacAccountConversion.FINDFIRST THEN BEGIN
                AccPacAccountConversion.SETRANGE("Gen. Bus. Posting Group");
                AccPacAccountConversion.SETRANGE("Party Type");
                IF NOT AccPacAccountConversion.FINDFIRST THEN
                  ErrorAccPacAccountSetup := TRUE;
              END;
            END;
          END;


          IF NOT ErrorAccPacAccountSetup THEN BEGIN
            IF AccPacAccountConversion."NAV Account Code" = '' THEN
              ErrorAccPacAccountSetup := TRUE
            ELSE IF NOT GLAccount.GET(AccPacAccountConversion."NAV Account Code") THEN
              ErrorAccPacAccountSetup := TRUE;
          END;

          IF ErrorAccPacAccountSetup THEN BEGIN
            OutStreamObj.WRITETEXT('! AccPac G/L A/c Conversion Setup is not defined for AccPac Account Code ');
            OutStreamObj.WRITETEXT(AccPacAccountCode);
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;

          END ELSE BEGIN
            GLAccountCode := AccPacAccountConversion."NAV Account Code";
            IF DimKeyFromDimVAl <> '' THEN BEGIN
              FOR I := 1 TO 5 DO
                FetchValue[I] := '';

              GLAccount.RESET;
              IF GLAccount.GET(GLAccountCode) THEN
              IF (GLAccount.DimKey <> '') THEN BEGIN
                Counter := 1;
                REPEAT
                  FetchValue[Counter] := COPYSTR(GLAccount.DimKey,Counter,1);
                  Counter := Counter + 1;
                UNTIL (Counter > STRLEN(GLAccount.DimKey));

                IF NOT ((DimKeyFromDimVAl) IN [FetchValue[1],FetchValue[2],FetchValue[3],FetchValue[4]]) THEN BEGIN
                  OutStreamObj.WRITETEXT('! '+FORMAT(GeneralLedgerSetup."Global Dimension 1 Code")+' is not valid for G/L Account No. ')
      ;
                  OutStreamObj.WRITETEXT(FORMAT(GLAccountCode));
                  OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;
            END;
          END;
        END;

        //Reading Amount  ========================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,20);
        IF ((NOT EVALUATE(AccPacAmt,AccPacValue)) OR (AccPacAmt < 0)) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in Amount');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading VAT %  =========================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        IF ((NOT EVALUATE("AccPacVAT%",AccPacValue)) OR (NOT ("AccPacVAT%" IN [1,2,3,4]))) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in VAT %');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE IF ("AccPacVAT%" <> 2) THEN BEGIN
          IF "AccPacVAT%" = 1 THEN
            "AccPacVAT%" := 10
          ELSE IF "AccPacVAT%" = 3 THEN
            "AccPacVAT%" := 1
          ELSE IF "AccPacVAT%" = 4 THEN
            "AccPacVAT%" := 100;

          IF VendOK THEN BEGIN
            VATProdPostingGroup.RESET;
            VATProdPostingGroup.SETRANGE(VATProdPostingGroup.ReasonCode,ReasonCode);
            IF VATProdPostingGroup.FINDFIRST THEN REPEAT
              VATPostingSetup.RESET;
              IF VATPostingSetup.GET(VATBusPostingGroupCode,VATProdPostingGroup.Code) AND
              (VATPostingSetup."VAT %" = "AccPacVAT%") THEN BEGIN
                VATSetupFound := TRUE;
                VATProdPostingGroupCode := VATPostingSetup."VAT Prod. Posting Group";
              END;
            UNTIL VATProdPostingGroup.NEXT=0;
            IF NOT VATSetupFound THEN BEGIN
              OutStreamObj.WRITETEXT('! VAT Posting Setupd is not defined for VAT % = ' + FORMAT("AccPacVAT%"));
              OutStreamObj.WRITETEXT(', VAT Busness Posting Group = ' + FORMAT(VATBusPostingGroupCode));
              OutStreamObj.WRITETEXT(', and Reason Code = ' + FORMAT(ReasonCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE IF ((ReasonCode = MasterSetup."Reason (Normal)") AND (VATPostingSetup."Purchase VAT Account" = '')) THEN BEGIN
              OutStreamObj.WRITETEXT('! Purchase VAT Account is not defined in VAT Posting Setup for ');
              OutStreamObj.WRITETEXT('VAT Busness Posting Group = ' + FORMAT(VATBusPostingGroupCode));
              OutStreamObj.WRITETEXT(', VAT Product Posting Group = ' + FORMAT(VATProdPostingGroupCode));
              OutStreamObj.WRITETEXT(', and Reason Code = ' + FORMAT(ReasonCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE IF ((ReasonCode = MasterSetup."Reason (Sale as Purchase)") AND (VATPostingSetup."Sales VAT Account" = '')) THEN
            BEGIN
              OutStreamObj.WRITETEXT('! Sales VAT Account is not defined in VAT Posting Setup for ');
              OutStreamObj.WRITETEXT('VAT Busness Posting Group = ' + FORMAT(VATBusPostingGroupCode));
              OutStreamObj.WRITETEXT(', VAT Product Posting Group = ' + FORMAT(VATProdPostingGroupCode));
              OutStreamObj.WRITETEXT(', and Reason Code = ' + FORMAT(ReasonCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;

          END;

          IF AccPacTaxInvoiceNo = '' THEN BEGIN
            OutStreamObj.WRITETEXT('! Tax Invoice No. cannot be blank for VAT % given.');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

          IF AccPacTaxInvoiceDate = 0D THEN BEGIN
            OutStreamObj.WRITETEXT('! Tax Invoice Date cannot be blank for VAT % given');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

          IF AccPacNpwpNo = '' THEN BEGIN
            OutStreamObj.WRITETEXT('! NPWP No. cannot be blank for VAT % given');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

        END ELSE BEGIN
          IF AccPacTaxInvoiceNo <> '' THEN BEGIN
            OutStreamObj.WRITETEXT('! Tax Invoice No. is given, but VAT % is not given');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

          IF AccPacTaxInvoiceDate <> 0D THEN BEGIN
            OutStreamObj.WRITETEXT('! Tax Invoice Date is given, but VAT % is not given');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

        END;


        {//NO NEED
        //Reading Description  ===================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,250);
        AccPacValue := RightTrim(AccPacValue);
        EVALUATE(AccPacDescription,AccPacValue);
        }

        //Reading B/L Date  ======================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,11);
        AccPacValue := RightTrim(AccPacValue);
        CLEAR(ToCheckDate);
        CREATE(ToCheckDate,FALSE,TRUE);
        IF NOT (EVALUATE("AccPacB/LDate",AccPacValue)) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in B/L Date');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE IF (GenBusPostingGroupCode = MasterSetup.Foreign_Bus_Posting_Group) AND
        (NOT ToCheckDate.CHECK(AccPacValue)) THEN BEGIN
          OutStreamObj.WRITETEXT('! Error in B/L Date');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE IF "AccPacB/LDate" <> 0D THEN
          "B/LDateOK":=TRUE;


        //Check B/L Date with Currency Code  =====================================================
        IF (GenBusPostingGroupCode = MasterSetup.Foreign_Bus_Posting_Group) AND "B/LDateOK" THEN BEGIN
          AccPacVendInvoiceDate := "AccPacB/LDate";
          IF AccPacCurrencyCode = '' THEN BEGIN
            OutStreamObj.WRITETEXT('! B/L Date is geven without Currency Code for Foreign Vendor/Customer');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;
        END;


        //Check B/L Date with Payment Date
        IF "B/LDateOK" AND (AccPacPaymentDate < "AccPacB/LDate") THEN BEGIN
          OutStreamObj.WRITETEXT('! Payment Date cannot be earlier than B/L Date');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

        //Reading Area Code   ====================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        EVALUATE(AccPacWHTAreaCode,AccPacValue);
        IF (AccPacWHTAreaCode <> '') THEN
          IF NOT AreaCode.GET(AccPacWHTAreaCode) THEN BEGIN
            OutStreamObj.WRITETEXT('!Area Code is not defined in Area Code Setup.');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;

        //Reading WHT Product Posting Group  ====================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,10);
        EVALUATE(AccPacWHTProdPostGroup,AccPacValue);
        IF (AccPacWHTProdPostGroup <> '') THEN
          IF (NOT WHTProdPostingGroup.GET(AccPacWHTProdPostGroup)) THEN BEGIN
            OutStreamObj.WRITETEXT('! WHT Product Posting Group is not defined in WHT Product Posting Group Table');
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END ELSE IF VendOK THEN BEGIN
            WHTProdPostingGrpName := WHTProdPostingGroup.Description;
            WHTPostingSetup.RESET;
            WHTPostingSetup.SETRANGE("WHT Business Posting Group",WHTBusPostingGroupCode);
            WHTPostingSetup.SETRANGE(Description,WHTProdPostingGrpName);
            WHTPostingSetup.SETRANGE(NPWP,IsNPWP);
            WHTPostingSetup.SETRANGE("Reason Code",ReasonCode);
            IF NOT WHTPostingSetup.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! WHT Posting Setup is not defined for WHT Bus. Posting Group = ');
              OutStreamObj.WRITETEXT(FORMAT(WHTBusPostingGroupCode));
              OutStreamObj.WRITETEXT(', WHT Product Posting Group = ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacWHTProdPostGroup));
              OutStreamObj.WRITETEXT(', NPWP = Yes, Reason Code = ');
              OutStreamObj.WRITETEXT(FORMAT(ReasonCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE IF WHTPostingSetup."Payable WHT Account Code" = '' THEN BEGIN
              OutStreamObj.WRITETEXT('! WHT Payable Account is not defined for WHT Bus. Posting Group = ');
              OutStreamObj.WRITETEXT(FORMAT(WHTBusPostingGroupCode));
              OutStreamObj.WRITETEXT(', WHT Product Posting Group = ');
              OutStreamObj.WRITETEXT(FORMAT(WHTPostingSetup."WHT Product Posting Group"));
              OutStreamObj.WRITETEXT(', NPWP = Yes, Reason Code = ');
              OutStreamObj.WRITETEXT(FORMAT(ReasonCode));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE
              AccPacWHTProdPostGroup := WHTPostingSetup."WHT Product Posting Group";
          END;

        IF (AccPacWHTProdPostGroup <> '') AND (AccPacWHTAreaCode = '') THEN BEGIN
          OutStreamObj.WRITETEXT('! WHT Product Posting Group is given without Area Code');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE IF (AccPacWHTProdPostGroup = '') AND (AccPacWHTAreaCode <> '') THEN BEGIN
          OutStreamObj.WRITETEXT('! Area Code is given without WHT Product Posting Group');
          OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END;

       //TBI1.1-->ST
        //Reading Description  ===================================================================
        InStreamObj.READTEXT(AccPacValue,1);
        InStreamObj.READTEXT(AccPacValue,250);
        AccPacValue := RightTrim(AccPacValue);
        EVALUATE(AccPacDescription,AccPacValue);

       //TBI1.1<--EN

        //Checking for Exchange Rate
        IF (AccPacCurrencyCode <> '') THEN BEGIN
          CurrencyExRate.RESET;
          CurrencyExRate.SETRANGE("Starting Date",AccPacVendInvoiceDate);
          CurrencyExRate.SETRANGE("Currency Code",AccPacCurrencyCode);
          IF NOT (CurrencyExRate.FIND('-')) THEN BEGIN
            OutStreamObj.WRITETEXT('! Currency Exchange rate is not defined for Date = ');
            OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceDate));
            OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END ELSE BEGIN
            IF (FORMAT(CurrencyExRate."Relational Exch. Rate Amount")='') OR (CurrencyExRate."Relational Exch. Rate Amount"=0) THEN
            BEGIN
              OutStreamObj.WRITETEXT('! Currency Exchange Bank Rate is not defined for Date = ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceDate));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
            IF (FORMAT(CurrencyExRate."Rel Tax Rate Amount")='') OR (CurrencyExRate."Rel Tax Rate Amount"=0) THEN BEGIN
              OutStreamObj.WRITETEXT('! Currency Exchange Tax Rate is not defined for Date = ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceDate));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END;

          // Validation For Local Vendor-Start
          IF (GenBusPostingGroupCode = MasterSetup.Domestic_Bus_Posting_Group) AND ("AccPacVAT%" <> 2) THEN BEGIN
              CurrencyExRate.RESET;
              CurrencyExRate.SETRANGE("Starting Date",AccPacTaxInvoiceDate);
              CurrencyExRate.SETRANGE("Currency Code",AccPacCurrencyCode);
              IF NOT (CurrencyExRate.FIND('-')) THEN BEGIN
                OutStreamObj.WRITETEXT('! Currency Exchange Rate is not defined for Date = ');
                OutStreamObj.WRITETEXT(FORMAT(AccPacTaxInvoiceDate));
                OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE IF (FORMAT(CurrencyExRate."Rel Tax Rate Amount")='') OR (CurrencyExRate."Rel Tax Rate Amount"=0) THEN BEGIN
                OutStreamObj.WRITETEXT('! Currency Exchange Tax Rate is not defined for Date = ');
                OutStreamObj.WRITETEXT(FORMAT(AccPacTaxInvoiceDate));
                OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
          END;
          // Validation For Local Vendor-End
        END;

        IF PreReceiptNo = AccPacReceiptNo THEN
          LineNo += 10000
        ELSE BEGIN
          LineNo := 10000;
          PreReceiptNo := AccPacReceiptNo;
        END;

        IF VendOK AND (AccPacVendInvoiceNo <> '') THEN BEGIN
          IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Vendor THEN
          BEGIN
            PurchInvHeader.RESET;
            PurchInvHeader.SETRANGE("Reason Code",MasterSetup."Reason (Normal)");
            PurchInvHeader.SETRANGE("Vendor Invoice No.",AccPacVendInvoiceNo);
            IF NOT PurchInvHeader.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! Posted Invoice Not Found for Vendor Invoice No. = ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE
              NavAppliesToDocNo := PurchInvHeader."No.";

          END ELSE IF AccPacVendConv."Nav Account Type" = AccPacVendConv."Nav Account Type"::Customer THEN
          BEGIN
            SalesCrMemoHdr.RESET;
            SalesCrMemoHdr.SETRANGE("Reason Code",MasterSetup."Reason (Sale as Purchase)");
            SalesCrMemoHdr.SETRANGE("External Document No.",AccPacVendInvoiceNo);
            IF NOT SalesCrMemoHdr.FINDFIRST THEN BEGIN
              OutStreamObj.WRITETEXT('! Posted Invoice Not Found for Vendor Invoice No. = ');
              OutStreamObj.WRITETEXT(FORMAT(AccPacVendInvoiceNo));
              OutStreamObj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END ELSE
              NavAppliesToDocNo := SalesCrMemoHdr."No.";
          END;
        END;


        //===========================================================================================
        PreReceiptNo := AccPacReceiptNo;
        PreAccPacTransactionType := AccPacTransactionType;


        IF ErrorInRow THEN
          ErrorInFile:=TRUE
        ELSE BEGIN
          OutStreamObj.WRITETEXT('Processed Successfully');
          InsertInTempTable;
        END;

        InStreamObj.READTEXT(AccPacValue,1);
        OutStreamObj.WRITETEXT();

      END;


      LF.CLOSE;

      EXIT(NOT ErrorInFile);
    END;

    PROCEDURE RightTrim@1000000002(TextVar@1000000000 : Text[250]) : Text[250];
    VAR
      Ctr@1000000003 : Integer;
      SpaceText@1000000001 : Text[1];
      TextLen@1000000002 : Integer;
    BEGIN

      TextLen := STRLEN(TextVar);
      IF TextLen > 0 THEN BEGIN
        SpaceText := COPYSTR(TextVar,TextLen,1);
        WHILE SpaceText = ' ' DO BEGIN
          TextLen -= 1;
          IF TextLen > 0 THEN BEGIN
            TextVar := COPYSTR(TextVar,1,TextLen);
            SpaceText := COPYSTR(TextVar,TextLen,1);
          END ELSE BEGIN
            TextVar := '';
            SpaceText := '';
          END;
        END;
      END;
      EXIT(TextVar);
    END;

    PROCEDURE CheckTaxDate@1000000003(TaxInvdate@1000000005 : Date) Flag : Boolean;
    VAR
      GracePeriod@1000000003 : Text[30];
      CurrDate@1000000002 : Integer;
      DateofExpiry@1000000001 : Date;
      MasterSetupRec@1000000000 : Record 50008;
    BEGIN

      GracePeriod :=' ';
      CurrDate :=0;
      DateofExpiry :=0D;
      MasterSetupRec.GET;
      GracePeriod := FORMAT(MasterSetupRec."Grace Period for WHT Closing")+'D';
      CurrDate := DATE2DMY(TODAY,1);
      IF CurrDate <= MasterSetupRec."Grace Period for WHT Closing" THEN
        BEGIN
        GracePeriod := '-4M'+'-'+FORMAT(CurrDate-1)+'D';
        DateofExpiry := CALCDATE(GracePeriod,TODAY);
         IF TaxInvdate < DateofExpiry THEN
              Flag:=TRUE;
        END ELSE BEGIN
        GracePeriod := '-3M'+'-'+FORMAT(CurrDate-1)+'D';
        DateofExpiry := CALCDATE(GracePeriod,TODAY);
         IF TaxInvdate < DateofExpiry THEN
          Flag:=TRUE;
        END;

      EXIT(Flag);
    END;

    BEGIN
    {
      //TBI1.1--Field Enable "Description"
    }
    END.
  }
}

