OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=02/17/16;
    Time=17:46:17;
    Modified=Yes;
    Version List=YIMMAEXP,NNPWP,ARC,Propac1.0,TBI1.0,Mel1.0,UPG09R2,UPG13,UPG13R2,CAUYIMM,YIMMDEVIP1.0,SMDEV1.0,YIMMDEVIP1.0,UPG13R2DEV,PPNPPHDEV,CR001,ZZ;
  }
  PROPERTIES
  {
    Permissions=TableData 21=m;
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=BEGIN
               PurchSetup.GET;// UPG09R2
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;
               InsertMode := TRUE;

               IF GETFILTER("Sell-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN
                   VALIDATE("Sell-to Customer No.",GETRANGEMIN("Sell-to Customer No."));

               IF GETFILTER("Sell-to Contact No.") <> '' THEN
                 IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
                   VALIDATE("Sell-to Contact No.",GETRANGEMIN("Sell-to Contact No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
             END;

    OnModify=BEGIN
               //shashiTESTFIELD(Interfaced,FALSE);// UPG09R2

               //UPG13R2DEV.begin
               IF CheckReportPrint = TRUE THEN
                 CheckReportPrint := FALSE;
               //UPG13R2DEV.end
             END;

    OnDelete=VAR
               Opp@1000 : Record 5092;
               TempOpportunityEntry@1001 : TEMPORARY Record 5093;
               DOPaymentTransLogEntry@1002 : Record 829;
             BEGIN
               IF DOPaymentTransLogEntry.FINDFIRST THEN
                 DOPaymentTransLogMgt.ValidateCanDeleteDocument("Payment Method Code","Document Type",FORMAT("Document Type"),"No.");
               TESTFIELD(Interfaced,FALSE);// UPG09R2

               IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               IF ("Opportunity No." <> '') AND
                  ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order])
               THEN BEGIN
                 IF Opp.GET("Opportunity No.") THEN BEGIN
                   IF "Document Type" = "Document Type"::Order THEN BEGIN
                     IF NOT CONFIRM(Text040,TRUE) THEN
                       ERROR(Text044);
                     TempOpportunityEntry.INIT;
                     TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
                     TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
                     TempOpportunityEntry."Contact No." := Opp."Contact No.";
                     TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
                     TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
                     TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
                     TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Lost;
                     TempOpportunityEntry.INSERT;
                     TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Lost);
                     PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
                     IF Opp.GET("Opportunity No.") THEN
                       IF Opp.Status <> Opp.Status::Lost THEN
                         ERROR(Text043);
                   END;
                   Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
                   Opp."Sales Document No." := '';
                   Opp.MODIFY;
                   "Opportunity No." := '';
                 END;
               END;

               SalesPost.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');

               ApprovalMgt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 COMMIT;

               // UPG09R2.begin
               {
                 IF SalesShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        SalesShptHeader."No.")
                   THEN BEGIN
                     SalesShptHeader.SETRECFILTER;
                     SalesShptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeader.SETRECFILTER;
                     SalesInvHeader.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        SalesCrMemoHeader."No.")
                   THEN BEGIN
                     SalesCrMemoHeader.SETRECFILTER;
                     SalesCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text023,TRUE,
                        ReturnRcptHeader."No.")
                   THEN BEGIN
                     ReturnRcptHeader.SETRECFILTER;
                     ReturnRcptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text055,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeaderPrepmt.SETRECFILTER;
                     SalesInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text054,TRUE,
                        SalesCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     SalesCrMemoHeaderPrepmt.SETRECFILTER;
                     SalesCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;

               }
               // UPG09R2.end
               END;


               // UPG09R2.begin
               VATDetail.RESET;
               VATDetail.SETRANGE(VATDetail."Document Type","Document Type");
               VATDetail.SETRANGE(VATDetail."Document No.","No.");
               IF VATDetail.FINDSET THEN REPEAT
                 VATDetail.TESTFIELD(VATDetail.Approved,FALSE);
                 VATDetail.TESTFIELD(VATDetail."Approve Final",FALSE);
                 VATDetail.DELETE;
               UNTIL VATDetail.NEXT = 0;

               ESPTDetail.RESET;
               ESPTDetail.SETRANGE(ESPTDetail."Document Type","Document Type");
               ESPTDetail.SETRANGE(ESPTDetail."Document No.","No.");
               IF ESPTDetail.FINDFIRST THEN
                 ERROR(Text065);
               // UPG09R2.end
               PostCodeCheck.DeleteAllAddressID(DATABASE::"Sales Header",GETPOSITION);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Header;
               ENA=Sales Header];
    LookupPageID=Page45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENA=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENA=Quote,Order,Invoice,CR/Adj Note,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer WHERE (Entity type=FIELD(Entity type));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;

                                                                GetCust("Sell-to Customer No.");

                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Sell-to Customer Template Code" := '';
                                                                "Sell-to Customer Name" := Cust.Name;
                                                                "Sell-to Customer Name 2" := Cust."Name 2";
                                                                "Sell-to Address" := Cust.Address;
                                                                "Sell-to Address 2" := Cust."Address 2";
                                                                "Sell-to City" := Cust.City;
                                                                "Sell-to Post Code" := Cust."Post Code";
                                                                "Sell-to County" := Cust.County;
                                                                "Sell-to Country/Region Code" := Cust."Country/Region Code";
                                                                "Customer Type" := Cust."Customer Type"; //YIMMDEVIP1.0
                                                                IF NOT SkipSellToContact THEN
                                                                  "Sell-to Contact" := Cust.Contact;
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "WHT Business Posting Group" := Cust."WHT Business Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                "Shipping Advice" := Cust."Shipping Advice";
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));
                                                                //CR001-Start
                                                                VALIDATE("Bank Code",'');
                                                                VALIDATE("Bank Account No",'');
                                                                VALIDATE("Vend/Cust Bank Name",'');
                                                                VALIDATE("Bank Address",'');
                                                                VALIDATE(BeniName,'');
                                                                //CR001-End



                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN BEGIN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("WHT Business Posting Group",xRec."WHT Business Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                END;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;
                                                                VALIDATE("Ship-to Code",'');
                                                                //VALIDATE("Bank Code",''); //YIMMRBDTL// UPG09R2.//CR001-Code Comment
                                                                VALIDATE("New NPWP No.",''); //NK
                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer No."));
                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");

                                                                PostCodeCheck.CopyAddressID(
                                                                  DATABASE::Customer,Cust.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,3);
                                                              END;

                                                   CaptionML=[ENU=Entity No.;
                                                              ENA=Sell-to Customer No.];
                                                   Description=YIMMRBDTL }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENA=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                IF BilltoCustomerNoChanged AND
                                                                   (xRec."Bill-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  VALIDATE("Credit Card No.",'');
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    //Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer No.")); //code comment for CR001
                                                                   Confirmed := TRUE;//CR001
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET
                                                                  END ELSE
                                                                    "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                CheckCrLimit;
                                                                "Tax Document Type" := Cust."Tax Document Type";

                                                                "Bill-to Customer Template Code" := '';
                                                                "Bill-to Name" := Cust.Name;
                                                                "Bill-to Name 2" := Cust."Name 2";
                                                                "Bill-to Address" := Cust.Address;
                                                                "Bill-to Address 2" := Cust."Address 2";
                                                                "Bill-to City" := Cust.City;
                                                                "Bill-to Post Code" := Cust."Post Code";
                                                                "Bill-to County" := Cust.County;
                                                                "Bill-to Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipBillToContact THEN
                                                                  "Bill-to Contact" := Cust.Contact;
                                                                "Payment Terms Code" := Cust."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Cust."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Cust."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Cust."Payment Method Code";

                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                  "VAT Registration No." := Cust."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                END;
                                                                "WHT Business Posting Group" := Cust."WHT Business Posting Group";
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Customer Price Group" := Cust."Customer Price Group";
                                                                "Prices Including VAT" := Cust."Prices Including VAT";
                                                                "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                "Invoice Disc. Code" := Cust."Invoice Disc. Code";
                                                                "Customer Disc. Group" := Cust."Customer Disc. Group";
                                                                "Language Code" := Cust."Language Code";
                                                                "Salesperson Code" := Cust."Salesperson Code";
                                                                "Combine Shipments" := Cust."Combine Shipments";
                                                                Reserve := Cust.Reserve;
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  "Prepayment %" := Cust."Prepayment %";

                                                                IF NOT BilltoCustomerNoChanged THEN BEGIN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   BilltoCustomerNoChanged
                                                                THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer No."));
                                                                  BilltoCustomerNoChanged := FALSE;
                                                                END;
                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                PostCodeCheck.CopyAddressID(
                                                                  DATABASE::Customer,Cust.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,1);
                                                              END;

                                                   CaptionML=[ENU=Entity No.;
                                                              ENA=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=[ENU=Bill-to Name;
                                                              ENA=Bill-to Name] }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENA=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,1,
                                                                  "Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Bill-to Address;
                                                              ENA=Bill-to Address] }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,1,
                                                                  "Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Bill-to Address 2;
                                                              ENA=Bill-to Address 2] }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,1,
                                                                  "Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENA=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=[ENU=Bill-to Contact;
                                                              ENA=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENA=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code20        ;TableRelation=IF (Entity type=FILTER(NonDealer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.),
                                                                                                                                  PPN=FILTER(Yes),
                                                                                                                                  PPN Non Dealer=FILTER(Yes))
                                                                                                                                  ELSE IF (Entity type=FILTER(Dealer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.),
                                                                                                                                                                                                     PPN=FILTER(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;
                                                                // UPG09R2.begin
                                                                {   YIMMSR Dt 180509>>
                                                                Commented as Ship to Details are mapped to NPWP MAster and need to be Updated for Credit Memo
                                                                 (Incentive Invoice) on Change of NPWP Code.

                                                                IF ("Document Type" <> "Document Type"::"Return Order") AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN BEGIN
                                                                    YIMMSR Dt 180509<<
                                                                }
                                                                BEGIN //Added
                                                                // UPG09R2.end
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                      BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    IF ShipToAddr."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    IF ShipToAddr."Tax Area Code" <> '' THEN
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                    PostCodeCheck.CopyAddressID(
                                                                      DATABASE::"Ship-to Address",ShipToAddr.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,2);
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      "Ship-to Address" := Cust.Address;
                                                                      "Ship-to Address 2" := Cust."Address 2";
                                                                      "Ship-to City" := Cust.City;
                                                                      "Ship-to Post Code" := Cust."Post Code";
                                                                      "Ship-to County" := Cust.County;
                                                                      VALIDATE("Ship-to Country/Region Code",Cust."Country/Region Code");
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                      PostCodeCheck.CopyAddressID(
                                                                        DATABASE::Customer,Cust.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,2);
                                                                    END;
                                                                END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;

                                                                // UPG09R2.begin
                                                                //YIMMNNPWPST
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Ship-to Code" <> xRec."Ship-to Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Ship-to Code"));
                                                                //YIMMNNPWPEN

                                                                //VALIDATE("New NPWP No.","Ship-to Code"); //YIMMCH //PPNPPHDEV
                                                                // UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU=Npwp No.;
                                                              ENA=Ship-to Code];
                                                   Description=YIMMNNPWP,YIMMCH }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENA=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENA=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Ship-to Address;
                                                              ENA=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Ship-to Address 2;
                                                              ENA=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENA=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENA=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ENA=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                MasterSetup@1000000001 : Record 50008;
                                                                SalesLineTBI@1000000000 : Record 37;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                //VALIDATE("Document Date","Posting Date"); //YIMM // UPG09R2

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));
                                                                // UPG09R2.begin
                                                                //IF "Currency Code" <> '' THEN BEGIN
                                                                //  UpdateCurrencyFactor;
                                                                  //IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    //ConfirmUpdateCurrencyFactor;
                                                                //END;

                                                                //TBI1.O BEGIN
                                                                MasterSetup.GET;
                                                                IF ((COMPANYNAME = MasterSetup."Company Name TBI") OR (COMPANYNAME = MasterSetup."Company Name YMKI"))THEN BEGIN
                                                                  SalesLineTBI.RESET;
                                                                  SalesLineTBI.SETRANGE("Document Type","Document Type");
                                                                  SalesLineTBI.SETRANGE("Document No.","No.");
                                                                  SalesLineTBI.SETRANGE(Type,SalesLineTBI.Type::"Fixed Asset");
                                                                  SalesLineTBI.SETFILTER("No.",'<>%1','');
                                                                  IF SalesLineTBI.FINDFIRST THEN
                                                                    SalesLineTBI.MODIFYALL("FA Posting Date","Posting Date");
                                                                // UPG09R2.end
                                                                END;
                                                                //TBI1.0 END // UPG09R2
                                                                SynchronizeAsmHeader;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENA=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ENA=Shipment Date] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              ENA=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                                UpdatePmtDiscDate;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENA=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                // UPG09R2.begin
                                                                //YIMMN
                                                                //IF (("Due Date" < "Document Date")  AND (Interfaced= FALSE)) THEN
                                                                  // ERROR(' !!!!! Due Date Should not be less than Document Date');

                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ENA=Due Date];
                                                   Description=YIMMN }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                                UpdatePmtDiscDate;
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ENA=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                UpdatePmtDiscDate;
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              ENA=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENA=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENA=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENA=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENA=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group".Code WHERE (Reason Code=FIELD(Reason Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                              END;

                                                   OnLookup=VAR
                                                              Cust@1000000000 : Record 18;
                                                              CustPostGrup@1000000001 : Record 92;
                                                              CustType@1000000002 : Code[50];
                                                            BEGIN
                                                              // UPG09R2.begin
                                                              Cust.RESET;
                                                              Cust.SETRANGE(Cust."No.","Sell-to Customer No.");
                                                              IF Cust.FINDFIRST THEN
                                                              CustType:=FORMAT(Cust."Customer Type");


                                                              CustPostGrup.RESET;
                                                              CustPostGrup.SETRANGE(CustPostGrup."Reason Code","Reason Code");
                                                              CustPostGrup.SETFILTER(CustPostGrup."Customer Type",'%1|%2',CustType,'OTHERS');
                                                              IF CustPostGrup.FINDFIRST THEN;

                                                              //FORM.RUNMODAL(110,CustPostGrup);


                                                                IF PAGE.RUNMODAL(0,CustPostGrup) = ACTION::LookupOK THEN
                                                                  "Customer Posting Group":= CustPostGrup.Code;
                                                              // UPG09R2.end
                                                            END;

                                                   CaptionML=[ENU=Entity Posting Group;
                                                              ENA=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                DOPaymentTransLogEntry@1001 : Record 829;
                                                              BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF DOPaymentTransLogEntry.FINDFIRST THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE BEGIN
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                END;

                                                                IF "Bank Code" <> '' THEN   //YIMMDEVIP1.0
                                                                  ERROR(Text077);           //YIMMDEVIP1.0
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENA=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENA=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=Yes }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Entity Price Group;
                                                              ENA=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        TRUE);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      SalesLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.InitOutstandingAmount;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" / (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" / (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ENA=Prices Including GST] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENA=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=[ENU=Entity Disc. Group;
                                                              ENA=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ENA=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENA=Salesperson Code] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENA=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENA=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENA=No. Printed];
                                                   Editable=Yes }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENA=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                              END;

                                                   CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENA=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENA=" ,Payment,Invoice,CR/Adj Note,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2

                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                ValidateAppliesToDocNo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                              CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                              CustLedgEntry.SETRANGE(Open,TRUE);
                                                              CustLedgEntry.SETRANGE("Reason Code","Reason Code");//YIMM // UPG09R2
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF CustLedgEntry.FINDFIRST THEN;
                                                                CustLedgEntry.SETRANGE("Document Type");
                                                                CustLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF CustLedgEntry.FINDFIRST THEN;
                                                                  CustLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF CustLedgEntry.FINDFIRST THEN;
                                                                    CustLedgEntry.SETRANGE(Positive);
                                                                  END;

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnILine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                                "Customer Posting Group" := CustLedgEntry."Customer Posting Group";//YIMM// UPG09R2
                                                                LookupAppliesToDocNo;
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENA=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENA=Bal. Account No.] }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENA=Ship];
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENA=Invoice] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              ENA=Print Posted Documents] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENA=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENA=Amount Including GST];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=[ENU=Shipping No.;
                                                              ENA=Shipping No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENA=Posting No.] }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Last Shipping No.;
                                                              ENA=Last Shipping No.];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENA=Last Posting No.];
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENA=Prepayment No.] }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENA=Last Prepayment No.] }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENA=Prepmt. CR/Adj Note No.] }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENA=Last Prepmt. CR/Adj Note No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENA=Exemption Certificate No.] }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=[ENU=Combine Shipments;
                                                              ENA=Combine Shipments] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   OnValidate=BEGIN
                                                                //YIMMARC
                                                                UpdateSalesLines(FIELDCAPTION("Reason Code"),FALSE);// UPG09R2
                                                              END;

                                                   CaptionML=[ENU=Reason Code;
                                                              ENA=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN BEGIN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                    RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENA=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENA=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENA=Transaction Type] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ENA=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENA=GST Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=[ENU=Entity Name;
                                                              ENA=Sell-to Customer Name] }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Entity Name 2;
                                                              ENA=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,3,
                                                                  "Sell-to Customer Name","Sell-to Customer Name 2","Sell-to Contact","Sell-to Address","Sell-to Address 2",
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Entity Address;
                                                              ENA=Sell-to Address] }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,3,
                                                                  "Sell-to Customer Name","Sell-to Customer Name 2","Sell-to Contact","Sell-to Address","Sell-to Address 2",
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Entity Address 2;
                                                              ENA=Sell-to Address 2] }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,3,
                                                                  "Sell-to Customer Name","Sell-to Customer Name 2","Sell-to Contact","Sell-to Address","Sell-to Address 2",
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Entity City;
                                                              ENA=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=[ENU=Entity Contact;
                                                              ENA=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,1,
                                                                  "Bill-to Name","Bill-to Name 2","Bill-to Contact","Bill-to Address","Bill-to Address 2",
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENA=Bill-to Post Code] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENA=Bill-to State] }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENA=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,3,
                                                                  "Sell-to Customer Name","Sell-to Customer Name 2","Sell-to Contact","Sell-to Address","Sell-to Address 2",
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Entity Post Code;
                                                              ENA=Sell-to Post Code] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Entity County;
                                                              ENA=Sell-to State] }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Entity Country/Region Code;
                                                              ENA=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Sales Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Entity Post Code;
                                                              ENA=Ship-to Post Code] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Entity County;
                                                              ENA=Ship-to State] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Entity Country/Region Code;
                                                              ENA=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENA=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENA=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Exit Point;
                                                              ENA=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENA=Correction] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                ValidateDocumentDate;

                                                                // UPG09R2.begin
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                                //  UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU=Invoice Date;
                                                              ENA=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENA=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ENA=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENA=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                                DOPaymentTransLogEntry@1001 : Record 829;
                                                              BEGIN
                                                                IF DOPaymentTransLogEntry.FINDFIRST THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF DOPaymentMgt.IsValidPaymentMethod(xRec."Payment Method Code") AND NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code")
                                                                THEN
                                                                  TESTFIELD("Credit Card No.",'');
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" THEN BEGIN
                                                                  IF "Direct Debit Mandate ID" = '' THEN
                                                                    "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
                                                                  IF "Payment Terms Code" = '' THEN
                                                                    "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                                END;
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENA=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENA=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENA=Package Tracking No.] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENA=No. Series];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENA=Posting No. Series] }
    { 109 ;   ;Shipping No. Series ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Shipping No. Series;
                                                              ENA=Shipping No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENA=US Tax Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENA=US Tax Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENA=GST Bus. Posting Group] }
    { 117 ;   ;Reserve             ;Option        ;CaptionML=[ENU=Reserve;
                                                              ENA=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENA=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : Record 21;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENA=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                IF SalesLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) OR
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
                                                                       (CurrFieldNo <> 0)
                                                                    THEN BEGIN
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                    END;
                                                                  UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ENA=GST Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENA=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENA=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENA=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENA=None,%,Amount];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENA=Invoice Discount Value];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ENA=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENA=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENA=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Sell-to IC Partner Code;
                                                              ENA=Sell-to IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Bill-to IC Partner Code;
                                                              ENA=Bill-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ENA=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENA=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENA=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENA=Prepayment No. Series] }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENA=Compress Prepayment] }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENA=Prepayment Due Date] }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENA=Prepmt. CR/Adj Note No. Series] }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENA=Prepmt. Posting Description] }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENA=Prepmt. Pmt. Discount Date] }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENA=Prepmt. Payment Terms Code] }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENA=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENA=Quote No.];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              ENA=Job Queue Status];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    ENA=" ,Scheduled for Posting,Error,Posting"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              ENA=Job Queue Entry ID];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document" WHERE (Status=FILTER(New|Approved));
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IncomingDocument.SetSalesDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENA=Incoming Document Entry No.] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENA=Dimension Set ID];
                                                   Editable=No }
    { 825 ;   ;Authorization Required;Boolean     ;CaptionML=[ENU=Authorization Required;
                                                              ENA=Authorisation Required] }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation="DO Payment Credit Card" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=VAR
                                                                DOPaymentTransLogEntry@1000 : Record 829;
                                                              BEGIN
                                                                IF NOT DOPaymentTransLogEntry.ISEMPTY THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");

                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");

                                                                IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
                                                                  FIELDERROR("Payment Method Code");
                                                              END;

                                                   CaptionML=[ENU=Credit Card No.;
                                                              ENA=Credit Card No.] }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No));
                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              ENA=Direct Debit Mandate ID] }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                              Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENA=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENA=No. of Archived Versions];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENA=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENA=Campaign No.] }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  IF "Bill-to Customer No." = '' THEN
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                END;

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Entity Template Code;
                                                              ENA=Sell-to Customer Template Code] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Sell-to Contact No." = '') AND ("Sell-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENA=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN BEGIN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENA=Bill-to Contact No.] }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Bill-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF NOT InsertMode AND
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Entity Template Code;
                                                              ENA=Bill-to Customer Template Code] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                LinkSalesDocWithOpportunity(xRec."Opportunity No.");
                                                              END;

                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENA=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(0,'',"Responsibility Center");
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENA=Responsibility Centre] }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF InventoryPickConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                IF WhseShpmntConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(STRSUBSTNO(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION));
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Shipping Advice;
                                                              ENA=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENA=Partial,Complete];
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENA=Shipped Not Invoiced];
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Shipped;
                                                              ENA=Completely Shipped];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENA=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENA=Location Filter] }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENA=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ENA=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Time;
                                                              ENA=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENA=Outbound Whse. Handling Time] }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENA=Shipping Agent Service Code] }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   CaptionML=[ENU=Late Order Shipping;
                                                              ENA=Late Order Shipping];
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENA=Date Filter] }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENA=Receive] }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENA=Return Receipt No.] }
    { 5802;   ;Return Receipt No. Series;Code10   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Receipt No. Series;
                                                              ENA=Return Receipt No. Series] }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=[ENU=Last Return Receipt No.;
                                                              ENA=Last Return Receipt No.];
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENA=Allow Line Disc.] }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=[ENU=Get Shipment Used;
                                                              ENA=Get Shipment Used];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENA=Assigned User ID] }
    { 11612;  ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ENA=Adjustment];
                                                   Editable=No }
    { 11613;  ;BAS Adjustment      ;Boolean       ;CaptionML=[ENU=BAS Adjustment;
                                                              ENA=BAS Adjustment];
                                                   Editable=No }
    { 11614;  ;Adjustment Applies-to;Code20       ;OnValidate=BEGIN
                                                                ValidateAdjmtAppliesTo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupAdjmtAppliesTo;
                                                            END;

                                                   CaptionML=[ENU=Adjustment Applies-to;
                                                              ENA=Adjustment Applies-to] }
    { 28040;  ;WHT Business Posting Group;Code10  ;TableRelation="WHT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."WHT Business Posting Group" <> "WHT Business Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("WHT Business Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=WHT Business Posting Group;
                                                              ENA=WHT Business Posting Group] }
    { 28070;  ;Tax Document Type   ;Option        ;CaptionML=[ENU=Tax Document Type;
                                                              ENA=Tax Document Type];
                                                   OptionCaptionML=[ENU=" ,Document Post,Group Batch,Prompt";
                                                                    ENA=" ,Document Post,Group Batch,Prompt"];
                                                   OptionString=[ ,Document Post,Group Batch,Prompt] }
    { 28071;  ;Printed Tax Document;Boolean       ;CaptionML=[ENU=Printed Tax Document;
                                                              ENA=Printed Tax Document];
                                                   Editable=No }
    { 28072;  ;Posted Tax Document ;Boolean       ;CaptionML=[ENU=Posted Tax Document;
                                                              ENA=Posted Tax Document];
                                                   Editable=No }
    { 28073;  ;Tax Document Marked ;Boolean       ;CaptionML=[ENU=Tax Document Marked;
                                                              ENA=Tax Document Marked];
                                                   Editable=No }
    { 50001;  ;Type Of Transaction ;Option        ;OnValidate=VAR
                                                                CustBankAcc@1102159001 : Record 287;
                                                              BEGIN
                                                                //YIMMAEXP
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                                 { //YIMMDEVIP1.0 S-Code Commented as this concept not required.
                                                                  CustBankAcc.RESET;
                                                                  CustBankAcc.SETRANGE(CustBankAcc."Customer No.","Sell-to Customer No.");
                                                                  CustBankAcc.SETRANGE(CustBankAcc."Type Of Transaction","Type Of Transaction");
                                                                   IF CustBankAcc.FINDFIRST THEN
                                                                      BEGIN
                                                                        "Bank Code":=CustBankAcc.Code;
                                                                        "Bank Account No":=CustBankAcc."Bank Account No.";
                                                                        "Vend/Cust Bank Name":=CustBankAcc.Name;
                                                                        "Bank Address":=CustBankAcc.Address;
                                                                        BeniName :=CustBankAcc.Contact;
                                                                        "Bank Branch No.":= CustBankAcc."Bank Branch No.";
                                                                      END
                                                                 } //YIMMDEVIP1.0 E
                                                              END;

                                                   OptionCaptionML=ENU=" ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit,Imacs-ATV,Imacs-Generator,Imacs-CBU,Campaign,DDS1 Vendor,DDS2 Vendor,DDS3 Vendor,DDS4 Vendor,DDS5 Vendor,DDS6 Vendor,DDS7 Vendor,DDS8 Vendor,DDS9 Vendor,MKT Vendor,SVC Vendor,MS Vendor,POD Vendor,Others Purchase,Ekspedisi Log-POD";
                                                   OptionString=[ ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit,Imacs-ATV,Imacs-Generator,Imacs-CBU,Campaign,DDS1 Vendor,DDS2 Vendor,DDS3 Vendor,DDS4 Vendor,DDS5 Vendor,DDS6 Vendor,DDS7 Vendor,DDS8 Vendor,DDS9 Vendor,MKT Vendor,SVC Vendor,MS Vendor,POD Vendor,Others Purchase,Ekspedisi Log-POD];
                                                   Description=YIMMAEXP,CR#018 & 23-Options added for Imacs }
    { 50002;  ;Incentive Month     ;Option        ;OnValidate=BEGIN
                                                                //YIMMAEXP
                                                                TESTFIELD(Status,Status::Open);// UPG09R2
                                                              END;

                                                   OptionCaptionML=ENU=" ,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec";
                                                   OptionString=[ ,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec];
                                                   Description=YIMMAEXP }
    { 50003;  ;Interfaced          ;Boolean       ;Description=YIMMAEXP }
    { 50004;  ;Incentive           ;Boolean       ;Description=YIMMAEXP }
    { 50005;  ;Tax Invoice Date    ;Date          ;OnValidate=VAR
                                                                Text50001@1000000000 : TextConst 'ENU=The Tax Invoice Date %1 has Expired';
                                                                GracePeriod@1000000001 : Text[30];
                                                                CurrDate@1000000003 : Integer;
                                                                DateofExpiry@1000000006 : Date;
                                                                MasterSetupRec@1000000002 : Record 50008;
                                                              BEGIN
                                                                GracePeriod :=' ';
                                                                CurrDate :=0;
                                                                DateofExpiry :=0D;
                                                                TESTFIELD(Status,Status::Open);
                                                                MasterSetupRec.GET;
                                                                GracePeriod := FORMAT(MasterSetupRec."Grace Period for WHT Closing")+'D';
                                                                CurrDate := DATE2DMY(TODAY,1);
                                                                IF CurrDate <= MasterSetupRec."Grace Period for WHT Closing" THEN
                                                                  BEGIN
                                                                  GracePeriod := '-4M'+'-'+FORMAT(CurrDate-1)+'D';
                                                                  DateofExpiry := CALCDATE(GracePeriod,TODAY);
                                                                   IF "Tax Invoice Date" < DateofExpiry THEN
                                                                    ERROR(Text50001,"Tax Invoice Date");
                                                                  END ELSE BEGIN
                                                                  GracePeriod := '-3M'+'-'+FORMAT(CurrDate-1)+'D';
                                                                  DateofExpiry := CALCDATE(GracePeriod,TODAY);
                                                                   IF "Tax Invoice Date" < DateofExpiry THEN
                                                                    ERROR(Text50001,"Tax Invoice Date");
                                                                  END;
                                                              END;

                                                   Description=YIMMATAx }
    { 50006;  ;B/L Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   Description=YIMMNBTR }
    { 50007;  ;Flag                ;Boolean       ;Description=YIMMN }
    { 50008;  ;UID                 ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              LoginMgt.LookupUserID(UID);
                                                            END;

                                                   Description=YIMMRYUID,CAUYIMM }
    { 50009;  ;Propac Applied To Invoice No.;Code20;
                                                   Description=Propac1.0 }
    { 50010;  ;Amount Propac       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Amount" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.)));
                                                   Description=Propac1.0 }
    { 50015;  ;New NPWP No.        ;Code20        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.),
                                                                                               PPH=FILTER(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=PPH NPWP No.;
                                                   Description=YIMMCH }
    { 50016;  ;Bank Code           ;Code20        ;TableRelation=IF (Entity type=FILTER(NonDealer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Sell-to Customer No.),
                                                                                                                                        Purchase=FILTER(Yes))
                                                                                                                                        ELSE IF (Entity type=FILTER(Dealer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                //YIMMDEVIP1.0.begin
                                                                IF ("Bank Code"<>'') THEN
                                                                BEGIN
                                                                  CustBankAcc.RESET;
                                                                  CustBankAcc.SETRANGE(CustBankAcc."Customer No.","Sell-to Customer No.");
                                                                  CustBankAcc.SETRANGE(CustBankAcc.Code,"Bank Code");
                                                                   IF CustBankAcc.FINDFIRST THEN
                                                                      BEGIN
                                                                        IF CustBankAcc."Valid Upto" <> 0D THEN
                                                                          IF CustBankAcc."Valid Upto" < TODAY THEN
                                                                            ERROR(Text075,CustBankAcc.Code);
                                                                          IF CustBankAcc."Currency Code" <> "Currency Code" THEN
                                                                            ERROR(Text076,CustBankAcc.Code);
                                                                        "Bank Code":=CustBankAcc.Code;
                                                                        "Bank Account No":=CustBankAcc."Bank Account No.";
                                                                        "Vend/Cust Bank Name":=CustBankAcc.Name;
                                                                        "Bank Address":=CustBankAcc.Address;
                                                                        BeniName :=CustBankAcc.Contact;
                                                                        "Bank Branch No." := CustBankAcc."Bank Branch No."; //nk
                                                                      END
                                                                      ELSE BEGIN
                                                                        "Bank Code":='';
                                                                        "Bank Account No":='';
                                                                        "Vend/Cust Bank Name":='';
                                                                        "Bank Address":='';
                                                                        BeniName :='';
                                                                        "Bank Branch No." := ''; //nk
                                                                      END;
                                                                 END;
                                                                //YIMMDEVIP1.0.end


                                                                {//YIMMDEVIP1.0.begin- Old Code Commented
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Bank Code"<>'') THEN
                                                                BEGIN
                                                                  CustBankAcc.RESET;
                                                                  CustBankAcc.SETRANGE(CustBankAcc."Customer No.","Sell-to Customer No.");
                                                                  CustBankAcc.SETRANGE(CustBankAcc.Code,"Bank Code");
                                                                   IF CustBankAcc.FINDFIRST THEN
                                                                      BEGIN
                                                                        IF CustBankAcc."Valid Upto" <> 0D THEN
                                                                         IF CustBankAcc."Valid Upto" < TODAY THEN
                                                                          ERROR(Text075,CustBankAcc.Code);
                                                                        "Bank Code":=CustBankAcc.Code;
                                                                        "Bank Account No":=CustBankAcc."Bank Account No.";
                                                                        "Vend/Cust Bank Name":=CustBankAcc.Name;
                                                                        "Bank Address":=CustBankAcc.Address;
                                                                        BeniName :=CustBankAcc.Contact;
                                                                        "Bank Branch No." := CustBankAcc."Bank Branch No."; //nk
                                                                      END
                                                                      ELSE
                                                                      BEGIN
                                                                        "Bank Code":='';
                                                                        "Bank Account No":='';
                                                                        "Vend/Cust Bank Name":='';
                                                                        "Bank Address":='';
                                                                        BeniName :='';
                                                                        "Bank Branch No." := ''; //nk
                                                                      END;
                                                                END ELSE BEGIN
                                                                  CustBankAcc.RESET;
                                                                  CustBankAcc.SETRANGE(CustBankAcc."Customer No.","Sell-to Customer No.");
                                                                  CustBankAcc.SETRANGE(CustBankAcc."Type Of Transaction","Type Of Transaction");//YIMMDEVIP1.0
                                                                   IF CustBankAcc.FINDFIRST THEN
                                                                      BEGIN
                                                                        IF CustBankAcc."Valid Upto" <> 0D THEN
                                                                         IF CustBankAcc."Valid Upto" < TODAY THEN
                                                                          ERROR(Text075,CustBankAcc.Code);
                                                                        "Bank Code":=CustBankAcc.Code;
                                                                        "Bank Account No":=CustBankAcc."Bank Account No.";
                                                                        "Vend/Cust Bank Name":=CustBankAcc.Name;
                                                                        "Bank Address":=CustBankAcc.Address;
                                                                        BeniName :=CustBankAcc.Contact;
                                                                        "Bank Branch No." := CustBankAcc."Bank Branch No."; //nk
                                                                      END
                                                                      ELSE
                                                                      BEGIN
                                                                        "Bank Code":='';
                                                                        "Bank Account No":='';
                                                                        "Vend/Cust Bank Name":='';
                                                                        "Bank Address":='';
                                                                        BeniName :='';
                                                                        "Bank Branch No." := ''; //nk
                                                                      END;
                                                                END;
                                                                }//YIMMDEVIP1.0.end- Old Code Commented
                                                              END;

                                                   Description=YIMMRBDTL }
    { 50017;  ;Bank Account No     ;Code50        ;Description=YIMMRBDTL }
    { 50018;  ;Vend/Cust Bank Name ;Text50        ;Description=YIMMRBDTL }
    { 50019;  ;Bank Address        ;Text50        ;Description=YIMMRBDTL }
    { 50020;  ;BeniName            ;Text50        ;Description=YIMMRBDTL }
    { 50024;  ;Slip Amount         ;Decimal        }
    { 50025;  ;Slip Amount (LCY)   ;Decimal        }
    { 50026;  ;Destination         ;Text50        ;Description=YIMMSRYMKI }
    { 50027;  ;ActualCreditMemo    ;Boolean       ;Description=Field to identify actual and Corrected Credit memo }
    { 50031;  ;Total Case          ;Code20        ;Description=SMDEV1.0 }
    { 50032;  ;G.WEIGHT            ;Decimal       ;Description=SMDEV1.0 }
    { 50033;  ;N.WEIGHT            ;Decimal       ;Description=SMDEV1.0 }
    { 50034;  ;MEASURE             ;Decimal       ;Description=SMDEV1.0 }
    { 50035;  ;Case Mark           ;Code100       ;Description=SMDEV1.0 }
    { 50036;  ;Attention / Division;Code100       ;Description=SMDEV1.0 }
    { 50037;  ;Vessel Name / Voyage;Code50        ;Description=SMDEV1.0 }
    { 51000;  ;AccPac Receipt No.  ;Code20        ;Description=TBI - to validate unique receipt no. from AccPac }
    { 51001;  ;VAT APPLICABLE      ;Boolean       ;Description=TBI -to find VAT Applicable or not. }
    { 51010;  ;Sold                ;Boolean        }
    { 52000;  ;Quote No ( Project No.);Code20     ;TableRelation=IF (Document Type=CONST(Invoice),
                                                                     Reason Code=CONST(NORMAL)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                     ELSE IF (Document Type=CONST(Quote),
                                                                              Type Of Transaction=CONST(Claim)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(Yes))
                                                                              ELSE IF (Document Type=CONST(Quote),
                                                                                       Type Of Transaction=FILTER(<>Claim)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                                       ELSE IF (Document Type=CONST(Order)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                                       ELSE IF (Document Type=CONST(Credit Memo),
                                                                                                Reason Code=CONST(NORMAL)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(Yes))
                                                                                                ELSE IF (Document Type=CONST(Invoice),
                                                                                                         Reason Code=CONST(SALRT)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                                                         ELSE IF (Document Type=CONST(Credit Memo),
                                                                                                                  Reason Code=CONST(SALRT)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No));
                                                   OnValidate=VAR
                                                                MasterSetup@1000000000 : Record 50008;
                                                                SalesInvoiceHeader@1000000001 : Record 112;
                                                                SalesCrmemoHeader@1000000002 : Record 114;
                                                                Int@1000000003 : Integer;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                 MasterSetup.GET;

                                                                IF ("Document Type"="Document Type"::Quote) AND
                                                                 ("Type Of Transaction"="Type Of Transaction"::Claim)  AND
                                                                   (COMPANYNAME=MasterSetup."Company Name MELCO") THEN

                                                                 BEGIN

                                                                  Int:=0;


                                                                  SalesInvoiceHeader.RESET;
                                                                  SalesInvoiceHeader.SETRANGE(SalesInvoiceHeader."Quote No ( Project No.)","Quote No ( Project No.)");
                                                                  SalesInvoiceHeader.SETRANGE(SalesInvoiceHeader."Reason Code",MasterSetup."Reason (Normal)");
                                                                  SalesInvoiceHeader.SETRANGE(SalesInvoiceHeader.Deposit,FALSE);

                                                                   IF SalesInvoiceHeader.FINDSET THEN
                                                                    REPEAT

                                                                     SalesCrmemoHeader.RESET;
                                                                     SalesCrmemoHeader.SETRANGE(SalesCrmemoHeader."Applies-to Doc. Type",SalesCrmemoHeader."Applies-to Doc. Type"::Invoice);
                                                                     SalesCrmemoHeader.SETRANGE(SalesCrmemoHeader."Applies-to Doc. No.",SalesInvoiceHeader."No.");
                                                                     SalesCrmemoHeader.SETRANGE(SalesCrmemoHeader."Reason Code",MasterSetup."Reason (Normal)");
                                                                     SalesCrmemoHeader.SETRANGE(SalesCrmemoHeader.ActualCreditMemo,FALSE);

                                                                     IF NOT (SalesCrmemoHeader.FINDFIRST) THEN
                                                                       Int:=Int+1;

                                                                    UNTIL(SalesInvoiceHeader.NEXT=0);

                                                                    IF (Int=0) THEN
                                                                      ClaimNo:='CL'+FORMAT(Int+1)+'-'+"Quote No ( Project No.)"
                                                                   ELSE
                                                                      ClaimNo:='CL'+FORMAT(Int)+'-'+"Quote No ( Project No.)"
                                                                 END;
                                                              END;

                                                   Description=For Melco to Capture the Quote No. }
    { 52001;  ;Deposit             ;Boolean       ;Description=For Melco to Capture the document received mark }
    { 52002;  ;ClaimNo             ;Code20        ;Description=For Getting the Claim No }
    { 52003;  ;ExpansesCode        ;Code20        ;TableRelation=ExpansesCode.ExpanseCode;
                                                   Description=Field For the Expanses Code }
    { 52004;  ;Blocked             ;Boolean        }
    { 52005;  ;YMNI Type of Sales  ;Option        ;OptionCaptionML=ENU=" ,Unit,Material,Laboratorium,Others";
                                                   OptionString=[ ,Unit,Material,Laboratorium,Others] }
    { 52006;  ;Customer Type       ;Option        ;CaptionML=ENU=Type of Entity(Party);
                                                   OptionString=[ ,Third Party,Related Party,Others];
                                                   Description=YIMMDEVIP1.0 }
    { 52007;  ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENA=Bank Branch No.];
                                                   Description=YIMMDEVIP1.0 }
    { 52008;  ;Vendor Invoice No.  ;Code35        ;Description=SMDEV1.0 }
    { 52009;  ;Vendor Cr. Memo No. ;Code35        ;Description=SMDEV1.0 }
    { 52010;  ;Old Vendor          ;Code20        ;OnValidate=BEGIN
                                                                //YIMMACON
                                                                TESTFIELD(Status,Status::Open); //YIMMDEVIP1.0
                                                              END;

                                                   Description=YIMMACON,SMDEV1.0 }
    { 52011;  ;New or Cancel       ;Option        ;OptionString=,New,Cancel;
                                                   Description=AKS240309 New for Export/Import,SMDEV1.0 }
    { 52012;  ;G-Port Ref No.      ;Code20        ;Description=YIMMAKS For Gport,SMDEV1.0 }
    { 52013;  ;FA Maintainance     ;Boolean       ;Description=To identofy FA Maintainance Document,SMDEV1.0 }
    { 52014;  ;Discount Amount     ;Decimal       ;Description=This field is added for the PO of FA: Discount given on PO of FA,SMDEV1.0 }
    { 52015;  ;Order Address Code  ;Code20        ;Description=YIMMNNPWP,YIMMCH,SMDEV1.0 }
    { 52016;  ;Entity type         ;Option        ;OnValidate=VAR
                                                                EntityTypeChanged@1102159002 : Boolean;
                                                                SalesLine@1102159001 : Record 37;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                EntityTypeChanged := (xRec."Entity type" <> "Entity type") AND
                                                                (xRec."Sell-to Customer No." <> '');
                                                                IF EntityTypeChanged THEN BEGIN
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Entity type"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Entity type"))
                                                                      ELSE BEGIN
                                                                        SetHideValidationDialog(TRUE);
                                                                        VALIDATE("Sell-to Customer No.",'');
                                                                        SetHideValidationDialog(FALSE);
                                                                        VALIDATE("Customer Type","Customer Type"::" ");
                                                                        VALIDATE("Ship-to Code",'');
                                                                        VALIDATE("Bank Code",'');
                                                                      END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;
                                                              END;

                                                   OptionCaptionML=ENU=Dealer,NonDealer;
                                                   OptionString=Dealer,NonDealer;
                                                   Description=SMDEV1.0 Values Dealer Non Dealer YIMMDEVIP1.0 }
    { 52017;  ;CheckReportPrint    ;Boolean       ;Description=Validation for standard Test Report before Slip Report }
    { 52018;  ;Vendor Order No.    ;Code35        ;Description=UPG13R2DEV }
    { 52019;  ;Cash                ;Boolean       ;Description=UPG13R2DEV }
    { 52020;  ;S/P                 ;Boolean       ;Description=SON }
    { 52021;  ;MKT                 ;Boolean       ;Description=Field added to recognize mkt activities invoices }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.       ;KeyGroups=SOP(CRM) }
    {    ;Bill-to Contact No.                     ;KeyGroups=SOP(CRM) }
    {    ;Incoming Document Entry No.              }
    {    ;Document Type,Sell-to Customer No.,Type Of Transaction,Applies-to Doc. Type,Posting Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print shipment %1?;ENA=Do you want to print shipment %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?;ENA=Do you want to print invoice %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?;ENA=Do you want to print CR/Adj Note %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ENA=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;ENA=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ENA=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.;ENA=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.;ENA=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for posted CR/Adj Notes. An empty posted CR/Adj Note %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text015@1015 : TextConst 'ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?;ENA=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.;ENA=You must delete the existing sales lines before you can change %1.';
      Text018@1018 : TextConst 'ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\;ENA=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.;ENA=You must update the existing sales lines manually.';
      Text020@1020 : TextConst 'ENU=The change may affect the exchange rate used in the price calculation of the sales lines.;ENA=The change may affect the exchange rate used in the price calculation of the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ENA=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ENA=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text023@1023 : TextConst 'ENU=Do you want to print return receipt %1?;ENA=Do you want to print return receipt %1?';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?;ENA=You have modified the %1 field. The recalculation of GST may cause small differences, so you must check the amounts afterwards. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ENA=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENA=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\;ENA=You have modified %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?;ENA=Do you want to update the lines?';
      Text067@2002 : TextConst 'ENU=%1 %4 with amount of %2 has already been authorized on %3 and is not expired yet. You must void the previous authorization before you can re-authorize this %1.;ENA=%1 %4 with amount of %2 has already been authorised on %3 and is not expired yet. You must void the previous authorisation before you can re-authorise this %1.';
      Text068@2003 : TextConst 'ENU=There is nothing to void.;ENA=There is nothing to void.';
      Text069@2004 : TextConst 'ENU=The selected operation cannot complete with the specified %1.;ENA=The selected operation cannot complete with the specified %1.';
      SalesSetup@1033 : Record 311;
      PurchSetup@1000000002 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      ShipToAddr@1044 : Record 222;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      GenJnILine@1052 : Record 81;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ShippingAgentService@1057 : Record 5790;
      TempReqLine@1089 : TEMPORARY Record 246;
      UserSetupMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      SalesPost@1063 : Codeunit 80;
      CustEntrySetApplID@1064 : Codeunit 101;
      DimMgt@1065 : Codeunit 408;
      ApprovalMgt@1099 : Codeunit 439;
      WhseSourceHeader@1073 : Codeunit 5781;
      ArchiveManagement@1075 : Codeunit 5063;
      SalesLineReserve@1066 : Codeunit 99000832;
      DOPaymentMgt@2000 : Codeunit 825;
      DOPaymentTransLogMgt@2001 : Codeunit 829;
      PostCodeCheck@1500001 : Codeunit 28000;
      BASManagement@1500000 : Codeunit 11601;
      ApplyCustEntries@1067 : Page 232;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?;ENA=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.;ENA=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.;ENA=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.;ENA=Contact %1 %2 is not related to a customer.';
      ReservEntry@1079 : Record 337;
      TempReservEntry@1080 : TEMPORARY Record 337;
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?;ENA=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text043@1087 : TextConst 'ENU=Wizard Aborted;ENA=Wizard Aborted';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.;ENA=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ENA="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?;ENA=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.;ENA=The %1 field cannot be blank because this quote is linked to an opportunity.';
      InsertMode@1093 : Boolean;
      CompanyInfo@1094 : Record 79;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.;ENA=The sales %1 %2 already exists.';
      Text052@1098 : TextConst 'ENU=The sales %1 %2 has item tracking. Do you want to delete it anyway?;ENA=The sales %1 %2 has item tracking. Do you want to delete it anyway?';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ENA=You must cancel the approval process if you wish to change the %1.';
      Text055@1008 : TextConst 'ENU=Do you want to print prepayment invoice %1?;ENA=Do you want to print prepayment invoice %1?';
      Text054@1010 : TextConst 'ENU=Do you want to print prepayment credit memo %1?;ENA=Do you want to print prepayment CR/Adj Note %1?';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for prepayment CR/Adj Notes. An empty prepayment CR/Adj Note %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ENA=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.;ENA=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?;ENA=Reservations exist for this order. These reservations will be cancelled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENA=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.;ENA=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.;ENA=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      Text071@1011 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;ENA=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.;ENA=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';
      Text1500000@1500002 : TextConst 'ENU=%1 and %2 must be identical or %1 must be Blank.;ENA=%1 and %2 must be identical or %1 must be Blank.';
      SynchronizingMsg@1026 : TextConst 'ENU=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.;ENA=Synchronising ...\ from: Sales Header with %1\ to: Assembly Header with %2.';
      ShippingAdviceErr@1029 : TextConst 'ENU=This order must be a complete Shipment.;ENA=This order must be a complete Shipment.';
      NoSeriesLine@1000000000 : Record 308;
      CustBankAcc@1000000001 : Record 287;
      LoginMgt@1000000003 : Codeunit 418;
      Text065@1000000004 : TextConst 'ENU=Entries are Moved to Espt Hence you cannot delete';
      VATDetail@1000000006 : Record 50015;
      ESPTDetail@1000000005 : Record 50016;
      Text075@1102159001 : TextConst 'ENU=Entity Bank Code %1 has expired Please select different entity bank';
      Text076@1102159002 : TextConst 'ENU="Entity Bank Code %1 Currency does not match with the Currency selected on Tanda Terima "';
      Text077@1102159003 : TextConst 'ENU=Please delete the Bank Code';

    PROCEDURE InitRecord@10();
    VAR
      MasterSetup@1102159001 : Record 50008;
      PurchSetup@1102159002 : Record 312;
    BEGIN
      MasterSetup.GET; //UPG13R2DEV
      PurchSetup.GET; //UPG13R2DEV
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              //UPG13R2DEV.begin
              //NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
              IF ("Reason Code"=MasterSetup."Reason (Sale as Purchase)") THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");

              IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
              //UPG13R2DEV.end
            IF SalesSetup."Shipment on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              //UPG13R2DEV.begin
              //NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
              IF ("Reason Code"=MasterSetup."Reason (Sale as Purchase)") THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");

              IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
              //UPG13R2DEV.end
            IF SalesSetup."Return Receipt on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        BEGIN
        "Shipment Date" := WORKDATE;
        "Order Date" := WORKDATE;
      END;
      IF "Document Type" = "Document Type"::"Return Order" THEN
        "Order Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

         // UPG09R2.begin
         //YIMM
         NoSeriesLine.SETRANGE(NoSeriesLine.Code,"No. Series");
         IF NoSeriesLine.FINDFIRST THEN
          "Type Of Transaction" := NoSeriesLine."Type Of Transaction";
         //YIMM
         // UPG09R2.end

      "Document Date" := WORKDATE;

      VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
        Adjustment := GLSetup.GSTEnabled("Document Date");
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      Reserve := Reserve::Optional;

      IF InvtSetup.GET THEN
        VALIDATE("Outbound Whse. Handling Time",InvtSetup."Outbound Whse. Handling Time");

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
      NoSeries@1002 : Code[10];
    BEGIN
      SalesSetup.GET;
        PurchSetup.GET;
      TestNoSeries;
      NoSeries := "No. Series";
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") AND
         (NoSeries <> "No. Series")
      THEN BEGIN
        IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
          HideCreditCheckDialogue := FALSE;
          CheckCreditMaxBeforeInsert;
          HideCreditCheckDialogue := TRUE;
        END;
        NoSeriesMgt.SetSeries("No.");
        IF SalesHeader2.GET("Document Type","No.") THEN
          ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    VAR
      MasterSetup@1000000000 : Record 50008;
    BEGIN
      MasterSetup.GET;
      PurchSetup.GET; //UPG13R2DEV
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(SalesSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(SalesSetup."Order Nos.");
        "Document Type"::Invoice:

         BEGIN
           IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN// UPG09R2
          EXIT(SalesSetup."Invoice Nos.");
           // UPG09R2.begin
           IF (("Reason Code"=MasterSetup."Reason (Sale as Purchase)") AND ((ActualCreditMemo=TRUE))) THEN
           EXIT(PurchSetup."Credit Memo Nos.");

           IF (("Reason Code"=MasterSetup."Reason (Sale as Purchase)") AND ((ActualCreditMemo=FALSE))) THEN
           EXIT(PurchSetup.PurchaseCreditMemoCorrection);
         END;
          // UPG09R2.end

        "Document Type"::"Return Order":
          EXIT(SalesSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
          // UPG09R2.begin
          IF (("Reason Code"=MasterSetup."Reason (Sale as Purchase)")) THEN
           EXIT(PurchSetup."Invoice Nos.");
          // UPG09R2.end
          IF (("Reason Code"=MasterSetup."Reason (Normal)") AND (ActualCreditMemo=TRUE)) THEN // UPG09R2
          EXIT(SalesSetup."Credit Memo Nos.");
          //  UPG09R2.begin
          IF (("Reason Code"=MasterSetup."Reason (Normal)") AND (ActualCreditMemo=FALSE)) THEN
          EXIT(SalesSetup.SalesCreditMemoCorrection);
          // UPG09R2.end
          END;
        "Document Type"::"Blanket Order":
          EXIT(SalesSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    VAR
      MasterSetup@1000000000 : Record 50008;
    BEGIN
      {
      // UPG09R2.begin
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Credit Memo Nos.");
      EXIT(SalesSetup."Posted Invoice Nos.");
      } //TBI1.0


      //TBI1.0 BEGIN

      MasterSetup.GET;
      PurchSetup.GET;

      IF COMPANYNAME <> MasterSetup."Company Name TBI" THEN BEGIN
      // UPG09R2.end
      //IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
      //  EXIT(SalesSetup."Posted Credit Memo Nos.");
      //EXIT(SalesSetup."Posted Invoice Nos.");

      CASE "Document Type" OF
        "Document Type"::Invoice:
         BEGIN
           IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
           EXIT(SalesSetup."Posted Invoice Nos.");

           IF ("Reason Code"=MasterSetup."Reason (Sale as Purchase)") THEN
           EXIT(PurchSetup."Posted Credit Memo Nos.");

         END;

        "Document Type"::"Return Order":
          EXIT(SalesSetup."Posted Credit Memo Nos.");
        "Document Type"::"Credit Memo":
          BEGIN

          IF ("Reason Code"=MasterSetup."Reason (Sale as Purchase)") THEN
           EXIT(PurchSetup."Posted Invoice Nos.");

          IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
              EXIT(SalesSetup."Posted Credit Memo Nos.");

          END;
      END;
      // UPG09R2.begin
      END ELSE BEGIN

      CASE "Document Type" OF
        "Document Type"::Invoice:
         BEGIN
           IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
           EXIT(SalesSetup."Posted Invoice Nos.");

           IF ("Reason Code"=MasterSetup."Reason (Sale as Purchase)") THEN
           EXIT(PurchSetup."Posted Credit Memo Nos.");

         END;

        "Document Type"::"Return Order":
          EXIT(SalesSetup."Posted Credit Memo Nos.");
        "Document Type"::"Credit Memo":
          BEGIN

          IF ("Reason Code"=MasterSetup."Reason (Sale as Purchase)") THEN
           EXIT(PurchSetup."Posted Invoice Nos.");

          IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
              EXIT(SalesSetup."Posted Credit Memo Nos.");

          END;
        ELSE
          EXIT(SalesSetup."Posted Invoice Nos.");
      END;

      END;
      //TBI1.0 END
      // UPG09R2.end
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@59() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(SalesSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      SalesPost.TestDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
      IF SalesShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009,TRUE,
             SalesShptHeader."No.")
        THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012,TRUE,
             SalesInvHeader."No.")
        THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014,TRUE,
             SalesCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text030,TRUE,
             ReturnRcptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text056,TRUE,
             SalesInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text057,TRUE,
             SalesCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
    END;

    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(SalesLine.FINDFIRST);
    END;

    PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      SalesLineTmp@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      TempATOLink@1009 : TEMPORARY Record 904;
      ATOLink@1010 : Record 904;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF SalesLinesExist THEN BEGIN
        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text015,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          MODIFY;

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN BEGIN
            TempReservEntry.DELETEALL;
            REPEAT
              SalesLine.TESTFIELD("Job No.",'');
              SalesLine.TESTFIELD("Job Contract Entry No.",0);
              SalesLine.TESTFIELD("Quantity Shipped",0);
              SalesLine.TESTFIELD("Quantity Invoiced",0);
              SalesLine.TESTFIELD("Return Qty. Received",0);
              SalesLine.TESTFIELD("Shipment No.",'');
              SalesLine.TESTFIELD("Return Receipt No.",'');
              SalesLine.TESTFIELD("Blanket Order No.",'');
              SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              IF (SalesLine."Location Code" <> "Location Code") AND NOT SalesLine.IsServiceItem THEN
                SalesLine.VALIDATE("Location Code","Location Code");
              SalesLineTmp := SalesLine;
              IF SalesLine.Nonstock THEN BEGIN
                SalesLine.Nonstock := FALSE;
                SalesLine.MODIFY;
              END;

              IF ATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
                TempATOLink := ATOLink;
                TempATOLink.INSERT;
                ATOLink.DELETE;
              END;

              SalesLineTmp.INSERT;
              RecreateReservEntry(SalesLine,0,TRUE);
              RecreateReqLine(SalesLine,0,TRUE);
            UNTIL SalesLine.NEXT = 0;

            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntSales.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntSales.INIT;
                TempItemChargeAssgntSales := ItemChargeAssgntSales;
                TempItemChargeAssgntSales.INSERT;
              UNTIL ItemChargeAssgntSales.NEXT = 0;
              ItemChargeAssgntSales.DELETEALL;
            END;

            SalesLine.DELETEALL(TRUE);
            SalesLine.INIT;
            SalesLine."Line No." := 0;
            SalesLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            SalesLine.BlockDynamicTracking(TRUE);
            REPEAT
              IF SalesLineTmp."Attached to Line No." = 0 THEN BEGIN
                SalesLine.INIT;
                SalesLine."Line No." := SalesLine."Line No." + 10000;
                SalesLine.VALIDATE(Type,SalesLineTmp.Type);
                IF SalesLineTmp."No." = '' THEN BEGIN
                  SalesLine.VALIDATE(Description,SalesLineTmp.Description);
                  SalesLine.VALIDATE("Description 2",SalesLineTmp."Description 2");
                END ELSE BEGIN
                  SalesLine.VALIDATE("No.",SalesLineTmp."No.");
                  IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                    SalesLine.VALIDATE("Unit of Measure Code",SalesLineTmp."Unit of Measure Code");
                    SalesLine.VALIDATE("Variant Code",SalesLineTmp."Variant Code");
                    IF SalesLineTmp.Quantity <> 0 THEN BEGIN
                      SalesLine.VALIDATE(Quantity,SalesLineTmp.Quantity);
                      SalesLine.VALIDATE("Qty. to Assemble to Order",SalesLineTmp."Qty. to Assemble to Order");
                    END;
                    SalesLine."Purchase Order No." := SalesLineTmp."Purchase Order No.";
                    SalesLine."Purch. Order Line No." := SalesLineTmp."Purch. Order Line No.";
                    SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
                  END;
                END;

                SalesLine.INSERT;
                ExtendedTextAdded := FALSE;

                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLineTmp."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesLineTmp."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",SalesLineTmp."Line No.");
                  IF TempItemChargeAssgntSales.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntSales.NEXT = 0;
                END;
                IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  SalesLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
              RecreateReservEntry(SalesLineTmp,SalesLine."Line No.",FALSE);
              RecreateReqLine(SalesLineTmp,SalesLine."Line No.",FALSE);
              SynchronizeForReservations(SalesLine,SalesLineTmp);

              IF TempATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
                ATOLink := TempATOLink;
                ATOLink.INSERT;
                SalesLine.AutoAsmToOrder;
                TempATOLink.DELETE;
              END;
            UNTIL SalesLineTmp.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            SalesLineTmp.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            IF SalesLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLineTmp."Line No.");
                IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntSales.INIT;
                    ItemChargeAssgntSales := TempItemChargeAssgntSales;
                    ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntSales.INSERT;
                  UNTIL TempItemChargeAssgntSales.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL SalesLineTmp.NEXT = 0;

            SalesLineTmp.SETRANGE(Type);
            SalesLineTmp.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text017,ChangedFieldName);
      END;
      SalesLine.BlockDynamicTracking(FALSE);
    END;

    PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text019,
          ChangedFieldName);
    END;

    PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text020,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          //CurrencyDate := "Posting Date"// UPG13
          CurrencyDate := "Document Date"// UPG13
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
        "Currency Factor" := (ROUND("Currency Factor",0.000000000000001,'='));          //YIMMDEVIP1.0
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit 1004;
      Question@1002 : Text[250];
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Shipment Date"),
              FIELDCAPTION("Shipping Agent Code"),
              FIELDCAPTION("Shipping Agent Service Code"),
              FIELDCAPTION("Shipping Time"),
              FIELDCAPTION("Requested Delivery Date"),
              FIELDCAPTION("Promised Delivery Date"),
              FIELDCAPTION("Outbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      SalesLine.LOCKTABLE;
      MODIFY;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          CASE ChangedFieldName OF
            FIELDCAPTION("Shipment Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                IF SalesLine."Job No." <> '' THEN
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
              END;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
              // UPG09R2.begin
              //YIMMARCST
              FIELDCAPTION("Reason Code"):
                SalesLine.VALIDATE("Reason Code","Reason Code");
              //YIMMARCEN
              // UPG09R2.end
          END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry2@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text052,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT CONFIRM(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        Cont.GET("Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        Cont.GET("Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    PROCEDURE RecreateReservEntry@21(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    BEGIN
      IF ToTemp THEN BEGIN
        CLEAR(ReservEntry);
        ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        ReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        ReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        IF ReservEntry.FINDSET THEN
          REPEAT
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL ReservEntry.NEXT = 0;
        ReservEntry.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReservEntry);
        TempReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        TempReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        TempReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        TempReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        TempReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        IF TempReservEntry.FINDSET THEN
          REPEAT
            ReservEntry := TempReservEntry;
            ReservEntry."Source Ref. No." := NewSourceRefNo;
            ReservEntry.INSERT;
          UNTIL TempReservEntry.NEXT = 0;
        TempReservEntry.DELETEALL;
      END;
    END;

    PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      END;
    END;

    PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Sell-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Sell-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Sell-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Sell-to Contact No." := '';
        END;
        "Sell-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Bill-to Contact No." := '';
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      ContComp@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN
        "Sell-to Contact No." := Cont."No."
      ELSE BEGIN
        "Sell-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND
           ("Sell-to Customer No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");
        IF "Sell-to Customer No." = '' THEN BEGIN
          SkipSellToContact := TRUE;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := FALSE;
        END;
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Sell-to Customer Name" := ContComp."Company Name";
          "Sell-to Customer Name 2" := ContComp."Name 2";
          "Ship-to Name" := ContComp."Company Name";
          "Ship-to Name 2" := ContComp."Name 2";
          "Ship-to Address" := ContComp.Address;
          "Ship-to Address 2" := ContComp."Address 2";
          "Ship-to City" := ContComp.City;
          "Ship-to Post Code" := ContComp."Post Code";
          "Ship-to County" := ContComp.County;
          VALIDATE("Ship-to Country/Region Code",ContComp."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
          PostCodeCheck.CopyAddressID(
            DATABASE::Contact,ContComp.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,3);
          PostCodeCheck.CopyAddressID(
            DATABASE::Contact,ContComp.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,2);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;

      IF Cont.Type = Cont.Type::Person THEN
        "Sell-to Contact" := Cont.Name
      ELSE
        IF Customer.GET("Sell-to Customer No.") THEN
          "Sell-to Contact" := Customer.Contact
        ELSE
          "Sell-to Contact" := '';

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            Cont.TESTFIELD("Company No.");
            Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          Cont.TESTFIELD("Company No.");
          Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      ContComp@1001 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Bill-to Name" := ContComp."Company Name";
          "Bill-to Name 2" := ContComp."Name 2";
          "Bill-to Address" := ContComp.Address;
          "Bill-to Address 2" := ContComp."Address 2";
          "Bill-to City" := ContComp.City;
          "Bill-to Post Code" := ContComp."Post Code";
          "Bill-to County" := ContComp.County;
          "Bill-to Country/Region Code" := ContComp."Country/Region Code";
          "VAT Registration No." := ContComp."VAT Registration No.";
          VALIDATE("Currency Code",ContComp."Currency Code");
          "Language Code" := ContComp."Language Code";
          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
          PostCodeCheck.CopyAddressID(
            DATABASE::Contact,ContComp.GETPOSITION,0,DATABASE::"Sales Header",GETPOSITION,1);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentService."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
    BEGIN
      IF HideCreditCheckDialogue THEN
        EXIT;
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN BEGIN
          Cust.GET(GETRANGEMIN("Sell-to Customer No."));
          IF Cust."Bill-to Customer No." <> '' THEN
            SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
          ELSE
            SalesHeader."Bill-to Customer No." := Cust."No.";
          CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
        END
      END ELSE
        IF GETFILTER("Sell-to Contact No.") <> '' THEN
          IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN BEGIN
            Cont.GET(GETRANGEMIN("Sell-to Contact No."));
            ContBusinessRelation.RESET;
            ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
            ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
            ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
            IF ContBusinessRelation.FINDFIRST THEN BEGIN
              Cust.GET(ContBusinessRelation."No.");
              IF Cust."Bill-to Customer No." <> '' THEN
                SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
              ELSE
                SalesHeader."Bill-to Customer No." := Cust."No.";
              CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
            END;
          END;
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF "Shipping Advice" = "Shipping Advice"::Complete THEN
              CheckShippingAdvice;
            WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
          END;
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE CreateTodo@30();
    VAR
      TempTodo@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTodo.CreateToDoFromSalesHeader(Rec);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@31();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          "Ship-to Name" := Location.Name;
          "Ship-to Name 2" := Location."Name 2";
          "Ship-to Address" := Location.Address;
          "Ship-to Address 2" := Location."Address 2";
          "Ship-to City" := Location.City;
          "Ship-to Post Code" := Location."Post Code";
          "Ship-to County" := Location.County;
          "Ship-to Country/Region Code" := Location."Country/Region Code";
          "Ship-to Contact" := Location.Contact;
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          "Ship-to Name" := CompanyInfo."Ship-to Name";
          "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
          "Ship-to Address" := CompanyInfo."Ship-to Address";
          "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
          "Ship-to City" := CompanyInfo."Ship-to City";
          "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
          "Ship-to County" := CompanyInfo."Ship-to County";
          "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record 904;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT HideValidationDialog OR NOT GUIALLOWED THEN
        IF NOT CONFIRM(Text064) THEN
          EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      IF SalesLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            SalesLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE SetAmountToApply@35(AppliesToDocNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      CustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF CustLedgEntry.FINDFIRST THEN BEGIN
        IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          CustLedgEntry.CALCFIELDS("Remaining Amount");
          CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
        END ELSE
          CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Accepted Payment Tolerance" := 0;
        CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      END;
    END;

    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE Authorize@50();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry);
      IF DOPaymentTransLogEntry."Entry No." = DOPaymentMgt.AuthorizeSalesDoc(Rec,0,TRUE) THEN
        ERROR(Text067,
          DOPaymentTransLogEntry."Document Type",
          DOPaymentTransLogEntry.Amount,
          DOPaymentTransLogEntry."Transaction Date-Time",
          DOPaymentTransLogEntry."Document No.");
      "Authorization Required" := TRUE;
      MODIFY;
    END;

    PROCEDURE Void@51();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
      DOPaymentTransLogMgt@1002 : Codeunit 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      CLEAR(DOPaymentMgt);
      DOPaymentMgt.CheckSalesDoc(Rec);
      IF DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry) THEN
        DOPaymentMgt.VoidSalesDoc(Rec,DOPaymentTransLogEntry)
      ELSE
        MESSAGE(Text068);
      "Authorization Required" := FALSE;
      MODIFY;
    END;

    PROCEDURE GetCreditcardNumber@44() : Text[20];
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      IF "Credit Card No." = '' THEN
        EXIT('');
      EXIT(DOPaymentCreditCard.GetCreditCardNumber("Credit Card No."));
    END;

    PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      SalesLine@1001 : Record 37;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      IF WarehouseActivityLine.ISEMPTY THEN
        EXIT(FALSE);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      IF WarehouseShipmentLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CheckCrLimit@47();
    BEGIN
      IF GUIALLOWED AND (CurrFieldNo <> 0) AND ("Document Type" <= "Document Type"::Invoice) THEN BEGIN
        "Amount Including VAT" := 0;
        IF "Document Type" = "Document Type"::Order THEN
          IF BilltoCustomerNoChanged THEN BEGIN
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          END;
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
        CALCFIELDS("Amount Including VAT");
      END;
    END;

    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      EXIT(SalesLine.ISEMPTY);
    END;

    PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN BEGIN
        IF ApprovalMgt.TestSalesPrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text071,"Document Type","No."));
        IF ApprovalMgt.TestSalesPayment(Rec) THEN
          ERROR(STRSUBSTNO(Text072,"Document Type","No."));
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(Rec,PurchaseHeader) THEN BEGIN
        IF ApprovalMgt.TestSalesPrepayment(Rec) THEN
          EXIT(FALSE);
        IF ApprovalMgt.TestSalesPayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE UpdatePmtDiscDate@1140000();
    BEGIN
      // Updates the payment discount date to due date if discount % is zero
      IF "Payment Discount %" = 0 THEN
        // credit memo and return order behave different
        IF NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) THEN
          "Pmt. Discount Date" := "Due Date";
    END;

    LOCAL PROCEDURE ValidateDocumentDate@1500000();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
         GLSetup.GSTEnabled("Document Date")
      THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
        CustLedgEntry.SETFILTER("Document Type",'<>%1',CustLedgEntry."Document Type"::Payment);
        CustLedgEntry.SETRANGE("Document No.","Adjustment Applies-to");
        CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
        IF CustLedgEntry.FINDFIRST THEN
          "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",CustLedgEntry."Document Date")
        ELSE
          "BAS Adjustment" := FALSE;
      END ELSE
        "BAS Adjustment" := FALSE;
    END;

    LOCAL PROCEDURE ValidateAppliesToDocNo@1500001();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
         GLSetup.GSTEnabled("Document Date")
      THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
        CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.FINDFIRST THEN BEGIN
          "Applies-to Doc. Type" := CustLedgEntry."Document Type";
          "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",CustLedgEntry."Document Date");
          "Adjustment Applies-to" := "Applies-to Doc. No.";
        END;
      END;
    END;

    LOCAL PROCEDURE LookupAppliesToDocNo@1500002();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
         GLSetup.GSTEnabled("Document Date")
      THEN BEGIN
        "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",CustLedgEntry."Document Date");
        "Adjustment Applies-to" := "Applies-to Doc. No.";
      END;
    END;

    LOCAL PROCEDURE LookupAdjmtAppliesTo@1500003();
    BEGIN
      CLEAR(ApplyCustEntries);
      CALCFIELDS(Amount);
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Positive,"Applies-to Doc. Type","Applies-to Doc. No.","Due Date");
      CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.FINDFIRST THEN;
        CustLedgEntry.SETRANGE("Document Type");
        CustLedgEntry.SETRANGE("Document No.");
      END ELSE
        IF "Applies-to Doc. Type" <> 0 THEN BEGIN
          CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
          IF CustLedgEntry.FINDFIRST THEN;
          CustLedgEntry.SETRANGE("Document Type");
        END ELSE
          IF Amount <> 0 THEN BEGIN
            CustLedgEntry.SETRANGE(Positive,Amount < 0);
            IF CustLedgEntry.FINDFIRST THEN;
            CustLedgEntry.SETRANGE(Positive);
            CustLedgEntry.SETFILTER("Document Type",'<>%1',CustLedgEntry."Document Type"::Payment);
          END;

      ApplyCustEntries.SetSales(Rec,CustLedgEntry,FIELDNO("Applies-to Doc. No."));
      ApplyCustEntries.LOOKUPMODE(TRUE);
      IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
        "Adjustment Applies-to" := CustLedgEntry."Document No.";
        IF ("Applies-to Doc. No." <> "Adjustment Applies-to") AND
           ("Applies-to Doc. No." <> '')
        THEN
          ERROR(
            Text1500000,
            FIELDNAME("Applies-to Doc. No."),FIELDNAME("Adjustment Applies-to"));
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",CustLedgEntry."Document Date");

        IF "Applies-to Doc. No." = '' THEN
          CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry.MODIFY;
      END;
      CLEAR(ApplyCustEntries);
    END;

    PROCEDURE ValidateAdjmtAppliesTo@1500004();
    VAR
      Text1500001@15001 : TextConst 'ENU=%1 %2 does not exist;ENA=%1 %2 does not exist';
    BEGIN
      CALCFIELDS(Amount);
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Positive,"Applies-to Doc. Type","Applies-to Doc. No.","Due Date");
      CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.FINDFIRST THEN;
        CustLedgEntry.SETRANGE("Document Type");
        CustLedgEntry.SETRANGE("Document No.");
      END ELSE
        IF "Applies-to Doc. Type" <> 0 THEN BEGIN
          CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
          IF CustLedgEntry.FINDFIRST THEN;
          CustLedgEntry.SETRANGE("Document Type");
        END ELSE
          IF Amount <> 0 THEN BEGIN
            CustLedgEntry.SETRANGE(Positive,Amount < 0);
            IF CustLedgEntry.FINDFIRST THEN;
            CustLedgEntry.SETRANGE(Positive);
            CustLedgEntry.SETFILTER("Document Type",'<>%1',CustLedgEntry."Document Type"::Payment);
          END;
      CustLedgEntry.SETRANGE("Document No.","Adjustment Applies-to");
      IF CustLedgEntry.FINDFIRST THEN BEGIN
        IF ("Applies-to Doc. No." <> "Adjustment Applies-to") AND
           ("Applies-to Doc. No." <> '')
        THEN
          ERROR(
            Text1500000,
            FIELDNAME("Applies-to Doc. No."),FIELDNAME("Adjustment Applies-to"));
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",CustLedgEntry."Document Date");
      END ELSE BEGIN
        "BAS Adjustment" := FALSE;
        IF "Adjustment Applies-to" <> '' THEN
          ERROR(Text1500001,CustLedgEntry.TABLECAPTION,"Adjustment Applies-to");
      END;
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE LinkSalesDocWithOpportunity@79(OldOpportunityNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      Opportunity@1002 : Record 5092;
    BEGIN
      IF "Opportunity No." <> OldOpportunityNo THEN BEGIN
        IF "Opportunity No." <> '' THEN
          IF Opportunity.GET("Opportunity No.") THEN BEGIN
            Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
            IF Opportunity."Sales Document No." <> '' THEN BEGIN
              IF CONFIRM(Text048,FALSE,Opportunity."Sales Document No.",Opportunity."No.") THEN BEGIN
                IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                  SalesHeader."Opportunity No." := '';
                  SalesHeader.MODIFY;
                END;
                UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
              END ELSE
                "Opportunity No." := OldOpportunityNo;
            END ELSE
              UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
          END;
        IF (OldOpportunityNo <> '') AND Opportunity.GET(OldOpportunityNo) THEN
          UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::" ",'');
      END;
    END;

    LOCAL PROCEDURE UpdateOpportunityLink@80(Opportunity@1000 : Record 5092;SalesDocumentType@1001 : Option;SalesHeaderNo@1002 : Code[20]);
    BEGIN
      Opportunity."Sales Document Type" := SalesDocumentType;
      Opportunity."Sales Document No." := SalesHeaderNo;
      Opportunity.MODIFY;
    END;

    PROCEDURE SynchronizeAsmHeader@56();
    VAR
      AsmHeader@1003 : Record 900;
      ATOLink@1002 : Record 904;
      Window@1000 : Dialog;
    BEGIN
      ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.");
      ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
      ATOLink.SETRANGE("Document Type","Document Type");
      ATOLink.SETRANGE("Document No.","No.");
      IF ATOLink.FINDSET THEN
        REPEAT
          IF AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.") THEN
            IF "Posting Date" <> AsmHeader."Posting Date" THEN BEGIN
              Window.OPEN(STRSUBSTNO(SynchronizingMsg,"No.",AsmHeader."No."));
              AsmHeader.VALIDATE("Posting Date","Posting Date");
              AsmHeader.MODIFY;
              Window.CLOSE;
            END;
        UNTIL ATOLink.NEXT = 0;
    END;

    PROCEDURE CheckShippingAdvice@55();
    VAR
      SalesLine@1000 : Record 37;
      QtyToShipBaseTotal@1002 : Decimal;
      Result@1001 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      Result := TRUE;
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine.IsShipment THEN BEGIN
            QtyToShipBaseTotal += SalesLine."Qty. to Ship (Base)";
            IF SalesLine."Quantity (Base)" <>
               SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
            THEN
              Result := FALSE;
          END;
        UNTIL SalesLine.NEXT = 0;
      IF QtyToShipBaseTotal = 0 THEN
        Result := TRUE;
      IF NOT Result THEN
        ERROR(ShippingAdviceErr);
    END;

    BEGIN
    {
      //YIMMAEXP
       1) NEW FIELDS IS ADDED
          TYPE OF PURCHASE
          INCENTIVE MONTH
          INTERFACED
          INCENTIVE
       2) STATUS MUST BE OPEN CHECK

      //YIMMNNPWP
       1) Length of field is expanded(ID-12)
       2) VALIDATE THE CHANGE IN SHIP-TO-CODE.(IF THERE IS CHANGE IN HEADER THEN HAVE TO CHNAGE MANUALLY IN LINES.)
      //YIMMATAX
       1) New Field is created for tax Invoice date
      //YIMMARC
       1) Code is added to copy reason code on sales line
      //YIMM
       1) Comment on Validate Posting date for document date remains as workdate not posting date
        Code commented for validating the document date with posting date.
       2) CODE ADDED FOR THE TYPE OF TRANSACTION VALIDATION WITH NO SERIES.
       3) Add Jsox Complaiance
       4) Code is added to make the filter on the basis on reason code in vendor application form
       5) Code is added to make the same posting group as in vendor application entry
      //YIMMRYUID
       1) Add New field to capture UID
      //YIMMCH
      1) New Field Is added to map the Temp Vendor Concept (New Npwp No.)
      //YIMMRBDTL
      1)To Flow Bank Account Details to Customer Ledger

      //TBI1.0 - NEW FIELD ADDED FOR TBI
               - To validate unique receipt no. from AccPac
               - CODE ADDED TO DISPLAY POSTING NO. SERIES AS PER REASON CODE
               - Posting Date to flow to FA Posting Date


      //Mel1.0 - New Field Added for Melco.
               - To check whether the order already posted or not ( In case of Sales Quote --> PO Creation)(51010)
               - Field Added ( ID52000).
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //Oldversion list - NAVW16.00.10,LIQEM6.00.01
      //UPG13
      2009R2 to 2013 Merged Code.
      //UPG13R2
      2013 to 2013R2 Merged Code.
      //Old Version - NAVW17.10.00.36897,NAVAPAC7.10.00.36897
      //CAUYIMM - Changed UID Length from 10 to 50.
      //YIMMDEVIP1.0
        Point No - 22 Added Code to Bring Customer Bank Account based on Type of transaction from Sales Header should be same as on Customer Bank account.
                   Added Code on Validate of Type Of Transaction so that in case user changes transaction type of Page then
                   customer bank account should also come on base of transaction type.
        Point No - 6 Added code to check Validation on Customer Bank account Vlaid upto field  should be less than TODAY.
        Modifications regarding above two IP is reversed as now Bank Code will be mandatory manual selection as per new concept.
      //SMDEV1.0
        Changed Caption for Customer Posting Group to Entity posting Group.
        Chnaged Captions for all fields having 'Customer' as title changed to Entity.
        Fields from ID-50031 to 50037 added for Vendor Sales Invoice-Export concept Pages.
        Fields from Purchase header table added from ID-52008
      //YIMMDEVIP1.0
      1. Point no : 29    Added a field Customer type and write code for getting the value from customer table
                       Added a field Bank Branch No to flow this info.
      2. Function "UpdateCurrencyFactor" modified to Flow Rounded Currency Factor. Functionality of Base Code not working correctly.
      3. Added New Field Entity type option Type (Dealer/Non Dealer)
      4. TableRelation of Sell-to Customer No. changed to Filter Based on Entity Type

      //UPG13R2DEV
      1. Modification for mapping of Purchase Invoice/Return "Posting No Series" using Purchase & Payables Setup.
      2. Field "CheckReportPrint" is added to verfiy if Test Report is printed before printing Slip Report.

      //CR001/ND
      Code added to change bill to customer automatically when sell to customer changed.
      //CR001/SV
      Field added to identify invoice which is created using interest deposit propac and mkt activities interface process so that it could be differentiate
      at the time of slip report and posting.
      Field No.  Field Name   Data Type
      52020      S/P          Boolean
      52021      MKT          Boolean
    }
    END.
  }
}

