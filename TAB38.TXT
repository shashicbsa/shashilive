OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=08/31/15;
    Time=15:40:47;
    Modified=Yes;
    Version List=ATOP,NPWP,NNSR,NBTR,ARC,NTOT,VATO,TBI1.0,YIMM1.0,Mel1.0,UPG09R2,UPG13,UPG13R2,CAUYIMM;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=BEGIN
               SalesSetup.GET;
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");
             END;

    OnModify=BEGIN
               TESTFIELD(Interfaced,FALSE); // UPG09R2
             END;

    OnDelete=BEGIN
               TESTFIELD(Interfaced,FALSE);// UPG09R2
               IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

               PurchPost.DeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');

               ApprovalMgt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 COMMIT;

                 IF PurchRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        PurchRcptHeader."No.")
                   THEN BEGIN
                     PurchRcptHeader.SETRECFILTER;
                     PurchRcptHeader.PrintRecords(TRUE);
                   END;

                 IF PurchInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        PurchInvHeader."No.")
                   THEN BEGIN
                     PurchInvHeader.SETRECFILTER;
                     PurchInvHeader.PrintRecords(TRUE);
                   END;

                 IF PurchCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        PurchCrMemoHeader."No.")
                   THEN BEGIN
                     PurchCrMemoHeader.SETRECFILTER;
                     PurchCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text024,TRUE,
                        ReturnShptHeader."No.")
                   THEN BEGIN
                     ReturnShptHeader.SETRECFILTER;
                     ReturnShptHeader.PrintRecords(TRUE);
                   END;

                 IF PurchInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text043,TRUE,
                        PurchInvHeader."No.")
                   THEN BEGIN
                     PurchInvHeaderPrepmt.SETRECFILTER;
                     PurchInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF PurchCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text044,TRUE,
                        PurchCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     PurchCrMemoHeaderPrepmt.SETRECFILTER;
                     PurchCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;
               END;
               // UPG09R2.begin
               VATDetail.RESET;
               VATDetail.SETRANGE(VATDetail."Document Type","Document Type");
               VATDetail.SETRANGE(VATDetail."Document No.","No.");
               IF VATDetail.FINDSET THEN REPEAT
                 VATDetail.TESTFIELD(VATDetail.Approved,FALSE);
                 VATDetail.TESTFIELD(VATDetail."Approve Final",FALSE);
                 VATDetail.DELETE;
               UNTIL VATDetail.NEXT = 0;

               ESPTDetail.RESET;
               ESPTDetail.SETRANGE(ESPTDetail."Document Type","Document Type");
               ESPTDetail.SETRANGE(ESPTDetail."Document No.","No.");
               IF ESPTDetail.FINDFIRST THEN
                 ERROR(Text056);
               // UPG09R2.end
               PostCodeCheck.DeleteAllAddressID(DATABASE::"Purchase Header",GETPOSITION);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Header;
               ENA=Purchase Header];
    LookupPageID=Page53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENA=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENA=Quote,Order,Invoice,CR/Adj Note,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                //YIMMACON // UPG09R2
                                                                TESTFIELD("Old Vendor",'');// UPG09R2

                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF "Buy-from Vendor No." = '' THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Vendor No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");
                                                                    PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                GetVend("Buy-from Vendor No.");
                                                                IF NOT (BasManagement.VendorRegistered("Buy-from Vendor No.") OR Vend."Foreign Vend") THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  IF PurchSetup."Vendor Registration Warning" THEN
                                                                    IF NOT CONFIRM(Text1500000,FALSE,"Buy-from Vendor No.")
                                                                    THEN
                                                                      ERROR('');
                                                                END;
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                "Buy-from Address" := Vend.Address;
                                                                "Buy-from Address 2" := Vend."Address 2";
                                                                "Buy-from City" := Vend.City;
                                                                "Buy-from Post Code" := Vend."Post Code";
                                                                "Buy-from County" := Vend.County;
                                                                "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "WHT Business Posting Group" := Vend."WHT Business Posting Group";
                                                                "Tax Area Code" := Vend."Tax Area Code";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");
                                                                VALIDATE("Sell-to Customer No.",'');
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(1,Vend."Location Code","Responsibility Center"));

                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                "Order Address Code" := '';

                                                                VALIDATE("Order Address Code");
                                                                // UPG09R2.begin
                                                                //YIMMCH
                                                                //"Bank Code":='';
                                                                VALIDATE("Bank Code",'');
                                                                // UPG09R2.end

                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Buy-from Vendor No."));

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");

                                                                PostCodeCheck.CopyAddressID(
                                                                  DATABASE::Vendor,Vend.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,5);
                                                              END;

                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENA=Buy-from Vendor No.];
                                                   Description=YIMMACON }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENA=No.] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0');
                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE
                                                                    "Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Vendor Posting Group");

                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                "Pay-to Address" := Vend.Address;
                                                                "Pay-to Address 2" := Vend."Address 2";
                                                                "Pay-to City" := Vend.City;
                                                                "Pay-to Post Code" := Vend."Post Code";
                                                                "Pay-to County" := Vend.County;
                                                                "Pay-to Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                "Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Vend."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Vend."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Vend."Payment Method Code";

                                                                "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Registration No." := Vend."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                END;
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                "Purchaser Code" := Vend."Purchaser Code";
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Creditor No.",Vend."Creditor No.");

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  VALIDATE("Prepayment %",Vend."Prepayment %");

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Pay-to Vendor No."));

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";

                                                                PostCodeCheck.CopyAddressID(
                                                                  DATABASE::Vendor,Vend.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,4);
                                                              END;

                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENA=Pay-to Vendor No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;CaptionML=[ENU=Pay-to Name;
                                                              ENA=Pay-to Name] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              ENA=Pay-to Name 2] }
    { 7   ;   ;Pay-to Address      ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,4,
                                                                  "Pay-to Name","Pay-to Name 2","Pay-to Contact","Pay-to Address","Pay-to Address 2",
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Pay-to Address;
                                                              ENA=Pay-to Address] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,4,
                                                                  "Pay-to Name","Pay-to Name 2","Pay-to Contact","Pay-to Address","Pay-to Address 2",
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Pay-to Address 2;
                                                              ENA=Pay-to Address 2] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,4,
                                                                  "Pay-to Name","Pay-to Name 2","Pay-to Contact","Pay-to Address","Pay-to Address 2",
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              ENA=Pay-to City] }
    { 10  ;   ;Pay-to Contact      ;Text50        ;CaptionML=[ENU=Pay-to Contact;
                                                              ENA=Pay-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENA=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code20        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  "Ship-to Name" := ShipToAddr.Name;
                                                                  "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                  "Ship-to Address" := ShipToAddr.Address;
                                                                  "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                  "Ship-to City" := ShipToAddr.City;
                                                                  "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                  "Ship-to County" := ShipToAddr.County;
                                                                  "Ship-to Country/Region Code" := ShipToAddr."Country/Region Code";
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                  PostCodeCheck.CopyAddressID(
                                                                    DATABASE::"Ship-to Address",ShipToAddr.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,2);
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  "Ship-to Name" := Cust.Name;
                                                                  "Ship-to Name 2" := Cust."Name 2";
                                                                  "Ship-to Address" := Cust.Address;
                                                                  "Ship-to Address 2" := Cust."Address 2";
                                                                  "Ship-to City" := Cust.City;
                                                                  "Ship-to Post Code" := Cust."Post Code";
                                                                  "Ship-to County" := Cust.County;
                                                                  "Ship-to Country/Region Code" := Cust."Country/Region Code";
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                  PostCodeCheck.CopyAddressID(
                                                                    DATABASE::Customer,Cust.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,2);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENA=Ship-to Code];
                                                   Description=YIMM }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENA=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENA=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Ship-to Address;
                                                              ENA=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Ship-to Address 2;
                                                              ENA=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENA=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENA=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ENA=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);// UPG09R2

                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                //VALIDATE("Document Date","Posting Date"); //YIMM //UPG09R2

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));
                                                                // UPG09R2.begin
                                                                {
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                                }


                                                                UpdateFAPostingDate;//TBI1.0
                                                                // UPG09R2.end
                                                                IF PurchLinesExist THEN
                                                                  JobUpdatePurchLines;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENA=Posting Date];
                                                   Description=YIMM }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Expected Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ENA=Expected Receipt Date] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              ENA=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2

                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                UpdatePmtDiscDate;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENA=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                // UPG09R2.begin
                                                                //YIMMN

                                                                TESTFIELD(Status,Status::Open);

                                                                IF (("Due Date" < "Document Date")  AND (Interfaced= FALSE)) THEN
                                                                   ERROR(' !!!!! Due Date Should not be less than Document Date');
                                                                // UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ENA=Due Date];
                                                   Description=YIMMN }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                                UpdatePmtDiscDate;
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ENA=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                UpdatePmtDiscDate;
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              ENA=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENA=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENA=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENA=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENA=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group".Code WHERE (Reason Code=FIELD(Reason Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2
                                                              END;

                                                   OnLookup=VAR
                                                              VendorPostGrup@1000000000 : Record 93;
                                                              Vendr@1000000001 : Record 23;
                                                              VendrType@1000000002 : Code[50];
                                                            BEGIN
                                                              // UPG09R2.begin
                                                              Vendr.RESET;
                                                              Vendr.SETRANGE(Vendr."No.","Buy-from Vendor No.");
                                                              IF Vendr.FINDFIRST THEN
                                                              VendrType:=FORMAT(Vendr."Vendor Type");





                                                              VendorPostGrup.RESET;
                                                              VendorPostGrup.SETRANGE(VendorPostGrup."Reason Code","Reason Code");
                                                              VendorPostGrup.SETFILTER(VendorPostGrup."Vendor Type",'%1|%2',VendrType,'OTHERS');
                                                              IF VendorPostGrup.FINDFIRST THEN;

                                                              //FORM.RUNMODAL(111,VendorPostGrup);
                                                              IF PAGE.RUNMODAL(0,VendorPostGrup) = ACTION::LookupOK THEN
                                                                  "Vendor Posting Group":= VendorPostGrup.Code;
                                                              // UPG09R2.end
                                                            END;

                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              ENA=Vendor Posting Group];
                                                   Description=yimm;
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE BEGIN
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    IF PurchLinesExist THEN
                                                                      IF CONFIRM(ChangeCurrencyQst,FALSE,FIELDCAPTION("Currency Code")) THEN BEGIN
                                                                        SetHideValidationDialog(TRUE);
                                                                        RecreatePurchLines(FIELDCAPTION("Currency Code"));
                                                                        SetHideValidationDialog(FALSE);
                                                                      END ELSE
                                                                        ERROR(Text018,FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENA=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Currency Factor"));
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENA=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FIND('-') THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text025 +
                                                                          Text027,
                                                                          FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                        TRUE);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      PurchLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    PurchLine.FINDSET;
                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.InitOutstandingAmount;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" * (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" * (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" / (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" / (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ENA=Prices Including GST] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENA=Invoice Disc. Code] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ENA=Language Code] }
    { 43  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Purchaser Code;
                                                              ENA=Purchaser Code] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENA=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENA=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENA=No. Printed];
                                                   Editable=Yes }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENA=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENA=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENA=" ,Payment,Invoice,CR/Adj Note,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2

                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                ValidateAppliesToDocNo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              VendLedgEntry.SETRANGE("Reason Code","Reason Code");//YIMM//UPG09R2
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF VendLedgEntry.FINDFIRST THEN;
                                                                    VendLedgEntry.SETRANGE(Positive);
                                                                  END;
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnILine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                                "Vendor Posting Group" := VendLedgEntry."Vendor Posting Group";//YIMM//UPG09R2
                                                                LookupAppliesToDocNo;
                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENA=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENA=Bal. Account No.] }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENA=Receive] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENA=Invoice] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              ENA=Print Posted Documents] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENA=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENA=Amount Including GST];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              ENA=Receiving No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENA=Posting No.] }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              ENA=Last Receiving No.];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENA=Last Posting No.];
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=[ENU=Vendor Order No.;
                                                              ENA=Vendor Order No.] }
    { 67  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              ENA=Vendor Shipment No.] }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              ENA=Vendor Invoice No.] }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2
                                                              END;

                                                   CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              ENA=Vendor CR/Adj Note No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENA=Exemption Certificate No.] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF "Sell-to Customer No." = '' THEN
                                                                  VALIDATE("Location Code",UserSetupMgt.GetLocation(1,'',"Responsibility Center"))
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENA=Sell-to Customer No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   OnValidate=BEGIN
                                                                //YIMMARC
                                                                UpdatePurchLines(FIELDCAPTION("Reason Code"));//UPG09R2
                                                              END;

                                                   CaptionML=[ENU=Reason Code;
                                                              ENA=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN BEGIN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                    RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENA=Gen. Bus. Posting Group] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Type"));
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENA=Transaction Type] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transport Method"));
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ENA=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENA=GST Country/Region Code] }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=[ENU=Buy-from Vendor Name;
                                                              ENA=Buy-from Vendor Name] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              ENA=Buy-from Vendor Name 2] }
    { 81  ;   ;Buy-from Address    ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,5,
                                                                  "Buy-from Vendor Name","Buy-from Vendor Name 2","Buy-from Contact","Buy-from Address","Buy-from Address 2",
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Buy-from Address;
                                                              ENA=Buy-from Address] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,5,
                                                                  "Buy-from Vendor Name","Buy-from Vendor Name 2","Buy-from Contact","Buy-from Address","Buy-from Address 2",
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Buy-from Address 2;
                                                              ENA=Buy-from Address 2] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,5,
                                                                  "Buy-from Vendor Name","Buy-from Vendor Name 2","Buy-from Contact","Buy-from Address","Buy-from Address 2",
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              ENA=Buy-from City] }
    { 84  ;   ;Buy-from Contact    ;Text50        ;CaptionML=[ENU=Buy-from Contact;
                                                              ENA=Buy-from Contact] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,4,
                                                                  "Pay-to Name","Pay-to Name 2","Pay-to Contact","Pay-to Address","Pay-to Address 2",
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              ENA=Pay-to Post Code] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              ENA=Pay-to State] }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              ENA=Pay-to Country/Region Code] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,5,
                                                                  "Buy-from Vendor Name","Buy-from Vendor Name 2","Buy-from Contact","Buy-from Address","Buy-from Address 2",
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              ENA=Buy-from Post Code] }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=[ENU=Buy-from County;
                                                              ENA=Buy-from State] }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              ENA=Buy-from Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Purchase Header",GETPOSITION,2,
                                                                  "Ship-to Name","Ship-to Name 2","Ship-to Contact","Ship-to Address","Ship-to Address 2",
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENA=Ship-to Post Code] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENA=Ship-to State] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENA=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENA=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENA=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code20        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                PayToVend@1000 : Record 23;
                                                              BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                { //UPG09R2
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";
                                                                  PostCodeCheck.CopyAddressID(
                                                                    DATABASE::"Order Address",OrderAddr.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,5);

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                } //UPG09R2
                                                                    "Ship-to Name" := OrderAddr.Name;
                                                                    "Ship-to Name 2" := OrderAddr."Name 2";
                                                                    "Ship-to Address" := OrderAddr.Address;
                                                                    "Ship-to Address 2" := OrderAddr."Address 2";
                                                                    "Ship-to City" := OrderAddr.City;
                                                                    "Ship-to Post Code" := OrderAddr."Post Code";
                                                                    "Ship-to County" := OrderAddr.County;
                                                                    "Ship-to Country/Region Code" := OrderAddr."Country/Region Code";
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                 // END

                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  "Buy-from Address" := Vend.Address;
                                                                  "Buy-from Address 2" := Vend."Address 2";
                                                                  "Buy-from City" := Vend.City;
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                  "Buy-from Post Code" := Vend."Post Code";
                                                                  "Buy-from County" := Vend.County;
                                                                  "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                  PostCodeCheck.CopyAddressID(
                                                                    DATABASE::Vendor,Vend.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,5);

                                                                { //UPG09R2
                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    "Ship-to Address" := Vend.Address;
                                                                    "Ship-to Address 2" := Vend."Address 2";
                                                                    "Ship-to City" := Vend.City;
                                                                    "Ship-to Post Code" := Vend."Post Code";
                                                                    "Ship-to County" := Vend.County;
                                                                    "Ship-to Country/Region Code" := Vend."Country/Region Code";
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END
                                                                } //UPG09R2
                                                                END;
                                                                // UPG09R2.begin
                                                                //YIMMNNPWPST

                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Order Address Code" <> xRec."Order Address Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Order Address Code"));

                                                                VALIDATE("New NPWP No","Order Address Code");//YIMMCH

                                                                //YIMMNNPWPEN
                                                                // UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU=NPWP No.;
                                                              ENA=Order Address Code];
                                                   Description=YIMMNNPWP,YIMMCH }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Entry Point"));
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              ENA=Entry Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENA=Correction] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                ValidateDocumentDate;
                                                                // UPG09R2.begin
                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                                // UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU="Invoice Date ";
                                                              ENA=Document Date] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION(Area));
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ENA=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Specification"));
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENA=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);//UPG09R2

                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENA=Payment Method Code] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENA=No. Series];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENA=Posting No. Series] }
    { 109 ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              ENA=Receiving No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENA=US Tax Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENA=US Tax Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENA=GST Bus. Posting Group] }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : Record 25;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
                                                                  VendLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENA=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                                                                PurchLine.SETFILTER(Quantity,'<>0');
                                                                PurchLine.LOCKTABLE;
                                                                IF PurchLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    PurchLine.UpdateAmounts;
                                                                    PurchLine.MODIFY;
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                END;
                                                                PurchLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ENA=GST Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENA=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENA=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=Yes }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENA=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENA=None,%,Amount];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENA=Invoice Discount Value];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ENA=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENA=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENA=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Buy-from IC Partner Code;
                                                              ENA=Buy-from IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Pay-to IC Partner Code;
                                                              ENA=Pay-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ENA=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENA=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENA=Prepayment No.] }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENA=Last Prepayment No.] }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENA=Prepmt. CR/Adj Note No.] }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENA=Last Prepmt. CR/Adj Note No.] }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Prepayment %"));
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENA=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENA=Prepayment No. Series] }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENA=Compress Prepayment] }
    { 137 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENA=Prepayment Due Date] }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENA=Prepmt. CR/Adj Note No. Series] }
    { 139 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENA=Prepmt. Posting Description] }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENA=Prepmt. Pmt. Discount Date] }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENA=Prepmt. Payment Terms Code] }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENA=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENA=Quote No.];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              ENA=Job Queue Status];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    ENA=" ,Scheduled for Posting,Error,Posting"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              ENA=Job Queue Entry ID];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document" WHERE (Status=FILTER(New|Approved));
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IncomingDocument.SetPurchDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENA=Incoming Document Entry No.] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              ENA=Creditor No.];
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              ENA=Payment Reference];
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENA=Dimension Set ID];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                                 Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENA=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENA=No. of Archived Versions];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENA=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENA=Campaign No.] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Buy-from Contact No." = '') AND ("Buy-from Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN BEGIN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              ENA=Buy-from Contact No.] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Pay-to Contact No." = '') AND ("Pay-to Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Pay-to Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN BEGIN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              ENA=Pay-to Contact No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(1,'',"Responsibility Center");
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreatePurchLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENA=Responsibility Centre] }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Received;
                                                              ENA=Completely Received];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENA=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENA=Location Filter] }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Requested Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ENA=Requested Receipt Date] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Promised Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ENA=Promised Receipt Date] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Lead Time Calculation"));
                                                              END;

                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENA=Lead Time Calculation] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Inbound Whse. Handling Time"));
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENA=Inbound Whse. Handling Time] }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENA=Date Filter] }
    { 5800;   ;Vendor Authorization No.;Code35    ;CaptionML=[ENU=Vendor Authorization No.;
                                                              ENA=Vendor Authorisation No.] }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ENA=Return Shipment No.] }
    { 5802;   ;Return Shipment No. Series;Code10  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Shipment No. Series;
                                                              ENA=Return Shipment No. Series] }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENA=Ship] }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=[ENU=Last Return Shipment No.;
                                                              ENA=Last Return Shipment No.];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENA=Assigned User ID] }
    { 11612;  ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ENA=Adjustment];
                                                   Editable=No }
    { 11613;  ;BAS Adjustment      ;Boolean       ;CaptionML=[ENU=BAS Adjustment;
                                                              ENA=BAS Adjustment];
                                                   Editable=No }
    { 11614;  ;Adjustment Applies-to;Code20       ;OnValidate=BEGIN
                                                                ValidateAdjmtAppliesTo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupAdjmtAppliesTo;
                                                            END;

                                                   CaptionML=[ENU=Adjustment Applies-to;
                                                              ENA=Adjustment Applies-to] }
    { 11620;  ;ABN                 ;Text14        ;CaptionML=[ENU=ABN;
                                                              ENA=ABN];
                                                   Numeric=Yes;
                                                   Editable=No }
    { 11622;  ;ABN Division Part No.;Text3        ;CaptionML=[ENU=ABN Division Part No.;
                                                              ENA=ABN Division Part No.] }
    { 28040;  ;WHT Business Posting Group;Code10  ;TableRelation="WHT Business Posting Group";
                                                   CaptionML=[ENU=WHT Business Posting Group;
                                                              ENA=WHT Business Posting Group] }
    { 28041;  ;Actual Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Actual Vendor No.;
                                                              ENA=Actual Vendor No.] }
    { 28070;  ;Printed Tax Document;Boolean       ;CaptionML=[ENU=Printed Tax Document;
                                                              ENA=Printed Tax Document];
                                                   Editable=No }
    { 28071;  ;Posted Tax Document ;Boolean       ;CaptionML=[ENU=Posted Tax Document;
                                                              ENA=Posted Tax Document];
                                                   Editable=No }
    { 28072;  ;Tax Document Posting Date;Date     ;CaptionML=[ENU=Tax Document Posting Date;
                                                              ENA=Tax Document Posting Date];
                                                   Editable=No }
    { 28087;  ;Vendor Exchange Rate (ACY);Decimal ;OnValidate=VAR
                                                                Text1500002@1500000 : TextConst 'ENU=The new information will be updated on lines when you confirm in the statistics window otherwise the information will be updated during posting.;ENA=The new information will be updated on lines when you confirm in the statistics window otherwise the information will be updated during posting.';
                                                              BEGIN
                                                                UpdateCurrencyFactor;
                                                                IF Status = Status::Released THEN
                                                                  MESSAGE(Text1500002)
                                                                ELSE
                                                                  RecreatePurchLines(FIELDCAPTION("Vendor Exchange Rate (ACY)"));
                                                              END;

                                                   CaptionML=[ENU=Vendor Exchange Rate (ACY);
                                                              ENA=Vendor Exchange Rate (ACY)];
                                                   DecimalPlaces=0:15 }
    { 50005;  ;Old Vendor          ;Code20        ;OnValidate=BEGIN
                                                                //YIMMACON
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   Description=YIMMACON }
    { 50007;  ;Type Of Transaction ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   OptionCaptionML=ENU=" ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit,Imacs-ATV,Imacs-Generator,Imacs-CBU,Campaign,DDS1 Vendor,DDS2 Vendor,DDS3 Vendor,DDS4 Vendor,DDS5 Vendor,DDS6 Vendor,DDS7 Vendor,DDS8 Vendor,DDS9 Vendor,MKT Vendor,SVC Vendor,MS Vendor,POD Vendor,Others Purchase,Ekspedisi Log-POD";
                                                   OptionString=[ ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit,Imacs-ATV,Imacs-Generator,Imacs-CBU,Campaign,DDS1 Vendor,DDS2 Vendor,DDS3 Vendor,DDS4 Vendor,DDS5 Vendor,DDS6 Vendor,DDS7 Vendor,DDS8 Vendor,DDS9 Vendor,MKT Vendor,SVC Vendor,MS Vendor,POD Vendor,Others Purchase,Ekspedisi Log-POD];
                                                   Description=YIMMATOP,YIMM,CR#018 & 023-Options added for Imacs }
    { 50008;  ;B/L Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   Description=YIMMNBTR }
    { 50009;  ;UID                 ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=BEGIN
                                                              LoginMgt.LookupUserID(UID);
                                                            END;

                                                   Description=YIMMRYUID,CAUYIMM }
    { 50010;  ;Interfaced          ;Boolean       ;Description=Interface }
    { 50011;  ;New Or Cancel       ;Option        ;OptionCaptionML=ENU=,New,Cancel;
                                                   OptionString=,New,Cancel;
                                                   Description=AKS240309 New for Export/Import }
    { 50012;  ;G-Port Ref No.      ;Code20        ;Description=YIMMAKS For Gport }
    { 50013;  ;Tax Invoice Date    ;Date          ;OnValidate=VAR
                                                                GracePeriod@1000000003 : Text[30];
                                                                CurrDate@1000000002 : Integer;
                                                                DateofExpiry@1000000001 : Date;
                                                                MasterSetupRec@1000000000 : Record 50008;
                                                                Text50001@1000000004 : TextConst 'ENU=The Tax Invoice Date %1 has Expired';
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GracePeriod :=' ';
                                                                CurrDate :=0;
                                                                DateofExpiry :=0D;
                                                                MasterSetupRec.GET;
                                                                GracePeriod := FORMAT(MasterSetupRec."Grace Period for WHT Closing")+'D';
                                                                CurrDate := DATE2DMY(TODAY,1);
                                                                IF CurrDate <= MasterSetupRec."Grace Period for WHT Closing" THEN
                                                                  BEGIN
                                                                  GracePeriod := '-4M'+'-'+FORMAT(CurrDate-1)+'D';
                                                                  //MESSAGE('%1',GracePeriod);
                                                                  DateofExpiry := CALCDATE(GracePeriod,TODAY);
                                                                  //MESSAGE('%1',DateofExpiry);
                                                                   IF "Tax Invoice Date" < DateofExpiry THEN
                                                                    ERROR(Text50001,"Tax Invoice Date");
                                                                  END ELSE BEGIN
                                                                  GracePeriod := '-3M'+'-'+FORMAT(CurrDate-1)+'D';
                                                                  //MESSAGE('%1',GracePeriod);
                                                                  DateofExpiry := CALCDATE(GracePeriod,TODAY);
                                                                  //MESSAGE('%1',DateofExpiry);
                                                                   IF "Tax Invoice Date" < DateofExpiry THEN
                                                                    ERROR(Text50001,"Tax Invoice Date");
                                                                  END;
                                                              END;

                                                   Description=YIMMRVATO }
    { 50014;  ;New NPWP No         ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   Description=YIMMCH }
    { 50015;  ;Bank Code           ;Code20        ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Pay-to Vendor No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Bank Code"<>'') THEN
                                                                BEGIN
                                                                  VendBankAcc.RESET;
                                                                  VendBankAcc.SETRANGE(VendBankAcc."Vendor No.","Buy-from Vendor No.");
                                                                  VendBankAcc.SETRANGE(VendBankAcc.Code,"Bank Code");

                                                                   IF VendBankAcc.FINDFIRST THEN
                                                                      BEGIN
                                                                        "Bank Code":=VendBankAcc.Code;
                                                                        "Bank Account No":=VendBankAcc."Bank Account No.";
                                                                        "Vend/Cust Bank Name":=VendBankAcc.Name;
                                                                        "Bank Address":=VendBankAcc.Address;
                                                                        BeniName :=VendBankAcc.Contact;
                                                                      END
                                                                      ELSE
                                                                      BEGIN
                                                                        "Bank Code":='';
                                                                        "Bank Account No":='';
                                                                        "Vend/Cust Bank Name":='';
                                                                        "Bank Address":='';
                                                                        BeniName :='';




                                                                      END;
                                                                END
                                                                ELSE
                                                                BEGIN

                                                                  VendBankAcc.RESET;
                                                                  VendBankAcc.SETRANGE(VendBankAcc."Vendor No.","Buy-from Vendor No.");

                                                                   IF VendBankAcc.FINDFIRST THEN
                                                                      BEGIN
                                                                        "Bank Code":=VendBankAcc.Code;
                                                                        "Bank Account No":=VendBankAcc."Bank Account No.";
                                                                        "Vend/Cust Bank Name":=VendBankAcc.Name;
                                                                        "Bank Address":=VendBankAcc.Address;
                                                                        BeniName :=VendBankAcc.Contact;
                                                                      END
                                                                      ELSE
                                                                      BEGIN
                                                                        "Bank Code":='';
                                                                        "Bank Account No":='';
                                                                        "Vend/Cust Bank Name":='';
                                                                        "Bank Address":='';
                                                                        BeniName :='';
                                                                      END;

                                                                END;
                                                              END;

                                                   Description=YIMMRBDTL }
    { 50016;  ;Bank Account No     ;Code50        ;Description=YIMMRBDTL }
    { 50017;  ;Vend/Cust Bank Name ;Text50        ;Description=YIMMRBDTL }
    { 50018;  ;Bank Address        ;Text50        ;Description=YIMMRBDTL }
    { 50019;  ;BeniName            ;Text50        ;Description=YIMMRBDTL }
    { 50024;  ;Slip Amount         ;Decimal        }
    { 50025;  ;Slip Amount (LCY)   ;Decimal        }
    { 50026;  ;Destination         ;Text50        ;Description=YIMMSRYMKI }
    { 50027;  ;ActualCreditMemo    ;Boolean       ;Description=Field To Identify Actual and Correction In Credit Memo }
    { 50028;  ;FA Maintainance     ;Boolean       ;Description=To identofy FA Maintainance Document }
    { 50029;  ;Discount Amount     ;Decimal       ;Description=This field is added for the PO of FA: Discount given on PO of FA }
    { 50031;  ;Total Case          ;Code20        ;Description=YIMM1.0 }
    { 50032;  ;G.WEIGHT            ;Decimal       ;Description=YIMM1.0 }
    { 50033;  ;N.WEIGHT            ;Decimal       ;Description=YIMM1.0 }
    { 50034;  ;MEASURE             ;Decimal       ;Description=YIMM1.0 }
    { 50035;  ;Case Mark           ;Code100       ;Description=YIMM1.0 }
    { 50036;  ;Attention / Division;Code100       ;Description=YIMM1.0 }
    { 50037;  ;Vessel Name / Voyage;Code50        ;Description=YIMM1.0 }
    { 51000;  ;AccPac Receipt No.  ;Code20        ;Description=TBI - to validate unique receipt no. from AccPac }
    { 51001;  ;VAT APPLICABLE      ;Boolean       ;Description=TBI -to find VAT Applicable or not. }
    { 52000;  ;Quote No ( Project No.);Code20     ;TableRelation=IF (Document Type=CONST(Credit Memo),
                                                                     Reason Code=CONST(NORMAL)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                     ELSE IF (Document Type=CONST(Invoice),
                                                                              Reason Code=CONST(NORMAL)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                              ELSE IF (Document Type=CONST(Credit Memo),
                                                                                       Reason Code=CONST(PURRT)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                                       ELSE IF (Document Type=CONST(Invoice),
                                                                                                Reason Code=CONST(PURRT)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(Yes))
                                                                                                ELSE IF (Document Type=CONST(Order)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No))
                                                                                                ELSE IF (Document Type=CONST(Quote),
                                                                                                         Type Of Transaction=CONST(Claim)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(Yes))
                                                                                                         ELSE IF (Document Type=CONST(Quote),
                                                                                                                  Type Of Transaction=FILTER(<>Claim)) "All Quotes"."Quote No." WHERE (Invoice Posted=CONST(No));
                                                   OnValidate=VAR
                                                                PurchCrMemoHeader@1000000000 : Record 124;
                                                                PurchInvHeader@1000000001 : Record 122;
                                                                Int@1000000002 : Integer;
                                                                MasterSetup@1000000003 : Record 50008;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                 MasterSetup.GET;

                                                                IF ("Document Type"="Document Type"::Quote) AND
                                                                 ("Type Of Transaction"="Type Of Transaction"::Claim)  AND
                                                                   (COMPANYNAME=MasterSetup."Company Name MELCO") THEN

                                                                 BEGIN

                                                                  Int:=0;


                                                                  PurchCrMemoHeader.RESET;
                                                                  PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader."Quote No ( Project No.)","Quote No ( Project No.)");
                                                                  PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader."Reason Code",MasterSetup."Reason (Purchase as Sale)");
                                                                  PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader.Deposit,FALSE);

                                                                   IF PurchCrMemoHeader.FINDSET THEN
                                                                    REPEAT

                                                                     PurchInvHeader.RESET;
                                                                     PurchInvHeader.SETRANGE(PurchInvHeader."Applies-to Doc. Type",PurchInvHeader."Applies-to Doc. Type"::"Credit Memo");
                                                                     PurchInvHeader.SETRANGE(PurchInvHeader."Applies-to Doc. No.",PurchCrMemoHeader."No.");
                                                                     PurchInvHeader.SETRANGE(PurchInvHeader."Reason Code",MasterSetup."Reason (Purchase as Sale)");
                                                                     PurchInvHeader.SETRANGE(PurchInvHeader.ActualCreditMemo,FALSE);

                                                                     IF NOT (PurchInvHeader.FINDFIRST) THEN
                                                                       Int:=Int+1;

                                                                    UNTIL(PurchCrMemoHeader.NEXT=0);

                                                                   IF (Int=0) THEN
                                                                   ClaimNo:='CL'+FORMAT(Int+1)+'-'+"Quote No ( Project No.)"
                                                                   ELSE
                                                                   ClaimNo:='CL'+FORMAT(Int)+'-'+"Quote No ( Project No.)"

                                                                 END;
                                                              END;

                                                   Description=For Melco to Capture the Quote No. }
    { 52001;  ;Deposit             ;Boolean       ;Description=To Identify Deposit received }
    { 52002;  ;ClaimNo             ;Code20        ;Description=For Getting the Claim No }
    { 52003;  ;ExpansesCode        ;Code20        ;TableRelation=ExpansesCode.ExpanseCode;
                                                   Description=Field For the Expanses Code }
    { 52004;  ;Blocked             ;Boolean        }
    { 52005;  ;YMNI Type of Sales  ;Option        ;OptionCaptionML=ENU=" ,Unit,Material,Laboratorium,Others";
                                                   OptionString=[ ,Unit,Material,Laboratorium,Others] }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Pay-to Vendor No.          }
    {    ;Buy-from Vendor No.                      }
    {    ;Incoming Document Entry No.              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print receipt %1?;ENA=Do you want to print receipt %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?;ENA=Do you want to print invoice %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?;ENA=Do you want to print cR/Adj Note %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ENA=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;ENA=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ENA=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more sales orders.;ENA=You cannot change %1 because the order is associated with one or more sales orders.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\;ENA=%1 is greater than %2 in the %3 table.\';
      Text008@1008 : TextConst 'ENU=Confirm change?;ENA=Confirm change?';
      Text009@1009 : TextConst 'ENU="Deleting this document will cause a gap in the number series for receipts. ";ENA="Deleting this document will cause a gap in the number series for receipts. "';
      Text010@1010 : TextConst 'ENU=An empty receipt %1 will be created to fill this gap in the number series.\\;ENA=An empty receipt %1 will be created to fill this gap in the number series.\\';
      Text011@1011 : TextConst 'ENU=Do you want to continue?;ENA=Do you want to continue?';
      Text012@1012 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted invoices. ";ENA="Deleting this document will cause a gap in the number series for posted invoices. "';
      Text013@1013 : TextConst 'ENU=An empty posted invoice %1 will be created to fill this gap in the number series.\\;ENA=An empty posted invoice %1 will be created to fill this gap in the number series.\\';
      Text014@1014 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted credit memos. ";ENA="Deleting this document will cause a gap in the number series for posted cr/adj notes. "';
      Text015@1015 : TextConst 'ENU=An empty posted credit memo %1 will be created to fill this gap in the number series.\\;ENA=An empty posted CR/Adj Note %1 will be created to fill this gap in the number series.\\';
      Text016@1016 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\;ENA=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\';
      Text018@1017 : TextConst 'ENU=You must delete the existing purchase lines before you can change %1.;ENA=You must delete the existing purchase lines before you can change %1.';
      Text019@1018 : TextConst 'ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\;ENA=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.;ENA=You must update the existing purchase lines manually.';
      Text021@1020 : TextConst 'ENU=The change may affect the exchange rate used on the price calculation of the purchase lines.;ENA=The change may affect the exchange rate used on the price calculation of the purchase lines.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ENA=Do you want to update the exchange rate?';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ENA=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text024@1023 : TextConst 'ENU=Do you want to print return shipment %1?;ENA=Do you want to print return shipment %1?';
      Text025@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";ENA="You have modified the %1 field. Note that the recalculation of GST may cause small differences, so you must check the amounts afterwards. "';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;ENA=Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ENA=Your identification is set up to process from %1 %2 only.';
      Text029@1028 : TextConst 'ENU="Deleting this document will cause a gap in the number series for return shipments. ";ENA="Deleting this document will cause a gap in the number series for return shipments. "';
      Text030@1029 : TextConst 'ENU=An empty return shipment %1 will be created to fill this gap in the number series.\\;ENA=An empty return shipment %1 will be created to fill this gap in the number series.\\';
      Text032@1031 : TextConst 'ENU=You have modified %1.\\;ENA=You have modified %1.\\';
      Text033@1032 : TextConst 'ENU=Do you want to update the lines?;ENA=Do you want to update the lines?';
      PurchSetup@1033 : Record 312;
      SalesSetup@1000000003 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      ShipToAddr@1044 : Record 222;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      GenJnILine@1055 : Record 81;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      NoSeriesMgt@1060 : Codeunit 396;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      PurchPost@1063 : Codeunit 90;
      VendEntrySetApplID@1064 : Codeunit 111;
      DimMgt@1065 : Codeunit 408;
      ApprovalMgt@1082 : Codeunit 439;
      UserSetupMgt@1066 : Codeunit 5700;
      ArchiveManagement@1074 : Codeunit 5063;
      ReservePurchLine@1081 : Codeunit 99000834;
      PostCodeCheck@1500001 : Codeunit 28000;
      BasManagement@1500000 : Codeunit 11601;
      ApplyVendEntries@1068 : Page 233;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENA=You cannot change the %1 when the %2 has been filled in.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.;ENA=Contact %1 %2 is not related to vendor %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.;ENA=Contact %1 %2 is related to a different company than vendor %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.;ENA=Contact %1 %2 is not related to a vendor.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ENA="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text041@1182 : TextConst 'ENU=The purchase %1 %2 has item tracking. Do you want to delete it anyway?;ENA=The purchase %1 %2 has item tracking. Do you want to delete it anyway?';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ENA=You must cancel the approval process if you wish to change the %1.';
      Text043@1083 : TextConst 'ENU=Do you want to print prepayment invoice %1?;ENA=Do you want to print prepayment invoice %1?';
      Text044@1085 : TextConst 'ENU=Do you want to print prepayment credit memo %1?;ENA=Do you want to print prepayment CR/Adj Note %1?';
      Text045@1086 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text046@1087 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENA=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ENA=%1 is set up to process from %2 %3 only.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\;ENA=Reservations exist for this order. These reservations will be cancelled if a date conflict is caused by this change.\\';
      Text051@1025 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENA=You may have changed a dimension.\\Do you want to update the lines?';
      Text052@1091 : TextConst 'ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.;ENA=The %1 field on the purchase order %2 must be the same as on sales order %3.';
      NameAddressDetails@1093 : Text[512];
      DropShptNameAddressDetails@1094 : Text[512];
      SpecOrderNameAddressDetails@1121 : Text[512];
      UpdateDocumentDate@1120 : Boolean;
      Text053@1095 : TextConst 'ENU=There are unposted prepayment amounts on the document of type %1 with the number %2.;ENA=There are unposted prepayment amounts on the document of type %1 with the number %2.';
      Text054@1096 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;ENA=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      Text1500000@1500002 : TextConst 'ENU=Vendor %1 is not registered. Do you wish to continue?;ENA=Vendor %1 is not registered. Do you wish to continue?';
      ChangeCurrencyQst@1073 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?;ENA=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?';
      NoSeriesLine@1000000000 : Record 308;
      VendBankAcc@1000000002 : Record 288;
      LoginMgt@1000000004 : Codeunit 418;
      VATDetail@1000000005 : Record 50015;
      ESPTDetail@1000000006 : Record 50016;
      Text056@1000000007 : TextConst 'ENU=Entries are Moved to Espt Hence you cannot delete';

    PROCEDURE InitRecord@10();
    BEGIN
      PurchSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            IF PurchSetup."Return Shipment on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Return Order"] THEN
        "Order Date" := WORKDATE;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      // UPG09R2.begin
      //YIMMNNTOT
      IF NoSeriesLine.GET("No. Series") THEN
       "Type Of Transaction" := NoSeriesLine."Type Of Transaction";
      //YIMMNNTOT
      // UPG09R2.end
      "Document Date" := WORKDATE;

      VALIDATE("Sell-to Customer No.",'');

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
        Adjustment := GLSetup.GSTEnabled("Document Date");
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      IF InvtSetup.GET THEN
        "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";

      "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
    END;

    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    VAR
      NoSeries@1001 : Code[10];
    BEGIN
      PurchSetup.GET;
      SalesSetup.GET;
      TestNoSeries;
      NoSeries := "No. Series";
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") AND
         (NoSeries <> "No. Series")
      THEN BEGIN
        PurchSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          PurchSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            PurchSetup.TESTFIELD("Invoice Nos.");
            PurchSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          PurchSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            PurchSetup.TESTFIELD("Credit Memo Nos.");
            PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    VAR
      Nseries@1000000002 : Record 308;
      Nseries_Rel@1000000001 : Record 310;
      UserSetup@1000000000 : Record 91;
      MasterSetup@1000000003 : Record 50008;
    BEGIN
      MasterSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote:
      // UPG09R2.begin
      //mel1.0-start
          BEGIN
            IF (("Reason Code"=MasterSetup."Reason (Purchase as Sale)")) THEN
             EXIT(SalesSetup."Quote Nos.");
          END;
      //mel1.0-end
          //EXIT(PurchSetup."Quote Nos.");
      // UPG09R2.end
        "Document Type"::Order:
          EXIT(PurchSetup."Order Nos.");
        "Document Type"::Invoice:
          BEGIN  //UPG09R2

          IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN //UPG09R2
          EXIT(PurchSetup."Invoice Nos.");
          // UPG09R2.begin
          IF (("Reason Code"=MasterSetup."Reason (Purchase as Sale)") AND (ActualCreditMemo=TRUE)) THEN
          EXIT(SalesSetup."Credit Memo Nos.");

          IF (("Reason Code"=MasterSetup."Reason (Purchase as Sale)") AND (ActualCreditMemo=FALSE)) THEN
          EXIT(SalesSetup.SalesCreditMemoCorrection);

          END;

      {
      //YIMMNNSRST
         BEGIN
          UserSetup.RESET;
          UserSetup.SETRANGE(UserSetup."User ID",USERID);
             IF UserSetup.FIND('-') THEN
                 BEGIN
                 Nseries_Rel.RESET;
                 Nseries_Rel.SETRANGE(Nseries_Rel.Code,PurchSetup."Invoice Nos.");
                     IF Nseries_Rel.FIND('-') THEN
                         REPEAT
                         Nseries.RESET;
                             IF Nseries.GET(Nseries_Rel."Series Code") THEN
                              IF (Nseries.GroupCode=UserSetup.GroupCode) THEN
                                    EXIT(Nseries_Rel."Series Code")
                         UNTIL (Nseries_Rel.NEXT=0);
                 END;
          END;
      //YIMMNNSREN
      }
      // UPG09R2.end
        "Document Type"::"Return Order":
          EXIT(PurchSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
         // UPG09R2.begin
          BEGIN
            IF (("Reason Code"=MasterSetup."Reason (Purchase as Sale)")) THEN
             EXIT(SalesSetup."Invoice Nos.");

            IF (("Reason Code"=MasterSetup."Reason (Normal)") AND (ActualCreditMemo=TRUE)) THEN
          EXIT(PurchSetup."Credit Memo Nos.");

            IF (("Reason Code"=MasterSetup."Reason (Normal)") AND (ActualCreditMemo=FALSE)) THEN
             EXIT(PurchSetup.PurchaseCreditMemoCorrection);

           END;
           // UPG09R2.end
        "Document Type"::"Blanket Order":
          EXIT(PurchSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    VAR
      MasterSetup@1000000000 : Record 50008;
    BEGIN
      { //UPG09R2
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");
      // UPG09R2.begin
      }//TBI1.0


      //TBI1.0 BEGIN

      MasterSetup.GET;
      SalesSetup.GET;

      IF COMPANYNAME <> MasterSetup."Company Name TBI" THEN BEGIN

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");

      END ELSE BEGIN

        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN

              IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
                EXIT(PurchSetup."Posted Invoice Nos.");

              IF ("Reason Code"=MasterSetup."Reason (Purchase as Sale)") THEN
                EXIT(SalesSetup."Posted Credit Memo Nos.");

            END;

          "Document Type"::"Return Order":
            EXIT(PurchSetup."Posted Credit Memo Nos.");

          "Document Type"::"Credit Memo":
            BEGIN

              IF ("Reason Code"=MasterSetup."Reason (Purchase as Sale)") THEN
                EXIT(SalesSetup."Posted Invoice Nos.");

              IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN
                EXIT(PurchSetup."Posted Credit Memo Nos.");

            END;


          ELSE
            EXIT(PurchSetup."Posted Invoice Nos.");
        END;

      END;
      //TBI1.0 END
      // UPG09R2.end
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@37() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(PurchSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      PurchPost.TestDeleteHeader(
        Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
        ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
      IF PurchRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009 +
             Text010 +
             Text011,TRUE,
             PurchRcptHeader."No.")
        THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012 +
             Text013 +
             Text011,TRUE,
             PurchInvHeader."No.")
        THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014 +
             Text015 +
             Text011,TRUE,
             PurchCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text029 +
             Text030 +
             Text011,TRUE,
             ReturnShptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text045,TRUE,
             PurchInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text046,TRUE,
             PurchCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        Vend.GET(VendNo);
    END;

    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      PurchLineTmp@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      CopyDocMgt@1008 : Codeunit 6620;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF PurchLinesExist THEN BEGIN
        IF HideValidationDialog THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text016 +
              Text004,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          PurchLine.LOCKTABLE;
          ItemChargeAssgntPurch.LOCKTABLE;
          MODIFY;

          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              PurchLine.TESTFIELD("Quantity Received",0);
              PurchLine.TESTFIELD("Quantity Invoiced",0);
              PurchLine.TESTFIELD("Return Qty. Shipped",0);
              PurchLine.CALCFIELDS("Reserved Qty. (Base)");
              PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
              PurchLine.TESTFIELD("Receipt No.",'');
              PurchLine.TESTFIELD("Return Shipment No.",'');
              PurchLine.TESTFIELD("Blanket Order No.",'');
              IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
                CASE TRUE OF
                  PurchLine."Drop Shipment":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                  PurchLine."Special Order":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
                END;
                TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
              END;

              PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              PurchLineTmp := PurchLine;
              IF PurchLine.Nonstock THEN BEGIN
                PurchLine.Nonstock := FALSE;
                PurchLine.MODIFY;
              END;
              PurchLineTmp.INSERT;
            UNTIL PurchLine.NEXT = 0;

            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
                TempItemChargeAssgntPurch.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
              ItemChargeAssgntPurch.DELETEALL;
            END;

            PurchLine.DELETEALL(TRUE);

            PurchLine.INIT;
            PurchLine."Line No." := 0;
            PurchLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            REPEAT
              IF PurchLineTmp."Attached to Line No." = 0 THEN BEGIN
                PurchLine.INIT;
                PurchLine."Line No." := PurchLine."Line No." + 10000;
                PurchLine.VALIDATE(Type,PurchLineTmp.Type);
                IF PurchLineTmp."No." = '' THEN BEGIN
                  PurchLine.VALIDATE(Description,PurchLineTmp.Description);
                  PurchLine.VALIDATE("Description 2",PurchLineTmp."Description 2");
                  PurchLine.INSERT;
                END ELSE BEGIN
                  PurchLine.VALIDATE("No.",PurchLineTmp."No.");
                  IF PurchLine.Type <> PurchLine.Type::" " THEN
                    CASE TRUE OF
                      PurchLineTmp."Drop Shipment":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Sales Order No.",
                            PurchLineTmp."Sales Order Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Drop Shipment" := PurchLineTmp."Drop Shipment";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Sales Order No." := PurchLineTmp."Sales Order No.";
                          PurchLine."Sales Order Line No." := PurchLineTmp."Sales Order Line No.";
                          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
                          PurchLine.VALIDATE("Inbound Whse. Handling Time");
                          PurchLine.INSERT;

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Purchase Order No." := PurchLine."Document No.";
                          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      PurchLineTmp."Special Order":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Special Order Sales No.",
                            PurchLineTmp."Special Order Sales Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Special Order" := PurchLineTmp."Special Order";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Special Order Sales No." := PurchLineTmp."Special Order Sales No.";
                          PurchLine."Special Order Sales Line No." := PurchLineTmp."Special Order Sales Line No.";
                          PurchLine.INSERT;

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
                          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      ELSE BEGIN
                        PurchLine.VALIDATE("Unit of Measure Code",PurchLineTmp."Unit of Measure Code");
                        PurchLine.VALIDATE("Variant Code",PurchLineTmp."Variant Code");
                        PurchLine."Prod. Order No." := PurchLineTmp."Prod. Order No.";
                        IF PurchLine."Prod. Order No." <> '' THEN BEGIN
                          PurchLine.Description := PurchLineTmp.Description;
                          PurchLine.VALIDATE("VAT Prod. Posting Group",PurchLineTmp."VAT Prod. Posting Group");
                          PurchLine.VALIDATE("Gen. Prod. Posting Group",PurchLineTmp."Gen. Prod. Posting Group");
                          PurchLine.VALIDATE("Expected Receipt Date",PurchLineTmp."Expected Receipt Date");
                          PurchLine.VALIDATE("Requested Receipt Date",PurchLineTmp."Requested Receipt Date");
                          PurchLine.VALIDATE("Qty. per Unit of Measure",PurchLineTmp."Qty. per Unit of Measure");
                        END;
                        IF (PurchLineTmp."Job No." <> '') AND (PurchLineTmp."Job Task No." <> '') THEN BEGIN
                          PurchLine.VALIDATE("Job No.",PurchLineTmp."Job No.");
                          PurchLine.VALIDATE("Job Task No.",PurchLineTmp."Job Task No.");
                          PurchLine."Job Line Type" := PurchLineTmp."Job Line Type";
                        END;
                        IF PurchLineTmp.Quantity <> 0 THEN
                          PurchLine.VALIDATE(Quantity,PurchLineTmp.Quantity);
                        IF "Currency Code" = xRec."Currency Code" THEN
                          PurchLine.VALIDATE("Direct Unit Cost",PurchLineTmp."Direct Unit Cost");
                        PurchLine."Routing No." := PurchLineTmp."Routing No.";
                        PurchLine."Routing Reference No." := PurchLineTmp."Routing Reference No.";
                        PurchLine."Operation No." := PurchLineTmp."Operation No.";
                        PurchLine."Work Center No." := PurchLineTmp."Work Center No.";
                        PurchLine."Prod. Order Line No." := PurchLineTmp."Prod. Order Line No.";
                        PurchLine."Overhead Rate" := PurchLineTmp."Overhead Rate";
                        PurchLine.INSERT;
                      END;
                    END;
                END;
                ExtendedTextAdded := FALSE;

                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLineTmp."Document Type");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",PurchLineTmp."Document No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",PurchLineTmp."Line No.");
                  IF TempItemChargeAssgntPurch.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
                        TempItemChargeAssgntPurch.Description := PurchLine.Description;
                        TempItemChargeAssgntPurch.MODIFY;
                        TempItemChargeAssgntPurch.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                END;
                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := PurchLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                  TransferExtendedText.InsertPurchExtText(PurchLine);
                  PurchLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
            UNTIL PurchLineTmp.NEXT = 0;

            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            PurchLineTmp.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
            IF PurchLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineTmp."Line No.");
                IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntPurch.INIT;
                    ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
                    ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntPurch.INSERT;
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL PurchLineTmp.NEXT = 0;

            PurchLineTmp.SETRANGE(Type);
            PurchLineTmp.DELETEALL;
            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempItemChargeAssgntPurch.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text018,ChangedFieldName);
      END;
    END;

    PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text020,
          ChangedFieldName);
    END;

    PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text021,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        GLSetup.GET;
        IF "Posting Date" <> 0D THEN
          //CurrencyDate := "Posting Date"// UPG13
          CurrencyDate := "Document Date"// UPG13
        ELSE
          CurrencyDate := WORKDATE;

        IF "Vendor Exchange Rate (ACY)" = 0 THEN
          "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code")
        ELSE
          "Currency Factor" := CurrExchRate.ExchangeRateFRS21(CurrencyDate,"Currency Code",
              GLSetup."Additional Reporting Currency","Vendor Exchange Rate (ACY)");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100]);
    VAR
      UpdateConfirmed@1002 : Boolean;
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IF NOT GUIALLOWED THEN
        UpdateConfirmed := TRUE
      ELSE
        CASE ChangedFieldName OF
          FIELDCAPTION("Expected Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Requested Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Promised Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Lead Time Calculation"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Inbound Whse. Handling Time"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Prepayment %"):
            UpdateConfirmed :=
              CONFIRM(
                STRSUBSTNO(
                  Text032 +
                  Text033,ChangedFieldName));
           //YIMMARCST // UPG09R2.begin
            FIELDCAPTION("Reason Code"):
              UpdateConfirmed := CONFIRM(STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
           //YIMMARCEN // UPG09R2.end
        END;

      PurchLine.LOCKTABLE;
      MODIFY;

      REPEAT
        xPurchLine := PurchLine;
        CASE ChangedFieldName OF
          FIELDCAPTION("Expected Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
          FIELDCAPTION("Currency Factor"):
            IF PurchLine.Type <> PurchLine.Type::" " THEN
              PurchLine.VALIDATE("Direct Unit Cost");
          FIELDCAPTION("Transaction Type"):
            PurchLine.VALIDATE("Transaction Type","Transaction Type");
          FIELDCAPTION("Transport Method"):
            PurchLine.VALIDATE("Transport Method","Transport Method");
          FIELDCAPTION("Entry Point"):
            PurchLine.VALIDATE("Entry Point","Entry Point");
          FIELDCAPTION(Area):
            PurchLine.VALIDATE(Area,Area);
          FIELDCAPTION("Transaction Specification"):
            PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
          FIELDCAPTION("Requested Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
          FIELDCAPTION("Prepayment %"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Prepayment %","Prepayment %");
          FIELDCAPTION("Promised Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
          FIELDCAPTION("Lead Time Calculation"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
          FIELDCAPTION("Inbound Whse. Handling Time"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
            //YIMMARCST // UPG09R2.begin
            FIELDCAPTION("Reason Code"):
              PurchLine.VALIDATE("Reason Code","Reason Code");
            //YIMMARCEN // UPG09R2.end
        END;
        PurchLine.MODIFY(TRUE);
        ReservePurchLine.VerifyChange(PurchLine,xPurchLine);
      UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT CONFIRM(Text050 + Text011,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1008 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@21();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT;

      IF ("Location Code" <> '') AND
         Location.GET("Location Code") AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
        PostCodeCheck.CopyAddressID(
          DATABASE::Location,Location.GETPOSITION,0,DATABASE::"Purchase Header",GETPOSITION,2);
      END;

      IF ("Location Code" = '') AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        PostCodeCheck.CopyAddressID(
          DATABASE::"Company Information",CompanyInfo.GETPOSITION,2,DATABASE::"Purchase Header",GETPOSITION,2);
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry@1000 : Record 337;
      ReservEntry2@1001 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text041,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Buy-from Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Buy-from Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Buy-from Contact No." := ContBusRel."Contact No."
          ELSE
            "Buy-from Contact No." := '';
        END;
        "Buy-from Contact" := Vend.Contact;
      END;
    END;

    PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1001 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Pay-to Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Pay-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Pay-to Contact No." := '';
        END;
        "Pay-to Contact" := Vend.Contact;
      END;
    END;

    PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            "Buy-from Contact" := ''
      END ELSE BEGIN
        "Buy-from Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.");
        IF "Buy-from Vendor No." = '' THEN BEGIN
          SkipBuyFromContact := TRUE;
          VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
          SkipBuyFromContact := FALSE;
        END;
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    END;

    PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text051) THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.LOCKTABLE;
      IF PurchLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
            PurchLine.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;
    END;

    PROCEDURE JobUpdatePurchLines@28();
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          SetPurchHeader(Rec);
          REPEAT
            JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdateJobPrices;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Page 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE AddShipToAddress@46(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine2@1002 : Record 39;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type"::Order);
        PurchLine2.SETRANGE("Document No.","No.");
        IF NOT PurchLine2.ISEMPTY THEN BEGIN
          IF "Ship-to Name" <> SalesHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> SalesHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> SalesHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> SalesHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> SalesHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> SalesHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> SalesHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE BEGIN
          // no purchase line exists
          "Ship-to Name" := SalesHeader."Ship-to Name";
          "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
          "Ship-to Address" := SalesHeader."Ship-to Address";
          "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
          "Ship-to Post Code" := SalesHeader."Ship-to Post Code";
          "Ship-to City" := SalesHeader."Ship-to City";
          "Ship-to Contact" := SalesHeader."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE DropShptOrderExists@48(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      // returns TRUE if sales is either Drop Shipment of Special Order
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Drop Shipment",TRUE);
      EXIT(NOT SalesLine2.ISEMPTY);
    END;

    PROCEDURE SpecialOrderExists@81(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine3@1001 : Record 37;
    BEGIN
      SalesLine3.RESET;
      SalesLine3.SETRANGE("Document Type",SalesLine3."Document Type"::Order);
      SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine3.SETRANGE("Special Order",TRUE);
      EXIT(NOT SalesLine3.ISEMPTY);
    END;

    PROCEDURE QtyToReceiveIsZero@30() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Qty. to Receive",'<>0');
      EXIT(PurchLine.ISEMPTY);
    END;

    PROCEDURE IsApprovedForPosting@50() : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(SalesHeader,Rec) THEN BEGIN
        IF ApprovalMgt.TestPurchasePrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text053,"Document Type","No."));
        IF ApprovalMgt.TestPurchasePayment(Rec) THEN
          IF NOT CONFIRM(STRSUBSTNO(Text054,"Document Type","No."),TRUE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@51() : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(SalesHeader,Rec) THEN BEGIN
        IF ApprovalMgt.TestPurchasePrepayment(Rec) THEN
          EXIT(FALSE);
        IF ApprovalMgt.TestPurchasePayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE UpdatePmtDiscDate@1140000();
    BEGIN
      // Updates the payment discount date to due date if discount % is zero
      IF "Payment Discount %" = 0 THEN
        // credit memo and return order behave different
        IF NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) THEN
          "Pmt. Discount Date" := "Due Date";
    END;

    LOCAL PROCEDURE ValidateDocumentDate@1500001();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
         GLSetup.GSTEnabled("Document Date")
      THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
        VendLedgEntry.SETFILTER("Document Type",'<>%1',VendLedgEntry."Document Type"::Payment);
        VendLedgEntry.SETRANGE("Document No.","Adjustment Applies-to");
        VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
        IF VendLedgEntry.FINDFIRST THEN
          "BAS Adjustment" := BasManagement.CheckBASPeriod("Document Date",VendLedgEntry."Document Date")
        ELSE
          "BAS Adjustment" := FALSE;
      END ELSE
        "BAS Adjustment" := FALSE;
    END;

    LOCAL PROCEDURE ValidateAppliesToDocNo@1500002();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
         GLSetup.GSTEnabled("Document Date")
      THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
        VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
        VendLedgEntry.SETRANGE(Open,TRUE);
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.FINDFIRST THEN BEGIN
          "Applies-to Doc. Type" := VendLedgEntry."Document Type";
          "BAS Adjustment" := BasManagement.CheckBASPeriod("Document Date",VendLedgEntry."Document Date");
          "Adjustment Applies-to" := "Applies-to Doc. No.";
        END;
      END;
    END;

    LOCAL PROCEDURE LookupAppliesToDocNo@1500003();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
         GLSetup.GSTEnabled("Document Date")
      THEN BEGIN
        "BAS Adjustment" := BasManagement.CheckBASPeriod("Document Date",VendLedgEntry."Document Date");
        "Adjustment Applies-to" := "Applies-to Doc. No.";
      END;
    END;

    LOCAL PROCEDURE LookupAdjmtAppliesTo@1500004();
    BEGIN
      CLEAR(ApplyVendEntries);
      CALCFIELDS(Amount);
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Positive,"Applies-to Doc. Type","Applies-to Doc. No.","Due Date");
      VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.FINDFIRST THEN;
        VendLedgEntry.SETRANGE("Document Type");
        VendLedgEntry.SETRANGE("Document No.");
      END ELSE
        IF "Applies-to Doc. Type" <> 0 THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
          IF VendLedgEntry.FINDFIRST THEN;
          VendLedgEntry.SETRANGE("Document Type");
        END ELSE
          IF Amount <> 0 THEN BEGIN
            VendLedgEntry.SETRANGE(Positive,Amount < 0);
            IF VendLedgEntry.FINDFIRST THEN;
            VendLedgEntry.SETRANGE(Positive);
            VendLedgEntry.SETFILTER("Document Type",'<>%1',VendLedgEntry."Document Type"::Payment);
          END;
      ApplyVendEntries.SetPurch(Rec,VendLedgEntry,FIELDNO("Applies-to Doc. No."));
      ApplyVendEntries.LOOKUPMODE(TRUE);
      IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
        "Adjustment Applies-to" := VendLedgEntry."Document No.";
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "BAS Adjustment" := BasManagement.CheckBASPeriod("Document Date",VendLedgEntry."Document Date");
      END;
      CLEAR(ApplyVendEntries);
    END;

    PROCEDURE ValidateAdjmtAppliesTo@1500000();
    VAR
      Text1500001@15001 : TextConst 'ENU=%1 %2 does not exist;ENA=%1 %2 does not exist';
    BEGIN
      CALCFIELDS(Amount);
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Positive,"Applies-to Doc. Type","Applies-to Doc. No.","Due Date");
      VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.FINDFIRST THEN;
        VendLedgEntry.SETRANGE("Document Type");
        VendLedgEntry.SETRANGE("Document No.");
      END ELSE
        IF "Applies-to Doc. Type" <> 0 THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
          IF VendLedgEntry.FINDFIRST THEN;
          VendLedgEntry.SETRANGE("Document Type");
        END ELSE
          IF Amount <> 0 THEN BEGIN
            VendLedgEntry.SETRANGE(Positive,Amount < 0);
            IF VendLedgEntry.FINDFIRST THEN;
            VendLedgEntry.SETRANGE(Positive);
            VendLedgEntry.SETFILTER("Document Type",'<>%1',VendLedgEntry."Document Type"::Payment);
          END;
      VendLedgEntry.SETRANGE("Document No.","Adjustment Applies-to");
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        "Adjustment Applies-to" := VendLedgEntry."Document No.";
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "BAS Adjustment" := BasManagement.CheckBASPeriod("Document Date",VendLedgEntry."Document Date");

        IF "Applies-to Doc. No." = '' THEN
          VendLedgEntry."Amount to Apply" := 0;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END ELSE BEGIN
        "BAS Adjustment" := FALSE;
        IF "Adjustment Applies-to" <> '' THEN
          ERROR(Text1500001,VendLedgEntry.TABLECAPTION,"Adjustment Applies-to");
      END;
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@33();
    VAR
      PurchasePostViaJobQueue@1000 : Codeunit 98;
    BEGIN
      PurchasePostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE CheckDropShptAddressDetails@79(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      NameAddressDetails := DropShptNameAddressDetails;
      DropShptNameAddressDetails :=
        SalesHeader."Ship-to Name" + SalesHeader."Ship-to Name 2" +
        SalesHeader."Ship-to Address" + SalesHeader."Ship-to Address 2" +
        SalesHeader."Ship-to Post Code" + SalesHeader."Ship-to City" +
        SalesHeader."Ship-to Contact";
      IF NameAddressDetails = '' THEN
        NameAddressDetails := DropShptNameAddressDetails;
      EXIT(NameAddressDetails = DropShptNameAddressDetails);
    END;

    PROCEDURE AddSpecialOrderToAddress@80(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine3@1003 : Record 39;
      LocationCode@1004 : Record 14;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine3.RESET;
        PurchLine3.SETRANGE("Document Type","Document Type"::Order);
        PurchLine3.SETRANGE("Document No.","No.");
        IF NOT PurchLine3.ISEMPTY THEN BEGIN
          LocationCode.GET("Location Code");
          IF "Ship-to Name" <> LocationCode.Name THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> LocationCode."Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> LocationCode.Address THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> LocationCode."Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> LocationCode."Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> LocationCode.City THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> LocationCode.Contact THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE
          SetShipToForSpecOrder;
      END;
    END;

    PROCEDURE CheckSpecOrderAddressDetails@82(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      LocationCode@1001 : Record 14;
    BEGIN
      NameAddressDetails := SpecOrderNameAddressDetails;
      IF LocationCode.GET(SalesHeader."Location Code") THEN
        SpecOrderNameAddressDetails :=
          LocationCode.Name + LocationCode."Name 2" +
          LocationCode.Address + LocationCode."Address 2" +
          LocationCode."Post Code" + LocationCode.City +
          LocationCode.Contact
      ELSE BEGIN
        CompanyInfo.GET;
        SpecOrderNameAddressDetails :=
          CompanyInfo."Ship-to Name" + CompanyInfo."Ship-to Name 2" +
          CompanyInfo."Ship-to Address" + CompanyInfo."Ship-to Address 2" +
          CompanyInfo."Ship-to Post Code" + CompanyInfo."Ship-to City" +
          CompanyInfo."Ship-to Contact";
      END;
      IF NameAddressDetails = '' THEN
        NameAddressDetails := SpecOrderNameAddressDetails;
      EXIT(NameAddressDetails = SpecOrderNameAddressDetails);
    END;

    PROCEDURE UpdateFAPostingDate@1000000004();
    VAR
      MasterSetup@1000000001 : Record 50008;
      PurchLineTBI@1000000000 : Record 39;
    BEGIN
      //TBI1.O BEGIN
      MasterSetup.GET;
      IF (COMPANYNAME = MasterSetup."Company Name TBI") THEN BEGIN
        PurchLineTBI.RESET;
        PurchLineTBI.SETRANGE("Document Type","Document Type");
        PurchLineTBI.SETRANGE("Document No.","No.");
        PurchLineTBI.SETRANGE(Type,PurchLineTBI.Type::"Fixed Asset");
        PurchLineTBI.SETFILTER("No.",'<>%1','');
        IF PurchLineTBI.FINDFIRST THEN REPEAT
          PurchLineTBI.VALIDATE("FA Posting Date","Posting Date");
          PurchLineTBI.MODIFY(TRUE);
        UNTIL PurchLineTBI.NEXT=0;
      END;
      //TBI1.0 END
    END;

    PROCEDURE ZeroAmountInLines@35();
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      PurchLine.SetPurchHeader(PurchHeader);
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'>0');
      PurchLine.SETFILTER(Quantity,'<>0');
      IF PurchLine.FINDSET(TRUE) THEN
        REPEAT
          PurchLine.Amount := 0;
          PurchLine."Amount Including VAT" := 0;
          PurchLine."VAT Base Amount" := 0;
          PurchLine.InitOutstandingAmount;
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;

    BEGIN
    {
      //YIMMATOP
         field Added "Type of Purchase" for payments to vendor based on type of purchase
      //YIMMACON
        New field is added to record the old vendor no. from the different systems
        TESFIELD NOT TO SELECT THE VENDOR WITHOUT OLD VENDOR.
      //YIMMNNPWP
       1) Length of Feld is expanded (ID-95)
       2) VALIDATE THE CHANGE IN ORDER ADDRESS CODE.(IF THERE IS CHANGE IN HEADER THEN HAVE TO CHNAGE MANUALLY IN LINES.)

      //YIMMNNSR
       1) CODE ADDED FOR DIFFRENT NO SERIES FOR DIFFERENT USER.

      //YIMMARC
       1) Code is write to update the existing purchase line with Reason code
      //YIMM
       1) Comment on Validate Posting date for document date remains as workdate not posting date
       2) Code commented for validating the document date with posting date.
       3) Add Jsox Compliance
       4) Code is added to Filter on reason code in Vendor Application form
       5) Code is Added to make the same posting group as same in application entry
      //YIMMNNTOT
       1) CODE ADDED FPR THE NO SERIES VALIDATION WITH TYPE OF TRANSACTION.
      //YIMMRVATO
       1) TAX INVOICE DATE IS ADDDED NEW FIELD TO MAP VAT OUT PROCESS.
      //YIMM
      1) Make Type of transaction as uneditable because it is coming from No series
      //YIMMCH
      1) New Field is Added to MAP Temp Vendor Concept (New Npwp No)


      //TBI1.0 - NEW FIEDL ADDED FOR TBI
               - to validate unique receipt no. from AccPac
               - CODE ADDED TO DISPLAY POSTING NO. SERIES AS PER REASON CODE
               - Postind Date to flow to FA Postind Date in case of Type FA


      //YIMM1.0 - fIELD ADDED FOR THE CR REFERENCE TO CREATE VENDOR SALES INVOICE FOR EXPORT ONLY AND FOR REPORT PURPOSE.


      //Mel1.0- Field added for Melco Specific Customizatiopn ( ID 52000 - to capture the Proejct Code- Quote No.)
                Table relation given for the same field with All Quote Table to see the unposted invoices.

              - No series open on the basis of reason code ( in case of vendor sales invoice)
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //Older Versions - NAVW16.00.01,LIQEM6.00.01
      //UPG13
      2009R2 to 2013 Merged Code.
      //Older versions - NAVW17.00,NAVAPAC7.00
      //UPG13R2
      2013 to 2013R2 Merged Code.
      //Old Version - NAVW17.10.00.36897,NAVAPAC7.10.00.36897
      //CAUYIMM - Changed UID Length from 10 to 50.
    }
    END.
  }
}

