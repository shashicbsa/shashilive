OBJECT Page 11610 BAS Setup Preview Subform
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00;
    Version List=NAVAPAC7.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=BAS Setup Preview Subform;
               ENA=BAS Setup Preview Subform];
    SourceTable=Table11600;
    PageType=ListPart;
    OnAfterGetRecord=BEGIN
                       BASUpdate.InitializeRequest(BASCalcSheet,FALSE,Selection,PeriodSelection,ExcludeClosingEntries);
                       IF NOT BASCalcSheet.Exported THEN
                         BASUpdate.CalcLineTotal(Rec,ColumnValue,0)
                       ELSE
                         BASUpdate.CalcExportLineTotal(Rec,ColumnValue,0,DocumentNo,VersionNo);

                       IF "Print with" = "Print with"::"Opposite Sign" THEN
                         ColumnValue := -ColumnValue;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Row No." }

    { 4   ;2   ;Field     ;
                SourceExpr="Field Label No." }

    { 10  ;2   ;Field     ;
                SourceExpr="Field Description" }

    { 19  ;2   ;Field     ;
                SourceExpr=Type }

    { 14  ;2   ;Field     ;
                SourceExpr="Amount Type" }

    { 6   ;2   ;Field     ;
                SourceExpr="GST Bus. Posting Group" }

    { 8   ;2   ;Field     ;
                SourceExpr="GST Prod. Posting Group" }

    { 17  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=Column Amount;
                           ENA=Column Amount];
                BlankZero=Yes;
                SourceExpr=ColumnValue;
                OnDrillDown=BEGIN
                              RunOnDrillDown;
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1450000 : TextConst 'ENU=Drilldown not possible when %1 is %2.;ENA=Drilldown not possible when %1 is %2.';
      BASCalcSheet@1450001 : Record 11601;
      BASUpdate@1450002 : Report 11604;
      ColumnValue@1450003 : Decimal;
      Selection@1450004 : 'Open,Closed,Open and Closed';
      PeriodSelection@1450005 : 'Before and Within Period,Within Period';
      ExcludeClosingEntries@1450006 : Boolean;
      DocumentNo@1500000 : Code[11];
      VersionNo@1500001 : Integer;

    PROCEDURE SetValues@1450000(VAR NewBASCalcSheet@1450000 : Record 11601;NewSelection@1450001 : 'Open,Closed,Open and Closed';NewPeriodSelection@1450002 : 'Before and Within Period,Within Period';NewExcludeClosingEntries@1450003 : Boolean;NewDocumentNo@1500000 : Code[11];NewVersionNo@1500001 : Integer);
    BEGIN
      BASCalcSheet.COPY(NewBASCalcSheet);
      Selection := NewSelection;
      PeriodSelection := NewPeriodSelection;
      ExcludeClosingEntries := NewExcludeClosingEntries;
      DocumentNo := NewDocumentNo;
      VersionNo := NewVersionNo;
      SETFILTER(
        "Date Filter",
        BASUpdate.GetPeriodFilter(PeriodSelection,BASCalcSheet.A3,BASCalcSheet.A4));
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE RunOnDrillDown@1450001();
    VAR
      GLEntry@1450001 : Record 17;
      VATEntry@1450002 : Record 254;
      VATEntries@1450003 : Page 315;
      GLEntries@1450004 : Page 20;
      BASCalcEntry1@1500000 : Record 11604;
    BEGIN
      CASE Type OF
        Type::"Account Totaling":
          BEGIN
            GLEntry.RESET;
            GLEntry.SETCURRENTKEY(
              "G/L Account No.",
              "BAS Adjustment",
              "VAT Bus. Posting Group",
              "VAT Prod. Posting Group",
              "Posting Date");
            GLEntry.SETFILTER("G/L Account No.","Account Totaling");
            GLEntry.SETRANGE("BAS Adjustment","BAS Adjustment");
            GLEntry.SETRANGE("VAT Bus. Posting Group","GST Bus. Posting Group");
            GLEntry.SETRANGE("VAT Prod. Posting Group","GST Prod. Posting Group");
            GLEntry.SETFILTER(
              "Posting Date",
              BASUpdate.GetPeriodFilter(PeriodSelection,BASCalcSheet.A3,BASCalcSheet.A4));
            IF BASCalcSheet.Exported THEN BEGIN
              GLEntry.SETRANGE("BAS Doc. No.",DocumentNo)
            END ELSE
              IF BASCalcSheet.Updated AND NOT BASCalcSheet.Exported THEN
                GLEntry.SETRANGE("BAS Doc. No.",'');
            IF ExcludeClosingEntries THEN BEGIN
              IF GLEntry.FIND('-') THEN BEGIN
                REPEAT
                  IF NOT BASCalcSheet.Exported THEN BEGIN
                    IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN
                      GLEntry.MARK(TRUE);
                  END ELSE BEGIN
                    BASCalcEntry1.RESET;
                    BASCalcEntry1.SETCURRENTKEY("Company Name",Type,"Entry No.","BAS Document No.","BAS Version");
                    BASCalcEntry1.SETRANGE("Company Name",COMPANYNAME);
                    BASCalcEntry1.SETRANGE(Type,BASCalcEntry1.Type::"G/L Entry");
                    BASCalcEntry1.SETRANGE("Entry No.",GLEntry."Entry No.");
                    BASCalcEntry1.SETRANGE("BAS Document No.",DocumentNo);
                    BASCalcEntry1.SETRANGE("BAS Version",VersionNo);
                    IF BASCalcEntry1.FINDFIRST THEN
                      IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN
                        GLEntry.MARK(TRUE);
                  END;
                UNTIL GLEntry.NEXT = 0;
                GLEntry.MARKEDONLY(TRUE);
              END;
            END;
            GLEntries.SETTABLEVIEW(GLEntry);
            GLEntries.LOOKUPMODE(FALSE);
            GLEntries.RUNMODAL;
          END;
        Type::"GST Entry Totaling":
          BEGIN
            VATEntry.RESET;
            VATEntry.SETCURRENTKEY(
              Type,
              Closed,
              "BAS Adjustment",
              "VAT Bus. Posting Group",
              "VAT Prod. Posting Group",
              "Posting Date",
              "BAS Doc. No.");
            VATEntry.SETRANGE(Type,"Gen. Posting Type");
            CASE Selection OF
              Selection::Open:
                VATEntry.SETRANGE(Closed,FALSE);
              Selection::Closed:
                VATEntry.SETRANGE(Closed,TRUE);
            END;
            VATEntry.SETRANGE("BAS Adjustment","BAS Adjustment");
            VATEntry.SETRANGE("VAT Bus. Posting Group","GST Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group","GST Prod. Posting Group");
            VATEntry.SETFILTER(
              "Posting Date",
              BASUpdate.GetPeriodFilter(PeriodSelection,BASCalcSheet.A3,BASCalcSheet.A4));
            IF BASCalcSheet.Updated AND NOT BASCalcSheet.Exported THEN
              VATEntry.SETRANGE("BAS Doc. No.",'')
            ELSE
              IF BASCalcSheet.Exported THEN
                VATEntry.SETRANGE("BAS Doc. No.",DocumentNo);
            IF VATEntry.FIND('-') THEN BEGIN
              REPEAT
                IF NOT BASCalcSheet.Exported THEN
                  VATEntry.MARK(TRUE)
                ELSE BEGIN
                  BASCalcEntry1.RESET;
                  BASCalcEntry1.SETCURRENTKEY("Company Name",Type,"Entry No.","BAS Document No.","BAS Version");
                  BASCalcEntry1.SETRANGE("Company Name",COMPANYNAME);
                  BASCalcEntry1.SETRANGE(Type,BASCalcEntry1.Type::"GST Entry");
                  BASCalcEntry1.SETRANGE("Entry No.",VATEntry."Entry No.");
                  BASCalcEntry1.SETRANGE("BAS Document No.",DocumentNo);
                  BASCalcEntry1.SETRANGE("BAS Version",VersionNo);
                  IF BASCalcEntry1.FINDFIRST THEN
                    VATEntry.MARK(TRUE);
                END;
              UNTIL VATEntry.NEXT = 0;
              VATEntry.MARKEDONLY(TRUE);
            END;
            VATEntries.SETTABLEVIEW(VATEntry);
            VATEntries.LOOKUPMODE(FALSE);
            VATEntries.RUNMODAL;
          END;
        Type::"Row Totaling",Type::Description:
          ERROR(Text000,FIELDCAPTION(Type),Type);
      END;
    END;

    BEGIN
    END.
  }
}

