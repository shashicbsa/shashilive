OBJECT Report 60069 PROPAC CR MEMEO MANUAL
{
  OBJECT-PROPERTIES
  {
    Date=04/23/15;
    Time=16:12:13;
    Modified=Yes;
    Version List=UPG13R2DEV;
  }
  PROPERTIES
  {
    CaptionML=[ENU=PROPAC CR MEMEO MANUAL;
               ENA=Import Gen from Excel];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  BusUnit@1000 : Record 220;
                BEGIN
                  ExcelBuf.LOCKTABLE;

                  ExcelBuf.OpenBook(ServerFileName,SheetName);
                  ExcelBuf.ReadSheet;
                  AnalyzeData2;
                END;

    OnPostReport=BEGIN
                   ExcelBuf.DELETEALL;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   Description := Text005 + FORMAT(WORKDATE);
                 END;

      OnQueryClosePage=VAR
                         FileMgt@1001 : Codeunit 419;
                       BEGIN
                         IF CloseAction = ACTION::OK THEN BEGIN
                           ServerFileName := FileMgt.UploadFile(Text006,ExcelFileExtensionTok);
                           IF ServerFileName = '' THEN
                             EXIT(FALSE);

                           SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                           IF SheetName = '' THEN
                             EXIT(FALSE);
                         END;
                       END;

    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify a budget name to import to.;ENA=You must specify a budget name to import to.';
      Text001@1001 : TextConst 'ENU=Do you want to create a %1 with the name %2?;ENA=Do you want to create a %1 with the name %2?';
      Text002@1002 : TextConst 'ENU=%1 %2 is blocked. You cannot import entries.;ENA=%1 %2 is blocked. You cannot import entries.';
      Text003@1003 : TextConst 'ENU=Are you sure that you want to %1 for the budget name %2?;ENA=Are you sure that you want to %1 for the budget name %2?';
      Text004@1004 : TextConst 'ENU=%1 table has been successfully updated with %2 entries.;ENA=%1 table has been successfully updated with %2 entries.';
      Text005@1005 : TextConst 'ENU="Imported from Excel ";ENA="Imported from Excel "';
      Text006@1006 : TextConst 'ENU=Import Excel File;ENA=Import Excel File';
      Text007@1007 : TextConst 'ENU=Analyzing Data...\\;ENA=Analysing Data...\\';
      Text008@1008 : TextConst 'ENU=You cannot specify more than 8 dimensions in your Excel worksheet.;ENA=You cannot specify more than 8 dimensions in your Excel worksheet.';
      Text009@1009 : TextConst 'ENU=G/L ACCOUNT NO;ENA=G/L ACCOUNT NO';
      Text010@1010 : TextConst 'ENU=G/L Account No.;ENA=G/L Account No.';
      Text011@1011 : TextConst 'ENU=The text G/L Account No. can only be specified once in the Excel worksheet.;ENA=The text G/L Account No. can only be specified once in the Excel worksheet.';
      Text012@1012 : TextConst 'ENU=The dimensions specified by worksheet must be placed in the lines before the table.;ENA=The dimensions specified by worksheet must be placed in the lines before the table.';
      Text013@1013 : TextConst 'ENU="Dimension ";ENA="Dimension "';
      Text014@1014 : TextConst 'ENU=Date;ENA=Date';
      Text015@1015 : TextConst 'ENU=Dimension 1;ENA=Dimension 1';
      Text016@1016 : TextConst 'ENU=Dimension 2;ENA=Dimension 2';
      Text017@1017 : TextConst 'ENU=Dimension 3;ENA=Dimension 3';
      Text018@1018 : TextConst 'ENU=Dimension 4;ENA=Dimension 4';
      Text019@1019 : TextConst 'ENU=Dimension 5;ENA=Dimension 5';
      Text020@1020 : TextConst 'ENU=Dimension 6;ENA=Dimension 6';
      Text021@1021 : TextConst 'ENU=Dimension 7;ENA=Dimension 7';
      Text022@1022 : TextConst 'ENU=Dimension 8;ENA=Dimension 8';
      Text023@1023 : TextConst 'ENU=You cannot import the same information twice.\;ENA=You cannot import the same information twice.\';
      Text024@1024 : TextConst 'ENU=The combination G/L Account No. - Dimensions - Date must be unique.;ENA=The combination G/L Account No. - Dimensions - Date must be unique.';
      Text025@1025 : TextConst 'ENU=G/L Accounts have not been found in the Excel worksheet.;ENA=G/L Accounts have not been found in the Excel worksheet.';
      Text026@1026 : TextConst 'ENU=Dates have not been recognized in the Excel worksheet.;ENA=Dates have not been recognised in the Excel worksheet.';
      ExcelBuf@1027 : Record 370;
      ServerFileName@1033 : Text;
      SheetName@1038 : Text[250];
      TotalRecNo@1044 : Integer;
      RecNo@1045 : Integer;
      Window@1046 : Dialog;
      Description@1047 : Text[50];
      ImportOption@1054 : 'Replace entries,Add entries';
      Text027@1055 : TextConst 'ENU=Replace entries,Add entries;ENA=Replace entries,Add entries';
      Text028@1056 : TextConst 'ENU=A filter has been used on the %1 when the budget was exported. When a filter on a dimension has been used, a column with the same dimension must be present in the worksheet imported. The column in the worksheet must specify the dimension value codes the program should use when importing the budget.;ENA=A filter has been used on the %1 when the budget was exported. When a filter on a dimension has been used, a column with the same dimension must be present in the worksheet imported. The column in the worksheet must specify the dimension value codes the program should use when importing the budget.';
      ExcelFileExtensionTok@1037 : TextConst '@@@={Locked};ENU=.xlsx;ENA=.xlsx';
      TextUP001@1102159001 : TextConst 'ENU=Template';
      TextUP002@1102159002 : TextConst 'ENU=Batch';
      TextUP003@1102159003 : TextConst 'ENU=Line';
      TextUP004@1102159004 : TextConst 'ENU=Description';
      TempTableForPropac@1102159008 : Record 50022;
      PropacShopCodeMapping@1102159005 : Record 60061;
      Cust@1102159006 : Record 18;

    LOCAL PROCEDURE FormatData@8(TextToFormat@1000 : Text[250]) : Text[250];
    VAR
      FormatInteger@1001 : Integer;
      FormatDecimal@1002 : Decimal;
      FormatDate@1003 : Date;
    BEGIN
      CASE TRUE OF
        EVALUATE(FormatInteger,TextToFormat):
          EXIT(FORMAT(FormatInteger));
        EVALUATE(FormatDecimal,TextToFormat):
          EXIT(FORMAT(FormatDecimal));
        EVALUATE(FormatDate,TextToFormat):
          EXIT(FORMAT(FormatDate));
        ELSE
          EXIT(TextToFormat);
      END;
    END;

    LOCAL PROCEDURE AnalyzeData2@1102159005();
    VAR
      TempExcelBuf@1000 : Record 370;
      HeaderRowNo@1003 : Integer;
      CountDim@1004 : Integer;
      TestDateTime@1005 : DateTime;
      OldRowNo@1006 : Integer;
      DocNo@1102159007 : Code[20];
    BEGIN
      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);
      TotalRecNo := ExcelBuf.COUNT;
      RecNo := 0;
        ExcelBuf.RESET;

       HeaderRowNo := 0;
      IF ExcelBuf.FIND('-') THEN BEGIN
        REPEAT

        IF (HeaderRowNo = 0) OR (HeaderRowNo <> ExcelBuf."Row No.") THEN BEGIN
         TempTableForPropac.INIT;

          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          TempExcelBuf.RESET;
          TempExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
          IF TempExcelBuf.FINDSET THEN
          REPEAT

              IF TempExcelBuf."Column No." = 1 THEN BEGIN
                EVALUATE(TempTableForPropac."Entry No.",TempExcelBuf."Cell Value as Text");
              END;

              IF TempExcelBuf."Column No." = 2 THEN BEGIN
                TempTableForPropac."Invoice No." :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 3 THEN BEGIN
                TempTableForPropac."Dealer Code" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 4 THEN BEGIN
                EVALUATE(TempTableForPropac."Transaction Date",TempExcelBuf."Cell Value as Text");
              END;

              IF TempExcelBuf."Column No." = 5 THEN BEGIN
                EVALUATE(TempTableForPropac."Invoice Date",TempExcelBuf."Cell Value as Text");
              END;

              IF TempExcelBuf."Column No." = 6 THEN BEGIN
                TempTableForPropac."Ext.Doc.No." :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 7 THEN BEGIN
                TempTableForPropac."Npwp No." :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 8 THEN BEGIN
                EVALUATE(TempTableForPropac."Due Date",TempExcelBuf."Cell Value as Text");
              END;

              IF TempExcelBuf."Column No." = 9 THEN BEGIN
                TempTableForPropac."Shop Code" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 10 THEN BEGIN
                TempTableForPropac."Model Code" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 11 THEN BEGIN
                TempTableForPropac."Currency Code" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 12 THEN BEGIN
                TempTableForPropac."Applied To Invoice No" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 13 THEN BEGIN
                TempTableForPropac."Account No." :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 14 THEN BEGIN
                EVALUATE(TempTableForPropac.Amount,TempExcelBuf."Cell Value as Text");
              END;

              IF TempExcelBuf."Column No." = 15 THEN BEGIN
                EVALUATE(TempTableForPropac.Quantity,TempExcelBuf."Cell Value as Text");
              END;

              IF TempExcelBuf."Column No." = 16 THEN BEGIN
                TempTableForPropac."VAT Buss. Posting Group" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 17 THEN BEGIN
                TempTableForPropac."VAT Prod. Posting Group" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 18 THEN BEGIN
                TempTableForPropac.Narration :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 19 THEN BEGIN
                TempTableForPropac."Customer Posting Group" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 20 THEN BEGIN
                TempTableForPropac."Gen. Prod. Posting Group" :=  TempExcelBuf."Cell Value as Text";
              END;

              IF TempExcelBuf."Column No." = 21 THEN BEGIN
                EVALUATE(TempTableForPropac."Document Type",TempExcelBuf."Cell Value as Text");
               TempTableForPropac.INSERT;
              //UPG13R2DEV.begin
                Cust.RESET;
                Cust.SETRANGE("No.",TempTableForPropac."Dealer Code");
                IF Cust.FINDFIRST THEN BEGIN
                PropacShopCodeMapping.RESET;
                PropacShopCodeMapping.SETRANGE("Area Code DDS",Cust."Area Code DDS");
                  IF PropacShopCodeMapping.FINDFIRST THEN BEGIN
                    TempTableForPropac."Shop Code" := PropacShopCodeMapping."Propac Shop Code";
                  END;
                END;
               TempTableForPropac.MODIFY;
              //UPG13R2DEV.end
              END;

              IF TempExcelBuf."Column No." = 22 THEN BEGIN
                TempTableForPropac."Old Vendor" :=  TempExcelBuf."Cell Value as Text";
                TempTableForPropac.MODIFY;
              END;

              IF TempExcelBuf."Column No." = 23 THEN BEGIN
                TempTableForPropac."Payment Term" :=  TempExcelBuf."Cell Value as Text";
                TempTableForPropac.MODIFY;

              END;
            UNTIL TempExcelBuf.NEXT =0;

          HeaderRowNo := ExcelBuf."Row No.";
        END;
        UNTIL ExcelBuf.NEXT = 0;
      END;

      Window.CLOSE;
      TempExcelBuf.RESET;
    END;

    BEGIN
    {
      //UPG13R2DEV
      Dataport "50047" in 5.0 Db is converted to Report.
    }
    END.
  }
  RDLDATA
  {
  }
}

