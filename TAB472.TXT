OBJECT Table 472 Job Queue Entry
{
  OBJECT-PROPERTIES
  {
    Date=01/21/14;
    Time=12:00:00;
    Version List=NAVW17.10.00.36035;
  }
  PROPERTIES
  {
    DataCaptionFields=Object Type to Run,Object ID to Run,Object Caption to Run;
    OnInsert=BEGIN
               SetDefaultValues;
             END;

    OnModify=BEGIN
               SetDefaultValues;
             END;

    OnDelete=BEGIN
               IF Status = Status::"In Process" THEN
                 ERROR(Text002,Status);
             END;

    CaptionML=[ENU=Job Queue Entry;
               ENA=Job Queue Entry];
    LookupPageID=Page672;
    DrillDownPageID=Page672;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=[ENU=ID;
                                                              ENA=ID] }
    { 2   ;   ;User ID             ;Text65        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ENA=User ID];
                                                   Editable=No }
    { 3   ;   ;XML                 ;BLOB          ;CaptionML=[ENU=XML;
                                                              ENA=XML] }
    { 4   ;   ;Last Ready State    ;DateTime      ;CaptionML=[ENU=Last Ready State;
                                                              ENA=Last Ready State];
                                                   Editable=No }
    { 5   ;   ;Expiration Date/Time;DateTime      ;CaptionML=[ENU=Expiration Date/Time;
                                                              ENA=Expiration Date/Time] }
    { 6   ;   ;Earliest Start Date/Time;DateTime  ;CaptionML=[ENU=Earliest Start Date/Time;
                                                              ENA=Earliest Start Date/Time] }
    { 7   ;   ;Object Type to Run  ;Option        ;InitValue=Report;
                                                   OnValidate=BEGIN
                                                                IF "Object Type to Run" <> xRec."Object Type to Run" THEN
                                                                  VALIDATE("Object ID to Run",0);
                                                              END;

                                                   CaptionML=[ENU=Object Type to Run;
                                                              ENA=Object Type to Run];
                                                   OptionCaptionML=[ENU=,,,Report,,Codeunit;
                                                                    ENA=,,,Report,,Codeunit];
                                                   OptionString=,,,Report,,Codeunit }
    { 8   ;   ;Object ID to Run    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FIELD(Object Type to Run));
                                                   OnValidate=VAR
                                                                Object@1000 : Record 2000000001;
                                                              BEGIN
                                                                IF "Object ID to Run" <> 0 THEN
                                                                  Object.GET("Object Type to Run",'',"Object ID to Run");
                                                                CALCFIELDS("Object Caption to Run");
                                                                IF Description = '' THEN
                                                                  Description := COPYSTR("Object Caption to Run",1,MAXSTRLEN(Description));
                                                              END;

                                                   OnLookup=VAR
                                                              Object@1001 : Record 2000000001;
                                                              Objects@1000 : Page 358;
                                                            BEGIN
                                                              IF Object.GET("Object Type to Run",'',"Object ID to Run") THEN;
                                                              Object.FILTERGROUP(2);
                                                              Object.SETRANGE(Type,"Object Type to Run");
                                                              Object.FILTERGROUP(0);
                                                              Objects.SETRECORD(Object);
                                                              Objects.SETTABLEVIEW(Object);
                                                              Objects.LOOKUPMODE := TRUE;
                                                              IF Objects.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                Objects.GETRECORD(Object);
                                                                VALIDATE("Object ID to Run",Object.ID);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Object ID to Run;
                                                              ENA=Object ID to Run] }
    { 9   ;   ;Object Caption to Run;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type to Run),
                                                                                                                Object ID=FIELD(Object ID to Run)));
                                                   CaptionML=[ENU=Object Caption to Run;
                                                              ENA=Object Caption to Run];
                                                   Editable=No }
    { 11  ;   ;Maximum No. of Attempts to Run;Integer;
                                                   CaptionML=[ENU=Maximum No. of Attempts to Run;
                                                              ENA=Maximum No. of Attempts to Run] }
    { 13  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENA=Status];
                                                   OptionCaptionML=[ENU=Ready,In Process,Error,On Hold,Finished;
                                                                    ENA=Ready,In Process,Error,On Hold,Finished];
                                                   OptionString=Ready,In Process,Error,On Hold,Finished;
                                                   Editable=No }
    { 14  ;   ;Priority            ;Integer       ;InitValue=1000;
                                                   CaptionML=[ENU=Priority;
                                                              ENA=Priority] }
    { 15  ;   ;Record ID to Process;RecordID      ;CaptionML=[ENU=Record ID to Process;
                                                              ENA=Record ID to Process] }
    { 16  ;   ;Parameter String    ;Text250       ;CaptionML=[ENU=Parameter String;
                                                              ENA=Parameter String] }
    { 17  ;   ;Recurring Job       ;Boolean       ;CaptionML=[ENU=Recurring Job;
                                                              ENA=Recurring Job] }
    { 18  ;   ;No. of Minutes between Runs;Integer;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=No. of Minutes between Runs;
                                                              ENA=No. of Minutes between Runs] }
    { 19  ;   ;Run on Mondays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Mondays;
                                                              ENA=Run on Mondays] }
    { 20  ;   ;Run on Tuesdays     ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Tuesdays;
                                                              ENA=Run on Tuesdays] }
    { 21  ;   ;Run on Wednesdays   ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Wednesdays;
                                                              ENA=Run on Wednesdays] }
    { 22  ;   ;Run on Thursdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Thursdays;
                                                              ENA=Run on Thursdays] }
    { 23  ;   ;Run on Fridays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Fridays;
                                                              ENA=Run on Fridays] }
    { 24  ;   ;Run on Saturdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Saturdays;
                                                              ENA=Run on Saturdays] }
    { 25  ;   ;Run on Sundays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Sundays;
                                                              ENA=Run on Sundays] }
    { 26  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ENA=Starting Time] }
    { 27  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ENA=Ending Time] }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENA=Description] }
    { 31  ;   ;Run in User Session ;Boolean       ;CaptionML=[ENU=Run in User Session;
                                                              ENA=Run in User Session];
                                                   Editable=No }
    { 32  ;   ;User Session ID     ;Integer       ;CaptionML=[ENU=User Session ID;
                                                              ENA=User Session ID] }
    { 33  ;   ;Job Queue Category Code;Code10     ;TableRelation="Job Queue Category";
                                                   CaptionML=[ENU=Job Queue Category Code;
                                                              ENA=Job Queue Category Code] }
    { 34  ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ENA=Error Message] }
    { 35  ;   ;Error Message 2     ;Text250       ;CaptionML=[ENU=Error Message 2;
                                                              ENA=Error Message 2] }
    { 36  ;   ;Error Message 3     ;Text250       ;CaptionML=[ENU=Error Message 3;
                                                              ENA=Error Message 3] }
    { 37  ;   ;Error Message 4     ;Text250       ;CaptionML=[ENU=Error Message 4;
                                                              ENA=Error Message 4] }
    { 40  ;   ;User Service Instance ID;Integer   ;CaptionML=[ENU=User Service Instance ID;
                                                              ENA=User Service Instance ID] }
    { 41  ;   ;User Session Started;DateTime      ;CaptionML=[ENU=User Session Started;
                                                              ENA=User Session Started];
                                                   Editable=No }
    { 42  ;   ;Timeout (sec.)      ;Integer       ;CaptionML=[ENU=Timeout (sec.);
                                                              ENA=Timeout (sec.)];
                                                   MinValue=0 }
    { 43  ;   ;Notify On Success   ;Boolean       ;CaptionML=[ENU=Notify On Success;
                                                              ENA=Notify On Success] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Priority,Last Ready State                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is no error message.;ENA=There is no error message.';
      Text002@1001 : TextConst '@@@=%1 is a status value, such as Success or Error.;ENU=You cannot delete an entry that has status %1.;ENA=You cannot delete an entry that has status %1.';
      Text003@1002 : TextConst '@@@="%1=a date, %2 = a user.";ENU=Scheduled for posting on %1 by %2.;ENA=Scheduled for posting on %1 by %2.';
      NoRecordErr@1003 : TextConst 'ENU=No record is associated with the job queue entry.;ENA=No record is associated with the job queue entry.';

    PROCEDURE GetErrorMessage@1() : Text[1000];
    BEGIN
      EXIT("Error Message" + "Error Message 2" + "Error Message 3" + "Error Message 4");
    END;

    PROCEDURE SetErrorMessage@2(ErrorText@1000 : Text[1000]);
    BEGIN
      "Error Message 2" := '';
      "Error Message 3" := '';
      "Error Message 4" := '';
      "Error Message" := COPYSTR(ErrorText,1,250);
      IF STRLEN(ErrorText) > 250 THEN
        "Error Message 2" := COPYSTR(ErrorText,251,250);
      IF STRLEN(ErrorText) > 500 THEN
        "Error Message 3" := COPYSTR(ErrorText,501,250);
      IF STRLEN(ErrorText) > 750 THEN
        "Error Message 4" := COPYSTR(ErrorText,751,250);
    END;

    PROCEDURE ShowErrorMessage@8();
    VAR
      e@1000 : Text[1000];
    BEGIN
      e := GetErrorMessage;
      IF e = '' THEN
        e := Text001;
      MESSAGE('%1',e);
    END;

    PROCEDURE SetError@7(ErrorText@1000 : Text[1000]);
    BEGIN
      LOCKTABLE;
      GET(ID);
      SetErrorMessage(ErrorText);
      ClearServiceValues;
      SetStatusValue(Status::Error);
      MODIFY;
    END;

    PROCEDURE SetStatus@3(NewStatus@1000 : Option);
    BEGIN
      LOCKTABLE;
      GET(ID);
      ClearServiceValues;
      SetStatusValue(NewStatus);
      MODIFY;
    END;

    PROCEDURE Cancel@4();
    BEGIN
      LOCKTABLE;
      GET(ID);
      DELETE(TRUE);
    END;

    PROCEDURE Restart@5();
    BEGIN
      TESTFIELD("User ID",USERID);
      LOCKTABLE;
      GET(ID);
      SetStatusValue(Status::Ready);
      ClearServiceValues;
      IF "Run in User Session" THEN
        STARTSESSION("User Session ID",CODEUNIT::"Job Queue User Session",COMPANYNAME,Rec);
      MODIFY;
    END;

    LOCAL PROCEDURE SetDefaultValues@6();
    BEGIN
      IF ISNULLGUID(ID) THEN
        ID := CREATEGUID;
      IF ("User ID" = '') OR ("Object Type to Run" <> xRec."Object Type to Run") OR ("Object ID to Run" <> xRec."Object ID to Run") OR
         ("Parameter String" <> xRec."Parameter String")
      THEN
        "User ID" := USERID;
      IF "Last Ready State" = 0DT THEN
        "Last Ready State" := CURRENTDATETIME;
    END;

    PROCEDURE ClearServiceValues@9();
    BEGIN
      "User Session Started" := 0DT;
      "User Service Instance ID" := 0;
      "User Session ID" := 0;
    END;

    PROCEDURE CleanupAfterExecution@11();
    BEGIN
      IF "Notify On Success" THEN
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Send Notification",Rec);

      IF "Recurring Job" THEN BEGIN
        SetStatusValue(Status::Ready);
        ClearServiceValues;
        MODIFY;
      END ELSE
        DELETE;
    END;

    PROCEDURE HandleExecutionError@12();
    VAR
      JobQueueSendNotification@1000 : Codeunit 454;
    BEGIN
      SetStatusValue(Status::Error);
      MODIFY;
      COMMIT;
      IF JobQueueSendNotification.RUN(Rec) THEN;
    END;

    PROCEDURE GetTimeout@10() : Integer;
    BEGIN
      IF "Timeout (sec.)" > 0 THEN
        EXIT("Timeout (sec.)");
      EXIT(1000000000);
    END;

    LOCAL PROCEDURE SetRecurringField@13();
    BEGIN
      "Recurring Job" :=
        "Run on Mondays" OR
        "Run on Tuesdays" OR "Run on Wednesdays" OR "Run on Thursdays" OR "Run on Fridays" OR "Run on Saturdays" OR "Run on Sundays";
    END;

    LOCAL PROCEDURE SetStatusValue@14(NewStatus@1000 : Option);
    VAR
      JobQueueDispatcher@1001 : Codeunit 448;
    BEGIN
      IF (Status <> Status::Ready) AND (NewStatus = Status::Ready) THEN BEGIN
        "Last Ready State" := CURRENTDATETIME;
        "Earliest Start Date/Time" := JobQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
      END;

      Status := NewStatus;
    END;

    PROCEDURE ShowStatusMsg@15(JQID@1000 : GUID);
    VAR
      JobQueueEntry@1001 : Record 472;
    BEGIN
      IF JobQueueEntry.GET(JQID) THEN
        CASE JobQueueEntry.Status OF
          JobQueueEntry.Status::Error:
            MESSAGE(JobQueueEntry.GetErrorMessage);
          JobQueueEntry.Status::"In Process":
            MESSAGE(FORMAT(JobQueueEntry.Status::"In Process"));
          ELSE
            MESSAGE(Text003,JobQueueEntry."User Session Started",JobQueueEntry."User ID");
        END;
    END;

    PROCEDURE LookupRecordToProcess@16();
    VAR
      RecRef@1002 : RecordRef;
      RecVariant@1001 : Variant;
    BEGIN
      IF ISNULLGUID(ID) THEN
        EXIT;
      IF FORMAT("Record ID to Process") = '' THEN
        ERROR(NoRecordErr);
      RecRef.GET("Record ID to Process");
      RecRef.SETRECFILTER;
      RecVariant := RecRef;
      PAGE.RUN(0,RecVariant);
    END;

    BEGIN
    END.
  }
}

