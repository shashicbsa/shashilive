OBJECT Report 492 Copy Purchase Document
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00;
    Version List=NAVW17.10,NAVAPAC7.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Purchase Document;
               ENA=Copy Purchase Document];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  PurchSetup.GET;
                  CopyDocMgt.SetProperties(
                    IncludeHeader,RecalculateLines,FALSE,FALSE,FALSE,PurchSetup."Exact Cost Reversing Mandatory",FALSE);
                  CopyDocMgt.CopyPurchDoc(DocType,DocNo,PurchHeader);

                  WITH PurchHeader DO BEGIN
                    IF ReplacePostDate OR ReplaceDocDate THEN BEGIN
                      IF ReplacePostDate THEN
                        VALIDATE("Posting Date",PostingDate);
                      IF ReplaceDocDate THEN
                        VALIDATE("Document Date",PostingDate);
                      MODIFY;
                    END;
                    GLSetup.GET;
                    IF ("Document Type" = "Document Type"::"Credit Memo") AND
                       (GLSetup.GSTEnabled(FromPurchHeader."Document Date"))
                    THEN BEGIN
                      CASE DocType OF
                        DocType::Quote,DocType::"Blanket Order",DocType::Order,DocType::Invoice,DocType::"Credit Memo",DocType::"Return Order":
                          BEGIN
                            "Adjustment Applies-to" := FromPurchHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromPurchHeader."Document Date");
                          END;
                        DocType::"Posted Receipt":
                          BEGIN
                            "Adjustment Applies-to" := FromPurchRcptHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromPurchRcptHeader."Document Date");
                          END;
                        DocType::"Posted Invoice":
                          BEGIN
                            "Adjustment Applies-to" := FromPurchInvHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromPurchInvHeader."Document Date");
                          END;
                        DocType::"Posted Credit Memo":
                          BEGIN
                            "Adjustment Applies-to" := FromPurchCrMemoHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromPurchCrMemoHeader."Document Date");
                          END;
                        DocType::"Posted Return Shipment":
                          BEGIN
                            "Adjustment Applies-to" := FromReturnShptHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromReturnShptHeader."Document Date");
                          END;
                      END;
                      MODIFY;
                    END;
                  END;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF DocNo <> '' THEN BEGIN
                     CASE DocType OF
                       DocType::Quote:
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::Quote,DocNo) THEN;
                       DocType::"Blanket Order":
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::"Blanket Order",DocNo) THEN;
                       DocType::Order:
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::Order,DocNo) THEN;
                       DocType::Invoice:
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::Invoice,DocNo) THEN;
                       DocType::"Return Order":
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::"Return Order",DocNo) THEN;
                       DocType::"Credit Memo":
                         IF FromPurchHeader.GET(FromPurchHeader."Document Type"::"Credit Memo",DocNo) THEN;
                       DocType::"Posted Receipt":
                         IF FromPurchRcptHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
                       DocType::"Posted Invoice":
                         IF FromPurchInvHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
                       DocType::"Posted Return Shipment":
                         IF FromReturnShptHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
                       DocType::"Posted Credit Memo":
                         IF FromPurchCrMemoHeader.GET(DocNo) THEN
                           FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
                     END;
                     IF FromPurchHeader."No." = '' THEN
                       DocNo := '';
                   END;
                   ValidateDocNo;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENA=Options] }

      { 3   ;2   ;Field     ;
                  Name=DocumentType;
                  CaptionML=[ENU=Document Type;
                             ENA=Document Type];
                  OptionCaptionML=[ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo;
                                   ENA=Quote,Blanket Order,Order,Invoice,Return Order,CR/Adj Note,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted CR/Adj Note];
                  SourceExpr=DocType;
                  OnValidate=BEGIN
                               DocNo := '';
                               ValidateDocNo;
                             END;
                              }

      { 8   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=[ENU=Document No.;
                             ENA=Document No.];
                  SourceExpr=DocNo;
                  OnValidate=BEGIN
                               ValidateDocNo;
                             END;

                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  Name=BuyfromVendorNo;
                  CaptionML=[ENU=Buy-from Vendor No.;
                             ENA=Buy-from Vendor No.];
                  SourceExpr=FromPurchHeader."Buy-from Vendor No.";
                  Editable=FALSE }

      { 7   ;2   ;Field     ;
                  Name=BuyfromVendorName;
                  CaptionML=[ENU=Buy-from Vendor Name;
                             ENA=Buy-from Vendor Name];
                  SourceExpr=FromPurchHeader."Buy-from Vendor Name";
                  Editable=FALSE }

      { 1   ;2   ;Field     ;
                  Name=IncludeHeader_Options;
                  CaptionML=[ENU=Include Header;
                             ENA=Include Header];
                  SourceExpr=IncludeHeader;
                  OnValidate=BEGIN
                               ValidateIncludeHeader;
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=RecalculateLines;
                  CaptionML=[ENU=Recalculate Lines;
                             ENA=Recalculate Lines];
                  SourceExpr=RecalculateLines;
                  OnValidate=BEGIN
                               IF (DocType = DocType::"Posted Receipt") OR (DocType = DocType::"Posted Return Shipment") THEN
                                 RecalculateLines := TRUE;
                             END;
                              }

      { 1500000;2;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             ENA=Posting Date];
                  SourceExpr=PostingDate }

      { 1500001;2;Field     ;
                  Name=ReplacePostingDate;
                  CaptionML=[ENU=Replace Posting Date;
                             ENA=Replace Posting Date];
                  SourceExpr=ReplacePostDate;
                  OnValidate=BEGIN
                               IF ReplacePostDate THEN
                                 ReplaceDocDate := ReplacePostDate;
                             END;
                              }

      { 1500002;2;Field     ;
                  Name=ReplaceDocumentDate;
                  CaptionML=[ENU=Replace Document Date;
                             ENA=Replace Document Date];
                  SourceExpr=ReplaceDocDate;
                  OnValidate=BEGIN
                               IF ReplacePostDate THEN
                                 ReplaceDocDate := ReplacePostDate;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PurchHeader@1007 : Record 38;
      FromPurchHeader@1010 : Record 38;
      FromPurchRcptHeader@1012 : Record 120;
      FromPurchInvHeader@1014 : Record 122;
      FromReturnShptHeader@1008 : Record 6650;
      FromPurchCrMemoHeader@1016 : Record 124;
      PurchSetup@1003 : Record 312;
      GLSetup@1500005 : Record 98;
      PostCodeCheck@1500004 : Codeunit 28000;
      BASManagement@1500003 : Codeunit 11601;
      CopyDocMgt@1033 : Codeunit 6620;
      DocType@1024 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      DocNo@1025 : Code[20];
      IncludeHeader@1026 : Boolean;
      RecalculateLines@1027 : Boolean;
      Text000@1002 : TextConst 'ENU=The price information may not be reversed correctly, if you copy a %1. If possible copy a %2 instead or use %3 functionality.;ENA=The price information may not be reversed correctly, if you copy a %1. If possible copy a %2 instead or use %3 functionality.';
      Text001@1001 : TextConst 'ENU=Undo Receipt;ENA=Undo Receipt';
      Text002@1000 : TextConst 'ENU=Undo Return Shipment;ENA=Undo Return Shipment';
      Text003@1004 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo;ENA=Quote,Blanket Order,Order,Invoice,Return Order,CR/Adj Note,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted CR/Adj Note';
      ReplacePostDate@1500002 : Boolean;
      ReplaceDocDate@1500001 : Boolean;
      PostingDate@1500000 : Date;

    PROCEDURE SetPurchHeader@2(VAR NewPurchHeader@1000 : Record 38);
    BEGIN
      NewPurchHeader.TESTFIELD("No.");
      PurchHeader := NewPurchHeader;
    END;

    LOCAL PROCEDURE ValidateDocNo@1();
    VAR
      DocType2@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      IF DocNo = '' THEN
        FromPurchHeader.INIT
      ELSE
        IF DocNo <> FromPurchHeader."No." THEN BEGIN
          FromPurchHeader.INIT;
          CASE DocType OF
            DocType::Quote,
            DocType::"Blanket Order",
            DocType::Order,
            DocType::Invoice,
            DocType::"Return Order",
            DocType::"Credit Memo":
              FromPurchHeader.GET(CopyDocMgt.PurchHeaderDocType(DocType),DocNo);
            DocType::"Posted Receipt":
              BEGIN
                FromPurchRcptHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
                IF PurchHeader."Document Type" IN
                   [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
                THEN BEGIN
                  DocType2 := DocType2::"Posted Invoice";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text001);
                END;
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Purch. Rcpt. Header",FromPurchRcptHeader.GETPOSITION,
                  DATABASE::"Purchase Header",FromPurchHeader.GETPOSITION);
              END;
            DocType::"Posted Invoice":
              BEGIN
                FromPurchInvHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Purch. Inv. Header",FromPurchInvHeader.GETPOSITION,
                  DATABASE::"Purchase Header",FromPurchHeader.GETPOSITION);
              END;
            DocType::"Posted Return Shipment":
              BEGIN
                FromReturnShptHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
                IF PurchHeader."Document Type" IN
                   [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice]
                THEN BEGIN
                  DocType2 := DocType2::"Posted Credit Memo";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text002);
                END;
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Return Shipment Header",FromReturnShptHeader.GETPOSITION,
                  DATABASE::"Purchase Header",FromPurchHeader.GETPOSITION);
              END;
            DocType::"Posted Credit Memo":
              BEGIN
                FromPurchCrMemoHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Purch. Cr. Memo Hdr.",FromPurchCrMemoHeader.GETPOSITION,
                  DATABASE::"Purchase Header",FromPurchHeader.GETPOSITION);
              END;
          END;
        END;
      FromPurchHeader."No." := '';

      IncludeHeader :=
        (DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) AND
        ((DocType = DocType::"Posted Credit Memo") <>
         (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo")) AND
        (PurchHeader."Buy-from Vendor No." IN [FromPurchHeader."Buy-from Vendor No.",'']);
      ValidateIncludeHeader;
    END;

    LOCAL PROCEDURE LookupDocNo@3();
    BEGIN
      CASE DocType OF
        DocType::Quote,
        DocType::"Blanket Order",
        DocType::Order,
        DocType::Invoice,
        DocType::"Return Order",
        DocType::"Credit Memo":
          BEGIN
            FromPurchHeader.FILTERGROUP := 0;
            FromPurchHeader.SETRANGE("Document Type",CopyDocMgt.PurchHeaderDocType(DocType));
            IF PurchHeader."Document Type" = CopyDocMgt.PurchHeaderDocType(DocType) THEN
              FromPurchHeader.SETFILTER("No.",'<>%1',PurchHeader."No.");
            FromPurchHeader.FILTERGROUP := 2;
            FromPurchHeader."Document Type" := CopyDocMgt.PurchHeaderDocType(DocType);
            FromPurchHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.") THEN BEGIN
                FromPurchHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromPurchHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchHeader."No.";
          END;
        DocType::"Posted Receipt":
          BEGIN
            FromPurchRcptHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchRcptHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromPurchRcptHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchRcptHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromPurchRcptHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchRcptHeader."No.";
          END;
        DocType::"Posted Invoice":
          BEGIN
            FromPurchInvHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchInvHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromPurchInvHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchInvHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromPurchInvHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchInvHeader."No.";
          END;
        DocType::"Posted Return Shipment":
          BEGIN
            FromReturnShptHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromReturnShptHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromReturnShptHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromReturnShptHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromReturnShptHeader) = ACTION::LookupOK THEN
              DocNo := FromReturnShptHeader."No.";
          END;
        DocType::"Posted Credit Memo":
          BEGIN
            FromPurchCrMemoHeader."No." := DocNo;
            IF (DocNo = '') AND (PurchHeader."Buy-from Vendor No." <> '') THEN
              IF FromPurchCrMemoHeader.SETCURRENTKEY("Buy-from Vendor No.") THEN BEGIN
                FromPurchCrMemoHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                IF FromPurchCrMemoHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromPurchCrMemoHeader) = ACTION::LookupOK THEN
              DocNo := FromPurchCrMemoHeader."No.";
          END;
      END;
      ValidateDocNo;
    END;

    LOCAL PROCEDURE ValidateIncludeHeader@4();
    BEGIN
      RecalculateLines :=
        (DocType IN [DocType::"Posted Receipt",DocType::"Posted Return Shipment"]) OR NOT IncludeHeader;
    END;

    PROCEDURE InitializeRequest@5(NewDocType@1001 : Option;NewDocNo@1000 : Code[20];NewIncludeHeader@1002 : Boolean;NewRecalcLines@1003 : Boolean);
    BEGIN
      DocType := NewDocType;
      DocNo := NewDocNo;
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalcLines;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

