OBJECT Table 254 VAT Entry
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00;
    Version List=NAVW17.10,NAVAPAC7.10,NTT,NNPWP,TCH,Mel1.0,UPG09R2,UPG13,UPG13R2;
  }
  PROPERTIES
  {
    CaptionML=[ENU=VAT Entry;
               ENA=GST Entry];
    LookupPageID=Page315;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENA=Entry No.];
                                                   Editable=No }
    { 2   ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENA=Gen. Bus. Posting Group];
                                                   Editable=No }
    { 3   ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENA=Gen. Prod. Posting Group];
                                                   Editable=No }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENA=Posting Date];
                                                   Editable=No }
    { 5   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENA=Document No.];
                                                   Editable=No }
    { 6   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENA=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENA=" ,Payment,Invoice,CR/Adj Note,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund];
                                                   Editable=No }
    { 7   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::Settlement THEN
                                                                  ERROR(Text000,FIELDCAPTION(Type),Type);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENA=Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ENA=" ,Purchase,Sale,Settlement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement];
                                                   Editable=No }
    { 8   ;   ;Base                ;Decimal       ;CaptionML=[ENU=Base;
                                                              ENA=Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 9   ;   ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENA=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 10  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENA=GST Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENA=Normal GST,Reverse Charge GST,Full GST,US Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 12  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Type=CONST(Purchase)) Vendor
                                                                 ELSE IF (Type=CONST(Sale)) Customer;
                                                   OnValidate=BEGIN
                                                                VALIDATE(Type);
                                                                IF "Bill-to/Pay-to No." = '' THEN BEGIN
                                                                  "Country/Region Code" := '';
                                                                  "VAT Registration No." := '';
                                                                END ELSE
                                                                  CASE Type OF
                                                                    Type::Purchase:
                                                                      BEGIN
                                                                        Vend.GET("Bill-to/Pay-to No.");
                                                                        "Country/Region Code" := Vend."Country/Region Code";
                                                                        "VAT Registration No." := Vend."VAT Registration No.";
                                                                      END;
                                                                    Type::Sale:
                                                                      BEGIN
                                                                        Cust.GET("Bill-to/Pay-to No.");
                                                                        "Country/Region Code" := Cust."Country/Region Code";
                                                                        "VAT Registration No." := Cust."VAT Registration No.";
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bill-to/Pay-to No.;
                                                              ENA=Bill-to/Pay-to No.] }
    { 13  ;   ;EU 3-Party Trade    ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Type);
                                                              END;

                                                   CaptionML=[ENU=EU 3-Party Trade;
                                                              ENA=EU 3-Party Trade] }
    { 14  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ENA=User ID];
                                                   Editable=No }
    { 15  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENA=Source Code];
                                                   Editable=No }
    { 16  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENA=Reason Code];
                                                   Editable=No }
    { 17  ;   ;Closed by Entry No. ;Integer       ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Closed by Entry No.;
                                                              ENA=Closed by Entry No.];
                                                   Editable=No }
    { 18  ;   ;Closed              ;Boolean       ;CaptionML=[ENU=Closed;
                                                              ENA=Closed];
                                                   Editable=No }
    { 19  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE(Type);
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENA=Country/Region Code] }
    { 20  ;   ;Internal Ref. No.   ;Text30        ;CaptionML=[ENU=Internal Ref. No.;
                                                              ENA=Internal Ref. No.];
                                                   Editable=No }
    { 21  ;   ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              ENA=Transaction No.];
                                                   Editable=No }
    { 22  ;   ;Unrealized Amount   ;Decimal       ;CaptionML=[ENU=Unrealized Amount;
                                                              ENA=Unrealised Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 23  ;   ;Unrealized Base     ;Decimal       ;CaptionML=[ENU=Unrealized Base;
                                                              ENA=Unrealised Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 24  ;   ;Remaining Unrealized Amount;Decimal;CaptionML=[ENU=Remaining Unrealized Amount;
                                                              ENA=Remaining Unrealised Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 25  ;   ;Remaining Unrealized Base;Decimal  ;CaptionML=[ENU=Remaining Unrealized Base;
                                                              ENA=Remaining Unrealised Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 26  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENA=External Document No.];
                                                   Editable=No }
    { 28  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENA=No. Series];
                                                   Editable=No }
    { 29  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENA=US Tax Area Code];
                                                   Editable=No }
    { 30  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENA=US Tax Liable];
                                                   Editable=No }
    { 31  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENA=US Tax Group Code];
                                                   Editable=No }
    { 32  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              ENA=Use US Tax];
                                                   Editable=No }
    { 33  ;   ;Tax Jurisdiction Code;Code10       ;TableRelation="Tax Jurisdiction";
                                                   CaptionML=[ENU=Tax Jurisdiction Code;
                                                              ENA=US Tax Jurisdiction Code];
                                                   Editable=No }
    { 34  ;   ;Tax Group Used      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Used;
                                                              ENA=US Tax Group Used];
                                                   Editable=No }
    { 35  ;   ;Tax Type            ;Option        ;CaptionML=[ENU=Tax Type;
                                                              ENA=US Tax Type];
                                                   OptionCaptionML=[ENU=Sales Tax,Excise Tax;
                                                                    ENA=US Sales Tax,Excise US Tax];
                                                   OptionString=Sales Tax,Excise Tax;
                                                   Editable=No }
    { 36  ;   ;Tax on Tax          ;Boolean       ;CaptionML=[ENU=Tax on Tax;
                                                              ENA=Tax on US Tax];
                                                   Editable=No }
    { 37  ;   ;Sales Tax Connection No.;Integer   ;CaptionML=[ENU=Sales Tax Connection No.;
                                                              ENA=US Sales Tax Connection No.];
                                                   Editable=No }
    { 38  ;   ;Unrealized VAT Entry No.;Integer   ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Unrealized VAT Entry No.;
                                                              ENA=Unrealised GST Entry No.];
                                                   Editable=No }
    { 39  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENA=GST Bus. Posting Group];
                                                   Editable=No }
    { 40  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENA=GST Prod. Posting Group];
                                                   Editable=No }
    { 43  ;   ;Additional-Currency Amount;Decimal ;CaptionML=[ENU=Additional-Currency Amount;
                                                              ENA=Additional-Currency Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 44  ;   ;Additional-Currency Base;Decimal   ;CaptionML=[ENU=Additional-Currency Base;
                                                              ENA=Additional-Currency Base];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 45  ;   ;Add.-Currency Unrealized Amt.;Decimal;
                                                   CaptionML=[ENU=Add.-Currency Unrealized Amt.;
                                                              ENA=Add.-Currency Unrealised Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 46  ;   ;Add.-Currency Unrealized Base;Decimal;
                                                   CaptionML=[ENU=Add.-Currency Unrealized Base;
                                                              ENA=Add.-Currency Unrealised Base];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 48  ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENA=GST Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 49  ;   ;Add.-Curr. Rem. Unreal. Amount;Decimal;
                                                   CaptionML=[ENU=Add.-Curr. Rem. Unreal. Amount;
                                                              ENA=Add.-Curr. Rem. Unreal. Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 50  ;   ;Add.-Curr. Rem. Unreal. Base;Decimal;
                                                   CaptionML=[ENU=Add.-Curr. Rem. Unreal. Base;
                                                              ENA=Add.-Curr. Rem. Unreal. Base];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 51  ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENA=GST Difference];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 52  ;   ;Add.-Curr. VAT Difference;Decimal  ;CaptionML=[ENU=Add.-Curr. VAT Difference;
                                                              ENA=Add.-Curr. GST Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 53  ;   ;Ship-to/Order Address Code;Code20  ;TableRelation=IF (Type=CONST(Purchase)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Type=CONST(Sale)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=[ENU=Ship-to/Order Address Code;
                                                              ENA=Ship-to/Order Address Code];
                                                   Description=YIMM }
    { 54  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENA=Document Date];
                                                   Editable=No }
    { 55  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENA=Exemption Certificate No.] }
    { 56  ;   ;Reversed            ;Boolean       ;CaptionML=[ENU=Reversed;
                                                              ENA=Reversed] }
    { 57  ;   ;Reversed by Entry No.;Integer      ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Reversed by Entry No.;
                                                              ENA=Reversed by Entry No.];
                                                   BlankZero=Yes }
    { 58  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="VAT Entry";
                                                   CaptionML=[ENU=Reversed Entry No.;
                                                              ENA=Reversed Entry No.];
                                                   BlankZero=Yes }
    { 59  ;   ;EU Service          ;Boolean       ;CaptionML=[ENU=EU Service;
                                                              ENA=EU Service];
                                                   Editable=No }
    { 11624;  ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ENA=Adjustment] }
    { 11625;  ;BAS Adjustment      ;Boolean       ;CaptionML=[ENU=BAS Adjustment;
                                                              ENA=BAS Adjustment] }
    { 11626;  ;BAS Doc. No.        ;Code11        ;TableRelation="BAS Calculation Sheet".A1;
                                                   CaptionML=[ENU=BAS Doc. No.;
                                                              ENA=BAS Doc. No.] }
    { 11627;  ;BAS Version         ;Integer       ;TableRelation="BAS Calculation Sheet"."BAS Version" WHERE (A1=FIELD(BAS Doc. No.));
                                                   CaptionML=[ENU=BAS Version;
                                                              ENA=BAS Version] }
    { 11628;  ;Consol. BAS Doc. No.;Code11        ;CaptionML=[ENU=Consol. BAS Doc. No.;
                                                              ENA=Consol. BAS Doc. No.] }
    { 11629;  ;Consol. Version No. ;Integer       ;CaptionML=[ENU=Consol. Version No.;
                                                              ENA=Consol. Version No.] }
    { 28070;  ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENA=Currency Code];
                                                   Editable=No }
    { 28071;  ;Sett. Unrealised Amount (FCY);Decimal;
                                                   CaptionML=[ENU=Sett. Unrealised Amount (FCY);
                                                              ENA=Sett. Unrealised Amount (FCY)];
                                                   Editable=No }
    { 28072;  ;Sett. Unrealised Base (FCY);Decimal;CaptionML=[ENU=Sett. Unrealised Base (FCY);
                                                              ENA=Sett. Unrealised Base (FCY)];
                                                   Editable=No }
    { 28073;  ;Sett. Unrealized Amount;Decimal    ;CaptionML=[ENU=Sett. Unrealized Amount;
                                                              ENA=Sett. Unrealised Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28074;  ;Sett. Unrealized Base;Decimal      ;CaptionML=[ENU=Sett. Unrealized Base;
                                                              ENA=Sett. Unrealised Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28075;  ;Sett. Rem. Unrealized Amount;Decimal;
                                                   CaptionML=[ENU=Sett. Rem. Unrealized Amount;
                                                              ENA=Sett. Rem. Unrealised Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28076;  ;Sett. Rem. Unrealized Base;Decimal ;CaptionML=[ENU=Sett. Rem. Unrealized Base;
                                                              ENA=Sett. Rem. Unrealised Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28077;  ;Settlement Adjustment;Boolean      ;CaptionML=[ENU=Settlement Adjustment;
                                                              ENA=Settlement Adjustment];
                                                   Editable=No }
    { 28078;  ;Sett. Payment Entry No.;Integer    ;CaptionML=[ENU=Sett. Payment Entry No.;
                                                              ENA=Sett. Payment Entry No.];
                                                   Editable=No }
    { 50001;  ;Kwitansi No.        ;Code20        ;Description=YIMMNTT }
    { 50002;  ;Commercial Invoice No.;Code20      ;Description=YIMMNTT }
    { 50003;  ;Commercial Invoice Date;Date       ;Description=YIMMNTT }
    { 50004;  ;Tax Invoice No.     ;Code30        ;Description=YIMMNTT,YIMMNTCH }
    { 50005;  ;Tax Invoice Date    ;Date          ;Description=YIMMNTT }
    { 50006;  ;Narration           ;Text250       ;Description=YIMMNTT }
    { 50008;  ;Order Address Code  ;Code20        ;OnValidate=VAR
                                                                PayToVend@1000 : Record 23;
                                                              BEGIN
                                                                {IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";
                                                                  "VAT Country/Region Code" := OrderAddr."Country/Region Code";
                                                                  PostCodeCheck.CopyAddressID(
                                                                    DATABASE::"Order Address",OrderAddr.GETPOSITION,0,DATABASE::"Purchase Header",Rec.GETPOSITION,5);

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := OrderAddr.Name;
                                                                    "Ship-to Name 2" := OrderAddr."Name 2";
                                                                    "Ship-to Address" := OrderAddr.Address;
                                                                    "Ship-to Address 2" := OrderAddr."Address 2";
                                                                    "Ship-to City" := OrderAddr.City;
                                                                    "Ship-to Post Code" := OrderAddr."Post Code";
                                                                    "Ship-to County" := OrderAddr.County;
                                                                    "Ship-to Country/Region Code" := OrderAddr."Country/Region Code";
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                  END

                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  "Buy-from Address" := Vend.Address;
                                                                  "Buy-from Address 2" := Vend."Address 2";
                                                                  "Buy-from City" := Vend.City;
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                  "Buy-from Post Code" := Vend."Post Code";
                                                                  "Buy-from County" := Vend.County;
                                                                  "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  PostCodeCheck.CopyAddressID(
                                                                    DATABASE::Vendor,Vend.GETPOSITION,0,DATABASE::"Purchase Header",Rec.GETPOSITION,5);

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    "Ship-to Address" := Vend.Address;
                                                                    "Ship-to Address 2" := Vend."Address 2";
                                                                    "Ship-to City" := Vend.City;
                                                                    "Ship-to Post Code" := Vend."Post Code";
                                                                    "Ship-to County" := Vend.County;
                                                                    "Ship-to Country/Region Code" := Vend."Country/Region Code";
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END

                                                                END;
                                                                 }
                                                              END;

                                                   CaptionML=ENU=Order Address Code;
                                                   Description=YIMMNNPWP }
    { 50015;  ;Original Tax Inv. No.;Code30       ;Description=FIELD ADDED FOR CAPTURING THE ORIGINAL TAX INVOICE NO. }
    { 52000;  ;Quote No ( Project No.);Code20     ;Description=For Melco to Capture the Quote No. }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Type,Closed,VAT Bus. Posting Group,VAT Prod. Posting Group,Posting Date;
                                                   SumIndexFields=Base,Amount,Additional-Currency Base,Additional-Currency Amount,Remaining Unrealized Amount,Remaining Unrealized Base,Add.-Curr. Rem. Unreal. Amount,Add.-Curr. Rem. Unreal. Base;
                                                   KeyGroups=VAT }
    {    ;Type,Closed,Tax Jurisdiction Code,Use Tax,Posting Date;
                                                   SumIndexFields=Base,Amount,Unrealized Amount,Unrealized Base,Remaining Unrealized Amount;
                                                   KeyGroups=SalesTax }
    {    ;Type,Country/Region Code,VAT Registration No.,VAT Bus. Posting Group,VAT Prod. Posting Group,Posting Date;
                                                   SumIndexFields=Base,Additional-Currency Base;
                                                   KeyGroups=VIES_EC }
    {    ;Document No.,Posting Date                }
    {    ;Transaction No.                          }
    {    ;Tax Jurisdiction Code,Tax Group Used,Tax Type,Use Tax,Posting Date;
                                                   KeyGroups=SalesTax }
    {    ;Type,Bill-to/Pay-to No.,Transaction No. ;KeyGroups=VATUnreal;
                                                   MaintainSQLIndex=No }
    {    ;BAS Doc. No.,BAS Version                 }
    {    ;Type,Closed,BAS Adjustment,VAT Bus. Posting Group,VAT Prod. Posting Group,Posting Date,BAS Doc. No.;
                                                   SumIndexFields=Amount,Base,Unrealized Amount,Unrealized Base }
    {    ;Document Type,Type,Currency Code,Posting Date,Closed }
    {    ;Bill-to/Pay-to No.                      ;SumIndexFields=Amount,Base,Unrealized Amount,Unrealized Base }
    {    ;Sett. Payment Entry No.                 ;SumIndexFields=Amount,Base }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Posting Date,Document Type,Document No.,Posting Date }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change the contents of this field when %1 is %2.;ENA=You cannot change the contents of this field when %1 is %2.';
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
      GLSetup@1003 : Record 98;
      GLSetupRead@1004 : Boolean;

    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE GetUnRealizedVATPart@2(SettledAmount@1003 : Decimal;Paid@1005 : Decimal;Full@1001 : Decimal;TotalUnrealVATAmountFirst@1006 : Decimal;TotalUnrealVATAmountLast@1007 : Decimal) : Decimal;
    VAR
      VatPostingSetup@1450000 : Record 325;
      TaxJurisdiction@1450001 : Record 320;
    BEGIN
      IF (Type <> 0) AND
         (Amount = 0) AND
         (Base = 0)
      THEN BEGIN
        IF ABS(Paid) = ABS(Full) THEN
          EXIT(1);
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            VatPostingSetup.GET(
              "VAT Bus. Posting Group","VAT Prod. Posting Group");
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              VatPostingSetup."Unrealized VAT Type" := TaxJurisdiction."Unrealized VAT Type";
            END;
        END;
        IF (VatPostingSetup."Unrealized VAT Type" > 0) AND
           (("Remaining Unrealized Amount" <> 0) OR
            ("Remaining Unrealized Base" <> 0))
        THEN
          CASE VatPostingSetup."Unrealized VAT Type" OF
            VatPostingSetup."Unrealized VAT Type"::Percentage:
              BEGIN
                IF ABS(Full) = ABS(Paid) - ABS(SettledAmount) THEN
                  EXIT(1);
                EXIT(ABS(SettledAmount) / (ABS(Full) - (ABS(Paid) - ABS(SettledAmount))));
              END;
            VatPostingSetup."Unrealized VAT Type"::First:
              BEGIN
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  EXIT(1);
                IF ABS(Paid) < ABS(TotalUnrealVATAmountFirst) THEN
                  EXIT(ABS(SettledAmount) / ABS(TotalUnrealVATAmountFirst));
                EXIT(1);
              END;
            VatPostingSetup."Unrealized VAT Type"::"First (Fully Paid)":
              BEGIN
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  EXIT(1);
                IF ABS(Paid) < ABS(TotalUnrealVATAmountFirst) THEN
                  EXIT(0);
                EXIT(1);
              END;
            VatPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)":
              EXIT(0);
            VatPostingSetup."Unrealized VAT Type"::Last:
              BEGIN
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  EXIT(0);
                IF ABS(Paid) > ABS(Full) - ABS(TotalUnrealVATAmountLast) THEN
                  EXIT((ABS(Paid) - (ABS(Full) - ABS(TotalUnrealVATAmountLast))) / ABS(TotalUnrealVATAmountLast));
                EXIT(0);
              END;
          END;

        EXIT(-1);
      END;
      EXIT(-1);
    END;

    PROCEDURE GetCustUnRealizedVATPart@150000(SettledAmount@1003 : Decimal;Paid@1005 : Decimal;Full@1001 : Decimal;TotalUnrealVATAmountFirst@1006 : Decimal;TotalUnrealVATAmountLast@1007 : Decimal;CustLedgEntry@150000 : Record 21;GenJnlLine@150001 : Record 81;WHTAmount@150002 : Decimal;WHTAmount2@150003 : Decimal) : Decimal;
    VAR
      VatPostingSetup@1000 : Record 325;
      TaxJurisdiction@1009 : Record 320;
      WhtAmount1@150004 : Decimal;
      SalesCrMemoHeader@150005 : Record 114;
      TempWHTEntry@150006 : Record 28044;
      DiscPercent@150007 : Decimal;
      WHTDiscount@150008 : Decimal;
    BEGIN
      IF (Type <> 0) AND
         (Amount = 0) AND
         (Base = 0)
      THEN BEGIN
        IF ABS(Paid) = ABS(Full) THEN
          EXIT(1);
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            VatPostingSetup.GET(
              "VAT Bus. Posting Group","VAT Prod. Posting Group");
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              VatPostingSetup."Unrealized VAT Type" := TaxJurisdiction."Unrealized VAT Type";
            END;
        END;
        IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
          WHTAmount := 0
        ELSE BEGIN
          IF GLSetup."Manual Sales WHT Calc." THEN BEGIN
            SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
            SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",CustLedgEntry."Document No.");
            IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
              TempWHTEntry.RESET;
              TempWHTEntry.SETRANGE("Document No.",SalesCrMemoHeader."No.");
              TempWHTEntry.SETFILTER("Applies-to Entry No.",'%1',0);
              IF TempWHTEntry.FIND('-') THEN
                REPEAT
                  WhtAmount1 := WhtAmount1 + TempWHTEntry."Unrealized Amount (LCY)";
                UNTIL TempWHTEntry.NEXT = 0;
              GLSetup.GET;
            END;
            WHTAmount := WHTAmount - WhtAmount1
          END;
        END;
        IF (VatPostingSetup."Unrealized VAT Type" > 0) AND
           (("Remaining Unrealized Amount" <> 0) OR
            ("Remaining Unrealized Base" <> 0))
        THEN BEGIN
          CASE VatPostingSetup."Unrealized VAT Type" OF
            VatPostingSetup."Unrealized VAT Type"::Percentage:
              BEGIN
                GLSetup.GET;
                IF GLSetup."Manual Sales WHT Calc." THEN BEGIN
                  IF ABS(SettledAmount) < ABS(Full) THEN BEGIN
                    IF GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN BEGIN
                      DiscPercent := (CustLedgEntry."Original Pmt. Disc. Possible" / Full) * 100;
                      WHTDiscount := WHTAmount * (DiscPercent / 100);
                    END;
                    IF ABS(CustLedgEntry."Rem. Amt for WHT") < ABS(CustLedgEntry."Rem. Amt") THEN BEGIN
                      IF ABS(GenJnlLine.Amount) < (Full + WHTAmount) THEN BEGIN
                        IF GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN
                          EXIT(-SettledAmount / (Full + WHTAmount + Full));
                        EXIT(-SettledAmount / (Full + WHTAmount));
                      END;
                      EXIT(-SettledAmount / (Full + WHTAmount - WHTDiscount));
                    END;
                    IF ABS(GenJnlLine.Amount) = (Full + WHTAmount) THEN BEGIN
                      IF GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN
                        EXIT(-SettledAmount / (Full + WHTAmount + CustLedgEntry."Original Pmt. Disc. Possible"));
                      EXIT(-SettledAmount / (Full + WHTAmount));
                    END;
                    IF (GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date") AND
                       (CustLedgEntry."Original Pmt. Disc. Possible" <> 0)
                    THEN
                      EXIT(
                        -(SettledAmount + CustLedgEntry."Original Pmt. Disc. Possible") /
                        (Full - CustLedgEntry."Original Pmt. Disc. Possible"));
                    IF ABS(GenJnlLine.Amount) = (Full - CustLedgEntry."Remaining Amt. (LCY)") THEN
                      EXIT(1);
                    EXIT(-SettledAmount / Full);
                  END;
                  IF (GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date") AND
                     (CustLedgEntry."Original Pmt. Disc. Possible" <> 0)
                  THEN BEGIN
                    IF ABS(SettledAmount + CustLedgEntry."Original Pmt. Disc. Possible") =
                       ABS(CustLedgEntry."Remaining Amt. (LCY)")
                    THEN
                      EXIT(1);
                    EXIT(
                      -(SettledAmount + CustLedgEntry."Original Pmt. Disc. Possible") /
                      (CustLedgEntry."Remaining Amt. (LCY)" - CustLedgEntry."Original Pmt. Disc. Possible"));
                  END;
                  EXIT(-SettledAmount / CustLedgEntry."Remaining Amt. (LCY)");
                END;
                EXIT(ABS(SettledAmount) / ABS(Full))
              END;
            VatPostingSetup."Unrealized VAT Type"::First:
              BEGIN
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  EXIT(1);
                IF ABS(Paid) < ABS(TotalUnrealVATAmountFirst) THEN
                  EXIT(ABS(SettledAmount) / ABS(TotalUnrealVATAmountFirst));
                EXIT(1);
              END;
            VatPostingSetup."Unrealized VAT Type"::"First (Fully Paid)":
              BEGIN
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  EXIT(1);
                IF ABS(Paid) < ABS(TotalUnrealVATAmountFirst) THEN
                  EXIT(0);
                EXIT(1);
              END;
            VatPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)":
              EXIT(0);
            VatPostingSetup."Unrealized VAT Type"::Last:
              BEGIN
                IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                  EXIT(0);
                IF ABS(Paid) > ABS(Full) - ABS(TotalUnrealVATAmountLast) THEN
                  EXIT((ABS(Paid) - (ABS(Full) - ABS(TotalUnrealVATAmountLast))) / ABS(TotalUnrealVATAmountLast));
                EXIT(0);
              END;
          END;
        END ELSE
          EXIT(-1);
      END ELSE
        EXIT(-1);
    END;

    PROCEDURE CopyFromGenJnlLine@5(GenJnlLine@1000 : Record 81);
    BEGIN
      CopyPostingGroupsFromGenJnlLine(GenJnlLine);
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      "Document Type" := GenJnlLine."Document Type";
      Type := GenJnlLine."Gen. Posting Type";
      "VAT Calculation Type" := GenJnlLine."VAT Calculation Type";
      "Source Code" := GenJnlLine."Source Code";
      "Reason Code" := GenJnlLine."Reason Code";
      "Ship-to/Order Address Code" := GenJnlLine."Ship-to/Order Address Code";
      "EU 3-Party Trade" := GenJnlLine."EU 3-Party Trade";
      "User ID" := USERID;
      "No. Series" := GenJnlLine."Posting No. Series";
      "VAT Base Discount %" := GenJnlLine."VAT Base Discount %";
      "Bill-to/Pay-to No." := GenJnlLine."Bill-to/Pay-to No.";
      "Country/Region Code" := GenJnlLine."Country/Region Code";
      "VAT Registration No." := GenJnlLine."VAT Registration No.";
      // UPG09R2.begin //UPG13R2.being taken from old codunit 12 Customization
      "Bill-to/Pay-to No." := GenJnlLine."Bill-to/Pay-to No.";
      "Country/Region Code" := GenJnlLine."Country/Region Code";
      "VAT Registration No." := GenJnlLine."VAT Registration No.";
       //YIMMNTTST
         "Kwitansi No.":=GenJnlLine."Kwitansi No.";
         "Commercial Invoice No.":=GenJnlLine."Commercial Invoice No.";
         "Commercial Invoice Date":=GenJnlLine."Commercial Invoice Date";
         "Tax Invoice No.":=GenJnlLine."Tax Invoice No.";
         "Tax Invoice Date":=GenJnlLine."Tax Invoice Date";
         Narration:=GenJnlLine.Narration;
        //YIMMNTTEN

      //YIMM
         "Original Tax Inv. No.":=GenJnlLine."Original Tax Inv. No.";

      //Mel1.0-Start

         "Quote No ( Project No.)":=GenJnlLine."Quote No ( Project No.)";
      //Mel1.0-End

      //YIMMNNPWPST
          "Order Address Code":=GenJnlLine."Ship-to Code";
      //YIMMNNPWPEN

        // VAT for VAT entry
        // VAT for G/L entry/entries
        //CurrCode := GenJnlLine."Source Currency Code"; //YIMMNBTR//UPG13R2 commented.
        //VATEntry."Currency Code" := "Source Currency Code";
        // UPG09R2.end//UPG13R2.end
    END;

    PROCEDURE CopyPostingGroupsFromGenJnlLine@4(GenJnlLine@1000 : Record 81);
    BEGIN
      "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlLine."Tax Area Code";
      "Tax Liable" := GenJnlLine."Tax Liable";
      "Tax Group Code" := GenJnlLine."Tax Group Code";
      "Use Tax" := GenJnlLine."Use Tax";
    END;

    BEGIN
    {
      //YIMMNTT
         1) Fields added in the standard table for maintaining the information related to Tender Terima.
          a) Kwitansi No.
          b) Commercial Invoice No.
          c) Commercial Invoice Date
          d) Tax Invoice No.
          e) Tax Invoice Date
          f) Narration

      //YIMMNNPWP
       Field added for Multiple NPWP No.(ID-50007,50008)

      //YIMMNTCH
       1) CHANGE THE LENGTH OF TAX INVOICE NO. FROM 20 TO 30 DIGITS
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //UPG13
      2009R2 to 2013 Merged Code.
      //UPG13R2
      2013 to 2013R2 Merged Code.
    }
    END.
  }
}

