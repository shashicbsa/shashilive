OBJECT Table 121 Purch. Rcpt. Line
{
  OBJECT-PROPERTIES
  {
    Date=05/10/14;
    Time=12:00:00;
    Version List=NAVW17.10.00.36703,YIMMNTT,YIMMNTCH,UPG09R2,UPG13,UPG13R2;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               PurchDocLineComments@1000 : Record 43;
             BEGIN
               PurchDocLineComments.SETRANGE("Document Type",PurchDocLineComments."Document Type"::Receipt);
               PurchDocLineComments.SETRANGE("No.","Document No.");
               PurchDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT PurchDocLineComments.ISEMPTY THEN
                 PurchDocLineComments.DELETEALL;
             END;

    CaptionML=[ENU=Purch. Rcpt. Line;
               ENA=Purch. Rcpt. Line];
    LookupPageID=Page528;
    DrillDownPageID=Page528;
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENA=Buy-from Vendor No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENA=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENA=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENA=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                                    ENA=" ,G/L Account,Item,,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENA=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENA=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENA=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;CaptionML=[ENU=Expected Receipt Date;
                                                              ENA=Expected Receipt Date] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENA=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENA=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ENA=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENA=Quantity];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;CaptionML=[ENU=Direct Unit Cost;
                                                              ENA=Direct Unit Cost];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENA=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENA=GST %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENA=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=[ENU=Unit Price (LCY);
                                                              ENA=Unit Price (LCY)];
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENA=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENA=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENA=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENA=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENA=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENA=Appl.-to Item Entry] }
    { 39  ;   ;Item Rcpt. Entry No.;Integer       ;CaptionML=[ENU=Item Rcpt. Entry No.;
                                                              ENA=Item Rcpt. Entry No.] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENA=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENA=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENA=Job No.] }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=[ENU=Indirect Cost %;
                                                              ENA=Indirect Cost %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;CaptionML=[ENU=Qty. Rcd. Not Invoiced;
                                                              ENA=Qty. Rcd. Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENA=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENA=Order No.] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENA=Order Line No.] }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENA=Pay-to Vendor No.] }
    { 70  ;   ;Vendor Item No.     ;Text20        ;CaptionML=[ENU=Vendor Item No.;
                                                              ENA=Vendor Item No.] }
    { 71  ;   ;Sales Order No.     ;Code20        ;CaptionML=[ENU=Sales Order No.;
                                                              ENA=Sales Order No.] }
    { 72  ;   ;Sales Order Line No.;Integer       ;CaptionML=[ENU=Sales Order Line No.;
                                                              ENA=Sales Order Line No.] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENA=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENA=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENA=GST Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENA=Normal GST,Reverse Charge GST,Full GST,US Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENA=Transaction Type] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENA=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purch. Rcpt. Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENA=Attached to Line No.] }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry Point;
                                                              ENA=Entry Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENA=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENA=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENA=US Tax Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENA=US Tax Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENA=US Tax Group Code] }
    { 88  ;   ;Use Tax             ;Boolean       ;CaptionML=[ENU=Use Tax;
                                                              ENA=Use US Tax] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENA=GST Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENA=GST Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Rcpt. Header"."Currency Code" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Currency Code;
                                                              ENA=Currency Code];
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENA=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                   Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENA=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENA=GST Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENA=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENA=Posting Date] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENA=Dimension Set ID];
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENA=Job Task No.] }
    { 1002;   ;Job Line Type       ;Option        ;CaptionML=[ENU=Job Line Type;
                                                              ENA=Job Line Type];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ENA=" ,Schedule,Contract,Both Schedule and Contract"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1003;   ;Job Unit Price      ;Decimal       ;CaptionML=[ENU=Job Unit Price;
                                                              ENA=Job Unit Price];
                                                   BlankZero=Yes }
    { 1004;   ;Job Total Price     ;Decimal       ;CaptionML=[ENU=Job Total Price;
                                                              ENA=Job Total Price];
                                                   BlankZero=Yes }
    { 1005;   ;Job Line Amount     ;Decimal       ;CaptionML=[ENU=Job Line Amount;
                                                              ENA=Job Line Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;CaptionML=[ENU=Job Line Discount Amount;
                                                              ENA=Job Line Discount Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;CaptionML=[ENU=Job Line Discount %;
                                                              ENA=Job Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;CaptionML=[ENU=Job Unit Price (LCY);
                                                              ENA=Job Unit Price (LCY)];
                                                   BlankZero=Yes }
    { 1009;   ;Job Total Price (LCY);Decimal      ;CaptionML=[ENU=Job Total Price (LCY);
                                                              ENA=Job Total Price (LCY)];
                                                   BlankZero=Yes }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;CaptionML=[ENU=Job Line Amount (LCY);
                                                              ENA=Job Line Amount (LCY)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              ENA=Job Line Disc. Amount (LCY)];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              ENA=Job Currency Factor];
                                                   BlankZero=Yes }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=[ENU=Job Currency Code;
                                                              ENA=Job Currency Code] }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FILTER(Released|Finished));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ENA=Prod. Order No.] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENA=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENA=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENA=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENA=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENA=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENA=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENA=FA Posting Date] }
    { 5601;   ;FA Posting Type     ;Option        ;CaptionML=[ENU=FA Posting Type;
                                                              ENA=FA Posting Type];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Maintenance";
                                                                    ENA=" ,Acquisition Cost,Maintenance"];
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENA=Depreciation Book Code] }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=[ENU=Salvage Value;
                                                              ENA=Salvage Value];
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENA=Depr. until FA Posting Date] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=[ENU=Depr. Acquisition Cost;
                                                              ENA=Depr. Acquisition Cost] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=[ENU=Maintenance Code;
                                                              ENA=Maintenance Code] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=[ENU=Insurance No.;
                                                              ENA=Insurance No.] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              ENA=Budgeted FA No.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENA=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENA=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENA=Responsibility Centre] }
    { 5705;   ;Cross-Reference No. ;Code20        ;CaptionML=[ENU=Cross-Reference No.;
                                                              ENA=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENA=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENA=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENA=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENA=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENA=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ENA=Nonstock] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENA=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENA=Product Group Code] }
    { 5714;   ;Special Order Sales No.;Code20     ;CaptionML=[ENU=Special Order Sales No.;
                                                              ENA=Special Order Sales No.] }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   CaptionML=[ENU=Special Order Sales Line No.;
                                                              ENA=Special Order Sales Line No.] }
    { 5790;   ;Requested Receipt Date;Date        ;CaptionML=[ENU=Requested Receipt Date;
                                                              ENA=Requested Receipt Date] }
    { 5791;   ;Promised Receipt Date;Date         ;CaptionML=[ENU=Promised Receipt Date;
                                                              ENA=Promised Receipt Date] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;CaptionML=[ENU=Lead Time Calculation;
                                                              ENA=Lead Time Calculation] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENA=Inbound Whse. Handling Time] }
    { 5794;   ;Planned Receipt Date;Date          ;CaptionML=[ENU=Planned Receipt Date;
                                                              ENA=Planned Receipt Date] }
    { 5795;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENA=Order Date] }
    { 5811;   ;Item Charge Base Amount;Decimal    ;CaptionML=[ENU=Item Charge Base Amount;
                                                              ENA=Item Charge Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENA=Correction];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENA=Return Reason Code] }
    { 50001;  ;Kwitansi No.        ;Code20        ;Description=YIMMNTT }
    { 50002;  ;Commercial Invoice No.;Code20      ;Description=YIMMNTT }
    { 50003;  ;Commercial Invoice Date;Date       ;Description=YIMMNTT }
    { 50004;  ;Tax Invoice No.     ;Code30        ;Description=YIMMNTT,YIMMNTCH }
    { 50005;  ;Tax Invoice Date    ;Date          ;Description=YIMMNTT }
    { 50006;  ;Narration           ;Text250       ;Description=YIMMNTT }
    { 50009;  ;Order Address Code  ;Code20        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                PayToVend@1000 : Record 23;
                                                              BEGIN
                                                              END;

                                                   CaptionML=ENU=NPWP No.;
                                                   Description=YIMMNNPWP }
    { 50012;  ;Reason Code         ;Code10        ;TableRelation="Reason Code".Code;
                                                   Description=YIMMARC }
    { 50017;  ;New NPWP            ;Code20        ;Description=YIMMCH }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ENA=Routing No.] }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=FILTER(Released..),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   CaptionML=[ENU=Operation No.;
                                                              ENA=Operation No.] }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center No.;
                                                              ENA=Work Centre No.] }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=[ENU=Prod. Order Line No.;
                                                              ENA=Prod. Order Line No.] }
    { 99000755;;Overhead Rate      ;Decimal       ;CaptionML=[ENU=Overhead Rate;
                                                              ENA=Overhead Rate];
                                                   DecimalPlaces=0:5 }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=[ENU=Routing Reference No.;
                                                              ENA=Routing Reference No.] }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Order No.,Order Line No.                 }
    {    ;Blanket Order No.,Blanket Order Line No.;KeyGroups=SOP(Blank) }
    {    ;Item Rcpt. Entry No.                     }
    {    ;Pay-to Vendor No.                        }
    {    ;Buy-from Vendor No.                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Receipt No. %1:;ENA=Receipt No. %1:';
      Text001@1001 : TextConst 'ENU=The program cannot find this purchase line.;ENA=The program cannot find this purchase line.';
      Currency@1005 : Record 4;
      PurchRcptHeader@1004 : Record 120;
      DimMgt@1003 : Codeunit 408;
      CurrencyRead@1002 : Boolean;

    PROCEDURE GetCurrencyCodeFromHeader@1() : Code[10];
    BEGIN
      IF "Document No." = PurchRcptHeader."No." THEN
        EXIT(PurchRcptHeader."Currency Code");
      IF PurchRcptHeader.GET("Document No.") THEN
        EXIT(PurchRcptHeader."Currency Code");
      EXIT('');
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    PROCEDURE ShowItemTrackingLines@3();
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      ItemTrackingMgt.CallPostedItemTrackingForm(DATABASE::"Purch. Rcpt. Line",0,"Document No.",'',0,"Line No.");
    END;

    PROCEDURE InsertInvLineFromRcptLine@2(VAR PurchLine@1000 : Record 39);
    VAR
      PurchInvHeader@1010 : Record 38;
      PurchOrderHeader@1007 : Record 38;
      PurchOrderLine@1005 : Record 39;
      TempPurchLine@1003 : Record 39;
      PurchSetup@1011 : Record 312;
      TransferOldExtLines@1002 : Codeunit 379;
      ItemTrackingMgt@1004 : Codeunit 6500;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempPurchLine := PurchLine;
      IF PurchLine.FIND('+') THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF PurchInvHeader."No." <> TempPurchLine."Document No." THEN
        PurchInvHeader.GET(TempPurchLine."Document Type",TempPurchLine."Document No.");

      IF PurchLine."Receipt No." <> "Document No." THEN BEGIN
        PurchLine.INIT;
        PurchLine."Line No." := NextLineNo;
        PurchLine."Document Type" := TempPurchLine."Document Type";
        PurchLine."Document No." := TempPurchLine."Document No.";
        PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF PurchOrderLine.GET(
             PurchOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          IF (PurchOrderHeader."Document Type" <> PurchOrderLine."Document Type"::Order) OR
             (PurchOrderHeader."No." <> PurchOrderLine."Document No.")
          THEN
            PurchOrderHeader.GET(PurchOrderLine."Document Type"::Order,"Order No.");

          InitCurrency("Currency Code");

          IF PurchInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF PurchOrderHeader."Prices Including VAT" THEN
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" / (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END ELSE BEGIN
          IF ExtTextLine THEN BEGIN
            PurchOrderLine.INIT;
            PurchOrderLine."Line No." := "Order Line No.";
            PurchOrderLine.Description := Description;
            PurchOrderLine."Description 2" := "Description 2";
          END ELSE
            ERROR(Text001);
        END;
        PurchLine := PurchOrderLine;
        PurchLine."Line No." := NextLineNo;
        PurchLine."Document Type" := TempPurchLine."Document Type";
        PurchLine."Document No." := TempPurchLine."Document No.";
        PurchLine."Variant Code" := "Variant Code";
        PurchLine."Location Code" := "Location Code";
        PurchLine."Quantity (Base)" := 0;
        PurchLine.Quantity := 0;
        PurchLine."Outstanding Qty. (Base)" := 0;
        PurchLine."Outstanding Quantity" := 0;
        PurchLine."Quantity Received" := 0;
        PurchLine."Qty. Received (Base)" := 0;
        PurchLine."Quantity Invoiced" := 0;
        PurchLine."Qty. Invoiced (Base)" := 0;
        PurchLine.Amount := 0;
        PurchLine."Amount Including VAT" := 0;
        PurchLine."Sales Order No." := '';
        PurchLine."Sales Order Line No." := 0;
        PurchLine."Drop Shipment" := FALSE;
        PurchLine."Special Order Sales No." := '';
        PurchLine."Special Order Sales Line No." := 0;
        PurchLine."Special Order" := FALSE;
        PurchLine."Receipt No." := "Document No.";
        PurchLine."Receipt Line No." := "Line No.";
        PurchLine."Appl.-to Item Entry" := 0;
        IF NOT ExtTextLine THEN BEGIN
          PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
          PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
          PurchLine.VALIDATE(
            "Line Discount Amount",
            ROUND(
              PurchOrderLine."Line Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
              Currency."Amount Rounding Precision"));
          PurchLine."Line Discount %" := PurchOrderLine."Line Discount %";
          PurchLine.UpdatePrePaymentAmounts;
          PurchSetup.GET;
          IF NOT PurchSetup."Calc. Inv. Discount" THEN
            IF PurchOrderLine.Quantity = 0 THEN
              PurchLine.VALIDATE("Inv. Discount Amount",0)
            ELSE
              PurchLine.VALIDATE(
                "Inv. Discount Amount",
                ROUND(
                  PurchOrderLine."Inv. Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
                  Currency."Amount Rounding Precision"));
        END;

        PurchLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            "Line No.",
            NextLineNo,
            "Attached to Line No.");
        PurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        PurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        PurchLine."Dimension Set ID" := "Dimension Set ID";

        IF "Sales Order No." = '' THEN
          PurchLine."Drop Shipment" := FALSE
        ELSE
          PurchLine."Drop Shipment" := TRUE;

        PurchLine.INSERT;

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);
    END;

    PROCEDURE GetPurchInvLines@4(VAR TempPurchInvLine@1000 : TEMPORARY Record 123);
    VAR
      PurchInvLine@1003 : Record 123;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempPurchInvLine.RESET;
      TempPurchInvLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDSET THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FINDSET THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Purchase Invoice" THEN
                IF PurchInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempPurchInvLine.INIT;
                  TempPurchInvLine := PurchInvLine;
                  IF TempPurchInvLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcReceivedPurchNotReturned@6(VAR RemainingQty@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      RemainingQty := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          RemainingQty := RemainingQty + ItemLedgEntry."Remaining Quantity";
          IF ExactCostReverse THEN BEGIN
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (RemainingQty <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";

      RemainingQty := CalcQty(RemainingQty);
    END;

    LOCAL PROCEDURE CalcQty@10(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Purchase Receipt");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    PROCEDURE ShowItemLedgEntries@8();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
        PAGE.RUNMODAL(0,ItemLedgEntry);
      END;
    END;

    PROCEDURE ShowItemPurchInvLines@9();
    VAR
      TempPurchInvLine@1001 : TEMPORARY Record 123;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchInvLines(TempPurchInvLine);
        PAGE.RUNMODAL(PAGE::"Posted Purchase Invoice Lines",TempPurchInvLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@7(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    PROCEDURE ShowLineComments@11();
    VAR
      PurchDocLineComments@1002 : Record 43;
      PurchDocCommentSheet@1000 : Page 66;
    BEGIN
      PurchDocLineComments.SETRANGE("Document Type",PurchDocLineComments."Document Type"::Receipt);
      PurchDocLineComments.SETRANGE("No.","Document No.");
      PurchDocLineComments.SETRANGE("Document Line No.","Line No.");
      PurchDocCommentSheet.SETTABLEVIEW(PurchDocLineComments);
      PurchDocCommentSheet.RUNMODAL;
    END;

    BEGIN
    {
      //YIMMNTT
         1) Fields added in the standard table for maintaining the information related to Tender Terima.
          a) Kwitansi No.
          b) Commercial Invoice No.
          c) Commercial Invoice Date
          d) Tax Invoice No.
          e) Tax Invoice Date
          f) Narration
      //YIMMNTCH
       1) CHANGE THE LENGTH OF TAX INVOICE NO. FROM 20 TO 30 DIGITS
      //YIMMCH
      1) New Field Is added to flow (New Npwp No)
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //UPG13
      2009R2 to 2013 Merged Code.
      //UPG13R2
      2013 to 2013R2 Merged Code.
    }
    END.
  }
}

