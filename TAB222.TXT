OBJECT Table 222 Ship-to Address
{
  OBJECT-PROPERTIES
  {
    Date=07/03/15;
    Time=12:31:40;
    Modified=Yes;
    Version List=NAVW17.10,NAVAPAC7.10,YIMMNNPWP,YIMMAVATO,UPG09R2,UPG13,UPG13R2,YIMMDEVIP1.0,SMDEV1.0,PPNPPHDEV,BC;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    DataCaptionFields=Customer No.,Name,Code;
    OnInsert=BEGIN
               Cust.GET("Customer No.");
               Name := Cust.Name;
             END;

    OnModify=VAR
               ShipToAddress@1102159002 : Record 222;
               CustomerLoc@1102159001 : Record 18;
             BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=BEGIN
               PostCodeCheck.DeleteAllAddressID(DATABASE::"Ship-to Address",Rec.GETPOSITION);
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
               PostCodeCheck.MoveAllAddressID(
                 DATABASE::"Ship-to Address",xRec.GETPOSITION,DATABASE::"Ship-to Address",Rec.GETPOSITION);
             END;

    CaptionML=[ENU=Ship-to Address;
               ENA=Ship-to Address];
    LookupPageID=Page301;
  }
  FIELDS
  {
    { 1   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              ENA=Customer No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                ShipToAddress@1102159001 : Record 222;
                                                                CustomerLoc@1102159002 : Record 18;
                                                              BEGIN
                                                                //YIMMDEVIP1.0 S
                                                                IF CustomerLoc.GET("Customer No.") THEN
                                                                  IF CustomerLoc."Entity type" = CustomerLoc."Entity type" :: NonDealer THEN BEGIN
                                                                    ShipToAddress.RESET;
                                                                    ShipToAddress.SETRANGE(ShipToAddress.Code,Code);

                                                                    IF ShipToAddress.FINDFIRST THEN BEGIN
                                                                      Name := ShipToAddress.Name;
                                                                      "Name 2" := ShipToAddress."Name 2";
                                                                      Address := ShipToAddress.Address;
                                                                      "Address 2" := ShipToAddress."Address 2";
                                                                      City := ShipToAddress.City;
                                                                      "NpPkp No." := ShipToAddress."NpPkp No.";
                                                                      SpecialNPWP := ShipToAddress.SpecialNPWP;
                                                                      "Tax Liable" := ShipToAddress."Tax Liable";
                                                                      "Territory Code" := ShipToAddress."Territory Code";
                                                                      SpecialNPWP := ShipToAddress.SpecialNPWP;
                                                                      Blocked := ShipToAddress.Blocked;
                                                                      PPN := ShipToAddress.PPN;
                                                                      PPH := ShipToAddress.PPH;
                                                                    END;
                                                                  END;

                                                                // ERROR('%1 NPWP No Already Exist for Entity %2',Code,ShipToAddress."Customer No.");
                                                                //YIMMDEVIP1.0 E
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENA=Code];
                                                   NotBlank=Yes;
                                                   Description=YIMMNNPWP }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENA=Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENA=Name 2] }
    { 5   ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Ship-to Address",Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              ENA=Address] }
    { 6   ;   ;Address 2           ;Text50        ;OnValidate=BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::"Ship-to Address",Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Address 2;
                                                              ENA=Address 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::"Ship-to Address",Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENA=City] }
    { 8   ;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              ENA=Contact] }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENA=Phone No.] }
    { 10  ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENA=Telex No.] }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENA=Shipment Method Code] }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENA=Shipping Agent Code] }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=[ENU=Place of Export;
                                                              ENA=Place of Export] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENA=Country/Region Code] }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENA=Last Date Modified];
                                                   Editable=No }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENA=Location Code] }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENA=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENA=Telex Answer Back] }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::"Ship-to Address",Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENA=Post Code] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENA=State] }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENA=E-Mail] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENA=Home Page] }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENA=US Tax Area Code] }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENA=US Tax Liable] }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENA=Shipping Agent Service Code] }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=[ENU=Service Zone Code;
                                                              ENA=Service Zone Code] }
    { 50001;  ;NpPkp No.           ;Boolean       ;Description=YIMMANPPKP }
    { 50002;  ;Territory Code      ;Code10        ;TableRelation=Territory.Code;
                                                   Description=YIMMSRTERR }
    { 50003;  ;SpecialNPWP         ;Boolean        }
    { 50004;  ;Blocked             ;Boolean        }
    { 52000;  ;PPN                 ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPN THEN BEGIN
                                                                  IF "PPN M/C" OR "PPN S/P" OR "PPN Service" OR "PPN Non Dealer" THEN
                                                                    ERROR(Text50003);
                                                                END;
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52001;  ;PPH                 ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPH THEN BEGIN
                                                                  IF "PPH M/C" OR "PPH S/P" OR "PPH Service" OR "PPH Non Dealer" THEN
                                                                    ERROR(Text50004);
                                                                END;
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52002;  ;SpecialVendor       ;Boolean       ;Description=SMDEV1.0 }
    { 52003;  ;PPN M/C             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPN THEN
                                                                  ERROR(Text50001);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52004;  ;PPN S/P             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPN THEN
                                                                  ERROR(Text50001);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52005;  ;PPN Service         ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPN THEN
                                                                  ERROR(Text50001);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52006;  ;PPN Non Dealer      ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPN THEN
                                                                  ERROR(Text50001);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52007;  ;PPH M/C             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPH THEN
                                                                  ERROR(Text50002);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52008;  ;PPH S/P             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPH THEN
                                                                  ERROR(Text50002);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52009;  ;PPH Service         ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPH THEN
                                                                  ERROR(Text50002);
                                                              END;

                                                   Description=PPNPPHDEV }
    { 52010;  ;PPH Non Dealer      ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT PPH THEN
                                                                  ERROR(Text50002);
                                                              END;

                                                   Description=PPNPPHDEV }
  }
  KEYS
  {
    {    ;Customer No.,Code                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Customer No.,Name,Name 2,NpPkp No.,Address,City,PPN M/C,PPN S/P,PPN Service,PPN Non Dealer,PPH M/C,PPH S/P,PPH Service,PPH Non Dealer }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=untitled;ENA=untitled';
      Cust@1001 : Record 18;
      PostCode@1002 : Record 225;
      Text001@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENA=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      PostCodeCheck@1500000 : Codeunit 28000;
      Text50000@1102159001 : TextConst 'ENU=There are other line too. please modify all lines.';
      Text50001@1102159002 : TextConst 'ENU=Please Select PPN first.';
      Text50002@1102159003 : TextConst 'ENU=Please Select PPH first.';
      Text50003@1102159004 : TextConst 'ENU=Other PPN flags are True.';
      Text50004@1102159005 : TextConst 'ENU=Other PPH flags are True.';

    PROCEDURE Caption@1() : Text[130];
    BEGIN
      IF "Customer No." = '' THEN
        EXIT(Text000);
      Cust.GET("Customer No.");
      EXIT(STRSUBSTNO('%1 %2 %3 %4',Cust."No.",Cust.Name,Code,Name));
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Ship-to Address",GETPOSITION)
      ELSE
        MESSAGE(Text001);
    END;

    PROCEDURE ModifyAll@1102159001();
    VAR
      ShipToAddress@1102159002 : Record 222;
      CustomerLoc@1102159001 : Record 18;
    BEGIN
      //YIMMDEVIP1.0 S
      IF CustomerLoc.GET("Customer No.") THEN
        IF CustomerLoc."Entity type" = CustomerLoc."Entity type" :: NonDealer THEN BEGIN
          ShipToAddress.RESET;
          ShipToAddress.SETRANGE(Code,Code);

          IF ShipToAddress.FINDSET THEN REPEAT
            ShipToAddress.Name := Name ;
            ShipToAddress."Name 2" := "Name 2";
            ShipToAddress.Address := Address;
            ShipToAddress."Address 2" := "Address 2";
            ShipToAddress.City := City;
            ShipToAddress."NpPkp No." := "NpPkp No.";
            ShipToAddress.SpecialNPWP := SpecialNPWP;
            ShipToAddress."Tax Liable" := "Tax Liable";
            ShipToAddress."Territory Code" := "Territory Code";
            ShipToAddress.SpecialNPWP := SpecialNPWP;
            ShipToAddress.Blocked := Blocked;
            ShipToAddress.PPN := PPN;
            ShipToAddress.PPH := PPH;
            ShipToAddress.MODIFY(TRUE);
          UNTIL ShipToAddress.NEXT = 0;
        END;

      // ERROR('%1 NPWP No Already Exist for Entity %2',Code,ShipToAddress."Customer No.");
      //YIMMDEVIP1.0 E
    END;

    BEGIN
    {

      //YIMMNNPWP
       Length of the field is expanded.(ID-2)
      //YIMMANPPKP
        New field added
      //YIMMAVATO
        NPPKP field is used in VAT Out process
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //UPG13
      2009R2 to 2013 Merged Code.
      //YIMMDEVIP1.0
      Point No. 8 - Added two new fields for information. PPN & PPH.
      Point No. 4 - Added Code to flow the NPWP info if same any existing NPWP code is inserted or modified. Function "ModifyAll" is created.
      //SMDEV1.0
      Field SpecialVendor Added from Order Address Table as per single master concept.
      //PPNPPHDEV
      Fields added for PPN/PPH NPWP New Concept
    }
    END.
  }
}

