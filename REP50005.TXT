OBJECT Report 50005 Suggest Dealer Payments
{
  OBJECT-PROPERTIES
  {
    Date=11/11/15;
    Time=10:18:00;
    Modified=Yes;
    Version List=UPG13R2DEV;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Entity Payments;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN

                  VendorLedgEntryTemp.DELETEALL;
                END;

    OnPostReport=BEGIN

                   COMMIT;
                   IF NOT VendorLedgEntryTemp.ISEMPTY THEN
                     IF CONFIRM(Text024) THEN
                   //FORM.RUNMODAL(0,VendorLedgEntryTemp);
                     PAGE.RUNMODAL(0,VendorLedgEntryTemp);
                 END;

  }
  DATASET
  {
    { 1102159001;;DataItem;                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN

                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF PostingDate = 0D THEN
                                 ERROR(Text001);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               SeveralCurrencies := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = BankPmtType::" ") OR
                                   SummarizePerVend) AND
                                   (NextDocNo = '')
                               THEN

                                 ERROR(Text002);

                               IF ((BankPmtType = BankPmtType::"Manual Check") AND
                                   NOT SummarizePerVend AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(
                                   Text017+
                                   Text018,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),SELECTSTR(BankPmtType + 1,Text023));

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT
                                    CONFIRM(
                                      Text003+
                                      Text004,FALSE,
                                      WORKDATE)
                                 THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Customer);

                               OriginalAmtAvailable := AmountAvailable;

                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               //SelectedDim.SETRANGE("Object ID",REPORT::"Process report"); //UPG13R2DEV
                               SummarizePerDim := SelectedDim.FIND('-') AND SummarizePerVend;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  GetVendLedgEntries(TRUE,FALSE);
                                  GetVendLedgEntries(FALSE,FALSE);
                                  CheckAmounts(FALSE);
                                END;

               OnPostDataItem=BEGIN

                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FIND('-') THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      GetVendLedgEntries(TRUE,FALSE);
                                      GetVendLedgEntries(FALSE,FALSE);
                                      CheckAmounts(FALSE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window.OPEN(Text007);
                                  IF FIND('-') THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      GetVendLedgEntries(TRUE,TRUE);
                                      GetVendLedgEntries(FALSE,TRUE);
                                      CheckAmounts(TRUE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                // JnlLineDim.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FIND('+') THEN BEGIN
                                  FirstLineNo := GenJnlLine."Line No.";
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window.OPEN(Text008);




                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                //PayableVendLedgEntry.SETRANGE(PayableVendLedgEntry.Trans_Type,"Transaction Type");//nk
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Area Code DDS,Blocked }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1102159001;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1102159002;1;Field  ;
                  Name=Due Date;
                  SourceExpr=LastDueDateToPayReq }

      { 1102159003;1;Field  ;
                  Name=PostingDate;
                  SourceExpr=PostingDate }

      { 1102159004;1;Field  ;
                  Name=Starting Document No.;
                  SourceExpr=NextDocNo }

      { 1102159005;1;Field  ;
                  Name=New Doc. No. Per Line;
                  SourceExpr=DocNoPerLine }

      { 1102159006;1;Field  ;
                  Name=Bal. Account Type;
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  OnValidate=BEGIN
                               CASE GenJnlLine2."Bal. Account Type" OF
                                 GenJnlLine2."Bal. Account Type"::"G/L Account":
                                   BEGIN
                                     IF GenJnlLine2."Bal. Account No." <> '' THEN
                                       GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                     GenJnlLine2."Bank Payment Type" := GenJnlLine2."Bank Payment Type"::" ";
                                   END;
                                 GenJnlLine2."Bal. Account Type"::"Bank Account":
                                   IF GenJnlLine2."Bal. Account No." <> '' THEN
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                               END;
                             END;
                              }

      { 1102159007;1;Field  ;
                  Name=Bal. Account No.;
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  OnValidate=BEGIN
                               IF GenJnlLine2."Bal. Account No." <> '' THEN
                                 CASE GenJnlLine2."Bal. Account Type" OF
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                     ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 END;
                             END;

                  OnLookup=BEGIN

                             CASE GenJnlLine2."Bal. Account Type" OF
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                 ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 IF PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             END;
                           END;
                            }

      { 1102159008;1;Field  ;
                  Name=Bank Payment type;
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  OnValidate=BEGIN
                               IF (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") AND
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               THEN
                                 ERROR(
                                   Text010,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),
                                   GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                             END;
                              }

      { 1102159014;1;Field  ;
                  Name=Type of Transaction;
                  SourceExpr="Type of Transaction" }

      { 1102159009;1;Field  ;
                  Name=Use Vendor Priority;
                  SourceExpr=UsePriority;
                  Visible=FALSE }

      { 1102159010;1;Field  ;
                  Name=Find Payment Discounts;
                  SourceExpr=UsePaymentDisc;
                  Visible=FALSE }

      { 1102159011;1;Field  ;
                  Name=Available Amount;
                  SourceExpr=AmountAvailable;
                  Visible=FALSE }

      { 1102159012;1;Field  ;
                  Name=Summarize Per Customer;
                  SourceExpr=SummarizePerVend;
                  Visible=FALSE }

      { 1102159013;1;Field  ;
                  Name=By Dimension;
                  SourceExpr=SummarizePerDimText;
                  Visible=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1102159067 : TextConst 'ENU=Please enter the last payment date.';
      Text001@1102159066 : TextConst 'ENU=Please enter the posting date.';
      Text002@1102159065 : TextConst 'ENU=Please enter a Starting Document No.';
      Text003@1102159064 : TextConst 'ENU=The payment date is earlier than %1.\\';
      Text004@1102159063 : TextConst 'ENU=Do you still want to run the batch job?';
      Text005@1102159062 : TextConst 'ENU=The batch job was interrupted.';
      Text006@1102159061 : TextConst 'ENU=Processing Customer   #1##########';
      Text007@1102159060 : TextConst 'ENU=Processing Customer for payment discounts #1##########';
      Text008@1102159059 : TextConst 'ENU=Inserting payment journal lines #1##########';
      Vend2@1102159042 : Record 18;
      GenJnlTemplate@1102159041 : Record 80;
      GenJnlBatch@1102159040 : Record 232;
      GenJnlLine@1102159039 : Record 81;
      GenJnlLine2@1102159037 : Record 81;
      VendLedgEntry@1102159036 : Record 21;
      GLAcc@1102159035 : Record 15;
      BankAcc@1102159034 : Record 270;
      PayableVendLedgEntry@1102159033 : TEMPORARY Record 50005 SECURITYFILTERING(Ignored);
      TempPaymentBuffer@1102159032 : TEMPORARY Record 50006;
      OldTempPaymentBuffer@1102159031 : TEMPORARY Record 50006;
      SelectedDim@1102159030 : Record 369;
      VendorLedgEntryTemp@1102159029 : TEMPORARY Record 21;
      GenJnlPostLine@1102159028 : Codeunit 12;
      NoSeriesMgt@1102159027 : Codeunit 396;
      VendEntryEdit@1102159026 : Codeunit 103;
      DimMgt@1102159025 : Codeunit 408;
      Window@1102159024 : Dialog;
      UsePaymentDisc@1102159023 : Boolean;
      PostingDate@1102159022 : Date;
      LastDueDateToPayReq@1102159021 : Date;
      NextDocNo@1102159020 : Code[20];
      AmountAvailable@1102159019 : Decimal;
      OriginalAmtAvailable@1102159018 : Decimal;
      UsePriority@1102159017 : Boolean;
      SummarizePerVend@1102159016 : Boolean;
      SummarizePerDim@1102159015 : Boolean;
      SummarizePerDimText@1102159014 : Text[250];
      FirstLineNo@1102159013 : Integer;
      LastLineNo@1102159012 : Integer;
      NextEntryNo@1102159011 : Integer;
      StopPayments@1102159010 : Boolean;
      DocNoPerLine@1102159009 : Boolean;
      BankPmtType@1102159008 : ' ,Computer Check,Manual Check';
      BalAccType@1102159007 : 'G/L Account,Customer,Vendor,Bank Account';
      BalAccNo@1102159006 : Code[20];
      MessageText@1102159005 : Text[250];
      GenJnlLineInserted@1102159004 : Boolean;
      SeveralCurrencies@1102159003 : Boolean;
      "Transaction Type"@1102159002 : ' ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit';
      FLAG@1102159001 : Boolean;
      Text009@1102159058 : TextConst 'ENU=%1 must be G/L Account or Bank Account.';
      Text010@1102159057 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.';
      Text011@1102159056 : TextConst 'ENU=Use Customer Priority must be activated when the value in the Amount Available field is not 0.';
      Text012@1102159055 : TextConst 'ENU=Starting Document No. must contain a number.';
      Text013@1102159054 : TextConst 'ENU=Use Customer Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.';
      Text014@1102159053 : TextConst 'ENU=Payment to Customer %1';
      Text015@1102159052 : TextConst 'ENU=Payment of %1';
      Text016@1102159051 : TextConst 'ENU=" is already applied to %1 %2 for Customer %3."';
      Text017@1102159050 : TextConst 'ENU="When %1 = %2 and you have not placed a check mark in the Summarize per Customer field,\"';
      Text018@1102159049 : TextConst 'ENU=then you must place a check mark in New Doc. No. per Line.';
      Text019@1102159048 : TextConst 'ENU=You have only created suggested Customer payment lines for the %1 %2.\';
      Text020@1102159047 : TextConst 'ENU=There are, however, other open Customer ledger entries in currencies other than %2.';
      Text021@1102159046 : TextConst 'ENU=There are no other open Customer ledger entries in other currencies.';
      Text022@1102159045 : TextConst 'ENU=You have created suggested Customer payment lines for all currencies.';
      Text023@1102159044 : TextConst 'ENU=" ,Computer Check,Manual Check"';
      Text024@1102159043 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the posting date in the Suggest Vendor Payments batch job request window. Do you want to see the entries?';
      "Type of Transaction"@1102159038 : ' ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit,Imacs-ATV,Imacs-Generator,Imacs-CBU,Campaign,DDS1 Vendor,DDS2 Vendor,DDS3 Vendor,DDS4 Vendor,DDS5 Vendor,DDS6 Vendor,DDS7 Vendor,DDS8 Vendor,DDS9 Vendor,MKT Vendor,SVC Vendor,MS Vendor,POD Vendor,Others Purchase,Ekspedisi Log-POD';
      EntityType@1000000000 : 'Dealer,NonDealer';

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : ' ,Computer Check,Manual Check');
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Customer No.",Customer."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);


      IF Positive THEN
      VendLedgEntry.SETRANGE(VendLedgEntry.Positive,TRUE)
      ELSE
      VendLedgEntry.SETRANGE(VendLedgEntry.Positive,FALSE);

      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq+1,12319999D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');

      //UPG13R2DEV.begin
      IF "Type of Transaction" <> 0 THEN
        VendLedgEntry.SETRANGE("Type Of Transaction","Type of Transaction");
      //UPG13R2DEV.end

      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          SaveAmount;
          IF (VendLedgEntry."Accepted Pmt. Disc. Tolerance") OR
            (VendLedgEntry."Accepted Payment Tolerance" <> 0)
          THEN BEGIN
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
            VendLedgEntry."Accepted Payment Tolerance" := 0;
            VendEntryEdit.RUN(VendLedgEntry);
          END;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    BEGIN
      WITH GenJnlLine DO BEGIN
        VALIDATE("Posting Date",PostingDate);
        "Document Type" := "Document Type"::Payment;   //Rajesh Payment
        "Account Type" := "Account Type"::Customer;
        "Account No.":=VendLedgEntry."Customer No.";
        Vend2.GET(VendLedgEntry."Customer No.");
        Vend2.CheckBlockedCustOnJnls(Vend2,"Document Type",FALSE);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Customer Posting Group";
        "Salespers./Purch. Code" := Vend2."Salesperson Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
       { IF GenJnlPostLine.CheckCalcPmtDiscGenJnlCust(GenJnlLine,VendLedgEntry,0,FALSE)
        THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible") //Removed Negative Sign
        ELSE
          Amount := -VendLedgEntry."Remaining Amount"; //Removed Negative Sign
        VALIDATE(Amount);
        }
          Amount := -VendLedgEntry."Remaining Amount"; //Removed Negative Sign   //UPG13R2DEV
        VALIDATE(Amount);                                                        //UPG13R2DEV

      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Customer.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;

      PayableVendLedgEntry.Trans_Type:=VendLedgEntry."Type Of Transaction";


      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Customer No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Customer."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);




      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
      //MESSAGE(FORMAT(PayableVendLedgEntry.COUNT));
        PrevCurrency := PayableVendLedgEntry."Currency Code";
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            GetEntityType(PayableVendLedgEntry."Vendor No.");
            IF EntityType = EntityType::Dealer THEN  BEGIN
              IF CurrencyBalance < 0 THEN BEGIN
                PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
                PayableVendLedgEntry.DELETEALL;  //nk
                PayableVendLedgEntry.SETRANGE("Currency Code");
              END ELSE
                AmountAvailable := AmountAvailable - CurrencyBalance;
              CurrencyBalance := 0;
              PrevCurrency := PayableVendLedgEntry."Currency Code";
            END ELSE BEGIN
              IF CurrencyBalance > 0 THEN BEGIN
                PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
                PayableVendLedgEntry.DELETEALL;
                PayableVendLedgEntry.SETRANGE("Currency Code");
              END ELSE
                AmountAvailable := AmountAvailable - CurrencyBalance;
              CurrencyBalance := 0;
              PrevCurrency := PayableVendLedgEntry."Currency Code";
            END;
          END;

          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance - PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance - PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
      END;
      PayableVendLedgEntry.RESET;


      /////////////////

      {
      PayableVendLedgEntry.SETRANGE("Vendor No.",Customer."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance > 0 THEN
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF OriginalAmtAvailable > 0 THEN
          AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
      }
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine3@1000 : Record 81;
      TempDimBuf@1002 : Record 360;
      DimBufMgt@1003 : Codeunit 411;
      EntryNo@1004 : Integer;
      SalesInvHeader@1000000000 : Record 112;
      SalesCrMemoHeader@1000000001 : Record 114;
    BEGIN
      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      IF BalAccType = BalAccType::"Bank Account" THEN BEGIN
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      END;

      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            IF VendLedgEntry."Posting Date" <= PostingDate THEN BEGIN
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Customer No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";

      //YIMMRPRENO
              TempPaymentBuffer."Vend Ledg. Entry Description":=VendLedgEntry.Description;  //VK
              //  TempPaymentBuffer."Vend Ledg. Entry Description":=VendLedgEntry.Narration;  //VK

      //YIMMRPRENO



      //YIMMRBDTL

              TempPaymentBuffer."Bank Code":=VendLedgEntry."Bank Code";
              TempPaymentBuffer."Bank Account No":=VendLedgEntry."Bank Account No";
              TempPaymentBuffer."Vend/Cust Bank Name":=VendLedgEntry."Vend/Cust Bank Name";
              TempPaymentBuffer."Bank Address":=VendLedgEntry."Bank Address";
              TempPaymentBuffer.BeniName:=VendLedgEntry.BeniName;

              IF (VendLedgEntry."Document Type"=VendLedgEntry."Document Type"::Invoice) THEN
                IF SalesInvHeader.GET(VendLedgEntry."Document No.") THEN
                  TempPaymentBuffer.CustomerName:=SalesInvHeader."Sell-to Customer Name";
                //ELSE
                //  TempPaymentBuffer.CustomerName:=VendLedgEntry.Description;   //VK

              IF (VendLedgEntry."Document Type"=VendLedgEntry."Document Type"::"Credit Memo") THEN
                IF SalesCrMemoHeader.GET(VendLedgEntry."Document No.") THEN
                  TempPaymentBuffer.CustomerName:=SalesCrMemoHeader."Sell-to Customer Name";
                //ELSE
                //  TempPaymentBuffer.CustomerName:=VendLedgEntry.Description;   //VK






      //YIMMRBDTL

              IF SummarizePerDim THEN BEGIN
                TempDimBuf.RESET;
                TempDimBuf.DELETEALL;
                IF SelectedDim.FIND('-') THEN
                  REPEAT
                   { IF LedgEntryDim.GET(
                         DATABASE::"Cust. Ledger Entry",VendLedgEntry."Entry No.",SelectedDim."Dimension Code")
                    THEN BEGIN
                      TempDimBuf."Table ID" := LedgEntryDim."Table ID";
                      TempDimBuf."Dimension Code" := LedgEntryDim."Dimension Code";
                      TempDimBuf."Dimension Value Code" := LedgEntryDim."Dimension Value Code";
                      TempDimBuf.INSERT;
                    END;
                    }
                  UNTIL SelectedDim.NEXT = 0;
                EntryNo := DimBufMgt.FindDimensions(TempDimBuf);
                IF EntryNo = 0 THEN
                  EntryNo := DimBufMgt.InsertDimensions(TempDimBuf);
                TempPaymentBuffer."Dimension Entry No." := EntryNo;
                TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
              END ELSE BEGIN
                TempPaymentBuffer."Dimension Entry No." := 0;
                TempPaymentBuffer."Global Dimension 1 Code" := '';
                TempPaymentBuffer."Global Dimension 2 Code" := '';
              END;

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              IF SummarizePerVend THEN BEGIN
                TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
                IF TempPaymentBuffer.FIND THEN BEGIN
                  TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                  TempPaymentBuffer.MODIFY;
                END ELSE BEGIN
                  TempPaymentBuffer."Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window.UPDATE(1,VendLedgEntry."Customer No.");
                  TempPaymentBuffer.INSERT;
                END;
                VendLedgEntry.TESTFIELD("Applies-to ID",'');
                VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
              END ELSE BEGIN
                GenJnlLine3.RESET;
                GenJnlLine3.SETCURRENTKEY(
                  "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
                GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Customer);
                GenJnlLine3.SETRANGE("Account No.",VendLedgEntry."Customer No.");
                GenJnlLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry."Document Type");
                GenJnlLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry."Document No.");
                FLAG:=TRUE;
                IF GenJnlLine3.FIND('-') THEN
                FLAG:=FALSE;
               {   GenJnlLine3.FIELDERROR(
                  "Applies-to Doc. No.",
                   STRSUBSTNO(
                     Text016,
                     VendLedgEntry."Document Type",VendLedgEntry."Document No.",
                     VendLedgEntry."Customer No."));
                }
                TempPaymentBuffer."Posting Group":=VendLedgEntry."Customer Posting Group";
                TempPaymentBuffer."Type Of Transaction":=VendLedgEntry."Type Of Transaction";
                TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;


                //UPG13R2.begin
                //TempPaymentBuffer."Type Of Transaction" := VendLedgEntry."Type Of Transaction";
                //UPG13R2.end

                Window.UPDATE(1,VendLedgEntry."Customer No.");
                IF FLAG THEN
                TempPaymentBuffer.INSERT;
              END;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendEntryEdit.RUN(VendLedgEntry);
            END ELSE BEGIN
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            END;

          UNTIL PayableVendLedgEntry.NEXT = 0;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      TempPaymentBuffer.SETCURRENTKEY("Document No.");
      IF TempPaymentBuffer.FIND('-') THEN
        REPEAT
          WITH GenJnlLine DO BEGIN
            INIT;
            Window.UPDATE(1,TempPaymentBuffer."Vendor No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            VALIDATE("Posting Date",PostingDate);
            "Document Type" := "Document Type"::Payment; //Rajesh Payment
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            IF SummarizePerVend THEN
              "Document No." := TempPaymentBuffer."Document No."
            ELSE
              IF DocNoPerLine THEN BEGIN
                IF TempPaymentBuffer.Amount < 0 THEN   //Rajesh Make Greater
                  "Document Type" := "Document Type"::Payment;

                "Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
              END ELSE BEGIN
                IF (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") AND
                  (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
                THEN
                  "Document No." := OldTempPaymentBuffer."Document No."
                ELSE BEGIN
                  "Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  OldTempPaymentBuffer := TempPaymentBuffer;
                  OldTempPaymentBuffer."Document No." := "Document No.";
                END;
              END;
            VALIDATE("Document No.");//YIMMAREF
            "Account Type" := "Account Type"::Customer;
            VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
            "Bank Payment Type" := BankPmtType;
            IF SummarizePerVend THEN BEGIN
              "Applies-to ID" := "Document No.";
              Description := STRSUBSTNO(Text014,TempPaymentBuffer."Vendor No.");
            END ELSE BEGIN
             // Description :=COPYSTR(
             //   (STRSUBSTNO(
             //     Text015,
             //     TempPaymentBuffer."Vend Ledg. Entry Description")),1,50);
              {//VK
              Description :=
                STRSUBSTNO(
                  Text015,
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No.");
               }//VK
              Description :=COPYSTR(
                (STRSUBSTNO(
                  Text015,
                  TempPaymentBuffer."Vend Ledg. Entry Description")),1,50);


             END;
             GenJnlLine."Posting Group":=TempPaymentBuffer."Posting Group";

      //YIMMRBDTL
             GenJnlLine."Bank Account No.":=TempPaymentBuffer."Bank Account No";
             GenJnlLine."Customer/Vendor Bank":=TempPaymentBuffer."Bank Code";
             GenJnlLine."Bank Name Cust/Vend":=TempPaymentBuffer."Vend/Cust Bank Name";
             GenJnlLine."Bank Address":=TempPaymentBuffer."Bank Address";
             GenJnlLine.BeniName:=TempPaymentBuffer.BeniName;
             GenJnlLine.Narration:=TempPaymentBuffer.CustomerName;
             GenJnlLine."CV_Ledger_Entry No.":=TempPaymentBuffer."Vendor Ledg. Entry No.";

      //YIMMRBDTL


            "Type Of Transaction":=TempPaymentBuffer."Type Of Transaction";
            "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";

            VALIDATE(Amount,TempPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";

            //UPG13R2DEV.begin
            //"Type Of Transaction" := TempPaymentBuffer."Type Of Transaction";
            //UPG13R2DEV.end

            INSERT;
            GenJnlLineInserted := TRUE;
         //JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
            //JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
            //JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
            //JnlLineDim.SETRANGE("Journal Line No.","Line No.");
            //JnlLineDim.DELETEALL;
      {
            IF SummarizePerVend THEN BEGIN
              TempDimBuf.RESET;
              TempDimBuf.DELETEALL;
              DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",TempDimBuf);
              DimMgt.MoveDimBufToJnlLineDim(
                  TempDimBuf,JnlLineDim,DATABASE::"Gen. Journal Line",
                  "Journal Template Name","Journal Batch Name","Line No.");
            END ELSE BEGIN
             LedgEntryDim.SETRANGE("Table ID",DATABASE::"Cust. Ledger Entry");
              LedgEntryDim.SETRANGE("Entry No.",TempPaymentBuffer."Vendor Ledg. Entry No.");
             DimMgt.MoveLedgEntryDimToJnlLineDim(
               LedgEntryDim,JnlLineDim,DATABASE::"Gen. Journal Line",
               "Journal Template Name","Journal Batch Name","Line No.",0);
            END;
       }
           END;
        UNTIL TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 50005);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code")
          //nk.begin
          ELSE
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");
          //nk.end
        END;
    END;

    LOCAL PROCEDURE ShowMessage@15(VAR Text@1000 : Text[250]);
    BEGIN
      IF (Text <> '') AND GenJnlLineInserted THEN
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 50005);
    VAR
      BankAcc@1003 : Record 270;
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record 50005;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN BEGIN
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            IF TmpPayableVendLedgEntry.FIND('-') THEN
              REPEAT
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              UNTIL TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies OR TmpPayableVendLedgEntry2.FIND('-');

            IF SeveralCurrencies THEN
              MessageText :=
                STRSUBSTNO(
                   Text019+
                   Text020,
                    BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            ELSE
              MessageText :=
                STRSUBSTNO(
                  Text019+
                  Text021,
                   BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          END ELSE
            MessageText := Text022;
        END;
    END;

    LOCAL PROCEDURE UpdateEnabled@5();
    BEGIN
      //IF SummarizePerVend THEN
       //RequestOptionsForm.SummarizePerDimText.ENABLED := TRUE
      //ELSE
      //  RequestOptionsForm.SummarizePerDimText.ENABLED := FALSE;
    END;

    PROCEDURE GetEntityType@1000000001(EntityNo@1000000001 : Code[20]);
    VAR
      CustomerRec@1000000000 : Record 18;
    BEGIN
      IF CustomerRec.GET(EntityNo) THEN
        EntityType := CustomerRec."Entity type"
    END;

    BEGIN
    {
      //UPG13R2DEV
      Report Created in NAV 2013 for suggesting dealer payments.
      Some of the code commented as per requirement.
    }
    END.
  }
  RDLDATA
  {
  }
}

