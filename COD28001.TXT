OBJECT Codeunit 28001 BarCode Management
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00;
    Version List=NAVAPAC7.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Bar3Table@1500000 : ARRAY [64] OF Text[3];
      Bar2Table@1500001 : ARRAY [10] OF Text[2];
      CTable@1500002 : ARRAY [64] OF Text[1];
      BarTablesGenerated@1500003 : Boolean;
      mult@1500004 : ARRAY [64,64] OF Integer;
      gen@1500005 : ARRAY [5] OF Integer;

    PROCEDURE BuildBarCode@1500009(AddressID@1500000 : Text[10];CustInfo@1500001 : Text[15];VAR BarCode@1500002 : Text[67]) : Integer;
    VAR
      AddressIDBarCode@1500003 : Text[16];
      FCCBarCode@1500004 : Text[4];
      CustInfoBarCode@1500005 : Text[31];
      FCC@1500006 : Text[2];
      BarCodeLen@1500007 : Integer;
      TestNumeric@1500008 : BigInteger;
      CustInfoLenght@1500009 : Integer;
      i@1500010 : Integer;
      TempBarCode@1500011 : Text[67];
    BEGIN
      // ErrorCode := 1: Numerical Customer Information Too Long
      // ErrorCode := 2: Alphabetical Customer Information Too Long
      // ErrorCode := 3: Address ID does not contain 8 digits
      // ErrorCode := 4: Address ID contains letters
      // ErrorCode := 5: Reed Solomon not calculated
      // ErrorCode := 6: Address ID does not exist

      BarCode := '';
      IF AddressID <> '' THEN BEGIN
        GenerateBarTables;
        IF EVALUATE(TestNumeric,AddressID) THEN BEGIN
          IF STRLEN(AddressID) = 8 THEN
            AddressIDBarCode := EncodeInfo(0,AddressID)
          ELSE
            EXIT(3);
        END ELSE
          EXIT(4);
      END ELSE
        EXIT(6);

      CustInfoLenght := STRLEN(CustInfo);
      CASE TRUE OF
        CustInfoLenght = 0:
          BEGIN
            FCC := '11';
            BarCodeLen := 37;
            CustInfoBarCode := '3';
          END;
        EVALUATE(TestNumeric,CustInfo):
          CASE TRUE OF
            CustInfoLenght <= 8:
              BEGIN
                FCC := '59';
                BarCodeLen := 52;
                FOR i := 1 TO (8 - CustInfoLenght) DO
                  CustInfo := '0' + CustInfo;
                CustInfoBarCode := EncodeInfo(0,CustInfo);
              END;
            (CustInfoLenght > 8) AND (CustInfoLenght <= 15):
              BEGIN
                FCC := '62';
                BarCodeLen := 67;
                FOR i := 1 TO (15 - CustInfoLenght) DO
                  CustInfo := '0' + CustInfo;
                CustInfoBarCode := EncodeInfo(0,CustInfo) + '3';
              END;
            (CustInfoLenght > 15):
              EXIT(1);
          END;
        ELSE
          CASE TRUE OF
            CustInfoLenght <= 5:
              BEGIN
                FCC := '59';
                BarCodeLen := 52;
                FOR i := 1 TO (5 - CustInfoLenght) DO
                  CustInfo := ' ' + CustInfo;
                CustInfoBarCode := EncodeInfo(1,CustInfo) + '3';
              END;
            (CustInfoLenght > 5) AND (CustInfoLenght <= 10):
              BEGIN
                FCC := '62';
                BarCodeLen := 67;
                FOR i := 1 TO (10 - CustInfoLenght) DO
                  CustInfo := ' ' + CustInfo;
                CustInfoBarCode := EncodeInfo(1,CustInfo) + '3';
              END;
            (CustInfoLenght > 10):
              EXIT(2);
          END;
      END;

      FCCBarCode := EncodeInfo(0,FCC);

      TempBarCode := FCCBarCode + AddressIDBarCode + CustInfoBarCode;

      IF NOT AppendRSParity(TempBarCode) THEN
        EXIT(5);

      BarCode := '13' + TempBarCode + '13';
    END;

    LOCAL PROCEDURE EncodeInfo@1500001(TableToUse@1500000 : 'NTable,CTable';InfoToCode@1500001 : Text[250]) InfoBarCode : Text[31];
    VAR
      wCustInfo@1500002 : Text[1];
      wCustInfoBarCodeN@1500003 : Text[2];
      wCustInfoBarCodeC@1500004 : Text[3];
      i@1500005 : Integer;
    BEGIN
      CASE TableToUse OF
        TableToUse::NTable:
          FOR i := 1 TO STRLEN(InfoToCode) DO BEGIN
            wCustInfoBarCodeN := '';
            wCustInfo := FORMAT(InfoToCode[i]);
            NEncode(wCustInfo,wCustInfoBarCodeN);
            InfoBarCode := InfoBarCode + wCustInfoBarCodeN;
          END;
        TableToUse::CTable:
          FOR i := 1 TO STRLEN(InfoToCode) DO BEGIN
            wCustInfoBarCodeC := '';
            wCustInfo := FORMAT(InfoToCode[i]);
            CEncode(wCustInfo,wCustInfoBarCodeC);
            InfoBarCode := InfoBarCode + wCustInfoBarCodeC;
          END;
      END;
    END;

    LOCAL PROCEDURE BarToDec@1500000(VAR Dec@1500000 : Integer;VAR Bar@1500001 : Text[3]);
    VAR
      i@1500002 : Integer;
    BEGIN
      IF Bar = '' THEN BEGIN
        Bar := Bar3Table[Dec + 1];
      END ELSE
        FOR i := 1 TO 64 DO BEGIN
          IF Bar = Bar3Table[i] THEN BEGIN
            Dec := i - 1;
            EXIT;
          END;
        END;
    END;

    LOCAL PROCEDURE CEncode@1500002(VAR Character@1500000 : Text[1];VAR Bar@1500001 : Text[3]);
    VAR
      i@1500002 : Integer;
    BEGIN
      IF Character <> '' THEN BEGIN
        FOR i := 1 TO 64 DO BEGIN
          IF Character = CTable[i] THEN BEGIN
            Bar := Bar3Table[i];
            EXIT;
          END;
        END;
      END ELSE
        FOR i := 1 TO 64 DO BEGIN
          IF Bar = Bar3Table[i] THEN BEGIN
            Character := CTable[i];
            EXIT;
          END;
        END;
    END;

    LOCAL PROCEDURE NEncode@1500005(VAR Dec@1500000 : Text[1];VAR Bar@1500001 : Text[2]);
    VAR
      i@1500002 : Integer;
    BEGIN
      IF Dec <> '' THEN BEGIN
        IF EVALUATE(i,Dec) THEN
          Bar := Bar2Table[i + 1];
      END ELSE
        FOR i := 1 TO 10 DO BEGIN
          IF Bar = Bar2Table[i] THEN BEGIN
            Dec := FORMAT(i - 1);
            EXIT;
          END;
        END;
    END;

    LOCAL PROCEDURE GenerateBarTables@1500003();
    BEGIN
      IF BarTablesGenerated = TRUE THEN
        EXIT;
      Bar3Table[1] := '000';
      Bar3Table[2] := '001';
      Bar3Table[3] := '002';
      Bar3Table[4] := '003';
      Bar3Table[5] := '010';
      Bar3Table[6] := '011';
      Bar3Table[7] := '012';
      Bar3Table[8] := '013';
      Bar3Table[9] := '020';
      Bar3Table[10] := '021';
      Bar3Table[11] := '022';
      Bar3Table[12] := '023';
      Bar3Table[13] := '030';
      Bar3Table[14] := '031';
      Bar3Table[15] := '032';
      Bar3Table[16] := '033';
      Bar3Table[17] := '100';
      Bar3Table[18] := '101';
      Bar3Table[19] := '102';
      Bar3Table[20] := '103';
      Bar3Table[21] := '110';
      Bar3Table[22] := '111';
      Bar3Table[23] := '112';
      Bar3Table[24] := '113';
      Bar3Table[25] := '120';
      Bar3Table[26] := '121';
      Bar3Table[27] := '122';
      Bar3Table[28] := '123';
      Bar3Table[29] := '130';
      Bar3Table[30] := '131';
      Bar3Table[31] := '132';
      Bar3Table[32] := '133';
      Bar3Table[33] := '200';
      Bar3Table[34] := '201';
      Bar3Table[35] := '202';
      Bar3Table[36] := '203';
      Bar3Table[37] := '210';
      Bar3Table[38] := '211';
      Bar3Table[39] := '212';
      Bar3Table[40] := '213';
      Bar3Table[41] := '220';
      Bar3Table[42] := '221';
      Bar3Table[43] := '222';
      Bar3Table[44] := '223';
      Bar3Table[45] := '230';
      Bar3Table[46] := '231';
      Bar3Table[47] := '232';
      Bar3Table[48] := '233';
      Bar3Table[49] := '300';
      Bar3Table[50] := '301';
      Bar3Table[51] := '302';
      Bar3Table[52] := '303';
      Bar3Table[53] := '310';
      Bar3Table[54] := '311';
      Bar3Table[55] := '312';
      Bar3Table[56] := '313';
      Bar3Table[57] := '320';
      Bar3Table[58] := '321';
      Bar3Table[59] := '322';
      Bar3Table[60] := '323';
      Bar3Table[61] := '330';
      Bar3Table[62] := '331';
      Bar3Table[63] := '332';
      Bar3Table[64] := '333';
      Bar2Table[1] := '00';
      Bar2Table[2] := '01';
      Bar2Table[3] := '02';
      Bar2Table[4] := '10';
      Bar2Table[5] := '11';
      Bar2Table[6] := '12';
      Bar2Table[7] := '20';
      Bar2Table[8] := '21';
      Bar2Table[9] := '22';
      Bar2Table[10] := '30';
      CTable[1] := 'A';
      CTable[2] := 'B';
      CTable[3] := 'C';
      CTable[5] := 'D';
      CTable[6] := 'E';
      CTable[7] := 'F';
      CTable[9] := 'G';
      CTable[10] := 'H';
      CTable[11] := 'I';
      CTable[17] := 'J';
      CTable[18] := 'K';
      CTable[19] := 'L';
      CTable[21] := 'M';
      CTable[22] := 'N';
      CTable[23] := 'O';
      CTable[25] := 'P';
      CTable[26] := 'Q';
      CTable[27] := 'R';
      CTable[33] := 'S';
      CTable[34] := 'T';
      CTable[35] := 'U';
      CTable[37] := 'V';
      CTable[38] := 'W';
      CTable[39] := 'X';
      CTable[41] := 'Y';
      CTable[42] := 'Z';
      CTable[43] := '0';
      CTable[49] := '1';
      CTable[50] := '2';
      CTable[51] := '3';
      CTable[53] := '4';
      CTable[54] := '5';
      CTable[55] := '6';
      CTable[57] := '7';
      CTable[58] := '8';
      CTable[59] := '9';
      CTable[4] := ' ';
      CTable[8] := '#';
      CTable[12] := 'a';
      CTable[13] := 'b';
      CTable[14] := 'c';
      CTable[15] := 'd';
      CTable[16] := 'e';
      CTable[20] := 'f';
      CTable[24] := 'g';
      CTable[28] := 'h';
      CTable[29] := 'i';
      CTable[30] := 'j';
      CTable[31] := 'k';
      CTable[32] := 'l';
      CTable[36] := 'm';
      CTable[40] := 'n';
      CTable[44] := 'o';
      CTable[45] := 'p';
      CTable[46] := 'q';
      CTable[47] := 'r';
      CTable[48] := 's';
      CTable[52] := 't';
      CTable[56] := 'u';
      CTable[60] := 'v';
      CTable[61] := 'w';
      CTable[62] := 'x';
      CTable[63] := 'y';
      CTable[64] := 'z';
      BarTablesGenerated := TRUE;
    END;

    LOCAL PROCEDURE AppendRSParity@1500012(VAR Barcode@1500000 : Text[67]) : Boolean;
    VAR
      BarCodeLenght@1500001 : Integer;
      iSymbols@1500002 : Integer;
      iNumInfoSymbols@1500003 : Integer;
      w_idx@1500004 : Integer;
      wBarGroup@1500005 : Text[3];
      i@1500006 : Integer;
      j@1500007 : Integer;
      ParitySymbols@1500008 : ARRAY [4] OF Integer;
      iTempCodeWord@1500009 : ARRAY [21] OF Integer;
      iCodeWord@1500010 : ARRAY [21] OF Integer;
    BEGIN
      BarCodeLenght := STRLEN(Barcode);
      IF (BarCodeLenght <> 21) AND (BarCodeLenght <> 36) AND (BarCodeLenght <> 51) THEN
        EXIT(FALSE);
      iNumInfoSymbols := BarCodeLenght / 3;
      iSymbols := iNumInfoSymbols + 4;
      FOR i := 1 TO iNumInfoSymbols DO BEGIN
        w_idx := (i - 1) * 3;
        wBarGroup := COPYSTR(Barcode,w_idx + 1,3);
        BarToDec(iCodeWord[i],wBarGroup);
      END;

      j := iNumInfoSymbols;
      FOR i := 1 TO iNumInfoSymbols DO BEGIN
        iTempCodeWord[i] := iCodeWord[j];
        j := j - 1;
      END;

      RSEncode(iNumInfoSymbols,iTempCodeWord,ParitySymbols);

      FOR i := 1 TO 4 DO
        iCodeWord[i + iNumInfoSymbols] := ParitySymbols[5 - i];

      FOR i := iNumInfoSymbols TO iSymbols - 1 DO BEGIN
        wBarGroup := '';
        BarToDec(iCodeWord[i + 1],wBarGroup);
        Barcode := Barcode + wBarGroup;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RSInit@1500004();
    VAR
      primpoly@1500000 : Integer;
      wtest@1500001 : Integer;
      wprev@1500002 : Integer;
      wnext@1500003 : Integer;
      i@1500004 : Integer;
      j@1500005 : Integer;
    BEGIN
      primpoly := 67;
      wtest := 64;

      FOR i := 0 TO 63 DO BEGIN
        mult[0 + 1,i + 1] := 0;
        mult[1 + 1,i + 1] := i;
      END;

      wprev := 1;
      FOR i := 1 TO 63 DO BEGIN
        wnext := wprev * 2;
        IF wnext >= wtest THEN
          wnext := BitXor(wnext,primpoly);
        FOR j := 0 TO 63 DO BEGIN
          mult[wnext + 1,j + 1] := mult[wprev + 1,j + 1] * 2;
          IF mult[wnext + 1,j + 1] >= wtest THEN
            mult[wnext + 1,j + 1] := BitXor(mult[wnext + 1,j + 1],primpoly);
        END;
        wprev := wnext;
      END;

      gen[1] := 48;
      gen[2] := 17;
      gen[3] := 29;
      gen[4] := 30;
      gen[5] := 1;
    END;

    LOCAL PROCEDURE RSEncode@1500006(k@1500000 : Integer;SymbArray@1500001 : ARRAY [21] OF Integer;VAR RSArray@1500002 : ARRAY [4] OF Integer);
    VAR
      i@1500003 : Integer;
      n@1500004 : Integer;
      j@1500005 : Integer;
      TempArray@1500006 : ARRAY [21] OF Integer;
    BEGIN
      RSInit;
      n := k + 4;

      FOR i := 1 TO 4 DO
        TempArray[i] := 0;

      FOR i := 5 TO n DO
        TempArray[i] := SymbArray[i - 4];

      FOR i := k - 1 DOWNTO 0 DO
        FOR j := 0 TO 4 DO
          TempArray[1 + i + j] := BitXor(TempArray[1 + i + j],mult[1 + gen[1 + j],1 + TempArray[1 + 4 + i]]);

      FOR i := 1 TO 4 DO
        RSArray[i] := TempArray[i];
    END;

    LOCAL PROCEDURE BitXor@1500007(Num1@1500000 : Integer;Num2@1500001 : Integer) ReturnNum : Integer;
    VAR
      Bit@1500002 : Integer;
      Num1Bit@1500003 : Integer;
      Num2Bit@1500004 : Integer;
    BEGIN
      ReturnNum := 0;
      Bit := 1;
      REPEAT
        IF (Num1 <> 0) OR (Num2 <> 0) THEN BEGIN
          Num1Bit := Num1 MOD 2;
          Num1 := ROUND(Num1 / 2,1,'<');
          Num2Bit := Num2 MOD 2;
          Num2 := ROUND(Num2 / 2,1,'<');
          IF Num1Bit <> Num2Bit THEN
            ReturnNum := ReturnNum + Bit;
          Bit := Bit * 2;
        END;
      UNTIL (Num1 = 0) AND (Num2 = 0);
    END;

    BEGIN
    END.
  }
}

