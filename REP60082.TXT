OBJECT Report 60082 KONF. VAT-IN
{
  OBJECT-PROPERTIES
  {
    Date=08/14/15;
    Time=14:57:23;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table50016;
               DataItemTableView=WHERE(Vat Type=CONST(In));
               OnPreDataItem=BEGIN
                               ExcelBuffer.DELETEALL();

                               ExcelBuffer.AddColumn('Slip No.',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Source No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Posting Date',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Invoice No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Kwitansi No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Invoice Date',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Delievery Order No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Delievery Order Date',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Settlement Slip No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Settlement Slip Date',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Bank Account Name',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Bank Account No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('NPWP',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Entity Name',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('Tax INvoice No',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('DPP',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.AddColumn('PPN',FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                               ExcelBuffer.NewRow();
                             END;

               OnAfterGetRecord=VAR
                                  CleLoc@1000000000 : Record 21;
                                BEGIN

                                  ExcelBuffer.AddColumn("Espt DETAILS"."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn("Espt DETAILS"."Source No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn("Espt DETAILS"."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);

                                  //Fetch Data from Sales CR Memo line-Start
                                   SalesCrMemo.SETRANGE(SalesCrMemo."Pre-Assigned No.","Espt DETAILS"."Document No.");
                                   IF SalesCrMemo.FINDSET THEN BEGIN
                                    Doc := SalesCrMemo."No.";
                                    //DONo := SalesCrMemo."External Document No.";
                                    DoDate := SalesCrMemo."Document Date";
                                    //BankAccNo := SalesCrMemo."Bank Account No";
                                    //BankAccName := SalesCrMemo."Vend/Cust Bank Name";
                                   END;
                                   SalesCrMemoLine.SETRANGE(SalesCrMemoLine."Document No.",Doc);
                                   IF SalesCrMemoLine.FINDSET THEN
                                    BEGIN
                                     InvoiceNo := SalesCrMemoLine."Commercial Invoice No.";
                                     KwitansiNo := SalesCrMemoLine."Kwitansi No.";
                                     InvoiceDate := SalesCrMemoLine."Commercial Invoice Date";
                                    END;

                                  //Fetch Data from Sales CR Memo line-End

                                  ExcelBuffer.AddColumn(InvoiceNo,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn(KwitansiNo,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn(InvoiceDate,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn('',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn(DoDate,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);

                                  CleLoc.RESET;
                                  CleLoc.SETRANGE("Slip No.","Espt DETAILS"."Document No.");
                                  IF CleLoc.FINDFIRST THEN BEGIN
                                    CheckAppliedBy(CleLoc);
                                  END;

                                  ExcelBuffer.AddColumn(AppliedBy,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn(AppliedDate,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);

                                  GLEntry.SETRANGE(GLEntry."Slip No.",AppliedBy);
                                  GLEntry.SETRANGE(GLEntry."Bal. Account Type",GLEntry."Bal. Account Type"::Customer);
                                  GLEntry.SETRANGE(GLEntry."Source Type",GLEntry."Source Type"::"Bank Account");
                                  GLEntry.SETRANGE(GLEntry."Reason Code",'PAY');
                                  IF GLEntry.FINDSET THEN
                                   BankAccNo := GLEntry."Source No.";

                                  IF Bank.GET(BankAccNo) THEN
                                    BankAccName := Bank.Name;
                                    Bcode := Bank."Bank Account No.";

                                  ExcelBuffer.AddColumn(BankAccName,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn(Bcode,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn("Espt DETAILS".NPWP,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn("Espt DETAILS"."Buy-from Vend/Cust Name",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn("Espt DETAILS"."Tax Invoice No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                                  ExcelBuffer.AddColumn("Espt DETAILS"."Base LCY",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                                  ExcelBuffer.AddColumn("Espt DETAILS"."Amount LCY",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                                  ExcelBuffer.NewRow;
                                END;

               OnPostDataItem=BEGIN
                                ExcelBuffer.CreateBookAndOpenExcel('KONFIMASI VAT-IN','',COMPANYNAME,USERID);
                              END;

               ReqFilterFields=Posting Date,Document No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1000000000 : Record 370;
      SalesCrMemo@1000000001 : Record 114;
      SalesCrMemoLine@1000000002 : Record 115;
      Doc@1000000003 : Text;
      InvoiceNo@1000000004 : Text;
      KwitansiNo@1000000005 : Text;
      InvoiceDate@1000000006 : Date;
      DONo@1000000007 : Text;
      DoDate@1000000008 : Date;
      SettleSlipNo@1000000009 : Text;
      SettleSlipDate@1000000010 : Text;
      BankAccNo@1000000011 : Text;
      BankAccName@1000000012 : Text;
      cle@1000000013 : Record 21;
      AppliedBy@1000000015 : Text[1024];
      AppliedDate@1000000014 : Text;
      CreateCustLedgEntry@1000000016 : Record 21;
      GLEntry@1000000017 : Record 17;
      Bank@1000000018 : Record 270;
      Bcode@1000000019 : Code[20];

    PROCEDURE CheckAppliedBy@1102159002(VAR RecLoc@1102159001 : Record 21);
    VAR
      CLE_LOC@1102159002 : Record 21;
    BEGIN
      cle.RESET;
      AppliedBy := '';
      AppliedDate := '';
      cle := RecLoc;
      IF cle."Entry No." <> 0 THEN BEGIN
        CreateCustLedgEntry := cle;
        FindApplnEntriesDtldtLedgEntry;
        cle.SETCURRENTKEY("Entry No.");
        cle.SETRANGE("Entry No.");

        IF CreateCustLedgEntry."Closed by Entry No." <> 0 THEN BEGIN
          cle."Entry No." := CreateCustLedgEntry."Closed by Entry No.";
          cle.MARK(TRUE);
        END;

        cle.SETCURRENTKEY("Closed by Entry No.");
        cle.SETRANGE("Closed by Entry No.",CreateCustLedgEntry."Entry No.");
        IF cle.FIND('-') THEN
          REPEAT
            cle.MARK(TRUE);
          UNTIL RecLoc.NEXT = 0;

        cle.SETCURRENTKEY("Entry No.");
        cle.SETRANGE("Closed by Entry No.");
      END;

      cle.MARKEDONLY(TRUE);

      IF cle.FINDFIRST THEN
      BEGIN
        AppliedBy :=cle."Slip No.";
        //MESSAGE(AppliedBy);
        AppliedDate := FORMAT(cle."Slip Date");
      END;
      IF cle.NEXT <> 0 THEN
      REPEAT
        AppliedBy := AppliedBy+'|'+cle."Slip No.";
        AppliedDate := AppliedDate + '|' + FORMAT(cle."Slip Date");
      UNTIL cle.NEXT = 0;
      //YIMMDEVIP1.0 end
    END;

    PROCEDURE FindApplnEntriesDtldtLedgEntry@1102159003();
    VAR
      DtldCustLedgEntry1@1001 : Record 379;
      DtldCustLedgEntry2@1000 : Record 379;
    BEGIN

      //YIMMDEVIP1.0 start

      DtldCustLedgEntry1.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.",CreateCustLedgEntry."Entry No.");
      DtldCustLedgEntry1.SETRANGE(Unapplied,FALSE);
      IF DtldCustLedgEntry1.FIND('-') THEN
        REPEAT
          IF DtldCustLedgEntry1."Cust. Ledger Entry No." =
             DtldCustLedgEntry1."Applied Cust. Ledger Entry No."
          THEN BEGIN
            DtldCustLedgEntry2.INIT;
            DtldCustLedgEntry2.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
            DtldCustLedgEntry2.SETRANGE(
              "Applied Cust. Ledger Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            DtldCustLedgEntry2.SETRANGE("Entry Type",DtldCustLedgEntry2."Entry Type"::Application);
            DtldCustLedgEntry2.SETRANGE(Unapplied,FALSE);
            IF DtldCustLedgEntry2.FIND('-') THEN
              REPEAT
                IF DtldCustLedgEntry2."Cust. Ledger Entry No." <>
                   DtldCustLedgEntry2."Applied Cust. Ledger Entry No."
                THEN BEGIN
                  cle.SETCURRENTKEY("Entry No.");
                  cle.SETRANGE("Entry No.",DtldCustLedgEntry2."Cust. Ledger Entry No.");
                  IF cle.FIND('-') THEN
                    cle.MARK(TRUE);
                END;
              UNTIL DtldCustLedgEntry2.NEXT = 0;
          END ELSE BEGIN
            cle.SETCURRENTKEY("Entry No.");
            cle.SETRANGE("Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            IF cle.FIND('-') THEN
              cle.MARK(TRUE);
          END;
        UNTIL DtldCustLedgEntry1.NEXT = 0;
      //YIMMDEVIP1.0  end
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

