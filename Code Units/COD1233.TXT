OBJECT Codeunit 1233 SEPA DD-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=12/02/13;
    Time=12:00:00;
    Version List=NAVW17.10.00.35800;
  }
  PROPERTIES
  {
    TableNo=1208;
    OnRun=BEGIN
            DeletePaymentFileErrors;
            CheckCollectionEntry(Rec);
          END;

  }
  CODE
  {
    VAR
      EuroCurrErr@1007 : TextConst 'ENU=Only transactions in euro (EUR) are allowed.;ENA=Only transactions in euro (EUR) are allowed.';
      FieldBlankErr@1006 : TextConst '@@@="%1=table name, %2=field name. Example: Customer must have a value in Name.";ENU=%1 must have a value in %2.;ENA=%1 must have a value in %2.';
      FieldKeyBlankErr@1004 : TextConst '@@@="%1=table name, %2=key field value, %3=field name. Example: Customer 10000 must have a value in Name.";ENU=%1 %2 must have a value in %3.;ENA=%1 %2 must have a value in %3.';
      MustBeCustomerErr@1001 : TextConst 'ENU=The customer %1 does not exist.;ENA=The customer %1 does not exist.';
      MustBePositiveErr@1000 : TextConst 'ENU=The amount must be positive.;ENA=The amount must be positive.';
      NotActiveMandateErr@1010 : TextConst 'ENU=The mandate %1 is not active.;ENA=The mandate %1 is not active.';
      PartnerTypeErr@1008 : TextConst '@@@="%1 = Partner Type; %2 = Company/Person.";ENU=The customer''s %1 must be %2.;ENA=The customer''s %1 must be %2.';
      TransferDateErr@1002 : TextConst 'ENU=The earliest possible transfer date is today.;ENA=The earliest possible transfer date is today.';
      SelectedRecordTxt@1003 : TextConst 'ENU=The currently selected record;ENA=The currently selected record';
      PartnerTypeBlankErr@1103 : TextConst '@@@=Partner Type must be filled.;ENU=%1 must be filled.;ENA=%1 must be filled.';

    LOCAL PROCEDURE CheckCollectionEntry@2(DirectDebitCollectionEntry@1000 : Record 1208);
    VAR
      Customer@1004 : Record 18;
      CustomerBankAccount@1003 : Record 287;
      DirectDebitCollection@1005 : Record 1207;
      GLSetup@1002 : Record 98;
      SEPADirectDebitMandate@1001 : Record 1230;
    BEGIN
      GLSetup.GET;
      WITH DirectDebitCollectionEntry DO BEGIN
        IF "Transfer Amount" <= 0 THEN
          InsertPaymentFileError(MustBePositiveErr);

        IF "Currency Code" <> GLSetup.GetCurrencyCode('EUR') THEN
          InsertPaymentFileError(EuroCurrErr);

        IF "Transfer Date" < TODAY THEN
          InsertPaymentFileError(TransferDateErr);

        IF NOT Customer.GET("Customer No.") THEN BEGIN
          InsertPaymentFileError(STRSUBSTNO(MustBeCustomerErr,"Customer No."));
          EXIT;
        END;

        IF Customer.Name = '' THEN
          AddFieldEmptyError(DirectDebitCollectionEntry,Customer.TABLECAPTION,Customer.FIELDCAPTION(Name),"Customer No.");

        DirectDebitCollection.GET("Direct Debit Collection No.");
        IF Customer."Partner Type" <> DirectDebitCollection."Partner Type" THEN
          InsertPaymentFileError(STRSUBSTNO(PartnerTypeErr,Customer.FIELDCAPTION("Partner Type"),
              DirectDebitCollection."Partner Type"));

        IF DirectDebitCollection."Partner Type" = DirectDebitCollection."Partner Type"::" " THEN
          InsertPaymentFileError(STRSUBSTNO(PartnerTypeBlankErr,DirectDebitCollection.FIELDCAPTION("Partner Type")));

        IF "Mandate ID" = '' THEN
          AddFieldEmptyError(DirectDebitCollectionEntry,SelectedRecordTxt,FIELDCAPTION("Mandate ID"),"Mandate ID")
        ELSE BEGIN
          SEPADirectDebitMandate.GET("Mandate ID");
          IF SEPADirectDebitMandate."Date of Signature" = 0D THEN
            AddFieldEmptyError(
              DirectDebitCollectionEntry,SEPADirectDebitMandate.TABLECAPTION,SEPADirectDebitMandate.FIELDCAPTION("Date of Signature"),
              "Mandate ID");
          IF NOT SEPADirectDebitMandate.IsMandateActive("Transfer Date") THEN
            InsertPaymentFileError(STRSUBSTNO(NotActiveMandateErr,"Mandate ID"));

          IF SEPADirectDebitMandate."Customer Bank Account Code" = '' THEN
            AddFieldEmptyError(
              DirectDebitCollectionEntry,SEPADirectDebitMandate.TABLECAPTION,
              SEPADirectDebitMandate.FIELDCAPTION("Customer Bank Account Code"),SEPADirectDebitMandate.ID)
          ELSE BEGIN
            CustomerBankAccount.GET(Customer."No.",SEPADirectDebitMandate."Customer Bank Account Code");
            IF CustomerBankAccount."SWIFT Code" = '' THEN
              AddFieldEmptyError(
                DirectDebitCollectionEntry,CustomerBankAccount.TABLECAPTION,CustomerBankAccount.FIELDCAPTION("SWIFT Code"),
                CustomerBankAccount.Code);
            IF CustomerBankAccount.IBAN = '' THEN
              AddFieldEmptyError(
                DirectDebitCollectionEntry,CustomerBankAccount.TABLECAPTION,CustomerBankAccount.FIELDCAPTION(IBAN),
                CustomerBankAccount.Code);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE AddFieldEmptyError@1(VAR DirectDebitCollectionEntry@1002 : Record 1208;TableCaption@1000 : Text;FieldCaption@1001 : Text;KeyValue@1003 : Text);
    VAR
      ErrorText@1004 : Text;
    BEGIN
      IF KeyValue = '' THEN
        ErrorText := STRSUBSTNO(FieldBlankErr,TableCaption,FieldCaption)
      ELSE
        ErrorText := STRSUBSTNO(FieldKeyBlankErr,TableCaption,KeyValue,FieldCaption);
      DirectDebitCollectionEntry.InsertPaymentFileError(ErrorText);
    END;

    BEGIN
    END.
  }
}

