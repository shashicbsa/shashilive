OBJECT Codeunit 50025 Propac Sale/Sale Rtrn Domestic
{
  OBJECT-PROPERTIES
  {
    Date=11/30/15;
    Time=12:51:12;
    Modified=Yes;
    Version List=UPG13R2DEV,PPNPPHDEV;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            Ch:=9;
            MasterSetup.GET;
            FileName:=MasterSetup."Interface File Path" + '\' + MasterSetup."Propac Sales Inv Dom";
            LogFileName:=MasterSetup."Interface File Path" + '\' + 'LOG-' + MasterSetup."Propac Sales Inv Dom";
            LF.CREATE(LogFileName);
            LF.CREATEOUTSTREAM(Outstreamobj);
            LF.TEXTMODE(TRUE);
            IF NOT (F.OPEN(FileName)) THEN BEGIN
              LF.CLOSE;
              EXIT;
            END;
            F.CREATEINSTREAM(Instreamobj);
            ErrorInFile:=FALSE;
            EntryNo:=0;
            //CLEAR(ToCheckDate);  //UPG13DEV
            //UPG13C.begin
            //CREATE(ToCheckDate);
            //CREATE(ToCheckDate,TRUE,TRUE); //UPG13DEV
            //UPG13C.end
            ToCheckDate := ToCheckDate.DateTimeFormatCheck;  //UPG13R2DEV
            MasterCustomerPostingSetup.GET;
            DeleteTempTable();

            WHILE NOT Instreamobj.EOS DO BEGIN
              ErrorInRow:=FALSE;
              TransactionDateOK:=FALSE;

              //Creating Entry No.
              EntryNo+=1;
              Outstreamobj.WRITE(FORMAT(EntryNo));
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));

              //Reading Invoice No.

              Instreamobj.READTEXT(Readed,20);
              EVALUATE(InvoiceNo,Readed);

              //FindSalesInvoice-Rajesh-02

              //Reading Dealer Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(DealerCode1,Readed);

              //FindDealerCode-Rajesh -01

              //Reading Transaction Date

              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);

              Readed:=ConvertDates(Readed);


              //IF NOT (EVALUATE(TransactionDate,Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN //UPG13R2DEV
              IF NOT (EVALUATE(TransactionDate,Readed) AND ToCheckDate.checkDateTime(Readed)) THEN BEGIN  //UPG13R2DEV
                Outstreamobj.WRITETEXT('! Error In Transaction Date');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE
                TransactionDateOK:=TRUE;
              //Reading Invoice Date
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              Readed:=ConvertDates(Readed);
              //CLEAR(ToCheckDate);  //UPG13R2DEV
              //UPG13C.begin
              //CREATE(ToCheckDate);
              //CREATE(ToCheckDate,TRUE,TRUE);  //UPG13R2DEV
              //UPG13C.end
              //IF NOT (EVALUATE(InvoiceDate,Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN  //UPG13R2DEV
              IF NOT (EVALUATE(InvoiceDate,Readed) AND ToCheckDate.checkDateTime(Readed)) THEN BEGIN  //UPG13R2DEV
                Outstreamobj.WRITETEXT('! Error In Invoice Date');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              //Reading Ext. Doc. No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ExtDocNo,Readed);
              //Reading NPWP No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              //EVALUATE(NPWPNo,Readed);     PPNNPPHDEV previous code blocked
              //FindNPWP-Rajesh -3
              //Reading Payment Term Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              EVALUATE(PaymentTerm,Readed);
              IF PaymentTerm = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Payment Term Code Is Blank');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
                IF NOT PaymentTerms.GET(PaymentTerm) THEN BEGIN
                  Outstreamobj.WRITETEXT('! Payment Term Code Is Not Defined');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END ELSE
                  DueDate:=CALCDATE(PaymentTerms."Due Date Calculation",InvoiceDate);
              END;
              //Reading Shop Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              {
              EVALUATE(ShopCode,Readed);

                IF ShopCode<>'' THEN BEGIN
                GeneralLedgerSetup.GET;
                DimensionValue.RESET;
                DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
                DimensionValue.SETRANGE(DimensionValue.Name,ShopCode);
                IF DimensionValue.FINDFIRST THEN ShopCode:=DimensionValue.Code
                ELSE BEGIN
                  ShopCode:='';
                  Outstreamobj.WRITETEXT('! Error In Shop Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;
              }
              //Reading Model Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ModelCode,Readed);
              IF ModelCode<>'' THEN BEGIN
                GeneralLedgerSetup.GET;
                DimensionValue.RESET;
                DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 2 Code");
                DimensionValue.SETRANGE(DimensionValue.Name,ModelCode);
                IF DimensionValue.FINDFIRST THEN
                  ModelCode:=DimensionValue.Code
                ELSE BEGIN
                  ModelCode:='';
                  Outstreamobj.WRITETEXT('! Error In Model Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;
              //Reading Currency Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(CurrencyCode,Readed);
              IF CurrencyCode='IDR' THEN
                CurrencyCode:=''
              ELSE BEGIN
                Crrncy.RESET;
                Crrncy.SETRANGE(Crrncy.Code,CurrencyCode);
                IF NOT Crrncy.FINDFIRST THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Currency Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END ELSE BEGIN
                  IF TransactionDateOK THEN BEGIN
                    CurrencyExchangeRate.RESET;
                    CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
                    CurrencyExchangeRate.SETRANGE("Starting Date",TransactionDate);
                    IF NOT CurrencyExchangeRate.FINDFIRST THEN BEGIN
                      Outstreamobj.WRITETEXT('! Currency Exchange Rate Is Not Defined For Invoice Date');
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow:=TRUE;
                    END;
                  END;
                END;
              END;
              //Reading AppliedToInvoiceNo
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(AppliedToInvoiceNo,Readed);
              //SetDocType-04
              //Reading Account No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(CommodityCode,Readed);
              //FindCommodityCode-Rajesh
              //Reading Amount
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              IF NOT EVALUATE(Amount,Readed) THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Amount');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              //Reading Quantity
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,1);
              Quantity:=1;
              //Reading VAT Buss. Posting Group
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(VATBussPostingGrp,Readed);
              IF (VATBussPostingGrp <>'DOMESTIC') AND
                (VATBussPostingGrp <>'EXPORT') THEN
              BEGIN
                Outstreamobj.WRITETEXT('! VAT Buss. Posting Group Can Only Be Domestic Or Export');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
                IF (VATBussPostingGrp='DOMESTIC') THEN BEGIN
                  FindSalesInvoice;
                  FindCustCode;
                  //FindNPWP; PPNPPHDEV Previous code commented
                  SetDocType;
                  FindCommodityCode;
                END;
                IF (VATBussPostingGrp='EXPORT') THEN BEGIN
                  //FindVendInvoice;  ///UPG13R2DEV previous code blocked no vendor now
                  FindSalesInvoice; //UPG13R2DEV
                  //FindVendCode; // UPG13R2DEV previous code blocked coz no vendor now
                  FindCustCode; //UPG13R2DEV
                  //FindNPWP;
                  SetDocType;
                  FindCommodityCode;
                END;
              END;
              //Reading VAT Prod. Posting Group
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,1);
              IF EVALUATE(VATProdCheck,Readed) THEN BEGIN
                IF VATProdCheck = 0 THEN  BEGIN
                  IF (VATBussPostingGrp='DOMESTIC') THEN BEGIN
                    VATProdPostingGrp:='NO VAT';
                    GenProdPostingGrp:='NO VAT';
                  END ELSE BEGIN
                    VATProdPostingGrp:='PRRT_NOVAT';
                    GenProdPostingGrp:='NO VAT';
                  END
                END ELSE IF VATProdCheck = 1 THEN BEGIN
                  IF (VATBussPostingGrp='DOMESTIC') THEN BEGIN
                    VATProdPostingGrp:='VAT 10';
                    GenProdPostingGrp:='VAT';
                  END ELSE BEGIN
                    //VATProdPostingGrp:='PURRT 10';  //UPG13R2DEV previous blocked
                    VATProdPostingGrp:='VAT 10';
                    GenProdPostingGrp:='VAT';
                  END
                END ELSE BEGIN
                  Outstreamobj.WRITETEXT('! Error In VAT Prod. Posting Group');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END ELSE BEGIN
                Outstreamobj.WRITETEXT('! Error In VAT Prod. Posting Group');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              //PPNPPHDEV.begin
              IF (VATProdCheck = 1) AND (VATBussPostingGrp = 'DOMESTIC') THEN BEGIN
                ConversionTableCustomer.RESET;
                ConversionTableCustomer.SETRANGE("Propac Code",DealerCode1);
                IF ConversionTableCustomer.FINDSET THEN BEGIN
                  ShiptoAddress.RESET;
                  ShiptoAddress.SETRANGE("Customer No.",ConversionTableCustomer.NAV);
                  ShiptoAddress.SETRANGE(PPN,TRUE);
                  ShiptoAddress.SETRANGE("PPN S/P",TRUE);
                  IF NOT ShiptoAddress.FINDSET THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error PPN(PPN S/P) Npwp No. not found for Entity');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow:=TRUE;
                  END;
                END;
              END;
              //PPNPPHDEV.end
              //Reading Narration
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,250);
              EVALUATE(Narration,Readed);
              IF ErrorInRow THEN
                ErrorInFile:=TRUE;
              IF (NOT ErrorInRow)  THEN BEGIN
                IF  NOT ErrorInFile THEN
                  InsertInTempTable();
                Outstreamobj.WRITETEXT('Processed Successfully');
              END;
              Instreamobj.READTEXT(Readed,1);
              Outstreamobj.WRITETEXT();
            END;

            LF.CLOSE;

            IF ErrorInFile THEN
              DeleteTempTable();
            IF NOT ErrorInFile THEN
              ProPacDomesticReport.RUN;
            IF NOT ErrorInFile THEN
              PropacExportReport.RUN;
          END;

  }
  CODE
  {
    VAR
      EntryNo@1000000000 : Integer;
      InvoiceNo@1000000001 : Code[20];
      DealerCode@1000000002 : Code[20];
      TransactionDate@1000000003 : Date;
      InvoiceDate@1000000004 : Date;
      ExtDocNo@1000000010 : Code[10];
      NPWPNo@1000000005 : Code[20];
      DueDate@1000000006 : Date;
      ShopCode@1000000007 : Code[10];
      ModelCode@1000000008 : Code[10];
      CurrencyCode@1000000009 : Code[10];
      AppliedToInvoiceNo@1000000011 : Code[20];
      AccountNo@1000000012 : Code[20];
      Amount@1000000013 : Decimal;
      Quantity@1000000014 : Integer;
      VATBussPostingGrp@1000000015 : Code[10];
      VATProdPostingGrp@1000000016 : Code[10];
      Narration@1000000017 : Text[250];
      CustPostingGrp@1000000018 : Code[10];
      GenProdPostingGrp@1000000019 : Code[10];
      DocType@1000000020 : ',Credit Memo,Invoice';
      PaymentTerm@1000000022 : Code[11];
      MasterSetup@1000000051 : Record 50008;
      SalesHeader@1000000050 : Record 36;
      SalesInvoiceHeader@1000000049 : Record 112;
      PurchaseHeader@1000000053 : Record 38;
      PurchCrMemoHdr@1000000052 : Record 124;
      SalesCrMemoHeader@1000000048 : Record 114;
      ConversionTableCustomer@1000000047 : Record 50004;
      Cust@1000000046 : Record 18;
      ConversionTableVendor@1000000055 : Record 50003;
      Vend@1000000054 : Record 23;
      ToCheckDate@1000000045 : DotNet "'DateTimeFun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DateTimeFun.DateTimeFormatCheck";
      ShiptoAddress@1000000044 : Record 222;
      OrderAddress@1000000056 : Record 224;
      PaymentTerms@1000000043 : Record 3;
      Crrncy@1000000042 : Record 4;
      GeneralLedgerSetup@1000000041 : Record 98;
      DimensionValue@1000000040 : Record 349;
      CurrencyExchangeRate@1000000039 : Record 330;
      CommodityCodePROPAC@1000000038 : Record 50021;
      "PropacSales/RtrnReport"@1000000037 : Codeunit 50027;
      MasterCustomerPostingSetup@1000000036 : Record 50012;
      FileName@1000000035 : Text[255];
      LogFileName@1000000034 : Text[255];
      LF@1000000033 : File;
      Outstreamobj@1000000032 : OutStream;
      F@1000000031 : File;
      Instreamobj@1000000030 : InStream;
      Readed@1000000029 : Text[255];
      Ch@1000000028 : Char;
      ErrorInFile@1000000027 : Boolean;
      ErrorInRow@1000000026 : Boolean;
      TransactionDateOK@1000000025 : Boolean;
      CommodityCode@1000000024 : Code[20];
      VATProdCheck@1000000023 : Integer;
      DealerCode1@1000000021 : Code[20];
      OldVendor@1000000057 : Code[20];
      ProPacDomesticReport@1000000058 : Report 50062;
      PropacExportReport@1000000059 : Report 50063;
      PropacShopCodeMapping@1102159001 : Record 60061;

    PROCEDURE InsertInTempTable@1000000000();
    VAR
      TempTableForPropac@1000000000 : Record 50022;
    BEGIN
      TempTableForPropac.INIT;
      TempTableForPropac."Document Type":=DocType;
      TempTableForPropac."Dealer Code":=DealerCode;
      TempTableForPropac."Invoice No.":=InvoiceNo;
      TempTableForPropac."Entry No.":=EntryNo;
      TempTableForPropac.INSERT;
      TempTableForPropac."Transaction Date":=TransactionDate;
      TempTableForPropac."Invoice Date":=InvoiceDate;
      TempTableForPropac."Ext.Doc.No.":=ExtDocNo;
      //TempTableForPropac."Npwp No.":=NPWPNo; //PPNPPHDEV previous code blocked
      TempTableForPropac."Due Date":=DueDate;
      TempTableForPropac."Shop Code":=ShopCode;
      TempTableForPropac."Model Code":=ModelCode;
      TempTableForPropac."Currency Code":=CurrencyCode;
      TempTableForPropac."Applied To Invoice No":=AppliedToInvoiceNo;
      TempTableForPropac."Account No.":=AccountNo;
      TempTableForPropac.Amount:=Amount;
      TempTableForPropac.Quantity:=Quantity;

      IF (VATBussPostingGrp='DOMESTIC') THEN
      TempTableForPropac."VAT Buss. Posting Group":=VATBussPostingGrp
      ELSE
      TempTableForPropac."VAT Buss. Posting Group":=MasterSetup.Foreign_Bus_Posting_Group;



      TempTableForPropac."VAT Prod. Posting Group":=VATProdPostingGrp;
      TempTableForPropac.Narration:=Narration;
      TempTableForPropac."Customer Posting Group":=CustPostingGrp;
      TempTableForPropac."Gen. Prod. Posting Group":=GenProdPostingGrp;
      TempTableForPropac."Old Vendor":='';
      TempTableForPropac."Payment Term":=PaymentTerm;
      TempTableForPropac.MODIFY;
    END;

    PROCEDURE DeleteTempTable@1000000001();
    VAR
      TempTableForPropac@1000000000 : Record 50022;
    BEGIN
      TempTableForPropac.DELETEALL;
    END;

    PROCEDURE ConvertDates@1000000002(DateText@1000000000 : Text[255]) : Text[255];
    VAR
      NewDateText@1000000001 : Text[30];
      DD@1000000002 : Text[30];
      MM@1000000003 : Text[30];
      YY@1000000004 : Text[30];
    BEGIN

      DD:=COPYSTR(DateText,1,2);
      MM:=COPYSTR(DateText,4,2);
      YY:=COPYSTR(DateText,7,2);

      //NewDateText:=MM+'-'+DD+'-'+YY;       //UPG13R2DEV
      NewDateText:=MM+'-'+DD+'-'+'20'+YY;  //UPG13R2DEV
      EXIT(NewDateText);
    END;

    PROCEDURE FindCustCode@1000000003();
    BEGIN
        IF DealerCode1='' THEN BEGIN
          Outstreamobj.WRITETEXT('! Dealer Code Is Blank');
          Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE BEGIN
          ConversionTableCustomer.RESET;
          ConversionTableCustomer.SETRANGE("Propac Code",DealerCode1);
          IF ConversionTableCustomer.FINDFIRST THEN BEGIN
            Cust.RESET;
            Cust.SETRANGE("No.",ConversionTableCustomer.NAV);
            IF Cust.FINDFIRST THEN BEGIN
              DealerCode:=Cust."No.";

              IF Cust."Customer Type"=Cust."Customer Type"::" " THEN BEGIN
                Outstreamobj.WRITETEXT('! Customer Type Is Not Defied On Entity Card');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
              //UPG13R2DEV.begin-Code Modified as per Single Master
                IF (VATBussPostingGrp='DOMESTIC') THEN BEGIN
                  IF Cust."Customer Type"=Cust."Customer Type"::"Third Party" THEN
                    CustPostingGrp:=MasterCustomerPostingSetup."Local S/P Third Party";

                  IF Cust."Customer Type"=Cust."Customer Type"::"Related Party" THEN
                    CustPostingGrp:=MasterCustomerPostingSetup."Local S/P Related Party"
                  ELSE
                    CustPostingGrp:=MasterCustomerPostingSetup."Local S/P Third Party";

                END ELSE IF (VATBussPostingGrp='EXPORT') THEN BEGIN
                  IF Cust."Customer Type"=Cust."Customer Type"::"Third Party" THEN
                    CustPostingGrp:=MasterCustomerPostingSetup."Export S/P Third Party";

                  IF Cust."Customer Type"=Cust."Customer Type"::"Related Party" THEN
                    CustPostingGrp:=MasterCustomerPostingSetup."Export S/P Related Party";
                END;
              END;
              //UPG13R2DEV.end
              IF Cust."Entity type"=Cust."Entity type"::Dealer THEN BEGIN    //UPG13R2DEV
                IF Cust."Type of Dealer"=Cust."Type of Dealer"::" " THEN BEGIN
                  Outstreamobj.WRITETEXT('! Type Of Dealer Is Not Defiend On Entity Card');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
                END;
              END;

              IF Cust."VAT Bus. Posting Group"='' THEN BEGIN
                Outstreamobj.WRITETEXT('! VAT Bus. Posting Group Is Not Defined On Entity Card');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;

              //UPG13R2DEV.begin
              PropacShopCodeMapping.RESET;
              PropacShopCodeMapping.SETRANGE("Area Code DDS",Cust."Area Code DDS");
              IF PropacShopCodeMapping.FINDFIRST THEN BEGIN
                ShopCode := PropacShopCodeMapping."Propac Shop Code";
              END;
              //UPG13R2DEV.end

            END ELSE BEGIN
              Outstreamobj.WRITETEXT('! Related Dealer Code Is Not Defined In Entity Table');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END ELSE BEGIN
            Outstreamobj.WRITETEXT('! Propac Dealer Code Is Not Defined In Conversion Table');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;
        END;

      {//UPG13R2DEV.begin-Old Code Commented
      IF (Cust."Type of Dealer"=Cust."Type of Dealer"::DDS) THEN
       EVALUATE(ShopCode,'410100');

      IF (Cust."Type of Dealer"=Cust."Type of Dealer"::"Main Dealer") THEN
       EVALUATE(ShopCode,'410200');
      }
      //UPG13R2DEV.end
    END;

    PROCEDURE FindSalesInvoice@1000000004();
    BEGIN
        IF InvoiceNo='' THEN BEGIN
          Outstreamobj.WRITETEXT('! Invoice No. Is Blank');
          Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE BEGIN
          SalesHeader.RESET;
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
          SalesHeader.SETRANGE("No.",InvoiceNo);
          IF SalesHeader.FINDFIRST THEN BEGIN
            Outstreamobj.WRITETEXT('! Invoice No. Already Exist');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
          END ELSE BEGIN
            SalesInvoiceHeader.RESET;
            SalesInvoiceHeader.SETRANGE("No.",InvoiceNo);
            IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
              Outstreamobj.WRITETEXT('! Invoice No. Is Already Posted');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END;
        END;

        IF (AppliedToInvoiceNo<>'') THEN BEGIN
          SalesHeader.RESET;
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
          SalesHeader.SETRANGE("No.",InvoiceNo);
          IF SalesHeader.FINDFIRST THEN BEGIN
            Outstreamobj.WRITETEXT('! Invoice No. Already Exist');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow:=TRUE;
          END ELSE BEGIN
            SalesCrMemoHeader.RESET;
            SalesCrMemoHeader.SETRANGE("No.",InvoiceNo);
            IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
              Outstreamobj.WRITETEXT('! Invoice No. Is Already Posted');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END;
        END;
    END;

    PROCEDURE FindNPWP@1000000005();
    BEGIN
        IF NPWPNo <> '' THEN
        BEGIN
          ConversionTableCustomer.RESET;
          ConversionTableCustomer.SETRANGE("Propac Code",DealerCode1);
          //ConversionTableCustomer.SETRANGE(NPWP,NPWPNo);

          IF ConversionTableCustomer.FINDFIRST THEN
           BEGIN
            IF NOT ShiptoAddress.GET(ConversionTableCustomer.NAV,NPWPNo) THEN
             BEGIN
              Outstreamobj.WRITETEXT('! NPWP No. Is Not Defined As Ship To Addd. For The Dealer');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
             END
            ELSE
            EVALUATE(NPWPNo,ShiptoAddress.Code);
           END;
        END;
    END;

    PROCEDURE FindCommodityCode@1000000006();
    BEGIN
      IF (VATBussPostingGrp=MasterSetup.Domestic_Bus_Posting_Group) THEN
      BEGIN

        IF CommodityCode = '' THEN BEGIN
          Outstreamobj.WRITETEXT('! Commodity Code Is Balnk');
          Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE BEGIN
          IF NOT CommodityCodePROPAC.GET(CommodityCode,Cust."Customer Type",MasterSetup.Domestic_Bus_Posting_Group) THEN BEGIN
            Outstreamobj.WRITETEXT('! Commodity Code Is Not Defined');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END ELSE BEGIN
            AccountNo:=CommodityCodePROPAC."Account No.";
          END;
        END;

      END;//End Of Postinggrp IF



      IF (VATBussPostingGrp='EXPORT') THEN
      BEGIN

        IF CommodityCode = '' THEN BEGIN
          Outstreamobj.WRITETEXT('! Commodity Code Is Balnk');
          Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE BEGIN
         // IF NOT CommodityCodePROPAC.GET(CommodityCode,Vend."Vendor Type",MasterSetup.Foreign_Bus_Posting_Group) THEN BEGIN   //UPG13R2DEV previous code blocked because no vendor now
            IF NOT CommodityCodePROPAC.GET(CommodityCode,Cust."Customer Type",MasterSetup.Foreign_Bus_Posting_Group) THEN BEGIN
            Outstreamobj.WRITETEXT('! Commodity Code Is Not Defined');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END ELSE BEGIN
            AccountNo:=CommodityCodePROPAC."Account No.";
          END;
        END;

      END;//End Of Postinggrp IF
    END;

    PROCEDURE FindVendCode@1000000007();
    BEGIN
        IF DealerCode1='' THEN BEGIN
          Outstreamobj.WRITETEXT('! Dealer Code Is Blank');
          Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE BEGIN
          ConversionTableVendor.RESET;
          ConversionTableVendor.SETRANGE("Propac Code",DealerCode1);
          IF ConversionTableVendor.FINDFIRST THEN BEGIN
            OldVendor:=DealerCode1;
            Vend.RESET;
            Vend.SETRANGE("No.",ConversionTableVendor.NAV);
            IF Vend.FINDFIRST THEN BEGIN
              DealerCode:=Vend."No.";

              IF Vend."Vendor Type"=Vend."Vendor Type"::" " THEN BEGIN
                Outstreamobj.WRITETEXT('! Vendorr Type Is Not Defied On Vendor Card');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              IF Vend."Gen. Bus. Posting Group"='' THEN BEGIN
                Outstreamobj.WRITETEXT('! Gen. Bus. Posting Group is Not Defined For :-');
                Outstreamobj.WRITE(Vend."No.");
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              IF Vend."VAT Bus. Posting Group"='' THEN BEGIN
                Outstreamobj.WRITETEXT('! VAT Bus. Posting Group is Not Defined For :-');
                Outstreamobj.WRITE(Vend."No.");
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              IF Vend."WHT Business Posting Group"='' THEN BEGIN
                Outstreamobj.WRITETEXT('! WHT Bus. Posting Group is Not Defined For :-');
                Outstreamobj.WRITE(Vend."No.");
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END;
              //In Case of Export Vendor Posting Group Is Mnetioned in Customer Master Setup(Table ID:-50012)
              MasterCustomerPostingSetup.GET;

              IF MasterCustomerPostingSetup."Vndr Pstng Grp(Vndr As Dlr) TP"='' THEN BEGIN
                Outstreamobj.WRITETEXT('! Vendor Posting Group is Not Defined For :-');
                Outstreamobj.WRITE(Vend."No.");
                Outstreamobj.WRITETEXT('IN Customer Master Posting Setup');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
              END;

            END ELSE BEGIN
              Outstreamobj.WRITETEXT('! Related Dealer Code Is Not Defined In Vendor Table');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;

          END ELSE BEGIN
            Outstreamobj.WRITETEXT('! Propac Dealer Code Is Not Defined In Conversion Table');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END;
        END;

              IF Vend."Vendor Type"=Vend."Vendor Type"::" " THEN BEGIN
                Outstreamobj.WRITETEXT('! Vendor Type Is Not Defied On Vendor Card');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow:=TRUE;
              END ELSE BEGIN
                IF Vend."Vendor Type"=Vend."Vendor Type"::"Third Party" THEN
                  CustPostingGrp:=MasterCustomerPostingSetup."Export S/P Third Party";

                IF Vend."Vendor Type"=Vend."Vendor Type"::"Related Party" THEN
                  CustPostingGrp:=MasterCustomerPostingSetup."Export S/P Related Party";

              END;
    END;

    PROCEDURE FindVendInvoice@1000000008();
    BEGIN
        IF InvoiceNo='' THEN BEGIN
          Outstreamobj.WRITETEXT('! Invoice No. Is Blank');
          Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
          ErrorInRow:=TRUE;
        END ELSE BEGIN
          PurchaseHeader.RESET;
          PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
          PurchaseHeader.SETRANGE("No.",InvoiceNo);
          IF PurchaseHeader.FINDFIRST THEN BEGIN
            Outstreamobj.WRITETEXT('! Invoice No. Already Exist');
            Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            ErrorInRow:=TRUE;
          END ELSE BEGIN
            PurchCrMemoHdr.RESET;
            PurchCrMemoHdr.SETRANGE("No.",InvoiceNo);
            IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
              Outstreamobj.WRITETEXT('! Invoice No. Is Already Posted');
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
              ErrorInRow:=TRUE;
            END;
          END;
        END;
    END;

    PROCEDURE SetDocType@1000000012();
    BEGIN
      IF (VATBussPostingGrp='DOMESTIC') THEN BEGIN
        IF AppliedToInvoiceNo<>'' THEN
          DocType:=DocType::"Credit Memo"
        ELSE
          DocType:=DocType::Invoice;
      END ELSE
        DocType:=DocType::"Credit Memo";
    END;

    PROCEDURE DateTrim@1102159001(ADate@1102159001 : Text) : Text[250];
    BEGIN
      //EXIT(DELSTR(ADate,STRLEN(ADate),1));
    END;

    BEGIN
    {
      //UPG13R2DEV
      Modifications for 2013R2DB. Dotnet variable "ToCheckDate" is modified. ConvertDates Function is modified to input year in the YYYY format to the Dotnet Function.
      Modification for Shop Code mapping.
    }
    END.
  }
}

