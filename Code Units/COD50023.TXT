OBJECT Codeunit 50023 Purchase Intf  Mgt EprocII
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=[ 9:37:51];
    Modified=Yes;
    Version List=UPG13R2DEV,PPNPPHDEV;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN

            Initialize();
            Validate_Table_Entries();
            Enter_Data();
            "Generate log"(TRUE);
          END;

  }
  CODE
  {
    VAR
      F1@1102159069 : File;
      F2@1102159068 : File;
      LogFile@1102159067 : Text[100];
      InstreamObj@1102159066 : InStream;
      Outstreamobj@1102159065 : OutStream;
      OutstreamObj_F2@1102159064 : OutStream;
      Master_Setup@1102159063 : Record 50008;
      Vendor@1102159062 : Record 23;
      PurchHeader@1102159061 : Record 38;
      PurchInvHeader@1102159060 : Record 122;
      Purch_Interface@1102159059 : Record 60051;
      Purch_Int2@1102159058 : Record 60051;
      PurchLine@1102159057 : Record 39;
      Vend_Posting@1102159056 : Record 60000;
      WHTArea@1102159055 : Record 50017;
      Order_Add@1102159054 : Record 224;
      LineNo@1102159053 : Integer;
      WHT_Amount@1102159052 : Decimal;
      Length@1102159051 : Integer;
      I@1102159050 : Integer;
      CheckNumeric@1102159049 : Integer;
      Txt@1102159048 : Text[845];
      CheckVar@1102159047 : Text[30];
      Part1@1102159046 : Text[30];
      Part2@1102159045 : Text[30];
      Part3@1102159044 : Text[30];
      Part4@1102159043 : Text[30];
      RecordStatus@1102159042 : Text[30];
      FLAGLoadPurcInv@1102159041 : Boolean;
      "Error purch head"@1102159040 : Boolean;
      "Error purch inv head"@1102159039 : Boolean;
      Error_vendor@1102159038 : Boolean;
      Blank_NPWP@1102159037 : Boolean;
      Blank_Currency@1102159036 : Boolean;
      "Blank_Inv_No."@1102159035 : Boolean;
      Zero_Amount@1102159034 : Boolean;
      WHT_AreaCode_error@1102159033 : Boolean;
      Due_date_error@1102159032 : Boolean;
      Tax_inv_date_error@1102159031 : Boolean;
      Tax_inv_no_error@1102159030 : Boolean;
      Blank_WHT_AreaCode@1102159029 : Boolean;
      "Blank_tax_inv_no."@1102159028 : Boolean;
      Tr_date_error@1102159027 : Boolean;
      Inv_date_error@1102159026 : Boolean;
      Blank_NPWP_error@1102159025 : Boolean;
      Int_date_error@1102159024 : Boolean;
      Blank_Pur_Type@1102159023 : Boolean;
      "Blank_ACC_No."@1102159022 : Boolean;
      Duplicate_tax_inv_no_error@1102159021 : Boolean;
      NPWP_error@1102159020 : Boolean;
      Tx_in_no@1102159019 : Code[30];
      Test_doc_no@1102159018 : Code[20];
      DocNo@1102159017 : Code[20];
      Ch@1102159016 : Char;
      Window@1102159015 : Dialog;
      PurchSetup@1102159014 : Record 312;
      NoSeriesMgmt@1102159013 : Codeunit 396;
      MasterSetup2@1102159012 : Record 60053;
      Vend_Posting_Gp_Error@1102159011 : Boolean;
      VendorPostingGroup@1102159010 : Record 93;
      WHT_Line@1102159009 : Integer;
      Comm_In_No@1102159008 : Boolean;
      Comm_In_Dt@1102159007 : Boolean;
      Dimension_Value@1102159006 : Record 349;
      dim1_code@1102159005 : Code[20];
      Vendor_DO_No@1102159004 : Boolean;
      Blank_VAT_Prod_Posting_grp@1102159003 : Boolean;
      VAT_Prod_Posting_grp_err@1102159002 : Boolean;
      VAT_Pro_Pos_Grp@1102159001 : Record 324;
      Error001@1102159098 : TextConst 'ENU=Entry exists in purchase header';
      Error002@1102159097 : TextConst 'ENU=Entry exists in posted documents';
      Error003@1102159096 : TextConst 'ENU=PPN NonDealer NPWP No. not found for entity';
      Error004@1102159095 : TextConst 'ENU=Vendor does not exist';
      Error005@1102159094 : TextConst 'ENU=Tax Invoice Number required';
      Error006@1102159093 : TextConst 'ENU=Tax Invoice Number not in proper format';
      Error007@1102159092 : TextConst 'ENU="Incorrect NPWP No. "';
      Error008@1102159091 : TextConst 'ENU=Invoice No. should not be empty';
      Error009@1102159090 : TextConst 'ENU=WHT Area Code cant be blank if WHT is marked under WHT Required';
      Error010@1102159089 : TextConst 'ENU=Amount Blank';
      Error011@1102159088 : TextConst 'ENU=Transaction Date required';
      Error012@1102159087 : TextConst 'ENU=Invoice Date required';
      Error013@1102159086 : TextConst 'ENU=Tax Invoice date required';
      TEXT001@1102159085 : TextConst 'ENU=Success with Blank NPWP No.';
      TEXT002@1102159084 : TextConst 'ENU=Success with Blank Currency field';
      Error014@1102159083 : TextConst 'ENU=Account No. not provided';
      SU@1102159082 : TextConst 'ENU=Successfull';
      NS@1102159081 : TextConst 'ENU=Not Successfull';
      Error015@1102159080 : TextConst 'ENU=WHT Area Code does not exist';
      Error016@1102159079 : TextConst 'ENU=Due Date Required';
      Error017@1102159078 : TextConst 'ENU=Interface Date Required';
      Error018@1102159077 : TextConst 'ENU=Purchase Type cant be blank';
      Error019@1102159076 : TextConst 'ENU=Duplicate Tax Invoice No.';
      Error020@1102159075 : TextConst 'ENU=Vendor Posting Group does not exist';
      TEXT003@1102159074 : TextConst 'ENU="Success with Blank commercial invoice no. "';
      TEXT004@1102159073 : TextConst 'ENU=Success with Blank commercial invoice date';
      TEXT005@1102159072 : TextConst 'ENU=Success with Blank Vendor DO No.';
      Error021@1102159071 : TextConst 'ENU=VAT Product Posting Group required';
      Error022@1102159070 : TextConst 'ENU=VAT Product Posting Group Does Not Exist';
      "//shashi"@1102159101 : Text;
      SalesHeader@1102159099 : Record 36;
      SalesLine@1102159100 : Record 37;
      CustomerPostingGroup@1102159102 : Record 92;
      SalesInvHeader@1102159103 : Record 112;
      Customer@1102159104 : Record 18;
      ShipToAddress@1102159105 : Record 222;
      Blank_WHT_Prod_Posting_Group@1102159106 : Boolean;
      WHT_PROD_POST_GRP@1102159107 : Record 28041;
      WHT_Prod_Post_Grp_Error@1102159108 : Boolean;
      Error023@1102159109 : TextConst 'ENU=WHT Prod. Posting Group Can not be blank if WHT is marked under WHT Required';
      Error024@1102159110 : TextConst 'ENU=WHT Prod. Posting Group  does not exist.';
      Result@1102159111 : Integer;
      Result1@1102159112 : Integer;
      Error_PPH_Npwp@1102159113 : Boolean;
      Error025@1102159114 : TextConst 'ENU=PPH NonDealer NPWP No. not found for entity';
      BankCodeError@1102159115 : Boolean;
      ConversionError@1102159116 : Boolean;
      Error026@1102159117 : TextConst 'ENU=Entity Eproc Code not found in Conversion table entity';
      Error027@1102159118 : TextConst 'ENU="Bank Code not found Entity Eproc Code in Conversion table entity "';
      Error028@1000000000 : TextConst 'ENU=Bank Code of Non Dealer Account not found for entity';

    PROCEDURE Initialize@1102159001();
    BEGIN

      LineNo := 10000;
      WHT_Amount := 0;
      DocNo := '';
      Master_Setup.GET;
      MasterSetup2.GET; //VK
    END;

    PROCEDURE Validate_Table_Entries@1102159003();
    VAR
      ConvTblCust@1102159001 : Record 50004;
      CustBankAcc@1000000000 : Record 287;
    BEGIN

      FLAGLoadPurcInv := TRUE;
      Purch_Interface.RESET;
      //Purch_Interface.SETCURRENTKEY("Eproc Invocie No.");
      //Purch_Interface.SETRANGE("Purchase Type", Purch_Interface."Purchase Type"::Indirect);
      WriteHeader();
      IF Purch_Interface.FINDFIRST THEN
      REPEAT
        RecordStatus := SU; //++
        SalesHeader.SETRANGE("No.",Purch_Interface."Eproc Invocie No.");
        IF SalesHeader.FINDFIRST THEN
          "Error purch head" := TRUE;
        IF Purch_Interface.Amount = 0 THEN
          Zero_Amount := TRUE;
        //>>SV
        IF (Purch_Interface."Commercial Invoice No." = '') THEN
          Comm_In_No := TRUE;
        IF (Purch_Interface."Commercial Invoice Date" = 0D) THEN
          Comm_In_Dt := TRUE;
        IF (Purch_Interface."Vendor DO No." = '') THEN
          Vendor_DO_No := TRUE;
        //<<SV
        //PPNPPHDEV.begin
        {IF (Purch_Interface."VAT Required" = FALSE) AND (Purch_Interface."Npwp no." = '') THEN
          Blank_NPWP := TRUE;
        IF (Purch_Interface."VAT Required") AND (Purch_Interface."Npwp no." = '') THEN
          Blank_NPWP_error := TRUE;
        }// previous code commented
        Result := GetPPNNpwpNo(Purch_Interface."Vendor Code",Purch_Interface."VAT Required");
        CASE Result OF
          1:
            Blank_NPWP := TRUE;
          2:
            Blank_NPWP_error := TRUE;
        END;
        //PPNPPHDEV.end
        IF Purch_Interface.Currency = '' THEN
          Blank_Currency := TRUE;
        // SV 05022015
        // check if wht is required then then validate the wht area code and wht prod posting group
        IF Purch_Interface."WHT Required" THEN BEGIN
          IF(Purch_Interface."WHT Area Code" = '') THEN
             Blank_WHT_AreaCode := TRUE
          ELSE IF (Purch_Interface."WHT Prod. Posting Group" = '') THEN
            Blank_WHT_Prod_Posting_Group := TRUE;
          IF Purch_Interface."WHT Area Code" <> '' THEN BEGIN
            WHTArea.SETRANGE(No,Purch_Interface."WHT Area Code");
            IF NOT WHTArea.FINDFIRST THEN
              WHT_AreaCode_error := TRUE;
          END;
          IF Purch_Interface."WHT Prod. Posting Group" <> '' THEN BEGIN
            WHT_PROD_POST_GRP.SETRANGE(Code,Purch_Interface."WHT Prod. Posting Group");
            IF NOT WHT_PROD_POST_GRP.FINDFIRST THEN
              WHT_Prod_Post_Grp_Error := TRUE;
          END;
          //PPNPPHDEV.begin
          Result1 := GetPPHNpwpNo(Purch_Interface."Vendor Code");
          IF (Result1 = 1) THEN
            Error_PPH_Npwp := TRUE;
          //PPNPPHDEV.end
        END;
        //check over
        // SV 05022015
        //>>VK-Vendor Posting Group will flow from Eproc
        IF Purch_Interface."Vendor Posting Group" <> '' THEN BEGIN
          CustomerPostingGroup.SETRANGE(Code,Purch_Interface."Vendor Posting Group");
          IF NOT CustomerPostingGroup.FINDFIRST THEN
            Vend_Posting_Gp_Error := TRUE;
        END;
        //<<VK
       {//>>VK-Code Commented
        IF Purch_Interface."Tax Invoice No."<>'' THEN
          BEGIN
            Tx_in_no:=Purch_Interface."Tax Invoice No.";
            Test_doc_no:=Purch_Interface."Eproc Invocie No.";
            Purch_Int2.SETRANGE(Purch_Int2."Purchase Type",Purch_Int2."Purchase Type"::Indirect);
            Purch_Int2.SETRANGE(Purch_Int2."Tax Invoice No.",Tx_in_no);
            IF Purch_Int2.FINDFIRST THEN
              REPEAT
                IF Purch_Int2."Eproc Invocie No."<>Test_doc_no THEN
                  Duplicate_tax_inv_no_error:=TRUE;
              UNTIL Purch_Int2.NEXT=0;
            Purch_Int2.RESET;
          END;

        IF Purch_Interface."Tax Invoice No."<>'' THEN
          BEGIN
            Length:=STRLEN(Purch_Interface."Tax Invoice No.");
              CASE Length OF
                16:
                  BEGIN
                    FOR I:=1 TO 16 DO
                    BEGIN
                      CheckVar:=COPYSTR(Purch_Interface."Tax Invoice No.",I,5);
                      IF NOT (EVALUATE(CheckNumeric,CheckVar)) THEN
                        Tax_inv_no_error:=TRUE;
                      I:=I+5;
                    END;

                    Part1:=COPYSTR(Purch_Interface."Tax Invoice No.",1,3);
                    Part2:=COPYSTR(Purch_Interface."Tax Invoice No.",4,3);
                    Part3:=COPYSTR(Purch_Interface."Tax Invoice No.",7,2);
                    Part4:=COPYSTR(Purch_Interface."Tax Invoice No.",9,16);

                    IF ((Master_Setup."Company Name TBI" = COMPANYNAME) OR (Master_Setup."Company Name YEID" = COMPANYNAME)) THEN
                      Purch_Interface."Tax Invoice No.":=STRSUBSTNO('%1.%2-%3.%4',Part1,Part2,Part3,Part4)
                    ELSE
                      Purch_Interface."Tax Invoice No.":=STRSUBSTNO('%1.%2.%3-%4',Part1,Part2,Part3,Part4);
                  END;

                19:
                  BEGIN
                    Part1:=COPYSTR(Purch_Interface."Tax Invoice No.",1,3);
                    Part2:=COPYSTR(Purch_Interface."Tax Invoice No.",5,3);
                    Part3:=COPYSTR(Purch_Interface."Tax Invoice No.",9,2);
                    Part4:=COPYSTR(Purch_Interface."Tax Invoice No.",12,8);
                    IF NOT (EVALUATE(CheckNumeric,Part1)) THEN
                      Tax_inv_no_error:=TRUE;
                    IF NOT (EVALUATE(CheckNumeric,Part2)) THEN
                      Tax_inv_no_error:=TRUE;
                    IF NOT (EVALUATE(CheckNumeric,Part3)) THEN
                      Tax_inv_no_error:=TRUE;
                    IF NOT (EVALUATE(CheckNumeric,Part4)) THEN
                      Tax_inv_no_error:=TRUE;

                    Part1:=COPYSTR(Purch_Interface."Tax Invoice No.",4,1);
                    Part2:=COPYSTR(Purch_Interface."Tax Invoice No.",8,1);
                    Part3:=COPYSTR(Purch_Interface."Tax Invoice No.",11,1);
                    IF ((Master_Setup."Company Name TBI" = COMPANYNAME) OR (Master_Setup."Company Name YEID" = COMPANYNAME)) THEN
                      BEGIN
                        IF (Part1<>'.') OR (Part2<>'-') OR (Part3<>'.') THEN
                          Tax_inv_no_error:=TRUE;
                      END ELSE
                        IF (Part1<>'.') OR (Part2<>'.') OR (Part3<>'-') THEN
                          Tax_inv_no_error:=TRUE;
                      END;
                    ELSE
                      Tax_inv_no_error:=TRUE;
                  END;
          END;

        IF Purch_Interface."VAT Required" THEN BEGIN
          IF Purch_Interface."Tax Invoice No."='' THEN
            "Blank_tax_inv_no.":=TRUE;
          IF Purch_Interface."Tax Invoice Date"=0D THEN
            Tax_inv_date_error:=TRUE;
        END;
         }//<<VK-Code Commented
        //IF Purch_Interface."Due Date"=0D THEN  //VK
        //  Due_date_error:=TRUE;                //VK

        //SV  //>> CR#004/SV/11092014
        IF Purch_Interface."VAT Required" THEN BEGIN
          IF Purch_Interface."Tax Invoice No." = '' THEN
            "Blank_tax_inv_no." := TRUE;
          IF Purch_Interface."Tax Invoice Date" = 0D THEN
            Tax_inv_date_error := TRUE;
          IF Purch_Interface."VAT Product Posting Group" = '' THEN
            Blank_VAT_Prod_Posting_grp:= TRUE
          ELSE BEGIN
            VAT_Pro_Pos_Grp.SETRANGE(Code,Purch_Interface."VAT Product Posting Group");
            IF NOT VAT_Pro_Pos_Grp.FINDFIRST THEN
              VAT_Prod_Posting_grp_err:=TRUE;
          END;
        END;
        //SV //<< CR#004/SV/11092014
        IF Purch_Interface."Eproc Invocie No." = '' THEN
          "Blank_Inv_No." := TRUE;
        IF Purch_Interface."Transaction Date" = 0D THEN
          Tr_date_error := TRUE;
        IF Purch_Interface."Invoice Date" = 0D THEN
          Inv_date_error := TRUE;
        IF Purch_Interface."Interface Date" = 0D THEN
          Int_date_error := TRUE;
        //IF Purch_Interface."Purchase Type"=0 THEN   //VK
        //  Blank_Pur_Type:=TRUE;                     //VK
        IF Purch_Interface."Account No." = '' THEN
          "Blank_ACC_No." := TRUE;
        SalesInvHeader.SETRANGE("No.",Purch_Interface."Eproc Invocie No.");
        IF SalesInvHeader.FINDFIRST THEN
          "Error purch inv head" := TRUE;
        Customer.SETRANGE("No.",Purch_Interface."Vendor Code");
        IF NOT Customer.FINDFIRST THEN
          Error_vendor := TRUE;
        //PPNPPHDEV.begin
        {IF (Purch_Interface."Npwp no." <> '') THEN BEGIN
          IF NOT ShipToAddress.GET(Purch_Interface."Vendor Code",Purch_Interface."Npwp no.") THEN
            NPWP_error:=TRUE;
        END; }//Previous Code commented
        //PPNPPHDEV.end
         {
         //bankcode.begin
         ConvTblCust.RESET;
         ConvTblCust.SETRANGE(ConvTblCust."Eproc Code",Purch_Interface."Vendor Code");
         IF ConvTblCust.FINDSET THEN BEGIN
           IF ConvTblCust."Bank Code" = '' THEN
             BankCodeError := TRUE;
         END ELSE
           ConversionError := TRUE;
        //bankcode.end
          }////UPG13R2DEV  SV Bank code new validation SV 01072015
        {////UPG13R2DEV  SV Bank code new validation SV 01072015.begin
         //ConvTblCust.RESET;
         //ConvTblCust.SETRANGE(ConvTblCust."Eproc Code",Purch_Interface."Vendor Code");
         //IF ConvTblCust.FINDSET THEN BEGIN
           CustBankAcc.RESET;
           CustBankAcc.SETRANGE("Customer No.",Purch_Interface."Vendor Code");
           CustBankAcc.SETRANGE(Purchase,TRUE);
           IF (Purch_Interface.Currency = '') OR (Purch_Interface.Currency = 'IDR') THEN
             CustBankAcc.SETRANGE("Currency Code",'')
           ELSE
             CustBankAcc.SETRANGE("Currency Code",Purch_Interface.Currency);
           IF NOT ((CustBankAcc.FINDSET) AND (CustBankAcc.Code <> '')) THEN
             BankCodeError := TRUE;
         //END ELSE
           //ConversionError := TRUE;
        ////UPG13R2DEV  SV Bank code new validation SV 01072015.end
        }//blocked for parallel run
          //++
        IF ("Error purch head" OR Error_vendor OR "Error purch inv head" OR
            Tax_inv_no_error OR WHT_AreaCode_error OR Zero_Amount OR
            "Blank_tax_inv_no." OR Blank_WHT_AreaCode OR
            //OR (Due_date_error=TRUE) //VK
            Tax_inv_date_error OR Blank_VAT_Prod_Posting_grp OR Tr_date_error OR
            Inv_date_error OR Blank_NPWP_error OR Int_date_error OR
            "Blank_ACC_No." OR Vend_Posting_Gp_Error {//VK} OR
            //OR (Blank_Pur_Type=TRUE) //VK
            Duplicate_tax_inv_no_error OR {(NPWP_error) OR //PPNPPHDEV code commented }
            "Blank_Inv_No." OR VAT_Prod_Posting_grp_err OR
            Blank_WHT_Prod_Posting_Group OR WHT_Prod_Post_Grp_Error OR
            Error_PPH_Npwp OR BankCodeError OR ConversionError)   // SV 05022015   //bank code and conversion table errror
        THEN BEGIN
          FLAGLoadPurcInv := FALSE;
          RecordStatus := NS;
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+RecordStatus+'>'),20,' '));
        END ELSE
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+RecordStatus+'>'),20,' '));
         //++
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Entry No.")+',SU>'),20,' '));   //SV
        IF "Error purch head"  THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Eproc Invocie No."+',NS,Error001>'),20,' '));
        END ELSE IF "Error purch inv head" THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Eproc Invocie No."+',NS,Error002>'),20,' '));
        END ELSE IF "Blank_Inv_No." THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Eproc Invocie No."+',NS,Error008>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Eproc Invocie No."+',SU>'),20,' '));
        END;
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Ext.Doc.No."+',SU>'),20,' '));
        //PPNPPHDEV.begin
        {IF Blank_NPWP_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Npwp no."+',NS,Error003>'),10,' '));
        END ELSE IF Blank_NPWP THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Npwp no."+',SU,TEXT001>'),10,' '));
        END ELSE IF NPWP_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Npwp no."+',NS,Error007>'),10,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Npwp no."+',SU>'),10,' '));
        END;
        }//Previous code commented
        IF Blank_NPWP_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,NS,Error003>'),20,' '));
        END ELSE IF Blank_NPWP THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,SU,TEXT001>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,SU,>'),20,' '));
        END;
        //PPNPPHDEV.end

        IF Error_vendor THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Vendor Code"+',NS,Error004>'),30,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Vendor Code"+',SU>'),30,' '));
        END;
        IF Blank_Currency THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,SU,TEXT002>'),20,' '));       //SV
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface.Currency+',SU>'),20,' '));       //SV
        END;
        IF "Blank_ACC_No." THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,NS,Error014>'),30,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Account No."+',SU>'),30,' '));
        END;
        IF "Blank_tax_inv_no." THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,NS,Error005>'),35,' '));
        END ELSE IF Tax_inv_no_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Tax Invoice No."+',NS,Error006>'),35,' '));
        END ELSE IF Duplicate_tax_inv_no_error THEN BEGIN
            Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Tax Invoice No."+',NS,Error019>'),35,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Tax Invoice No."+',SU>'),35,' '));
        END;
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Dimension Code 1"+',SU>'),30,' '));
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Dimension Code 2"+',SU>'),30,' '));
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Dimension Code 3"+',SU>'),30,' '));
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Dimension Code 4"+',SU>'),30,' '));
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Dimension Code 5"+',SU>'),30,' '));
        IF WHT_AreaCode_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."WHT Area Code"+',NS,Error015>'),20,' '));
        END ELSE IF Blank_WHT_AreaCode THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."WHT Area Code"+',NS,Error009>'),20,' '));
        END ELSE
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."WHT Area Code"+',SU>'),20,' '));
        //SV 05022015
        IF WHT_Prod_Post_Grp_Error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."WHT Prod. Posting Group"+',NS,Error024>'),20,' '));
        END ELSE IF Blank_WHT_Prod_Posting_Group THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."WHT Prod. Posting Group"+',NS,Error023>'),20,' '));
        END ELSE
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."WHT Prod. Posting Group"+',SU>'),30,' '));
        // SV 05022015
        IF Zero_Amount THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface.Amount)+',NS,Error010>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface.Amount)+',SU>'),20,' '));
        END;
        IF Tr_date_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Transaction Date")+',NS,Error011>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Transaction Date")+',SU>'),20,' '));
        END;
        IF Inv_date_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Invoice Date")+',NS,Error012>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Invoice Date")+',SU>'),20,' '));
        END;
        IF Tax_inv_date_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Tax Invoice Date")+',NS,Error013>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Tax Invoice Date")+',SU>'),20,' '));
        END;
        //SV  //>>CR#004/SV/11092014
        IF Blank_VAT_Prod_Posting_grp THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."VAT Product Posting Group")+',NS,Error021>'),30,' '));
        END ELSE IF VAT_Prod_Posting_grp_err THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."VAT Product Posting Group"+',NS,Error022>'),30,' '));
        END ELSE BEGIN
              Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."VAT Product Posting Group")+',SU>'),30,' '));
        END;
         //SV //<<CR#004/SV/11092014
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."B/L Date")+',SU>'),20,' '));
        {//VK-Code Commented
        IF Due_date_error=TRUE THEN
          BEGIN
            Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Due Date")+',NS,Error016>'),30,' '));
          END
        ELSE
          BEGIN
            Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Due Date")+',SU>'),30,' '));
          END;
        }
        IF Int_date_error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Interface Date")+',NS,Error017>'),20,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Interface Date")+',SU>'),20,' '));
        END;
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface.Narration)+',SU>'),30,' '));
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."VAT Required")+',SU>'),20,' '));
        Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."WHT Required")+',SU>'),20,' '));
        //>>VK-Vendor Posting Group Error
        IF Vend_Posting_Gp_Error THEN BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Vendor Posting Group")+',NS,Error020>'),30,' '));
        END ELSE BEGIN
          Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Vendor Posting Group")+',SU>'),30,' '));
        END;
        //<<VK-Vendor Posting Group Error
       IF Comm_In_No THEN BEGIN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Commercial Invoice No."+',SU,TEXT003>'),30,' '));
       END ELSE BEGIN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Commercial Invoice No."+',SU>'),30,' '));
       END;
       IF Comm_In_Dt THEN BEGIN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Commercial Invoice Date")+',SU,TEXT004>'),30,' '));
       END ELSE BEGIN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+FORMAT(Purch_Interface."Commercial Invoice Date")+',SU>'),30,' '));
       END;
       IF Vendor_DO_No THEN BEGIN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Vendor DO No."+',SU,TEXT005>'),30,' '));
       END ELSE BEGIN
            Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Vendor DO No."+',SU>'),30,' '));
       END;
       //PPNPPHDEV.begin
       IF Error_PPH_Npwp THEN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,NS,Error025>'),25,' '))
       ELSE
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,SU>'),25,' '));
       //PPNPPHDEV.end
       //Bankcode and conversion table code SV begin
       IF ConversionError THEN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Vendor Code"+',NS,Error026>'),20,' '))
       ELSE
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<'+Purch_Interface."Vendor Code"+',SU>'),20,' '));
       {
       IF BankCodeError THEN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,NS,Error027>'),20,' '))
       ELSE
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,SU>'),20,' '));
       }////UPG13R2DEV  SV Bank code new validation SV 01072015 previous code blocked
       ////UPG13R2DEV  SV Bank code new validation SV 01072015.begin
       IF BankCodeError THEN
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,NS,Error028>'),20,' '))
       ELSE
         Outstreamobj.WRITETEXT(PADSTR(FORMAT('<,SU>'),20,' '));
       ////UPG13R2DEV  SV Bank code new validation SV 01072015.end
       //Bankcode and conversion table code SV end
       Reset();
       Outstreamobj.WRITETEXT();
      UNTIL Purch_Interface.NEXT=0;
      Write_Description();
    END;

    PROCEDURE Enter_Data@1102159004();
    VAR
      ConvTableCust@1102159001 : Record 50004;
      CustBankAcc@1000000000 : Record 287;
      LocalRecIfDimMapSetup@1000000001 : Record 60066;
    BEGIN
      //++
      IF NOT FLAGLoadPurcInv THEN
        EXIT;
      //++
      Purch_Interface.RESET;
      //Purch_Interface.SETCURRENTKEY(Purch_Interface."Ext.Doc.No.");  // SV
      //Purch_Interface.SETRANGE(Purch_Interface."Purchase Type",Purch_Interface."Purchase Type"::Indirect); //VK
      IF Purch_Interface.FINDFIRST THEN
        REPEAT
          IF DocNo <> Purch_Interface."Ext.Doc.No." THEN BEGIN
            //CreateWHT(PurchHeader,PurchLine,LineNo,WHT_Amount);
            LineNo:=10000;
            SalesHeader.RESET;
            SalesHeader.INIT;
            SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
            //PurchHeader."No." := Purch_Interface."Eproc Invocie No.";//VK-Code Commented
            //VK-Document No should come from No Series of Indirect Trasaction.
            SalesHeader."No." := NoSeriesMgmt.GetNextNo(MasterSetup2."Purch Inv Eproc No Series",WORKDATE,TRUE);
            //VK
            SalesHeader."Reason Code" := Master_Setup."Reason (Sale as Purchase)";
            SalesHeader.INSERT(TRUE);
            SalesHeader.VALIDATE("Posting Date",Purch_Interface."Transaction Date");
            SalesHeader.VALIDATE("Document Date",Purch_Interface."Invoice Date");
            SalesHeader.VALIDATE("Entity type",SalesHeader."Entity type"::NonDealer); //SV code newly inserted for entity type 17032015 UPG13R2DEV
            SalesHeader.VALIDATE("Sell-to Customer No.",Purch_Interface."Vendor Code");
            Customer.GET(Purch_Interface."Vendor Code");//new  change
            Master_Setup.GET;
            SalesHeader."Type Of Transaction" := SalesHeader."Type Of Transaction"::Indirect;
            SalesHeader."Order Date" := Purch_Interface."Transaction Date";
            SalesHeader.VALIDATE("Posting Date",Purch_Interface."Transaction Date");
            //PurchHeader.VALIDATE("Due Date",Purch_Interface."Due Date"); //VK-Code Commented
            //>>VK/Due Date will be calculated automatically on below formula
            IF (COMPANYNAME = Master_Setup."Company Name YIMM") THEN
              SalesHeader.VALIDATE("Due Date",CALCDATE('+30D',SalesHeader."Posting Date"));
            IF (COMPANYNAME = Master_Setup."Company Name YEID") THEN
              SalesHeader.VALIDATE("Due Date",CALCDATE('CM+26D',SalesHeader."Posting Date"));
            //<<VK
            SalesHeader.VALIDATE("Customer Posting Group",Purch_Interface."Vendor Posting Group"); //new  change
            //>>VK
            IF Purch_Interface.Currency = 'IDR' THEN
              SalesHeader.VALIDATE("Currency Code",'')
            ELSE
              SalesHeader.VALIDATE("Currency Code",Purch_Interface.Currency);
            //<<VK
            SalesHeader."Posting No." := Purch_Interface."Eproc Invocie No.";
            SalesHeader."Tax Invoice Date" := Purch_Interface."Tax Invoice Date";
            //PurchHeader."B/L Date" := Purch_Interface."B/L Date"; //VK-Code Commented
            SalesHeader."B/L Date" := Purch_Interface."Invoice Date";
            //PurchHeader.UID := USERID;
            SalesHeader.UID := MasterSetup2."GRN Template";
            //PPNPPHDEV.begin
            { SalesHeader."Ship-to Code" := Purch_Interface."Npwp no.";//new change
            SalesHeader."New NPWP No." := Purch_Interface."Npwp no.";  } //previous code commented
            ShipToAddress.RESET;
            ShipToAddress.SETRANGE("Customer No.",Purch_Interface."Vendor Code");
            ShipToAddress.SETRANGE(PPN,TRUE);
            ShipToAddress.SETRANGE("PPN Non Dealer",TRUE);
            IF ShipToAddress.FINDFIRST THEN
              SalesHeader."Ship-to Code" := ShipToAddress.Code;
            ShipToAddress.RESET;
            ShipToAddress.SETRANGE("Customer No.",Purch_Interface."Vendor Code");
            ShipToAddress.SETRANGE(PPH,TRUE);
            ShipToAddress.SETRANGE("PPH Non Dealer",TRUE);
            IF ShipToAddress.FINDFIRST THEN
              SalesHeader."New NPWP No." := ShipToAddress.Code;
            //PPNPPHDEV.end
            //SalesHeader."Vendor Invoice No." := Purch_Interface."Ext.Doc.No.";
              SalesHeader."External Document No." := Purch_Interface."Ext.Doc.No.";
            //Dimension value new concept.start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //>>CR#004/SV/11092014
            // Code to convert YIMM Code To NAV Code SV 01092014
            {
            Dimension_Value.RESET;
            Dimension_Value.SETRANGE(Name,Purch_Interface."Dimension Code 1");
            IF Dimension_Value.FINDFIRST THEN  BEGIN
              dim1_code := Dimension_Value.Code;
            END;
            }//dimension value new concept.previous code blocked
            //<<CR#004/SV/11092014
            IF LocalRecIfDimMapSetup.GET THEN;
            IF LocalRecIfDimMapSetup."EPROC II" THEN
              dim1_code := GetDim1Value(Purch_Interface."Dimension Code 1")
            ELSE BEGIN
              Dimension_Value.RESET;
              Dimension_Value.SETRANGE(Name,Purch_Interface."Dimension Code 1");
              IF Dimension_Value.FINDFIRST THEN
                dim1_code := Dimension_Value.Code;
            END;
            //Dimension value new concept.end<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            SalesHeader.VALIDATE("Shortcut Dimension 1 Code",dim1_code);
            SalesHeader.VALIDATE("Shortcut Dimension 2 Code",Purch_Interface."Dimension Code 2");
            {
            //>>SV UPG13R2DEV 18032015 Bank code must be there in header in case of purchase invoice
            ConvTableCust.RESET;
            ConvTableCust.SETRANGE(ConvTableCust."Eproc Code",Purch_Interface."Vendor Code");
            IF ConvTableCust.FINDSET THEN
            SalesHeader.VALIDATE("Bank Code",ConvTableCust."Bank Code");
            //<<SV 18032015 Bank code must be there in header in case of purchase invoice
            }////UPG13R2DEV  SV Bank code new validation SV 01072015 Previous code blocked
            ////UPG13R2DEV  SV Bank code new validation SV 01072015 .begin
              CustBankAcc.RESET;
              CustBankAcc.SETRANGE(CustBankAcc."Customer No.",Purch_Interface."Vendor Code");
              CustBankAcc.SETRANGE(Purchase,TRUE);
              IF (Purch_Interface.Currency = '') OR (Purch_Interface.Currency = 'IDR') THEN
                CustBankAcc.SETRANGE("Currency Code",'')
              ELSE
                CustBankAcc.SETRANGE("Currency Code",Purch_Interface.Currency);

              IF CustBankAcc.FINDSET THEN
                SalesHeader.VALIDATE("Bank Code",CustBankAcc.Code);
            ////UPG13R2DEV  SV Bank code new validation SV 01072015 .end
            SalesHeader.Interfaced := TRUE;
            WHT_Amount := 0;
            SalesHeader.MODIFY;
            SalesLine.RESET;
            SalesLine.INIT;
            SalesLine."Document Type" := SalesLine."Document Type"::"Credit Memo";
            SalesLine."Document No." := SalesHeader."No.";
            SalesLine."Line No." := LineNo;
            SalesLine.INSERT(TRUE);
            SalesLine.Type := SalesLine.Type::"G/L Account";
            SalesLine.VALIDATE(SalesLine."No.",Purch_Interface."Account No.");
            SalesLine.VALIDATE(SalesLine."Gen. Prod. Posting Group",Master_Setup."Default GPPG");
            //SV 24-08-2014
            //>>CR#004/SV/11092014
            SalesLine."Commercial Invoice No." := Purch_Interface."Commercial Invoice No.";
            SalesLine."Commercial Invoice Date" := Purch_Interface."Commercial Invoice Date";
            IF (Purch_Interface."VAT Required") THEN
              VAT_Mapping(); //SV UPG13R2DEV VAT code Mapping between eprocII and NAV
            //PurchLine.Description:=Purch_Interface.Description;
            //<<CR#004/SV/11092014
            //>> Code Commented  CR#/004/SV/11092014
            {    IF (Purch_Interface."VAT Required" = Purch_Interface."VAT Required"::"1") THEN
              BEGIN
              Master_Setup.GET;
              PurchLine.VALIDATE(PurchLine."VAT Prod. Posting Group",Master_Setup."VAT Prod. Posting Gr");
            END;
            }//<<CR#004/SV/11092014
            SalesLine.VALIDATE(SalesLine.Quantity,1);
            SalesLine.VALIDATE(SalesLine."Unit Cost",Purch_Interface.Amount);
            SalesLine.VALIDATE(SalesLine."Unit Price",Purch_Interface.Amount); // SV UPG13R2DEV  because of sales line unit price will be here
            //shashiSalesLine.VALIDATE();//new pending
            SalesLine.VALIDATE(SalesLine."Shortcut Dimension 1 Code",dim1_code);
            SalesLine.VALIDATE(SalesLine."Shortcut Dimension 2 Code",Purch_Interface."Dimension Code 2");
            SalesLine.VALIDATE(SalesLine.Amount,Purch_Interface.Amount);
            SalesLine.Interfaced := TRUE;
            SalesLine.Narration := Purch_Interface.Narration;
            SalesLine.VALIDATE(SalesLine."Tax Invoice No.",Purch_Interface."Tax Invoice No.");
            SalesLine."Tax Invoice Date" := Purch_Interface."Tax Invoice Date";
            SalesLine.AreaCode := Purch_Interface."WHT Area Code";
            SalesLine."WHT Product Posting Group" := Purch_Interface."WHT Prod. Posting Group";
            WHT_Amount := WHT_Amount + Purch_Interface.Amount ;
            SalesLine.MODIFY;
            LineNo += 10000;
            DocNo := Purch_Interface."Ext.Doc.No.";
          END ELSE BEGIN
            // only lines are created from here
            SalesLine.RESET;
            SalesLine.INIT;
            SalesLine."Document Type" := SalesLine."Document Type"::"Credit Memo";
            SalesLine."Document No." := SalesHeader."No.";
            SalesLine."Line No." := LineNo;
            SalesLine.INSERT(TRUE);
            SalesLine.Type := SalesLine.Type::"G/L Account";
            SalesLine.VALIDATE("No.",Purch_Interface."Account No.");
            SalesLine.VALIDATE("Gen. Prod. Posting Group",Master_Setup."Default GPPG");
            //new lines according to change request //>>CR#004/SV/11092014
            SalesLine."Commercial Invoice No." := Purch_Interface."Commercial Invoice No.";
            SalesLine."Commercial Invoice Date" := Purch_Interface."Commercial Invoice Date";
            IF (Purch_Interface."VAT Required") THEN
              VAT_Mapping(); //SV UPG13R2DEV VAT code Mapping between eprocII and NAV
            //>> CR#/004/SV/11092014
            //>> Code Commented CR#/004/SV/11092014
            {   IF (Purch_Interface."VAT Required" = Purch_Interface."VAT Required"::"1") THEN
              BEGIN
                Master_Setup.GET;
                PurchLine.VALIDATE(PurchLine."VAT Prod. Posting Group",Master_Setup."VAT Prod. Posting Gr");
             END;
            }   //<<CR#/004/SV/11092014

            SalesLine.VALIDATE("Tax Invoice No.",Purch_Interface."Tax Invoice No.");
            SalesLine.VALIDATE(Quantity,1);
            SalesLine.VALIDATE("Unit Cost",Purch_Interface.Amount);
            SalesLine.VALIDATE("Unit Price",Purch_Interface.Amount); // SV UPG13R2DEV  because of sales line unit price will be here
            //shashiSalesLine.VALIDATE();//new pending shashi
            //Dimension value new concept.start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //   Code to convert YIMM Code To NAV Code SV 01092014 //>>CR#004/SV/11092014
            {
            Dimension_Value.RESET;
            Dimension_Value.SETRANGE(Dimension_Value.Name,Purch_Interface."Dimension Code 1");
            IF Dimension_Value.FINDFIRST THEN  BEGIN
              dim1_code := Dimension_Value.Code;
            END;
            }//dimension value new concept.previous code blocked
            //<<CR#004/SV/11092014
            IF LocalRecIfDimMapSetup.GET THEN;
            IF LocalRecIfDimMapSetup."EPROC II" THEN
              dim1_code := GetDim1Value(Purch_Interface."Dimension Code 1")
            ELSE BEGIN
              Dimension_Value.RESET;
              Dimension_Value.SETRANGE(Name,Purch_Interface."Dimension Code 1");
              IF Dimension_Value.FINDFIRST THEN
                dim1_code := Dimension_Value.Code;
            END;
            //Dimension value new concept.end<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            SalesLine.VALIDATE("Shortcut Dimension 1 Code",dim1_code);
            SalesLine.VALIDATE("Shortcut Dimension 2 Code",Purch_Interface."Dimension Code 2");
            SalesLine.VALIDATE(Amount,Purch_Interface.Amount);
            SalesLine.Interfaced := TRUE;
            SalesLine.AreaCode := Purch_Interface."WHT Area Code";
            SalesLine."WHT Product Posting Group" := Purch_Interface."WHT Prod. Posting Group";
            SalesLine.Narration := Purch_Interface.Narration;
            SalesLine."Tax Invoice Date" := Purch_Interface."Tax Invoice Date";
            WHT_Amount := WHT_Amount + Purch_Interface.Amount ;
            SalesLine.MODIFY;
            LineNo += 10000;
            DocNo := Purch_Interface."Ext.Doc.No.";
          END;

          Purch_Interface.DELETE;

        UNTIL Purch_Interface.NEXT=0;

          //CreateWHT(PurchHeader,PurchLine,LineNo,WHT_Amount);
    END;

    PROCEDURE CreateWHT@1102159011(Purchase_header@1102159001 : Record 38;Purchase_line@1102159002 : Record 39;Line@1102159003 : Integer;whtamt@1102159004 : Decimal);
    VAR
      PlineWHT@1102159005 : Record 39;
    BEGIN
      {
        IF Purchase_header.PurchLinesExist THEN
          BEGIN
            PlineWHT.INIT;
            PlineWHT."Document Type" := Purchase_line."Document Type";
            PlineWHT."Document No." :=  Purchase_line."Document No.";
            PlineWHT."Line No." := Line;
            PlineWHT.INSERT(TRUE);
            PlineWHT.Type := PlineWHT.Type::"G/L Account";
            PlineWHT.VALIDATE("No.",Master_Setup."WHT Account For MC");
            PlineWHT.VALIDATE("Gen. Prod. Posting Group",Master_Setup."Default GPPG");
            PlineWHT.VALIDATE("Tax Invoice No.",Purchase_line."Tax Invoice No.");
            PlineWHT.VALIDATE(Quantity,1);
            IF PlineWHT."New NPWP"= '' THEN
              PlineWHT.VALIDATE(PlineWHT."Unit Cost",(whtamt*Master_Setup."WHT Prod. MC(%)")/100)
            ELSE
              PlineWHT.VALIDATE(PlineWHT."Unit Cost",(whtamt*Master_Setup."WHT Prod. MC Npwp(%)")/100);
            PlineWHT.VALIDATE(PlineWHT."Direct Unit Cost",PlineWHT."Unit Cost");//++++
            PlineWHT.VALIDATE(PlineWHT."Shortcut Dimension 1 Code", Purchase_line."Shortcut Dimension 1 Code");
            PlineWHT.VALIDATE(PlineWHT."Shortcut Dimension 2 Code" ,Purchase_line."Shortcut Dimension 2 Code");
            PlineWHT.Interfaced := TRUE;
            PlineWHT.AreaCode := Purchase_line.AreaCode;
            PlineWHT.MODIFY;
          END;
       }
    END;

    PROCEDURE Write_Description@1102159005();
    BEGIN
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error001'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error001);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error002'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error002);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error003'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error003);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error004'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error004);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error005'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error005);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error006'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error006);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error007'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error007);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error008'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error008);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error009'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error009);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error010'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error010);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error011'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error011);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error012'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error012);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error013'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error013);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error014'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error014);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error015'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error015);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error016'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error016);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error017'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error017);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error018'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error018);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error019'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error019);
      Outstreamobj.WRITETEXT();
      //>>VK
      Outstreamobj.WRITETEXT(FORMAT('Error020'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error020);
      Outstreamobj.WRITETEXT();
      //<<VK
      //>>SV //>>CR#004/SV/11092014
      Outstreamobj.WRITETEXT(FORMAT('Error021'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error021);
      Outstreamobj.WRITETEXT();
      //<<SV
      //>>SV
      Outstreamobj.WRITETEXT(FORMAT('Error022'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error022);
      Outstreamobj.WRITETEXT();
      //<<SV//<<CR#004/SV/11092014
      // SV 05022015
      Outstreamobj.WRITETEXT(FORMAT('Error023'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error023);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(FORMAT('Error024'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error024);
      Outstreamobj.WRITETEXT();
      // SV 05022015
      //PPNPPHDEV.begin
      Outstreamobj.WRITETEXT(FORMAT('Error025'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error025);
      Outstreamobj.WRITETEXT();
      //PPNPPHDEV.end
      //bankcode conversion code.begin
      Outstreamobj.WRITETEXT(FORMAT('Error026'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error026);
      Outstreamobj.WRITETEXT();
      {
      Outstreamobj.WRITETEXT(FORMAT('Error027'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error027);
      Outstreamobj.WRITETEXT();
      } ////UPG13R2DEV  SV Bank code new validation SV 01072015 Previous code blocked
      //bankcode conversion code.end

      ////UPG13R2DEV  SV Bank code new validation SV 01072015.begin
      Outstreamobj.WRITETEXT(FORMAT('Error028'));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(Error028);
      Outstreamobj.WRITETEXT();
      ////UPG13R2DEV  SV Bank code new validation SV 01072015.end
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('TEXT001'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(TEXT001);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('TEXT002'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(TEXT002);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('TEXT003'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(TEXT003);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('TEXT004'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(TEXT004);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('TEXT005'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(TEXT005);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('SU'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(SU);
      Outstreamobj.WRITETEXT();
      Outstreamobj.WRITETEXT(PADSTR(FORMAT('NS'),8,' '));
      Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
      Outstreamobj.WRITETEXT(NS);
      //++
      //{Posted:=TRUE;
      //IF(Posted=TRUE) THEN
      //  BEGIN
          WHILE NOT InstreamObj.EOS DO BEGIN
            InstreamObj.READTEXT(Txt);
            OutstreamObj_F2.WRITETEXT(Txt);
            OutstreamObj_F2.WRITETEXT();
          END;
      //  END;
      //F1.CLOSE;//}
      //++
    END;

    PROCEDURE WriteHeader@1102159007();
    BEGIN
      LogFile := Master_Setup."Interface File Path";
      Ch := 9;
      F1.CREATETEMPFILE;
      //F2.CREATE(LogFile + '\' + 'EPROCLogFile'  + '_' +FORMAT(TODAY,0,'<Day>-<Month,2>-<Year4>') + '.txt');//+ FORMAT(TODAY));
      F2.CREATE(LogFile + '\' + 'LOG-PurchInv-Eproc.txt'); //VK/14052014
      F2.CREATEOUTSTREAM(OutstreamObj_F2);
      F1.CREATEOUTSTREAM(Outstreamobj);
      F1.CREATEINSTREAM(InstreamObj);
      //F1.TEXTMODE(TRUE);
      Outstreamobj.WRITETEXT(PADSTR('<Result>',20,' '));  //++     //SV
      Outstreamobj.WRITETEXT(PADSTR('<Entry No.>',20,' '));   //SV
      Outstreamobj.WRITETEXT(PADSTR('<Eproc Invocie No.>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Ext.Doc.No.>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Npwp no.>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Entity Code>',30,' ')); //new
      Outstreamobj.WRITETEXT(PADSTR('<Currency>',20,' '));     //SV
      Outstreamobj.WRITETEXT(PADSTR('<Account No.>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Tax Invoice No.>',35,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Shortcut Dimension 1 Code>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Shortcut Dimension 2 Code>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Shortcut Dimension 3 Code>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Shortcut Dimension 4 Code>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Shortcut Dimension 5 Code>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<WHT Area Code>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<WHT Prod. Posting Group>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Amount>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Transaction Date>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Invoice Date>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Tax Invoice Date>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<VAT Prod. Posting Group>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<B/L Date>',20,' '));
      //Outstreamobj.WRITETEXT(PADSTR('<Due Date>',30,' '));  //VK
      Outstreamobj.WRITETEXT(PADSTR('<Interface Date>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<Narration>',30,' '));
      Outstreamobj.WRITETEXT(PADSTR('<VAT Required>',20,' '));
      Outstreamobj.WRITETEXT(PADSTR('<WHT Required>',20,' '));
      //Outstreamobj.WRITETEXT(PADSTR('<Purchase Type>',30,' ')); //VK
      Outstreamobj.WRITETEXT(PADSTR('<Customer Posting Group>',30,' '));   //VK //new
      Outstreamobj.WRITETEXT(PADSTR('<Commercial Invoice No.>',30,' ')); //SV
      Outstreamobj.WRITETEXT(PADSTR('<Commercial Invoice Date>',30,' ')); // SV
      Outstreamobj.WRITETEXT(PADSTR('<Customer DO No.>',30,' '));   //VK   //new
      Outstreamobj.WRITETEXT(PADSTR('<PPH NonDealer NPWP No.>',25,' ')); //PPNPPHDEV
      Outstreamobj.WRITETEXT(PADSTR('<Eproc code>',20,' '));  //bankcode conversion table code
      Outstreamobj.WRITETEXT(PADSTR('<Bank Code>',20,' '));   //bankcode conversion table code
      Outstreamobj.WRITETEXT();
    END;

    PROCEDURE Reset@1102159002();
    BEGIN
      "Error purch inv head" := FALSE;
      "Error purch head" := FALSE;
      Error_vendor := FALSE;
      Blank_NPWP := FALSE;
      Blank_Currency := FALSE;
      Zero_Amount := FALSE;
      WHT_AreaCode_error := FALSE;
      Blank_WHT_Prod_Posting_Group := FALSE;  // SV 05/02/2015
      WHT_Prod_Post_Grp_Error := FALSE;        // SV 05/02/2015
      Due_date_error := FALSE;
      Tax_inv_date_error := FALSE;
      Blank_VAT_Prod_Posting_grp := FALSE;
      Tax_inv_no_error := FALSE;
      Blank_WHT_AreaCode := FALSE;
      Inv_date_error := FALSE;
      Tr_date_error := FALSE;
      "Blank_tax_inv_no." := FALSE;
      Int_date_error := FALSE;
      Blank_Pur_Type := FALSE;
      "Blank_ACC_No." := FALSE;
      Blank_NPWP_error := FALSE;
      Duplicate_tax_inv_no_error := FALSE;
      //NPWP_error := FALSE;  //PPNPPHDEV Previous code commented
      "Blank_Inv_No." := FALSE;
      Vend_Posting_Gp_Error := FALSE; //VK
      Comm_In_No := FALSE;
      Comm_In_Dt := FALSE;
      Vendor_DO_No := FALSE;
      VAT_Prod_Posting_grp_err := FALSE;
      //PPNPPHDEV.begin
      Result := 0;
      Result1 := 0;
      Error_PPH_Npwp := FALSE;
      //PPNPPH.end
      //bankcode conversion table code.begin
      BankCodeError := FALSE;
      ConversionError := FALSE;
      //bankcode conversion table code.end
    END;

    PROCEDURE "Generate log"@1102159006(Posted@1102159001 : Boolean);
    BEGIN

      WHILE NOT InstreamObj.EOS DO BEGIN
        InstreamObj.READTEXT(Txt);
        OutstreamObj_F2.WRITETEXT(Txt);
        OutstreamObj_F2.WRITETEXT();
      END;
      F1.CLOSE;
      IF (Posted = FALSE) THEN BEGIN
        OutstreamObj_F2.WRITETEXT();
        OutstreamObj_F2.WRITETEXT('--ERROR LOG--');
        Txt:=GETLASTERRORTEXT;
        OutstreamObj_F2.WRITETEXT('System Error in Entry No. '+FORMAT(Purch_Interface."Entry No.")+'--'+Txt);
        //Window.CLOSE; //VK
      END;
      F2.CLOSE;
    END;

    PROCEDURE VAT_Mapping@1102159008();
    VAR
      TaxMapp@1102159001 : Record 60059;
    BEGIN

      TaxMapp.RESET;
      TaxMapp.SETRANGE("Interface Tax",Purch_Interface."VAT Product Posting Group");
      IF TaxMapp.FINDSET THEN
        SalesLine.VALIDATE("VAT Prod. Posting Group",TaxMapp."Purch. Inv. Tax");
    END;

    PROCEDURE GetPPNNpwpNo@1102159009("Customer Code"@1102159001 : Code[50];vat@1102159003 : Boolean) return : Integer;
    VAR
      ShipAdd@1102159002 : Record 222;
    BEGIN

      IF (vat) THEN BEGIN
        ShipAdd.RESET;
        ShipAdd.SETRANGE("Customer No.","Customer Code");
        ShipAdd.SETRANGE(PPN,TRUE);
        ShipAdd.SETRANGE("PPN Non Dealer",TRUE);
        IF NOT ShipAdd.FINDFIRST THEN
          return := 2
      END ELSE BEGIN
        ShipAdd.RESET;
        ShipAdd.SETRANGE("Customer No.","Customer Code");
        ShipAdd.SETRANGE(PPN,TRUE);
        ShipAdd.SETRANGE("PPN Non Dealer",TRUE);
        IF NOT ShipAdd.FINDFIRST THEN
          return := 1
      END;
    END;

    PROCEDURE GetPPHNpwpNo@1102159013("Customer code"@1102159001 : Text[30]) return : Integer;
    VAR
      ConvMasterCust1@1102159002 : Record 50004;
      Cust_Master2@1102159003 : Record 18;
      ShipAdd1@1102159004 : Record 222;
    BEGIN

      //new funtion for ppnpph npwp validation  //PPNPPHDEV
      ShipAdd1.RESET;
      ShipAdd1.SETRANGE("Customer No.","Customer code");
      ShipAdd1.SETRANGE(PPH,TRUE);
      ShipAdd1.SETRANGE("PPH Non Dealer",TRUE);
      IF NOT ShipAdd1.FINDFIRST THEN
        return := 1;
    END;

    PROCEDURE GetDim1Value@1000000002(Dimension1@1000000000 : Code[10]) LocalCodeReturnRes : Code[10];
    VAR
      LocalRecIfDimMapp@1000000001 : Record 60065;
    BEGIN

      LocalRecIfDimMapp.RESET;
      LocalRecIfDimMapp.SETRANGE("Dimension Name",LocalRecIfDimMapp."Dimension Name"::"SHOP CODE");
      LocalRecIfDimMapp.SETRANGE("Old YIMM Code",Dimension1);
      IF LocalRecIfDimMapp.FINDSET THEN
        LocalCodeReturnRes := LocalRecIfDimMapp."New NAV Code";
    END;

    BEGIN
    {

      Date      Sign      Ref Id      Description
      10122012  PC/AY/VK  EprocII  Codeunit to create purchase Invoice from the data received from the EprocII system.

      UPG13R2DEV  SV 16122014
      newly created

      11092014  SV        CR#004   Changes done for WHT and VAT Details.
      05022015  SV        SV         WHT Prod posting group validated
      CR#004 Modified according to change request MIMPIND002/001/140902/004 user can calculate WHT using EPROCII//SV UPG13R2DEV Bank Code Must be there in header case of purchase inv.
      //>>SV UPG13R2DEV 18032015 Bank code must be there in header in case of purchase invoice
      //SV UPG13R2DEV VAT code Mapping between eprocII and NAV
      // SV UPG13R2DEV  because of sales line unit price will be here
      //SV code newly inserted for entity type 17032015 UPG13R2DEV
      //PPNPPHDEV  SV
      Development of ppn/pph concept
      //Bank code validation SV
      //UPG13R2DEV  SV Bank code new validation

      [UPG13R2DEV]
      [SIGN]  : SV
      [REF]   : Dimension value new concept
      [DESC]  : Dimension value new concept.New mapping table introduced and will be used(based on setup) untill all other systems are updated to use new dimension values.
                After all other system updated mapping will be obsolate
    }
    END.
  }
}

