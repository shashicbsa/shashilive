OBJECT Codeunit 50032 TMS Collection Batch
{
  OBJECT-PROPERTIES
  {
    Date=08/25/15;
    Time=10:33:36;
    Modified=Yes;
    Version List=CR#003,UPG13R2DEV;
  }
  PROPERTIES
  {
    OnRun=VAR
            Doc_No@1102159024 : Code[20];
            Trans_Date@1102159023 : Date;
            Dim1@1102159022 : Code[10];
            Dim2@1102159021 : Code[10];
            Dim3@1102159020 : Code[10];
            GenLed_Setup@1102159019 : Record 98;
            Dim_Value@1102159018 : Record 349;
            Curr_Code@1102159017 : Code[10];
            Curry@1102159016 : Record 4;
            "G/L_Account"@1102159015 : Code[20];
            "G/L"@1102159014 : Record 15;
            Amount@1102159013 : Decimal;
            Bl_date@1102159012 : Date;
            Account_Type@1102159011 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';
            Account_No@1102159010 : Code[20];
            Credit_Amt@1102159009 : Decimal;
            Debit_Amt@1102159008 : Decimal;
            Bank_Acc@1102159007 : Record 270;
            CurrExc@1102159006 : Record 330;
            "Amount(Lcy)"@1102159005 : Decimal;
            CheNo@1102159004 : Code[20];
            RecDate@1102159003 : Date;
            BAnk@1102159002 : Code[20];
            Description@1102159001 : Code[50];
          BEGIN

            MasterSetup.GET;
            MasterSetup2.GET;
            SalesSetup.GET;

            //IF ISCLEAR(DateformatCheck) THEN  //UPG13R2DEV
            //CREATE(DateformatCheck,FALSE,TRUE);  //UPG13R2DEV
            DateformatCheck := DateformatCheck.DateTimeFormatCheck; //UPG13R2DEV

            Ch:=9;
            Entry_No := 1;

            FileName := MasterSetup."Interface File Path" + '\' + MasterSetup2."TMS Collection";
            IF FileName = '' THEN
              EXIT;

            LogFile := MasterSetup."Interface File Path" + '\' + 'LOG-' + MasterSetup2."TMS Collection";
            LF.CREATE(LogFile);
            LF.CREATEOUTSTREAM(Outstreamobj);
            LF.TEXTMODE(TRUE);

            IF NOT (F.OPEN(FileName)) THEN
            BEGIN
             LF.CLOSE;
             EXIT;
            END;

            F.CREATEINSTREAM(Instreamobj);
            WHILE NOT Instreamobj.EOS DO BEGIN

              //----Reading Line No.----
              Instreamobj.READTEXT(B,10);
              IF EVALUATE(Line_No,B) THEN BEGIN
                IF FORMAT(Line_No) = '' THEN
                  Error_Line := TRUE;
              END ELSE
                Error_Line := TRUE;

              //----Reading Document No.----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              EVALUATE(Doc_No,B);
                IF Doc_No = '' THEN
                  Error_Doc := TRUE;

              //----Reading Account No.(Customer Code)----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              EVALUATE(Account_No,B);
                IF Account_No = '' THEN
                  Error_Cust := TRUE
                ELSE BEGIN
                  CustomerConv.RESET;
                  CustomerConv.SETRANGE(CustomerConv."Tms Code",Account_No);
                  IF CustomerConv.FINDFIRST THEN BEGIN
                    IF NOT Cust_Master.GET(CustomerConv.NAV) THEN
                      Error_Cust := TRUE
                    ELSE
                      BEGIN
                        IF ((Cust_Master."Customer Type"=Cust_Master."Customer Type"::" ") OR
                            (Cust_Master."Type of Dealer"=Cust_Master."Type of Dealer"::" ") OR
                            (Cust_Master."Gen. Bus. Posting Group"='') OR
                            (Cust_Master."VAT Bus. Posting Group"='') OR
                            (Cust_Master."WHT Business Posting Group"='') OR
                            (Cust_Master."Customer Posting Group"='') {OR
                            (Cust_Master."Customer Disc. Group"='')} ) THEN
                            Error_Cust_Setup := TRUE;
                      END;
                  END ELSE
                    Error_Cust := TRUE;
                  END;

              //----Reading Transaction Date----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,11);
              IF EVALUATE(Trans_Date,B) THEN BEGIN
                //OK:=DateformatCheck.CHECK(B);  //UPG13R2DEV
                OK := DateformatCheck.checkDateTime(DateTrim(B)); //UPG13R2DEV
                IF NOT (OK) THEN
                  Error_TransDate := TRUE;
              END ELSE
                Error_TransDate := TRUE;

              //----Reading Cheque No----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              EVALUATE(CheNo,B);
                IF CheNo = '' THEN
                  Error_CheNo := TRUE;

              //----Reading Currency----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Curr_Code,B);
                IF Curr_Code <> '' THEN BEGIN
                  Curry.RESET;
                  IF NOT Curry.GET(Curr_Code) THEN
                    Error_Curr := TRUE;
                END ELSE
                  Error_CurrBlank := TRUE;

              //----Reading Receive Date----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,11);
              IF EVALUATE(RecDate,B) THEN BEGIN
                //OK:=DateformatCheck.CHECK(B);  //UPG13R2DEV
                OK := DateformatCheck.checkDateTime(DateTrim(B)); //UPG13R2DEV
                IF NOT (OK) THEN
                  Error_RecDate := TRUE;
              END ELSE
                Error_RecDate := TRUE;

              //----Reading Amount----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              IF EVALUATE(Amount,B) THEN BEGIN
                IF FORMAT(Amount) = '' THEN
                  Error_Amt := TRUE;
              END ELSE
                Error_Amt := TRUE;

              //----Reading Bank Name----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              EVALUATE(BAnk,B);
              {
                IF BAnk <> '' THEN BEGIN
                  Bank_Acc.RESET;
                  IF NOT Bank_Acc.GET(BAnk) THEN
                    Error_Bank := TRUE;
                END ELSE
                  Error_Bank := TRUE;
              }

              //----Reading Description----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,50);
              EVALUATE(Description,B);

              //----Reading GL Account No----
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              EVALUATE("G/L_Account",B);
                IF "G/L_Account" <> '' THEN BEGIN
                  "G/L".RESET;
                  IF NOT "G/L".GET("G/L_Account") THEN
                    "Error_G/L" := TRUE;
                END ELSE
                  "Error_G/L" := TRUE;


              IF (Error_Doc OR Error_TransDate OR Error_RecDate OR Error_Amt OR Error_Acc
                  OR Error_Curr OR Error_CheNo OR Error_Cust_Setup OR Error_Cust OR "Error_G/L") THEN BEGIN
                Flag := TRUE;

                Outstreamobj.WRITETEXT(FORMAT(Entry_No));
                Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));

                IF Error_Doc THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Document No.');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;
                IF Error_TransDate THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Cheque Date');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;
                IF Error_Acc THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Customer code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;
                IF Error_Cust_Setup THEN BEGIN
                  Outstreamobj.WRITETEXT('! Setup Value is Missing for the Customer.');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;

                {
                IF Error_Bank THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Bank Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;
                }

                IF Error_Amt THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Amount');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;
                IF Error_Curr THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Currency');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;
                IF Error_RecDate THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Cheque Receipt Date');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;
                IF Error_CheNo THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Cheque number');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;
                IF Error_Cust THEN BEGIN
                  Outstreamobj.WRITETEXT('! Customer Not Exist');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;

                IF "Error_G/L" THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In G/L Account');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

              END ELSE
               BEGIN
                Outstreamobj.WRITETEXT(FORMAT(Entry_No));
                Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                Outstreamobj.WRITETEXT('! Process Sucessfully');
               END;

              Entry_No := Entry_No +1;
              Instreamobj.READTEXT(B,1);
              Outstreamobj.WRITETEXT();
              ResetAll();
            END;
            LF.CLOSE;

            IF NOT Flag THEN BEGIN
              MasterSetup.UploadDataColl(FileName,SalesSetup."Post Dated Check TMS Batch");
             TMSCollInterface.RUN;
            END;
          END;

  }
  CODE
  {
    VAR
      Instreamobj@1102159047 : InStream;
      Outstreamobj@1102159046 : OutStream;
      B@1102159045 : Text[250];
      Flag@1102159044 : Boolean;
      FileName@1102159043 : Text[250];
      F@1102159042 : File;
      LF@1102159041 : File;
      Error_Doc@1102159040 : Boolean;
      Sales_interface@1102159039 : Record 50010;
      Entry_No@1102159038 : Integer;
      Error_TransDate@1102159037 : Boolean;
      Error_Dim1@1102159036 : Boolean;
      Error_Dim2@1102159035 : Boolean;
      Error_Dim3@1102159034 : Boolean;
      Error_Curr@1102159033 : Boolean;
      Error_Amount@1102159032 : Boolean;
      Error_BL@1102159031 : Boolean;
      Error_BLBlank@1102159030 : Boolean;
      MasterSetup@1102159029 : Record 50008;
      LogFile@1102159028 : Text[250];
      Ch@1102159027 : Char;
      Error_Doc1@1102159026 : Boolean;
      Line_No@1102159025 : Integer;
      Error_Line@1102159024 : Boolean;
      Error_Opt@1102159023 : Boolean;
      Error_Acc@1102159022 : Boolean;
      GL_Acc@1102159021 : Record 15;
      Error_Credit@1102159020 : Boolean;
      Error_Debit@1102159019 : Boolean;
      Error_Amt@1102159018 : Boolean;
      Error_CurrBlank@1102159017 : Boolean;
      "Debit_Amt(Lcy)"@1102159016 : Decimal;
      "Credit_Amt(Lcy)"@1102159015 : Decimal;
      Error_CheNo@1102159014 : Boolean;
      Error_RecDate@1102159013 : Boolean;
      Error_Bank@1102159012 : Boolean;
      CustomerConv@1102159011 : Record 50004;
      TMSCollInterface@1102159010 : Report 60053;
      DateformatCheck@1102159009 : DotNet "'DateTimeFun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DateTimeFun.DateTimeFormatCheck";
      OK@1102159008 : Boolean;
      Cust_Master@1102159007 : Record 18;
      Error_Cust@1102159006 : Boolean;
      Error_Cust_Setup@1102159005 : Boolean;
      SalesSetup@1102159003 : Record 311;
      "Error_G/L"@1102159002 : Boolean;
      MasterSetup2@1102159001 : Record 60053;

    PROCEDURE ResetAll@1000000000();
    BEGIN
      Error_Doc := FALSE;
      Error_TransDate := FALSE;
      Error_Dim1 := FALSE;
      Error_Dim2 := FALSE;
      Error_Dim3 := FALSE;
      Error_Curr := FALSE;
      Error_BL := FALSE;
      Error_BLBlank := FALSE;
      Error_CurrBlank := FALSE;
      "Debit_Amt(Lcy)" := 0;
      "Credit_Amt(Lcy)" := 0;
      Error_Acc := FALSE;
      Error_Line := FALSE;
      Error_Opt := FALSE;
      Error_Cust_Setup := FALSE;
      Error_Cust := FALSE;
      "Error_G/L" := FALSE;
    END;

    PROCEDURE DateTrim@1102159001(ADate@1102159001 : Text) : Text[250];
    BEGIN
      EXIT(DELSTR(ADate,STRLEN(ADate),1));
    END;

    BEGIN
    {

      Date               Sign                 Ref_ID                        Description
      07052013            VK                  MIMPIND002/001/140806/003     New Batch For TMS AR Collection

      UPG13R2DEV SV 15122014
      Newly created in 13R2

      //UPG13R2DEV
      Modifications for 2013R2DB. Dotnet variable "DateFormatCheck" is modified. Also "DateTrim" function is created to remove a space in Date fields in interface files.
    }
    END.
  }
}

