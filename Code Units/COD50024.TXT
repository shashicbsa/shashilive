OBJECT Codeunit 50024 Selling Out Batch
{
  OBJECT-PROPERTIES
  {
    Date=01/08/16;
    Time=14:10:23;
    Modified=Yes;
    Version List=SllO1.0,CR#020,UPG13R2DEV,PPNPPHDEV;
  }
  PROPERTIES
  {
    OnRun=VAR
            FileName@1000000005 : Text[255];
            SheetName@1000000004 : Text[255];
            XLBuff@1000000003 : Record 50002;
            NoOfRec@1000000002 : Integer;
            i@1000000001 : Integer;
            Cust@1000000006 : Record 50004;
            Cust_Master@1000000000 : Record 18;
            Ship_Add@1000000007 : Record 222;
            GenLed_Setup@1000000009 : Record 98;
            Dim_Value@1000000008 : Record 349;
            Curry@1000000010 : Record 4;
            "G/L"@1000000011 : Record 15;
            AreaCode_WHT@1000000012 : Record 50017;
            LocalRecIfDimMapSetup@1000000014 : Record 60066;
            LocalIntRes@1000000013 : Integer;
            LocalCodeRes@1000000015 : Code[10];
          BEGIN
            XLBuff.DELETEALL;
            Master_Setup.GET;

            //IF ISCLEAR(DateformatCheck) THEN  //UPG13R2DEV
            //UPG13C.begin
            //CREATE(DateformatCheck);
            //CREATE(DateformatCheck,TRUE,TRUE);  //UPG13R2DEV
            //UPG13C.end
            DateformatCheck := DateformatCheck.DateTimeFormatCheck; //UPG13R2DEV
            Ch:=9;

            //FileName := CommonDialogMgt.OpenFile(text006,'',1,'',0);
            FileName := Master_Setup."Interface File Path" + '\' + Master_Setup."Imacs Selling Out";
            IF FileName = '' THEN
              EXIT;

            LogFile := Master_Setup."Interface File Path" + '\' + 'LOG-' + 'SELLINGOUT.Txt';
            //LogFile := 'C:\Documents and settings\ATUL\desktop\test.txt';
            //SheetName := 'SELLINGOUT';
            SheetName := XLBuff.SelectSheetsName(FileName);
            IF NOT CONFIRM(text007+ Master_Setup."Selling Out Dim" + text008,FALSE) THEN
            EXIT;
            F1.CREATE(LogFile);
            F1.CREATEOUTSTREAM(Outstreamobj);
            F1.TEXTMODE(TRUE);

            XLBuff.OpenBook(FileName,SheetName);
            XLBuff.ReadSheet();
            IF XLBuff.FINDLAST THEN
              NoOfRec:=XLBuff."Row No.";

            IF (NoOfRec = 1) THEN
              ErrorInFile:=TRUE;

            FOR i:=2 TO NoOfRec DO BEGIN
              XLBuff.RESET;
              XLBuff.SETRANGE("Row No.",i);
              IF XLBuff.FINDFIRST THEN REPEAT
                EntryNo:=i-1;
            ////Reading the document no.
                IF XLBuff."Column No."=1 THEN
                  EVALUATE(InvoiceNo,XLBuff."Cell Value as Text");

            ///Reading the Dealer Code

                IF XLBuff."Column No."=2 THEN BEGIN
                  EVALUATE(DealerCode,XLBuff."Cell Value as Text");
                  IF DealerCode = '' THEN
                    Error_Cust := TRUE
                  ELSE BEGIN
                    Cust.RESET;
                    Cust.SETRANGE(Cust."Imacs Code",DealerCode);
                    IF Cust.FINDFIRST THEN BEGIN
                      IF NOT Cust_Master.GET(Cust.NAV) THEN
                        Error_Cust := TRUE
                      ELSE BEGIN
                        IF ((Cust_Master."Customer Type"=Cust_Master."Customer Type"::" ") OR
                              (Cust_Master."Type of Dealer"=Cust_Master."Type of Dealer"::" ") OR
                              (Cust_Master."Gen. Bus. Posting Group"='') OR
                              (Cust_Master."VAT Bus. Posting Group"='') OR
                              (Cust_Master."WHT Business Posting Group"='') OR
                              (Cust_Master."Customer Posting Group"='') {OR
                              (Cust_Master."Customer Disc. Group"='')} ) THEN
                                 Error_Cust_Setup := TRUE;
                      END;
                    END ELSE
                      //Error_Cust := TRUE;
                      Error_Conver := TRUE;
                  END;
                END;
            ///Reading the Transaction Date

                IF XLBuff."Column No."=3 THEN BEGIN
                 IF EVALUATE(TransDate,XLBuff."Cell Value as Text") THEN BEGIN
                 {  //Ok := DateformatCheck.CHECK(XLBuff."Cell Value as Text");  //UPG13R2DEV
                   Ok := DateformatCheck.checkDateTime(XLBuff."Cell Value as Text"); //UPG13R2DEV
                    IF NOT (Ok) THEN
                      Error_TransDate := TRUE;}
                 END ELSE
                    Error_TransDate := TRUE;
                END;

            ///READING THE COMMERCIAL INVOICE DATE.
                IF XLBuff."Column No."=4 THEN  BEGIN
                 IF EVALUATE(InvoiceDate,XLBuff."Cell Value as Text") THEN BEGIN
                 {  //Ok:= DateformatCheck.CHECK(XLBuff."Cell Value as Text");  //UPG13R2DEV
                   Ok := DateformatCheck.checkDateTime(XLBuff."Cell Value as Text"); //UPG13R2DEV
                   //IF NOT (Ok) THEN                    //24102013/VK/CR#020
                   //  Error_InvDate := TRUE;            //24102013/VK/CR#020
                 }
                 END ELSE
                    Error_InvDate := TRUE;
                END;

            //READING EXTERNAL DOCUMENT NO.
                IF XLBuff."Column No."=5 THEN BEGIN
                  EVALUATE(ExtDocNo,XLBuff."Cell Value as Text");
                END;

            ///READING NPWP NO.
                IF XLBuff."Column No."=6 THEN BEGIN
                  EVALUATE(NPWPNo,XLBuff."Cell Value as Text");
                  //PPNPPHDEV.begin
                  { IF NPWPNo = '' THEN BEGIN
                     Cust.RESET;
                     Cust.SETRANGE(Cust."Imacs Code",DealerCode);
                     IF Cust.FINDFIRST THEN BEGIN
                       IF NOT Cust_Master.GET(Cust.NAV) THEN
                         Error_Cust := TRUE;
                     END ELSE
                       Error_Conver := TRUE;
                   END ELSE BEGIN
                      Cust.RESET;
                      Cust.SETRANGE(Cust."Imacs Code",DealerCode);
                      Cust.SETRANGE(Cust.NPWP,NPWPNo);
                       IF Cust.FINDFIRST THEN BEGIN
                         IF Cust_Master.GET(Cust.NAV) THEN BEGIN
                           Ship_Add.RESET;
                            IF NOT Ship_Add.GET(Cust_Master."No.",NPWPNo) THEN
                              Error_Npwp := TRUE
                         END ELSE
                           Error_Cust := TRUE;
                       END ELSE
                         Error_Conver := TRUE;
                   END;  }
                   //PPNPPHDEV.end previous code cmmnt
                END;

            //READING DUE DATE
                {//>>08102013/VK/CR#020-Code Commented
                IF XLBuff."Column No."=7 THEN BEGIN
                  EVALUATE(PayDate,XLBuff."Cell Value as Text");
                END;
                }//<<08102013/VK/CR#020-Code Commented

                //>>08102013/VK/CR#020-New Code
                IF XLBuff."Column No."=7 THEN BEGIN
                 IF EVALUATE(DueDate,XLBuff."Cell Value as Text") THEN BEGIN
                 {  //Ok := DateformatCheck.CHECK(XLBuff."Cell Value as Text");  //UPG13R2DEV
                   Ok := DateformatCheck.checkDateTime(XLBuff."Cell Value as Text"); //UPG13R2DEV
                    IF NOT (Ok) THEN
                      Error_DueDate := TRUE
                    ELSE BEGIN
                 }
                      IF DueDate < TransDate THEN BEGIN
                        Error_DueDateCheck:=TRUE;
                    END;
                 END ELSE
                     Error_DueDate := TRUE;
                END;
                //<<08102013/VK/CR#020-New Code

            {
            //READING DIMENSION CODE 1 "SHOP CODE"
                IF XLBuff."Column No."=8 THEN BEGIN
                  EVALUATE(ShopCode,XLBuff."Cell Value as Text");
                   IF ShopCode <> '' THEN BEGIN
                     GenLed_Setup.GET;
                     Dim_Value.RESET;
                     Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Global Dimension 1 Code");
                     Dim_Value.SETRANGE(Dim_Value.Name,ShopCode);
                     IF NOT Dim_Value.FINDFIRST THEN
                       Error_Dim1 := TRUE
                     ELSE
                       ShopCode1:=Dim_Value.Code;
                   END ELSE
                     Error_Dim1 := TRUE;
                END;
             }
                IF XLBuff."Column No."=8 THEN BEGIN
                  EVALUATE(ShopCode,XLBuff."Cell Value as Text");
                   IF ShopCode <> '' THEN BEGIN
                      LocalRecIfDimMapSetup.GET;
                      IF LocalRecIfDimMapSetup.Others THEN BEGIN
                        LocalCodeRes := GetDim1Value(ShopCode);
                        IF (LocalCodeRes = 'NOT FOUND') THEN
                          Error_Dim1 := TRUE
                        ELSE
                          ShopCode1:=Dim_Value.Code;
                      END ELSE BEGIN
                        GenLed_Setup.GET;
                        Dim_Value.RESET;
                        Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Global Dimension 1 Code");
                        Dim_Value.SETRANGE(Dim_Value.Name,ShopCode);
                        IF NOT Dim_Value.FINDFIRST THEN
                          Error_Dim1 := TRUE
                        ELSE
                          ShopCode1:=Dim_Value.Code;
                      END;
                    END ELSE
                      Error_Dim1 := TRUE;
                END;


                {
            ///READING DIMENSION CODE 3 "SELLING EXPENSES"
                IF XLBuff."Column No."=9 THEN BEGIN
                  EVALUATE(ModelCode,XLBuff."Cell Value as Text");
                  IF ModelCode <> '' THEN BEGIN
                    GenLed_Setup.GET;
                    Dim_Value.RESET;
                    Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Shortcut Dimension 2 Code");
                    Dim_Value.SETRANGE(Dim_Value.Name,ModelCode);
                    IF NOT Dim_Value.FINDFIRST THEN
                      Error_Dim3 := TRUE
                    ELSE
                      ShopCode2:=Dim_Value.Code;
                  END ELSE
                     Error_Dim3 := TRUE;
                END;
                }



            ///READING CURRENCY CODE
                IF XLBuff."Column No."=10 THEN BEGIN
                  EVALUATE(CurrencyCode,XLBuff."Cell Value as Text");
                  {
                  IF CurrencyCode <> '' THEN BEGIN
                    Curry.RESET;
                    IF NOT Curry.GET(CurrencyCode) THEN
                       Error_Curr := TRUE;
                  END ELSE
                     Error_CurrBlank := TRUE;
                  }
                END;


            ///READING TAX INV DATE.
                IF XLBuff."Column No."=11 THEN BEGIN
                  EVALUATE(TaxInvDate,XLBuff."Cell Value as Text");
                END;


            //READING ACCOUNT NO.
                IF XLBuff."Column No."=12 THEN BEGIN
                  EVALUATE(AccNo,XLBuff."Cell Value as Text");
                  IF AccNo <> '' THEN BEGIN
                     "G/L".RESET;
                      IF NOT "G/L".GET(AccNo) THEN
                       "Error_G/L" := TRUE;
                  END ELSE
                     "Error_G/L" := TRUE;
                END;

            //READING AMOUNT FIELD
                IF XLBuff."Column No."=13 THEN BEGIN
                  IF EVALUATE(Amt,XLBuff."Cell Value as Text") THEN BEGIN
                   IF FORMAT(Amt) = '' THEN
                    Error_Amount := TRUE;
                  END ELSE
                    Error_Amount := TRUE;
                END;


            //READING VAT FLAG

                IF XLBuff."Column No."=14 THEN BEGIN
                  EVALUATE(VAT,XLBuff."Cell Value as Text");
                END;
            //PPNPPHDEV.begin
                Result := GetPPNNpwpNumber(DealerCode,VAT);
                CASE Result OF
                  1:
                    Error_Cust := TRUE;
                  2:
                    Error_Conver := TRUE;
                  3:
                    Error_Npwp := TRUE;
                END;

            //PPNPPHDEV.end
            //PPNPPHDEV.begin
            {
            Result1 := GetPPHNpwpNumber(DealerCode);
            CASE Result1 OF
              1:
                Error_Cust := TRUE;
              2:
                Error_Conver := TRUE;
              3:
                Error_PPH_Npwp := TRUE;
            END;
            }
            //PPNPPHDEV.end;



            //READING B/L DATE

                IF XLBuff."Column No."=15 THEN BEGIN
                  EVALUATE(BLDate,XLBuff."Cell Value as Text");
                END;

            //READING ARE CODE
                IF XLBuff."Column No."=16 THEN BEGIN
                  EVALUATE(AreaCode,XLBuff."Cell Value as Text");
                  IF AreaCode <> '' THEN BEGIN
                     AreaCode_WHT.RESET;
                     IF NOT AreaCode_WHT.GET(AreaCode) THEN
                       Error_WHT := TRUE;
                  END ELSE
                     Error_WHT := TRUE;
                END;

            UNTIL XLBuff.NEXT=0;

            ///CODE FOR ERROR LOG FILE
                IF (Error_Cust OR Error_Npwp OR Error_TransDate OR Error_InvDate OR
                  "Error_G/L" OR Error_Amount OR Error_Conver OR Error_Dim1 OR Error_Dim3
                  OR Error_Curr OR  Error_WHT OR Error_Cust_Setup OR Error_DueDate OR Error_DueDateCheck OR Error_PPH_Npwp ) THEN BEGIN //08102013/VK/CR#020  //PPNPPHDEV

                  Flag := TRUE;

                  Outstreamobj.WRITETEXT(FORMAT(EntryNo));
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));

                  IF Error_Cust THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Dealer Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Cust_Setup THEN BEGIN
                    Outstreamobj.WRITETEXT('! Setup Value is Missing for the Customer.');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                  END;

                  IF Error_Npwp THEN BEGIN
                    //Outstreamobj.WRITETEXT('! Error In NPWP No.');  //PPNPPHDEV previous code blocked
                    Outstreamobj.WRITETEXT('! PPN M/C NPWP No. not found for entity'); //PPNPPHDEV
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;
                  //PPNPPHDEV.begin
                  IF Error_PPH_Npwp THEN BEGIN
                    Outstreamobj.WRITETEXT('! PPH M/C NPWP No. not found for entity'); //PPNPPHDEV
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;
                  //PPNPPHDEV.end
                  IF Error_TransDate THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Transaction Date');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_InvDate THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Invoice Date');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  //>>08102013/VK/CR#020
                  IF Error_DueDate THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Due Date');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_DueDateCheck THEN BEGIN
                    Outstreamobj.WRITETEXT('! Due Date should not be less than Transaction Date');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;
                  //<<08102013/VK/CR#020

                  IF "Error_G/L" THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In G/L Account');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Amount THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Amount');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Conver THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Conversion Table for Dealer Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Dim1 THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Dimmension Code 1 ');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Dim3 THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Dimmension Code 3');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_WHT THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error in  WHT Area Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;
                  Outstreamobj.WRITETEXT();
                END ELSE
                  BEGIN
                    Outstreamobj.WRITETEXT(FORMAT(EntryNo));
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                    Outstreamobj.WRITETEXT('Process Sucessfully');
                    Outstreamobj.WRITETEXT();
                  END;
              EntryNo := EntryNo +1;

            //  IF NOT Flag THEN         //08102013/VK/CR#020-Code Commented
            //     InsertInTempTable(i); //08102013/VK/CR#020-Code Commented
              ResetAllVariables();
            END;

            //>>08102013/VK/CR#020
            FOR i:=2 TO NoOfRec DO BEGIN
              IF NOT Flag THEN BEGIN
                EntryNo:=i-1;
                InsertInTempTable(i);
                EntryNo := EntryNo + 1;
              END;
            END;
            //<<08102013/VK/CR#020

            IF ErrorInFile THEN BEGIN
                    Outstreamobj.WRITETEXT('! Error In Interface File');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                    SalesInvIntfc.DELETEALL;
                  END;
            F1.CLOSE;
            ResetAllVariables();

            IF READY THEN
              IncReport.RUN;
          END;

  }
  CODE
  {
    VAR
      InvoiceNo@1000000000 : Code[20];
      DealerCode@1000000001 : Code[20];
      TransDate@1000000002 : Date;
      InvoiceDate@1000000003 : Date;
      ExtDocNo@1000000004 : Code[20];
      NPWPNo@1000000005 : Code[20];
      PayDate@1000000006 : Date;
      ShopCode@1000000007 : Code[10];
      ModelCode@1000000008 : Code[10];
      CurrencyCode@1000000009 : Code[10];
      TaxInvDate@1000000010 : Date;
      AccNo@1000000011 : Code[20];
      Amt@1000000012 : Decimal;
      VAT@1000000013 : Boolean;
      BLDate@1000000014 : Date;
      AreaCode@1000000015 : Code[10];
      EntryNo@1000000016 : Integer;
      ErrorInRow@1000000017 : Boolean;
      ErrorInFile@1000000018 : Boolean;
      SalesInvIntfc@1000000019 : Record 50009;
      DateformatCheck@1000000020 : DotNet "'DateTimeFun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DateTimeFun.DateTimeFormatCheck";
      text006@1000000022 : TextConst 'ENU=Import EXCEL  File';
      Ch@1000000023 : Char;
      Master_Setup@1000000024 : Record 50008;
      LogFile@1000000025 : Text[250];
      F1@1000000026 : File;
      Outstreamobj@1000000027 : OutStream;
      Error_Cust@1000000029 : Boolean;
      Error_Cust_Setup@1000000028 : Boolean;
      Error_TransDate@1000000032 : Boolean;
      Error_InvDate@1000000031 : Boolean;
      Ok@1000000030 : Boolean;
      Error_Conver@1000000033 : Boolean;
      Error_Npwp@1000000034 : Boolean;
      Error_Dim1@1000000036 : Boolean;
      Error_Dim3@1000000035 : Boolean;
      Error_Curr@1000000037 : Boolean;
      Error_CurrBlank@1000000038 : Boolean;
      "Error_G/L"@1000000039 : Boolean;
      Error_Amount@1000000040 : Boolean;
      Error_WHT@1000000041 : Boolean;
      Flag@1000000042 : Boolean;
      READY@1000000043 : Boolean;
      IncReport@1000000044 : Report 50061;
      ShopCode1@1000000045 : Code[10];
      ShopCode2@1000000046 : Code[10];
      Error_DueDate@1102159003 : Boolean;
      DueDate@1102159002 : Date;
      Error_DueDateCheck@1102159001 : Boolean;
      Result@1102159004 : Integer;
      Result1@1102159005 : Integer;
      Error_PPH_Npwp@1102159006 : Boolean;
      text007@1000000021 : TextConst 'ENU="Selling Expense Code(Selling Out Dim) is currently set to "';
      text008@1000000047 : TextConst 'ENU=" in Master Setup, Go to Master Setup to change or Click Yes to Continue"';

    PROCEDURE InsertInTempTable@1000000045(Loop@1000000001 : Integer);
    VAR
      ExBuffRec@1000000002 : Record 50002;
      DimValue@1000000000 : Record 349;
      GLSetUp@1000000003 : Record 98;
    BEGIN
      SalesInvIntfc.INIT;
      SalesInvIntfc."Entry No." := EntryNo;
      SalesInvIntfc."Sales Type":=SalesInvIntfc."Sales Type"::"Selling Out";
      SalesInvIntfc.INSERT;
      ExBuffRec.RESET;
      ExBuffRec.SETRANGE(ExBuffRec."Row No.",Loop);
      IF ExBuffRec.FINDFIRST THEN REPEAT
        IF ExBuffRec."Column No." = 1 THEN
          SalesInvIntfc."No.":=ExBuffRec."Cell Value as Text";
        IF ExBuffRec."Column No." = 2 THEN
          SalesInvIntfc."Dealer Code":=ExBuffRec."Cell Value as Text";
        IF ExBuffRec."Column No." = 3 THEN BEGIN
          EVALUATE(SalesInvIntfc."Transaction Date",ExBuffRec."Cell Value as Text");
          //SalesInvIntfc."Due Date" := duedatecalc(SalesInvIntfc."Transaction Date");  //08102013/VK/CR#020-Code Commented
          SalesInvIntfc."Tax Invoice Date":=duedatecalc(SalesInvIntfc."Transaction Date");
        END;
        IF ExBuffRec."Column No." = 4 THEN
          EVALUATE(SalesInvIntfc."Invoice Date",ExBuffRec."Cell Value as Text");
        IF ExBuffRec."Column No." = 5 THEN
          SalesInvIntfc."Ext.Doc.No.":=ExBuffRec."Cell Value as Text";
        IF ExBuffRec."Column No." = 6 THEN
          SalesInvIntfc."Npwp no.":=ExBuffRec."Cell Value as Text";
        IF ExBuffRec."Column No." = 7 THEN
          //SalesInvIntfc."Due Date" := duedatecalc(SalesInvIntfc."Transaction Date");  //08102013/VK/CR#020-Code Commented
          EVALUATE(SalesInvIntfc."Due Date",ExBuffRec."Cell Value as Text");            //08102013/VK/CR#020-New Code
        IF ExBuffRec."Column No." = 8 THEN BEGIN
          GLSetUp.GET;
          DimValue.RESET;
          DimValue.SETFILTER(DimValue."Dimension Code",GLSetUp."Global Dimension 1 Code");
          DimValue.SETFILTER(DimValue.Name,'%1',ExBuffRec."Cell Value as Text");
          IF DimValue.FINDFIRST THEN
            SalesInvIntfc."Shortcut Dimension 1 Code":=DimValue.Code;
        END;
        IF ExBuffRec."Column No." = 9 THEN
          GLSetUp.GET;
          DimValue.RESET;
          DimValue.SETFILTER(DimValue."Dimension Code",GLSetUp."Global Dimension 2 Code");
          DimValue.SETFILTER(DimValue.Name,'%1',ExBuffRec."Cell Value as Text");
          IF DimValue.FINDFIRST THEN
            SalesInvIntfc."Shortcut Dimension 2 Code":=DimValue.Code;
        IF ExBuffRec."Column No." = 10 THEN
          SalesInvIntfc.Currency:=ExBuffRec."Cell Value as Text";
        IF ExBuffRec."Column No." = 11 THEN
          SalesInvIntfc."Tax Invoice Date":=duedatecalc(SalesInvIntfc."Transaction Date");
        IF ExBuffRec."Column No." = 12 THEN
          SalesInvIntfc."Account No.":=ExBuffRec."Cell Value as Text";
        IF ExBuffRec."Column No." = 13 THEN
          EVALUATE(SalesInvIntfc.Amount,ExBuffRec."Cell Value as Text");
        IF ExBuffRec."Column No." = 14 THEN
          EVALUATE(SalesInvIntfc."VAT Required",ExBuffRec."Cell Value as Text");
        IF ExBuffRec."Column No." = 15 THEN
          EVALUATE(SalesInvIntfc."B/L Date",ExBuffRec."Cell Value as Text");
        SalesInvIntfc."Interface Date":=WORKDATE;
        IF ExBuffRec."Column No." = 16 THEN
          SalesInvIntfc."WHT Area Code":=ExBuffRec."Cell Value as Text";
      UNTIL ExBuffRec.NEXT = 0;
      SalesInvIntfc.MODIFY;
      READY:=TRUE;
    END;

    PROCEDURE ResetAllVariables@1000000056();
    BEGIN
      InvoiceNo:='';
      DealerCode:='';
      TransDate:=0D;
      InvoiceDate:=0D;
      ExtDocNo:='';
      NPWPNo:='';
      PayDate:=0D;
      ShopCode:='';
      ModelCode:='';
      CurrencyCode:='';
      TaxInvDate:=0D;
      AccNo:='';
      Amt:=0;
      VAT:=FALSE;
      BLDate:=0D;
      AreaCode:='';
      EntryNo:=0;
      DueDate := 0D; //08102013/VK/CR#020

      Error_Cust := FALSE;
      Error_Npwp := FALSE;
      Error_TransDate := FALSE;
      Error_InvDate := FALSE;
      Error_Dim1 := FALSE;
      Error_Dim3 := FALSE;
      Error_Curr := FALSE;
      Error_Amount := FALSE;
      Error_Conver := FALSE;
      "Error_G/L" := FALSE;
      Error_WHT := FALSE;
      Error_Cust_Setup := FALSE;
      ErrorInFile:=FALSE;
      Error_DueDate := FALSE;      //08102013/VK/CR#020
      Error_DueDateCheck := FALSE; //08102013/VK/CR#020
      Error_PPH_Npwp := FALSE;//PPNPPHDEV
    END;

    PROCEDURE duedatecalc@1000000000(trandate@1000000000 : Date) duedate : Date;
    VAR
      d@1000000001 : Integer;
      m@1000000002 : Integer;
      Y@1000000003 : Integer;
      D1@1000000004 : Integer;
      M1@1000000005 : Integer;
      Y1@1000000006 : Integer;
    BEGIN
      d := DATE2DMY(trandate,1);
      m := DATE2DMY(trandate,2);
      Y := DATE2DMY(trandate,3);

      IF ((m = 1) OR (m = 2) OR (m = 3) )THEN BEGIN
       D1:= 25;
       M1 := 4;
       duedate:=DMY2DATE(D1,M1,Y);
      END;

      IF ((m = 4) OR (m = 5) OR (m = 6) )THEN BEGIN
       D1:= 25;
       M1 := 7;
       duedate:=DMY2DATE(D1,M1,Y);
      END;

      IF ((m = 7) OR (m = 8) OR (m = 9) )THEN BEGIN
       D1:= 25;
       M1 := 10;
       duedate:=DMY2DATE(D1,M1,Y);
      END;

      IF ((m = 10) OR (m = 11) OR (m = 12) )THEN BEGIN
       D1:= 25;
       M1 := 1;
       Y1:=Y+1;
       duedate:=DMY2DATE(D1,M1,Y1);
      END;
    END;

    PROCEDURE DateTrim@1102159001(ADate@1102159001 : Text) : Text[250];
    BEGIN
      EXIT(DELSTR(ADate,STRLEN(ADate),1));
    END;

    PROCEDURE GetPPNNpwpNumber@1102159002("Customer code"@1102159001 : Code[30];vat@1102159005 : Boolean) return : Integer;
    VAR
      ConvMasterCust@1102159002 : Record 50004;
      Cust_Master1@1102159003 : Record 18;
      ShipAdd@1102159004 : Record 222;
    BEGIN

        //new funtion for ppnpph npwp validation  //PPNPPHDEV
      IF vat THEN BEGIN
        ConvMasterCust.RESET;
        ConvMasterCust.SETRANGE("Imacs Code","Customer code");
        IF ConvMasterCust.FINDFIRST THEN BEGIN
          IF Cust_Master1.GET(ConvMasterCust.NAV) THEN BEGIN
            ShipAdd.RESET;
            ShipAdd.SETRANGE("Customer No.",Cust_Master1."No.");
            ShipAdd.SETRANGE(ShipAdd.PPN,TRUE);
            ShipAdd.SETRANGE(ShipAdd."PPN M/C",TRUE);
            IF NOT ShipAdd.FINDFIRST THEN
              return := 3;
          END ELSE
            return := 1
        END ELSE
          return := 2;
      END ELSE BEGIN
        ConvMasterCust.RESET;
        ConvMasterCust.SETRANGE(ConvMasterCust."Imacs Code","Customer code");
        IF ConvMasterCust.FINDFIRST THEN BEGIN
          IF NOT Cust_Master1.GET(ConvMasterCust.NAV) THEN
            return := 1
        END ELSE
            return := 2;
      END;
    END;

    PROCEDURE GetPPHNpwpNumber@1102159004("Customer code"@1102159001 : Text[30]) return : Integer;
    VAR
      ConvMasterCust1@1102159002 : Record 50004;
      Cust_Master2@1102159003 : Record 18;
      ShipAdd1@1102159004 : Record 222;
    BEGIN

       //new funtion for ppnpph npwp validation  //PPNPPHDEV
      ConvMasterCust1.RESET;
      ConvMasterCust1.SETRANGE("Imacs Code","Customer code");
      IF ConvMasterCust1.FINDFIRST THEN BEGIN
        IF Cust_Master2.GET(ConvMasterCust1.NAV) THEN BEGIN
          ShipAdd1.RESET;
          ShipAdd1.SETRANGE("Customer No.",Cust_Master2."No.");
          ShipAdd1.SETRANGE(PPH,TRUE);
          ShipAdd1.SETRANGE("PPH M/C",TRUE);
          IF NOT ShipAdd1.FINDFIRST THEN
            return := 3;
        END ELSE
          return := 1
      END ELSE
          return := 2;
    END;

    PROCEDURE GetDim1Value@1000000001(Dimension1@1000000000 : Code[10]) LocalCodeReturnRes : Code[10];
    VAR
      LocalRecIfDimMapp@1000000001 : Record 60065;
    BEGIN

      LocalRecIfDimMapp.RESET;
      LocalRecIfDimMapp.SETRANGE("Dimension Name",LocalRecIfDimMapp."Dimension Name"::"SHOP CODE");
      LocalRecIfDimMapp.SETRANGE("Old YIMM Code",Dimension1);
      IF NOT LocalRecIfDimMapp.FINDSET THEN
        LocalCodeReturnRes := 'NOT FOUND'
      ELSE
        LocalCodeReturnRes := LocalRecIfDimMapp."New NAV Code";
    END;

    BEGIN
    {
      //SllO1.0
      Interface is designed for Selling Out.

      Date               Sign                 Ref_ID                 Description
      08102013            VK                  CR#020                 Due Date will now be read from the I/F file.
                                                                     Error in Log File in case of Blank Due Date.I/F Data will not be
                                                                     interfaced to system until all errors in Log File corrected.
      24102013            VK                  CR#020                 Blank Error not required for some of the fields.
                                                                     Due Date should not be less than Transaction Date.

      //UPG13R2DEV
      Modifications for 2013R2DB. Dotnet variable "DateFormatCheck" is modified. Also "DateTrim" function is created to remove a space in Date fields in interface files.
      //PPNPPHDEV SV ppnppph concept developed
    }
    END.
  }
}

