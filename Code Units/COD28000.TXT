OBJECT Codeunit 28000 Post Code Check
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00;
    Version List=NAVAPAC7.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1500000 : Record 98;
      Country@1500001 : Record 9;
      HadGLSetup@1500002 : Boolean;
      Text001@1500003 : TextConst 'ENU=%1 must be Post Code & City in %2.;ENA=%1 must be Post Code & City in %2.';

    PROCEDURE ValidateCity@1500000(CurrFieldNumber@1500000 : Integer;TableNo@1500001 : Integer;TableKey@1500002 : Text[1024];AddressType@1500003 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';VAR Name@1500004 : Text[90];VAR Name2@1500005 : Text[90];VAR Contact@1500006 : Text[90];VAR Address@1500007 : Text[50];VAR Address2@1500008 : Text[50];VAR City@1500009 : Text[50];VAR PostCode@1500010 : Code[20];VAR County@1500011 : Text[50];VAR CountryCode@1500012 : Code[10]);
    VAR
      PostCodeRec@1500013 : Record 225;
      RecCount@1500014 : Integer;
    BEGIN
      IF (City = '') OR (CurrFieldNumber = 0) OR (GUIALLOWED = FALSE) THEN
        EXIT;
      GetAddressValidationSetup(CountryCode);
      CASE Country."Address Validation" OF
        Country."Address Validation"::"Post Code & City":
          BEGIN
            PostCodeRec.RESET;
            PostCodeRec.SETCURRENTKEY("Search City");
            PostCodeRec.SETFILTER("Search City",UPPERCASE(City));
            PostCodeRec.FINDFIRST;
            RecCount := PostCodeRec.COUNT;
            CASE TRUE OF
              RecCount = 1:
                BEGIN
                  PostCode := PostCodeRec.Code;
                  City := PostCodeRec.City;
                  County := PostCodeRec.County;
                END;
              RecCount > 1:
                BEGIN
                  IF PAGE.RUNMODAL(
                       PAGE::"Post Codes",PostCodeRec,PostCodeRec.Code) = ACTION::LookupOK
                  THEN BEGIN
                    PostCode := PostCodeRec.Code;
                    City := PostCodeRec.City;
                    County := PostCodeRec.County;
                  END ELSE
                    ERROR('');
                END;
            END;
          END;
        Country."Address Validation"::"Entire Address",
        Country."Address Validation"::"Address ID":
          RunExternalValidation(
            TableNo,TableKey,AddressType,2,
            Name,Name2,Contact,Address,Address2,City,PostCode,County,CountryCode);
      END;
    END;

    PROCEDURE ValidatePostCode@1500001(CurrFieldNumber@1500000 : Integer;TableNo@1500001 : Integer;TableKey@1500002 : Text[1024];AddressType@1500003 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';VAR Name@1500004 : Text[90];VAR Name2@1500005 : Text[90];VAR Contact@1500006 : Text[90];VAR Address@1500007 : Text[50];VAR Address2@1500008 : Text[50];VAR City@1500009 : Text[50];VAR PostCode@1500010 : Code[20];VAR County@1500011 : Text[50];VAR CountryCode@1500012 : Code[10]);
    VAR
      PostCodeRec@1500013 : Record 225;
      RecCount@1500014 : Integer;
    BEGIN
      IF (PostCode = '') OR (CurrFieldNumber = 0) OR (GUIALLOWED = FALSE) THEN
        EXIT;
      GetAddressValidationSetup(CountryCode);
      CASE Country."Address Validation" OF
        Country."Address Validation"::"Post Code & City":
          BEGIN
            PostCodeRec.RESET;
            PostCodeRec.SETFILTER(Code,PostCode);
            PostCodeRec.FINDFIRST;
            RecCount := PostCodeRec.COUNT;
            CASE TRUE OF
              RecCount = 1:
                BEGIN
                  PostCode := PostCodeRec.Code;
                  City := PostCodeRec.City;
                  County := PostCodeRec.County;
                END;
              RecCount > 1:
                BEGIN
                  IF PAGE.RUNMODAL(
                       PAGE::"Post Codes",PostCodeRec,PostCodeRec.City) = ACTION::LookupOK
                  THEN BEGIN
                    PostCode := PostCodeRec.Code;
                    City := PostCodeRec.City;
                    County := PostCodeRec.County;
                  END ELSE
                    ERROR('');
                END;
            END;
          END;
        Country."Address Validation"::"Entire Address",
        Country."Address Validation"::"Address ID":
          RunExternalValidation(
            TableNo,TableKey,AddressType,2,
            Name,Name2,Contact,Address,Address2,City,PostCode,County,CountryCode);
      END;
    END;

    PROCEDURE LookUpCity@1500002(CurrFieldNumber@1500000 : Integer;TableNo@1500001 : Integer;TableKey@1500002 : Text[1024];AddressType@1500003 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';VAR Name@1500004 : Text[90];VAR Name2@1500005 : Text[90];VAR Contact@1500006 : Text[90];VAR Address@1500007 : Text[50];VAR Address2@1500008 : Text[50];VAR City@1500009 : Text[50];VAR PostCode@1500010 : Code[20];VAR County@1500011 : Text[50];VAR CountryCode@1500012 : Code[10];ReturnValues@1500014 : Boolean);
    VAR
      PostCodeRec@1500013 : Record 225;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      GetAddressValidationSetup(CountryCode);
      CASE Country."Address Validation" OF
        Country."Address Validation"::"Post Code & City":
          BEGIN
            PostCodeRec.RESET;
            PostCodeRec.SETCURRENTKEY("Search City");
            PostCodeRec."Search City" := UPPERCASE(City);
            IF (PAGE.RUNMODAL(
                  PAGE::"Post Codes",PostCodeRec,PostCodeRec.City) = ACTION::LookupOK) AND ReturnValues
            THEN BEGIN
              PostCode := PostCodeRec.Code;
              City := PostCodeRec.City;
              County := PostCodeRec.County;
            END;
          END;
        Country."Address Validation"::"Entire Address",
        Country."Address Validation"::"Address ID":
          RunExternalValidation(
            TableNo,TableKey,AddressType,1,
            Name,Name2,Contact,Address,Address2,City,PostCode,County,CountryCode);
      END;
    END;

    PROCEDURE LookUpPostCode@1500003(CurrFieldNumber@1500000 : Integer;TableNo@1500001 : Integer;TableKey@1500002 : Text[1024];AddressType@1500003 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';VAR Name@1500004 : Text[90];VAR Name2@1500005 : Text[90];VAR Contact@1500006 : Text[90];VAR Address@1500007 : Text[50];VAR Address2@1500008 : Text[50];VAR City@1500009 : Text[50];VAR PostCode@1500010 : Code[20];VAR County@1500011 : Text[50];VAR CountryCode@1500012 : Code[10];ReturnValues@1500014 : Boolean);
    VAR
      PostCodeRec@1500013 : Record 225;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;
      GetAddressValidationSetup(CountryCode);
      CASE Country."Address Validation" OF
        Country."Address Validation"::"Post Code & City":
          BEGIN
            PostCodeRec.RESET;
            PostCodeRec.Code := PostCode;
            IF (PAGE.RUNMODAL(
                  PAGE::"Post Codes",PostCodeRec,PostCodeRec.Code) = ACTION::LookupOK) AND ReturnValues
            THEN BEGIN
              PostCode := PostCodeRec.Code;
              City := PostCodeRec.City;
              County := PostCodeRec.County;
            END;
          END;
        Country."Address Validation"::"Entire Address",
        Country."Address Validation"::"Address ID":
          RunExternalValidation(
            TableNo,TableKey,AddressType,1,
            Name,Name2,Contact,Address,Address2,City,PostCode,County,CountryCode);
      END;
    END;

    PROCEDURE ValidateAddress@1500004(CurrFieldNumber@1500000 : Integer;TableNo@1500001 : Integer;TableKey@1500002 : Text[1024];AddressType@1500003 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';VAR Name@1500004 : Text[90];VAR Name2@1500005 : Text[90];VAR Contact@1500006 : Text[90];VAR Address@1500007 : Text[50];VAR Address2@1500008 : Text[50];VAR City@1500009 : Text[50];VAR PostCode@1500010 : Code[20];VAR County@1500011 : Text[50];VAR CountryCode@1500012 : Code[10]);
    BEGIN
      IF (PostCode = '') OR (City = '') OR (CurrFieldNumber = 0) OR (GUIALLOWED = FALSE) THEN
        EXIT;
      GetAddressValidationSetup(CountryCode);
      CASE Country."Address Validation" OF
        Country."Address Validation"::"Entire Address",
        Country."Address Validation"::"Address ID":
          RunExternalValidation(
            TableNo,TableKey,AddressType,3,
            Name,Name2,Contact,Address,Address2,City,PostCode,County,CountryCode);
      END;
    END;

    LOCAL PROCEDURE RunExternalValidation@1500005(TableNo@1500000 : Integer;TableKey@1500001 : Text[1024];AddressType@1500002 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';ValidationType@1500003 : ' ,GUI Only,GUI Optional,No GUI';VAR Name@1500004 : Text[90];VAR Name2@1500005 : Text[90];VAR Contact@1500006 : Text[90];VAR Address@1500007 : Text[50];VAR Address2@1500008 : Text[50];VAR City@1500009 : Text[50];VAR PostCode@1500010 : Code[20];VAR County@1500011 : Text[50];VAR CountryCode@1500012 : Code[10]);
    VAR
      AddressID@1500013 : Record 28003;
      TempAddressBuffer@1500014 : TEMPORARY Record 28002;
    BEGIN
      Country.TESTFIELD("AMAS Software");
      TempAddressBuffer.INIT;
      TempAddressBuffer.Name := Name;
      TempAddressBuffer."Name 2" := Name2;
      TempAddressBuffer.Contact := Contact;
      TempAddressBuffer.Address := Address;
      TempAddressBuffer."Address 2" := Address2;
      TempAddressBuffer.City := City;
      TempAddressBuffer."Post Code" := PostCode;
      TempAddressBuffer.County := County;
      TempAddressBuffer."Country Code" := CountryCode;
      TempAddressBuffer."Validation Type" := ValidationType;
      TempAddressBuffer.INSERT;
      CODEUNIT.RUN(Country."AMAS Software",TempAddressBuffer);
      IF (TempAddressBuffer."Address ID" <> '') OR
         (TempAddressBuffer."Bar Code" <> '') OR
         (TempAddressBuffer."Error Flag No." <> '')
      THEN BEGIN
        IF NOT AddressID.GET(TableNo,TableKey,AddressType) THEN BEGIN
          AddressID.INIT;
          AddressID."Table No." := TableNo;
          AddressID."Table Key" := TableKey;
          AddressID."Address Type" := AddressType;
          AddressID.VALIDATE("Address ID",TempAddressBuffer."Address ID");
          AddressID."Address Sort Plan" := TempAddressBuffer."Address Sort Plan";
          AddressID."Error Flag No." := TempAddressBuffer."Error Flag No.";
          AddressID."Bar Code System" := TempAddressBuffer."Bar Code System";
          AddressID.INSERT;
        END ELSE BEGIN
          AddressID.VALIDATE("Address ID",TempAddressBuffer."Address ID");
          AddressID."Address Sort Plan" := TempAddressBuffer."Address Sort Plan";
          AddressID."Error Flag No." := TempAddressBuffer."Error Flag No.";
          AddressID."Bar Code System" := TempAddressBuffer."Bar Code System";
          AddressID.MODIFY;
        END;
      END;
      IF Country."Address Validation" =
         Country."Address Validation"::"Entire Address"
      THEN BEGIN
        Name := COPYSTR(TempAddressBuffer.Name,1,30);
        Name2 := COPYSTR(TempAddressBuffer."Name 2",1,30);
        Contact := COPYSTR(TempAddressBuffer.Contact,1,30);
        Address := COPYSTR(TempAddressBuffer.Address,1,30);
        Address2 := COPYSTR(TempAddressBuffer."Address 2",1,30);
        City := COPYSTR(TempAddressBuffer.City,1,30);
        PostCode := COPYSTR(TempAddressBuffer."Post Code",1,20);
        County := COPYSTR(TempAddressBuffer.County,1,30);
        CountryCode := COPYSTR(TempAddressBuffer."Country Code",1,10);
      END;
    END;

    PROCEDURE DeleteAddressID@1500006(TableNo@1500000 : Integer;TableKey@1500001 : Text[1024];AddressType@1500002 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to');
    VAR
      AddressID@1500003 : Record 28003;
    BEGIN
      AddressID.SETRANGE("Table No.",TableNo);
      AddressID.SETRANGE("Table Key",TableKey);
      AddressID.SETRANGE("Address Type",AddressType);
      AddressID.DELETEALL;
    END;

    PROCEDURE DeleteAllAddressID@1500007(TableNo@1500000 : Integer;TableKey@1500001 : Text[1024]);
    VAR
      AddressID@1500002 : Record 28003;
    BEGIN
      AddressID.SETRANGE("Table No.",TableNo);
      AddressID.SETRANGE("Table Key",TableKey);
      AddressID.DELETEALL;
    END;

    PROCEDURE CopyAddressID@1500008(FromTableNo@1500000 : Integer;FromTableKey@1500001 : Text[1024];FromAddressType@1500002 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';ToTableNo@1500003 : Integer;ToTableKey@1500004 : Text[1024];ToAddressType@1500005 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to');
    VAR
      FromAddressID@1500006 : Record 28003;
      ToAddressID@1500007 : Record 28003;
    BEGIN
      IF FromAddressID.GET(FromTableNo,FromTableKey,FromAddressType) THEN BEGIN
        IF NOT ToAddressID.GET(ToTableNo,ToTableKey,ToAddressType) THEN BEGIN
          ToAddressID.INIT;
          ToAddressID := FromAddressID;
          ToAddressID."Table No." := ToTableNo;
          ToAddressID."Table Key" := ToTableKey;
          ToAddressID."Address Type" := ToAddressType;
          ToAddressID.INSERT;
        END ELSE BEGIN
          ToAddressID."Address ID" := FromAddressID."Address ID";
          ToAddressID."Address Sort Plan" := FromAddressID."Address Sort Plan";
          ToAddressID."Bar Code" := FromAddressID."Bar Code";
          ToAddressID."Bar Code System" := FromAddressID."Bar Code System";
          ToAddressID."Error Flag No." := FromAddressID."Error Flag No.";
          ToAddressID."Address ID Check Date" := FromAddressID."Address ID Check Date";
          ToAddressID.MODIFY;
        END;
      END ELSE
        IF ToAddressID.GET(ToTableNo,ToTableKey,ToAddressType) THEN
          ToAddressID.DELETE;
    END;

    PROCEDURE CopyAllAddressID@1500009(FromTableNo@1500000 : Integer;FromTableKey@1500001 : Text[1024];ToTableNo@1500002 : Integer;ToTableKey@1500003 : Text[1024]);
    VAR
      FromAddressID@1500004 : Record 28003;
      ToAddressID@1500005 : Record 28003;
    BEGIN
      FromAddressID.SETRANGE("Table No.",FromTableNo);
      FromAddressID.SETRANGE("Table Key",FromTableKey);
      ToAddressID.SETRANGE("Table No.",ToTableNo);
      ToAddressID.SETRANGE("Table Key",ToTableKey);
      ToAddressID.DELETEALL;
      IF FromAddressID.FIND('-') THEN
        REPEAT
          ToAddressID.INIT;
          ToAddressID := FromAddressID;
          ToAddressID."Table No." := ToTableNo;
          ToAddressID."Table Key" := ToTableKey;
          ToAddressID.INSERT;
        UNTIL FromAddressID.NEXT = 0;
    END;

    PROCEDURE MoveAddressID@1500010(FromTableNo@1500000 : Integer;FromTableKey@1500001 : Text[1024];FromAddressType@1500002 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to';ToTableNo@1500003 : Integer;ToTableKey@1500004 : Text[1024];ToAddressType@1500005 : 'Main,Bill-to,Ship-to,Sell-to,Pay-to,Buy-from,Transfer-from,Transfer-to');
    VAR
      FromAddressID@1500006 : Record 28003;
      ToAddressID@1500007 : Record 28003;
    BEGIN
      IF FromAddressID.GET(FromTableNo,FromTableKey,FromAddressType) THEN BEGIN
        IF NOT ToAddressID.GET(ToTableNo,ToTableKey,ToAddressType) THEN BEGIN
          ToAddressID.INIT;
          ToAddressID := FromAddressID;
          ToAddressID."Table No." := ToTableNo;
          ToAddressID."Table Key" := ToTableKey;
          ToAddressID."Address Type" := ToAddressType;
          ToAddressID.INSERT;
        END ELSE BEGIN
          ToAddressID := FromAddressID;
          ToAddressID."Table No." := ToTableNo;
          ToAddressID."Table Key" := ToTableKey;
          ToAddressID."Address Type" := ToAddressType;
          ToAddressID.MODIFY;
        END;
        FromAddressID.DELETE;
      END ELSE
        IF ToAddressID.GET(ToTableNo,ToTableKey,ToAddressType) THEN
          ToAddressID.DELETE;
    END;

    PROCEDURE MoveAllAddressID@1500011(FromTableNo@1500000 : Integer;FromTableKey@1500001 : Text[1024];ToTableNo@1500002 : Integer;ToTableKey@1500003 : Text[1024]);
    VAR
      FromAddressID@1500004 : Record 28003;
      ToAddressID@1500005 : Record 28003;
    BEGIN
      FromAddressID.SETRANGE("Table No.",FromTableNo);
      FromAddressID.SETRANGE("Table Key",FromTableKey);
      ToAddressID.SETRANGE("Table No.",ToTableNo);
      ToAddressID.SETRANGE("Table Key",ToTableKey);
      ToAddressID.DELETEALL;
      IF FromAddressID.FIND('-') THEN
        REPEAT
          ToAddressID.INIT;
          ToAddressID := FromAddressID;
          ToAddressID."Table No." := ToTableNo;
          ToAddressID."Table Key" := ToTableKey;
          ToAddressID.INSERT;
        UNTIL FromAddressID.NEXT = 0;

      FromAddressID.DELETEALL;
    END;

    PROCEDURE TextToArray@1500012(OutputText@1500000 : Text[1024];VAR ArrayOutputText@1500001 : ARRAY [100] OF Text[1024]) ReturnInformation : Text[1024];
    VAR
      i@1500002 : Integer;
      j@1500003 : Integer;
    BEGIN
      i := 1;
      j := 1;
      WHILE (OutputText[i] <> 0) AND (j < 100) DO BEGIN
        IF FORMAT(OutputText[i]) <> ',' THEN
          ArrayOutputText[j] := ArrayOutputText[j] + FORMAT(OutputText[i])
        ELSE
          j := j + 1;
        i := i + 1;
      END;
    END;

    PROCEDURE ApplicationNotInstalled@1500013();
    VAR
      Text001@1500001 : TextConst 'ENU=The external component is not installed.;ENA=The external component is not installed.';
    BEGIN
      MESSAGE(Text001);
    END;

    LOCAL PROCEDURE GetAddressValidationSetup@1500014(CountryCode@1500000 : Code[10]);
    BEGIN
      IF CountryCode = '' THEN BEGIN
        GetGLSetup;
        CLEAR(Country);
        Country."Address Validation" := GLSetup."Address Validation";
        Country."AMAS Software" := GLSetup."AMAS Software";
      END ELSE
        Country.GET(CountryCode);
    END;

    LOCAL PROCEDURE GetGLSetup@1500015();
    BEGIN
      IF NOT HadGLSetup THEN BEGIN
        GLSetup.GET;
        HadGLSetup := TRUE;
      END;
    END;

    PROCEDURE AddressValIsPostCodeCity@1500016();
    BEGIN
      GetGLSetup;
      IF GLSetup."Address Validation" <> GLSetup."Address Validation"::"Post Code & City" THEN
        ERROR(
          Text001,
          GLSetup.FIELDCAPTION("Address Validation"),
          GLSetup.TABLECAPTION);
    END;

    BEGIN
    END.
  }
}

