OBJECT Codeunit 50020 G-Port Import(Purch) Interface
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=[ 9:55:01];
    Modified=Yes;
    Version List=Gimp10,CR#005,UPG13R2DEV;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            CustBankAcc@1000000000 : Record 287;
            LocalRecIfDimMapSetup@1000000002 : Record 60066;
            LocalCodeRes@1000000001 : Code[10];
          BEGIN
            ToCheckDate := ToCheckDate.DateTimeFormatCheck;  //UPG13R2DEV
            Ch := 9;
            MasterSetup.GET;

            FileName := MasterSetup."Interface File Path" + '\' + MasterSetup."G-port Import";
            LogFileName := MasterSetup."Interface File Path" + '\' + 'LOG-' + MasterSetup."G-port Import";
            LF.CREATE(LogFileName);
            LF.CREATEOUTSTREAM(Outstreamobj);
            LF.TEXTMODE(TRUE);



            IF NOT (F.OPEN(FileName)) THEN
            BEGIN
             LF.CLOSE;
             EXIT;
            END;




            F.CREATEINSTREAM(Instreamobj);

            ErrorInFile := FALSE;
            EntryNo := 0;
            DeleteTempTable();

            WHILE NOT Instreamobj.EOS DO BEGIN

               ErrorInRow := FALSE;
               "B/LDateOK" := FALSE;
               DuplicateInvoiceNo := FALSE;
               DuplicateInvoiceNo1 := FALSE;
               AppliesToDocNo := '';
               AppliesToGportDocNo := '';

              //Creating Entry No.
              EntryNo+=1;
              Outstreamobj.WRITE(FORMAT(EntryNo));
              Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));

              //Reading Process Flag
              Instreamobj.READTEXT(Readed,1);
              EVALUATE("N/C",Readed);
              IF ("N/C" = 'N') OR ("N/C" = 'C') THEN BEGIN
                IF "N/C" = 'N'  THEN ProcessFlag := ProcessFlag::New;
                IF "N/C" = 'C'  THEN ProcessFlag := ProcessFlag::Cancel;
              END
                ELSE BEGIN
                  Outstreamobj.WRITETEXT('! Error In Process Flag');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;

              //Reading Invoice No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(InvoiceNo,Readed);
              IF InvoiceNo = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Invoice No.');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END ELSE BEGIN
                IF ProcessFlag = ProcessFlag::New THEN BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");  //shashi  invoice to credit memo
                  SalesHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                  SalesHeader.SETRANGE(SalesHeader."Reason Code",MasterSetup."Reason (Sale as Purchase)");    // shashi MasterSetup."Reason (Normal)" to    MasterSetup."Reason (Sale as Purchase)"

                  GPrtXprtImprtIntrfc.RESET;
                  GPrtXprtImprtIntrfc.SETRANGE("Invoice No.",InvoiceNo);
                  GPrtXprtImprtIntrfc.SETRANGE("Process Flag",GPrtXprtImprtIntrfc."Process Flag"::Cancel);
                    IF GPrtXprtImprtIntrfc.FINDFIRST THEN
                      DuplicateInvoiceNo := FALSE
                    ELSE
                    IF (SalesHeader.FINDLAST) AND (SalesHeader."New or Cancel" = SalesHeader."New or Cancel"::New) THEN
                      DuplicateInvoiceNo := TRUE;

                  IF NOT DuplicateInvoiceNo THEN BEGIN
                    SalesInvHeader.RESET;
                    SalesInvHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                    SalesInvHeader.SETRANGE(SalesInvHeader."Reason Code",MasterSetup."Reason (Sale as Purchase)");  //shashi MasterSetup."Reason (Normal)" to MasterSetup."Reason (Sale as Purchase)"
                    IF SalesInvHeader.FINDLAST THEN BEGIN
                      SalesHeader.RESET;
                      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice); //shashi "Credit Memo" to inv
                      SalesHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                      SalesHeader.SETRANGE(SalesHeader."Reason Code",MasterSetup."Reason (Sale as Purchase)"); //shashi MasterSetup."Reason (Normal)" to MasterSetup."Reason (Sale as Purchase)"
                      SalesHeader.SETRANGE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::"Credit Memo"); // invoice to credit memo
                      SalesHeader.SETRANGE("Applies-to Doc. No.",SalesInvHeader."No.");
                      IF NOT SalesHeader.FINDLAST THEN BEGIN
                        SalesCrMemoHdr.RESET;
                        SalesCrMemoHdr.SETRANGE(SalesCrMemoHdr."Reason Code",MasterSetup."Reason (Sale as Purchase)"); // shashi MasterSetup."Reason (Normal)" to MasterSetup."Reason (Sale as Purchase)"
                        SalesCrMemoHdr.SETRANGE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::"Credit Memo");    //shashi inv to credit memo
                        SalesCrMemoHdr.SETRANGE(SalesCrMemoHdr."Applies-to Doc. No.",SalesInvHeader."No.");
                        IF NOT SalesCrMemoHdr.FINDLAST THEN
                         BEGIN
                            GPrtXprtImprtIntrfc.RESET;
                            GPrtXprtImprtIntrfc.SETRANGE("Invoice No.",InvoiceNo);
                            GPrtXprtImprtIntrfc.SETRANGE("Process Flag",GPrtXprtImprtIntrfc."Process Flag"::Cancel);
                            GPrtXprtImprtIntrfc.SETRANGE(GPrtXprtImprtIntrfc."Applies To Doc No.",SalesInvHeader."No.");
                          END;
                          IF NOT GPrtXprtImprtIntrfc.FINDFIRST THEN
                          DuplicateInvoiceNo := TRUE;
                      END;
                    END;
                  END;
                  IF NOT DuplicateInvoiceNo THEN
                  ActionOnLine := ActionOnLine::Insert;
                END;

                IF ProcessFlag = ProcessFlag::Cancel THEN BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
                  SalesHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                  SalesHeader.SETRANGE(SalesHeader."Reason Code",MasterSetup."Reason (Normal)");

                  //rAJESHIF (SalesHeader.FINDLAST) AND (SalesHeader."New Or Cancel"=SalesHeader."New Or Cancel"::Cancel) THEN
                  //RAJESH   DuplicateInvoiceNo:=TRUE;

                  IF (SalesHeader.FINDLAST) AND (SalesHeader."New or Cancel" = SalesHeader."New or Cancel"::New) THEN
                  ActionOnLine := ActionOnLine::Modify

                  ELSE BEGIN
                    SalesInvHeader.RESET;
                    SalesInvHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                    SalesInvHeader.SETRANGE(SalesInvHeader."Reason Code",MasterSetup."Reason (Normal)");
                    IF SalesInvHeader.FINDLAST THEN BEGIN
                      SalesHeader.RESET;
                      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
                      SalesHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                      SalesHeader.SETRANGE(SalesHeader."Reason Code",MasterSetup."Reason (Normal)");
                      SalesHeader.SETRANGE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::Invoice);
                      SalesHeader.SETRANGE("Applies-to Doc. No.",SalesInvHeader."No.");
                      IF SalesHeader.FINDLAST THEN BEGIN
                        DuplicateInvoiceNo1 := TRUE;
                        DuplicateInvoiceNo := FALSE;
                      END ELSE BEGIN
                        SalesCrMemoHdr.RESET;
                        SalesCrMemoHdr.SETRANGE(SalesCrMemoHdr."Reason Code",MasterSetup."Reason (Normal)");
                        SalesCrMemoHdr.SETRANGE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::Invoice);
                        SalesCrMemoHdr.SETRANGE(SalesCrMemoHdr."Applies-to Doc. No.",SalesInvHeader."No.");
                        IF SalesCrMemoHdr.FINDLAST THEN BEGIN
                          DuplicateInvoiceNo1 := TRUE;
                          DuplicateInvoiceNo := FALSE;
                        END ELSE
                        ActionOnLine := ActionOnLine::"As Return";
                      END;
                    END ELSE BEGIN
                      GPrtXprtImprtIntrfc.RESET;
                      GPrtXprtImprtIntrfc.SETRANGE("Invoice No.",InvoiceNo);
                      GPrtXprtImprtIntrfc.SETRANGE("Process Flag",GPrtXprtImprtIntrfc."Process Flag"::New);
                      GPrtXprtImprtIntrfc.SETRANGE("Action On Line",GPrtXprtImprtIntrfc."Action On Line"::Insert);
                      IF GPrtXprtImprtIntrfc.FINDFIRST THEN BEGIN
                        ProcessFlag := ProcessFlag::Cancel;
                        ActionOnLine := ActionOnLine::"As Cancel";
                        DuplicateInvoiceNo1 := FALSE;
                        DuplicateInvoiceNo := FALSE;
                      END;
                    END;
                  END;
                END;


                IF (DuplicateInvoiceNo) OR (DuplicateInvoiceNo1) THEN BEGIN
                  Outstreamobj.WRITETEXT('! Duplicacy In Invoice No.');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;
              END;

              //For Applies To Doc No In Case Of Return
              IF ProcessFlag=ProcessFlag::Cancel THEN BEGIN
                  SalesHeader.RESET;
                  SalesHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                  SalesHeader.SETRANGE("New or Cancel",SalesHeader."New or Cancel"::New);
                  IF SalesHeader.FINDLAST THEN
                     AppliesToDocNo := ''
                  ELSE BEGIN
                    SalesInvHeader.RESET;
                    SalesInvHeader.SETRANGE("G-Port Ref No.",InvoiceNo);
                    IF SalesInvHeader.FINDLAST THEN
                      AppliesToDocNo := SalesInvHeader."No."
                  ELSE BEGIN
                    IF (ActionOnLine = ActionOnLine::"As Cancel") THEN BEGIN
                      GPrtXprtImprtIntrfc.RESET;
                      GPrtXprtImprtIntrfc.SETRANGE("Invoice No.",InvoiceNo);
                      GPrtXprtImprtIntrfc.SETRANGE("Process Flag",GPrtXprtImprtIntrfc."Process Flag"::New);
                      GPrtXprtImprtIntrfc.SETRANGE("Action On Line",GPrtXprtImprtIntrfc."Action On Line"::Insert);
                      IF GPrtXprtImprtIntrfc.FINDFIRST THEN
                      AppliesToGportDocNo := InvoiceNo;
                    END ELSE BEGIN
                      Outstreamobj.WRITETEXT('! Cancel Is Not Possible Because Original Doc Does not Exist');
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                  END;
                  END;
              END;
              //For Applies To Doc No In Case Of Return

              //Reading Vendor Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(VendorCode,Readed);
              IF VendorCode = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Entity Code');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END ELSE BEGIN
                ConversionTableCustomer.RESET;
                ConversionTableCustomer.SETRANGE("Gport Code",VendorCode);
                IF ConversionTableCustomer.FINDFIRST THEN BEGIN
                  OldVendor := VendorCode;
                  VendorCode := ConversionTableCustomer.NAV;
                  Cust.RESET;
                  IF Cust.GET(ConversionTableCustomer.NAV) THEN BEGIN
                    IF Cust."Customer Type" = 3 THEN BEGIN
                      VendorCode := '';
                      Outstreamobj.WRITETEXT('! Entity Type is Not Defined For :-');
                      Outstreamobj.WRITE(Cust."No.");
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                    IF Cust."Gen. Bus. Posting Group" = '' THEN BEGIN
                      VendorCode := '';
                      Outstreamobj.WRITETEXT('! Gen. Bus. Posting Group is Not Defined For :-');
                      Outstreamobj.WRITE(Cust."No.");
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                    IF Cust."VAT Bus. Posting Group" = '' THEN BEGIN
                      VendorCode := '';
                      Outstreamobj.WRITETEXT('! VAT Bus. Posting Group is Not Defined For :-');
                      Outstreamobj.WRITE(Cust."No.");
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                    IF Cust."WHT Business Posting Group" = '' THEN BEGIN
                      VendorCode := '';
                      Outstreamobj.WRITETEXT('! WHT Bus. Posting Group is Not Defined For :-');
                      Outstreamobj.WRITE(Cust."No.");
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                    IF Cust."Customer Posting Group" = '' THEN BEGIN
                      VendorCode := '';
                      Outstreamobj.WRITETEXT('! Vendor Posting Group is Not Defined For :-');
                      Outstreamobj.WRITE(Cust."No.");
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                  END ELSE BEGIN
                    Outstreamobj.WRITETEXT('! Error In Entity Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow := TRUE;
                  END;
                END ELSE BEGIN
                  VendorCode := '';
                  Outstreamobj.WRITETEXT('! Entity Is Not Defined In Entity Master');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;
              END;

              //Reading Transaction Date
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              //CLEAR(ToCheckDate);  //UPG13R2DEV
              //CREATE(ToCheckDate,TRUE,TRUE); //UPG13R2DEV
              //IF NOT (EVALUATE(TransactionDate,Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN  //UPG13R2DEV
              Readed:=ConvertDates(Readed);  //UPG13R2DEV
              IF NOT (EVALUATE(TransactionDate,Readed) AND ToCheckDate.checkDateTime(Readed)) THEN BEGIN  //UPG13R2DEV
                Outstreamobj.WRITETEXT('! Error In Transaction Date');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END;

              //Reading Invoice Date
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              //CLEAR(ToCheckDate);  //UPG13R2DEV
              //CREATE(ToCheckDate,TRUE,TRUE);  //UPG13R2DEV
              //IF NOT (EVALUATE(InvoiceDate,Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN  //UPG13R2DEV
              Readed:=ConvertDates(Readed);  //UPG13R2DEV
              IF NOT (EVALUATE(InvoiceDate,Readed) AND ToCheckDate.checkDateTime(Readed)) THEN BEGIN  //UPG13R2DEV
               // Outstreamobj.WRITETEXT('! Error In Invoice Date');
               // Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
               // ErrorInRow:=TRUE;
              END;

              //Reading External No.
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ExternalNo,Readed);

              //Reading Payment Term
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(PaymentTerm,Readed);
              IF PaymentTerm = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Payment Term');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END ELSE BEGIN
                IF NOT PaymentTerms.GET(PaymentTerm) THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Payment Term');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;

              END;


              //Reading B/L Date
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,11);
              //CLEAR(ToCheckDate);  //UPG13R2DEV
              //CREATE(ToCheckDate,TRUE,TRUE);  //UPG13R2DEV
              //IF NOT (EVALUATE("B/LDate",Readed) AND ToCheckDate.CHECK(Readed)) THEN BEGIN  //UPG13R2DEV
              Readed:=ConvertDates(Readed);  //UPG13R2DEV
              IF NOT (EVALUATE("B/LDate",Readed) AND ToCheckDate.checkDateTime(Readed)) THEN BEGIN  //UPG13R2DEV
                Outstreamobj.WRITETEXT('! Error In B/L Date');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END ELSE "B/LDateOK" := TRUE;
            //Dimension value new concept.start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              //Reading Shop Code
              {
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ShopCode,Readed);
              IF ShopCode <> '' THEN BEGIN
                GeneralLedgerSetup.GET;
                DimensionValue.RESET;
                DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
                DimensionValue.SETRANGE(DimensionValue.Name,ShopCode);
                IF DimensionValue.FINDFIRST THEN ShopCode:=DimensionValue.Code
                ELSE BEGIN
                  ShopCode := '';
                  Outstreamobj.WRITETEXT('! Error In Shop Code');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;
              END;
              }//Dimension value new concept.previous code blocked
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ShopCode,Readed);
              IF ShopCode <> '' THEN BEGIN
                IF LocalRecIfDimMapSetup.GET THEN;
                IF LocalRecIfDimMapSetup."YNSPIRE SD" THEN BEGIN
                  LocalCodeRes := GetDim1Value(ShopCode);
                  IF (LocalCodeRes = 'NOT FOUND') THEN BEGIN
                    ShopCode := '';
                    Outstreamobj.WRITETEXT('! Error In Shop Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow := TRUE;
                  END ELSE
                    ShopCode := LocalCodeRes;
                END ELSE BEGIN
                  GeneralLedgerSetup.GET;
                  DimensionValue.RESET;
                  DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
                  DimensionValue.SETRANGE(DimensionValue.Name,ShopCode);
                  IF DimensionValue.FINDFIRST THEN ShopCode:=DimensionValue.Code
                  ELSE BEGIN
                    ShopCode := '';
                    Outstreamobj.WRITETEXT('! Error In Shop Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow := TRUE;
                  END;
                END;
              END;
            //Dimension value new concept.end<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

              //Reading Model Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(ModelCode,Readed);
              IF ModelCode <> '' THEN ;
              //BEGIN
            //    GeneralLedgerSetup.GET;
            //    DimensionValue.RESET;
            //    DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 2 Code");
            //    DimensionValue.SETRANGE(DimensionValue.Name,ModelCode);
            //    IF DimensionValue.FINDFIRST THEN ModelCode:=DimensionValue.Code
            //    ELSE BEGIN
            //      ModelCode:='';
            //      Outstreamobj.WRITETEXT('! Error In Model Code');
            //      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
            //      ErrorInRow:=TRUE;
            //    END;
            //  END;


              //Reading Currency Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,10);
              EVALUATE(CurrencyCode,Readed);
              //>>02042013/VK/BLANKCURRENCYCODEISSUE
            { IF CurrencyCode = '' THEN BEGIN
                ErrorInRow := FALSE;
              END ELSE BEGIN } //CR#005/05112014/SV Code Commented  because it was wrong

              //<<02042013/VK/BLANKCURRENCYCODEISSUE
               IF (CurrencyCode <> '') THEN BEGIN   //CR#005/05112014/SV
              Crrncy.RESET;
              Crrncy.SETRANGE(Crrncy.Code,CurrencyCode);
              IF NOT Crrncy.FINDFIRST THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Currency Code');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END ELSE BEGIN
                 IF "B/LDateOK" THEN BEGIN
                    CurrencyExchangeRate.RESET;
                    CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
                    CurrencyExchangeRate.SETRANGE("Starting Date","B/LDate");
                    IF NOT CurrencyExchangeRate.FINDFIRST THEN BEGIN
                      Outstreamobj.WRITETEXT('! Currency Exchange Rate Is Not Defined');
                      Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                      ErrorInRow := TRUE;
                    END;
                 END;
              END;
              END;
              {
              //SV Bank code validation.begin
              ConversionTableCustomer.RESET;
              ConversionTableCustomer.SETRANGE("Gport Code",VendorCode);
              ConversionTableCustomer.SETRANGE(Currency,CurrencyCode); //SV Bank code validation
              IF ConversionTableCustomer.FINDFIRST THEN BEGIN
                IF ConversionTableCustomer."Bank Code" = '' THEN BEGIN
                  Outstreamobj.WRITETEXT('! Bank Code not found in conversion setup for Entity Code :- ');
                  Outstreamobj.WRITETEXT(VendorCode);
                  Outstreamobj.WRITETEXT(' and currency code');
                  Outstreamobj.WRITETEXT(CurrencyCode);
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;
              END;
              //SV bank code validation.end
              }////UPG13R2DEV  SV Bank code new validation SV 01072015 Previous code blocked
              ////UPG13R2DEV  SV Bank code new validation SV 01072015.begin
              {ConversionTableCustomer.RESET;
              ConversionTableCustomer.SETRANGE(NAV,VendorCode);
              //ConversionTableCustomer.SETRANGE(Currency,CurrencyCode); //SV Bank code validation
              IF ConversionTableCustomer.FINDFIRST THEN BEGIN
                CustBankAcc.RESET;
                CustBankAcc.SETRANGE("Customer No.",ConversionTableCustomer.NAV);
                CustBankAcc.SETRANGE(Purchase,TRUE);
                IF (CurrencyCode = '') OR (CurrencyCode = 'IDR') THEN
                  CustBankAcc.SETRANGE("Currency Code",'')
                ELSE
                  CustBankAcc.SETRANGE("Currency Code",CurrencyCode);
                IF NOT ((CustBankAcc.FINDSET) AND (CustBankAcc.Code <> '')) THEN BEGIN
                  Outstreamobj.WRITETEXT('! Bank Code of Purchase Account not found for Entity Code :- ');
                  Outstreamobj.WRITETEXT(ConversionTableCustomer.NAV);
                  Outstreamobj.WRITETEXT(' and currency code');
                  Outstreamobj.WRITETEXT(CurrencyCode);
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;
                {IF CustBankAcc.FINDSET THEN
                  IF (CustBankAcc."Currency Code" <> CurrencyCode) THEN BEGIN
                    Outstreamobj.WRITETEXT('! Currency code of the bank account(purchase type) does not match with currency code in the interface file.');
                    Outstreamobj.WRITETEXT(ConversionTableCustomer.NAV);
                    Outstreamobj.WRITETEXT(' and currency code');
                    Outstreamobj.WRITETEXT(CurrencyCode);
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow := TRUE;
                  END; }
              END;} //blocked for parallel run
              //////UPG13R2DEV  SV Bank code new validation SV 01072015.end



              //Reading Commodity Code
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              EVALUATE(CommodityCode,Readed);
              IF CommodityCode = '' THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Commodity Code');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END ELSE BEGIN
                IF CommodityCode = 'FREIGHT' THEN CommodityCode := 'FREIGHT'
                ELSE IF CommodityCode = 'INSURANCE' THEN CommodityCode := 'INSURANCE'
                ELSE BEGIN
                  "CommodityCode(G-Port)".RESET;
                  "CommodityCode(G-Port)".SETRANGE("Commodity Code",CommodityCode);
                  IF "CommodityCode(G-Port)".FINDFIRST THEN
                    CommodityCode := CommodityCode
                  ELSE BEGIN
                    Outstreamobj.WRITETEXT('! Error In Commodity Code');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                    ErrorInRow := TRUE;
                    CommodityCode := '';
                  END;
                END;
              END;

              //Reading Amount
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,20);
              IF NOT EVALUATE(Amt,Readed) THEN BEGIN
                Outstreamobj.WRITETEXT('! Error In Amount');
                Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                ErrorInRow := TRUE;
              END;

              //Reading VAT Flag
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,1);
              IF EVALUATE(VatFlagCheck,Readed) THEN BEGIN
                IF VatFlagCheck = 0 THEN VATFlag := FALSE
                ELSE IF VatFlagCheck = 1 THEN VATFlag := TRUE
                ELSE BEGIN
                  Outstreamobj.WRITETEXT('! Error In VAT Flag');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
                END;
              END ELSE BEGIN
                  Outstreamobj.WRITETEXT('! Error In VAT Flag');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,1,'<CHAR>'));
                  ErrorInRow := TRUE;
              END;

              //Reading Narration
              Instreamobj.READTEXT(Readed,1);
              Instreamobj.READTEXT(Readed,50);
              EVALUATE(Narration,Readed);

            IF (PaymentTerm = 'FC000X') THEN
            ErrorInRow := FALSE;

              IF ErrorInRow THEN ErrorInFile := TRUE;

            IF (PaymentTerm <> 'FC000X') THEN
            BEGIN
              IF NOT ErrorInRow THEN BEGIN
                IF NOT ErrorInFile THEN InsertInTempTable();
                Outstreamobj.WRITETEXT('Processed Successfully');
              END;
            END
            ELSE
            Outstreamobj.WRITETEXT('Processed Successfully Because of FOC');


              Instreamobj.READTEXT(Readed,1);
              Outstreamobj.WRITETEXT();

            END;





            LF.CLOSE;

            IF ErrorInFile THEN DeleteTempTable()
            ELSE BEGIN
              GPrtXprtImprtIntrfc.RESET;
              GPrtXprtImprtIntrfc.SETFILTER(GPrtXprtImprtIntrfc."Applies To Doc No.",'<>%1','');
              IF GPrtXprtImprtIntrfc.FINDFIRST THEN REPEAT
                GPrtXprtImprtIntrfc1.RESET;
                GPrtXprtImprtIntrfc1.SETRANGE("Invoice No.",GPrtXprtImprtIntrfc."Applies To Doc No.");
                IF GPrtXprtImprtIntrfc1.FINDFIRST THEN
                  GPrtXprtImprtIntrfc1.DELETE;
              UNTIL GPrtXprtImprtIntrfc.NEXT = 0;
            END;

            IF NOT ErrorInFile THEN GPortImportInterfaceReport.RUN;
          END;

  }
  CODE
  {
    VAR
      MasterSetup@1000000000 : Record 50008;
      FileName@1000000001 : Text[255];
      LogFileName@1000000002 : Text[255];
      LF@1000000003 : File;
      Outstreamobj@1000000004 : OutStream;
      F@1000000005 : File;
      Instreamobj@1000000006 : InStream;
      Readed@1000000007 : Text[255];
      Ch@1000000009 : Char;
      ErrorInFile@1000000008 : Boolean;
      ErrorInRow@1000000010 : Boolean;
      EntryNo@1000000032 : Integer;
      ProcessFlag@1000000031 : ',New,Cancel';
      InvoiceNo@1000000030 : Code[20];
      VendorCode@1000000029 : Code[20];
      TransactionDate@1000000028 : Date;
      InvoiceDate@1000000027 : Date;
      ExternalNo@1000000026 : Code[10];
      PaymentTerm@1000000025 : Code[10];
      "B/LDate"@1000000024 : Date;
      ShopCode@1000000023 : Code[20];
      ModelCode@1000000022 : Code[20];
      CurrencyCode@1000000021 : Code[10];
      CommodityCode@1000000020 : Code[20];
      Amt@1000000019 : Decimal;
      Narration@1000000018 : Text[50];
      VATFlag@1000000017 : Boolean;
      "N/C"@1000000016 : Text[1];
      Crrncy@1000000013 : Record 4;
      "CommodityCode(G-Port)"@1000000012 : Record 50019;
      VatFlagCheck@1000000011 : Integer;
      GeneralLedgerSetup@1000000033 : Record 98;
      DimensionValue@1000000034 : Record 349;
      GPortImportInterfaceReport@1000000035 : Report 50059;
      PaymentTerms@1000000014 : Record 3;
      ToCheckDate@1000000037 : DotNet "'DateTimeFun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DateTimeFun.DateTimeFormatCheck";
      DuplicateInvoiceNo@1000000041 : Boolean;
      DuplicateInvoiceNo1@1000000042 : Boolean;
      "B/LDateOK"@1000000044 : Boolean;
      CurrencyExchangeRate@1000000045 : Record 330;
      ActionOnLine@1000000046 : 'Insert,Modify,As Return,As Cancel';
      OldVendor@1000000038 : Code[20];
      AppliesToDocNo@1000000047 : Code[20];
      GPrtXprtImprtIntrfc@1000000050 : Record 50018;
      AppliesToGportDocNo@1000000049 : Code[20];
      GPrtXprtImprtIntrfc1@1000000048 : Record 50018;
      FixDate@1000000051 : Date;
      "//shash"@1102159002 : Code[10];
      SalesHeader@1102159001 : Record 36;
      SalesInvHeader@1102159003 : Record 112;
      SalesCrMemoHdr@1102159004 : Record 114;
      Cust@1102159005 : Record 18;
      ConversionTableCustomer@1102159006 : Record 50004;

    PROCEDURE InsertInTempTable@1000000000();
    VAR
      GPortExportImportInterface@1000000001 : Record 50018;
    BEGIN
      FixDate := 053109D;


      IF (PaymentTerm <> 'FC000X') AND ("B/LDate" > (FixDate))THEN BEGIN

      GPortExportImportInterface.INIT;
      GPortExportImportInterface."Entry No." := EntryNo;
      GPortExportImportInterface."Invoice No." := InvoiceNo;
      GPortExportImportInterface.Export := FALSE;
      GPortExportImportInterface."Process Flag" := ProcessFlag;
      GPortExportImportInterface.INSERT;
      GPortExportImportInterface."Customer Code" := VendorCode;
      GPortExportImportInterface."Transaction Date" := TransactionDate;
      GPortExportImportInterface."Invoice Date" := InvoiceDate;
      GPortExportImportInterface."External No." := ExternalNo;
      GPortExportImportInterface."Payment Term" := PaymentTerm;
      GPortExportImportInterface."B/L Date" := "B/LDate";
      GPortExportImportInterface."Shop Code" := '';
      GPortExportImportInterface."Model Code" := ModelCode;
      GPortExportImportInterface."Currency Code" := CurrencyCode;
      GPortExportImportInterface."Commodity Code Import" := CommodityCode;
      Amt := Amt/100;
      GPortExportImportInterface.Amount := Amt;
      GPortExportImportInterface."VAT Flag" := VATFlag;
      GPortExportImportInterface.Narration := Narration;
      GPortExportImportInterface."Action On Line" := ActionOnLine;
      GPortExportImportInterface."Old Vendor" := OldVendor;
      GPortExportImportInterface."Applies To Doc No." := AppliesToGportDocNo;
      GPortExportImportInterface."Applies To Doc No." := AppliesToDocNo;
      GPortExportImportInterface.MODIFY;


      END;
    END;

    PROCEDURE DeleteTempTable@1000000004();
    VAR
      GPortExportImportInterface@1000000000 : Record 50018;
    BEGIN
      GPortExportImportInterface.DELETEALL;
    END;

    PROCEDURE DateTrim@1102159001(ADate@1102159001 : Text) : Text[250];
    BEGIN
      //EXIT(DELSTR(ADate,STRLEN(ADate),1));
    END;

    PROCEDURE ConvertDates@1000000002(DateText@1000000000 : Text[255]) : Text[255];
    VAR
      NewDateText@1000000001 : Text[30];
      DD@1000000002 : Text[30];
      MM@1000000003 : Text[30];
      YY@1000000004 : Text[30];
    BEGIN
      //UPG13R2DEV.begin

      MM:=COPYSTR(DateText,1,2);
      DD:=COPYSTR(DateText,4,2);
      YY:=COPYSTR(DateText,7,2);

      //NewDateText:=MM+'-'+DD+'-'+YY;
      NewDateText:=MM+'-'+DD+'-'+'20'+YY;
      EXIT(NewDateText);

      //UPG13R2DEV.end
    END;

    PROCEDURE GetDim1Value@1000000001(Dimension1@1000000000 : Code[10]) LocalCodeReturnRes : Code[10];
    VAR
      LocalRecIfDimMapp@1000000001 : Record 60065;
    BEGIN

      LocalRecIfDimMapp.RESET;
      LocalRecIfDimMapp.SETRANGE("Dimension Name",LocalRecIfDimMapp."Dimension Name"::"SHOP CODE");
      LocalRecIfDimMapp.SETRANGE("Old YIMM Code",Dimension1);
      IF NOT LocalRecIfDimMapp.FINDSET THEN
        LocalCodeReturnRes := 'NOT FOUND'
      ELSE
        LocalCodeReturnRes := LocalRecIfDimMapp."New NAV Code";
    END;

    BEGIN
    {
      DATE         SIGN     REF ID                         DESCRIPTION
      02042013     VK       BLANKCURRENCYCODEISSUE         Code Added for Blank Currency Code Condition
      05112014     SV       CR#005
      //UPG13R2DEV
      1. Modifications for 2013R2DB. Dotnet variable "ToCheckDate" is modified. Also "ConvertDates" function is created to flow the the year in YYYY format
      in the Dotnet function .
      2. SV-Customize for  sales from purchase upgrade
      //SV bank code validation
      //UPG13R2DEV  SV Bank code new validation

      [UPG13R2DEV]
      [SIGN]  : SV
      [REF]   : Dimension value new concept
      [DESC]  : Dimension value new concept.New mapping table introduced and will be used(based on setup) untill all other systems are updated to use new dimension values.
                After all other system updated mapping will be obsolate
    }
    END.
  }
}

