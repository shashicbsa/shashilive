OBJECT Codeunit 444 Purchase-Post Prepayments
{
  OBJECT-PROPERTIES
  {
    Date=04/01/14;
    Time=12:00:00;
    Version List=NAVW17.10.00.36366,NAVAPAC7.10.00.36366;
  }
  PROPERTIES
  {
    Permissions=TableData 39=imd,
                TableData 45=rimd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 357=imd,
                TableData 359=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=is not within your range of allowed posting dates;ENA=is not within your range of allowed posting dates';
      Text001@1001 : TextConst 'ENU=There is nothing to post.;ENA=There is nothing to post.';
      Text002@1008 : TextConst 'ENU=Posting Prepayment Lines   #2######\;ENA=Posting Prepayment Lines   #2######\';
      Text003@1010 : TextConst 'ENU=%1 %2 -> Invoice %3;ENA=%1 %2 -> Invoice %3';
      Text004@1007 : TextConst 'ENU=Posting purchases and VAT  #3######\;ENA=Posting purchases and GST  #3######\';
      Text005@1006 : TextConst 'ENU=Posting to vendors         #4######\;ENA=Posting to vendors         #4######\';
      Text006@1021 : TextConst 'ENU=Posting to bal. account    #5######;ENA=Posting to bal. account    #5######';
      Text007@1003 : TextConst 'ENU=The combination of dimensions that is used in the document of type %1 with the number %2 is blocked. %3.;ENA=The combination of dimensions that is used in the document of type %1 with the number %2 is blocked. %3.';
      Text008@1002 : TextConst 'ENU=The combination of dimensions that is used in the document of type %1 with the number %2, line no. %3 is blocked. %4.;ENA=The combination of dimensions that is used in the document of type %1 with the number %2, line no. %3 is blocked. %4.';
      Text009@1005 : TextConst 'ENU=The dimensions that are used in the document of type %1 with the number %2 are not valid. %3.;ENA=The dimensions that are used in the document of type %1 with the number %2 are not valid. %3.';
      Text010@1004 : TextConst 'ENU=The dimensions that are used in the document of type %1 with the number %2, line no. %3 are not valid. %4.;ENA=The dimensions that are used in the document of type %1 with the number %2, line no. %3 are not valid. %4.';
      Text011@1011 : TextConst 'ENU=%1 %2 -> Credit Memo %3;ENA=%1 %2 -> CR/Adj Note %3';
      Text012@1009 : TextConst 'ENU=Prepayment %1, %2 %3.;ENA=Prepayment %1, %2 %3.';
      GLSetup@1013 : Record 98;
      GenPostingSetup@1012 : Record 252;
      TempPrepmtInvLineBuf@1025 : TEMPORARY Record 461;
      GenJnlPostLine@1014 : Codeunit 12;
      Text013@1016 : TextConst 'ENU=It is not possible to assign a prepayment amount of %1 to the purchase lines.;ENA=It is not possible to assign a prepayment amount of %1 to the purchase lines.';
      Text014@1018 : TextConst 'ENU=VAT Amount;ENA=GST Amount';
      Text015@1017 : TextConst 'ENU=%1% VAT;ENA=%1% GST';
      Text016@1019 : TextConst 'ENU=The new prepayment amount must be between %1 and %2.;ENA=The new prepayment amount must be between %1 and %2.';
      Text017@1020 : TextConst 'ENU=At least one line must have %1 > 0 to distribute prepayment amount.;ENA=At least one line must have %1 > 0 to distribute prepayment amount.';
      text019@1015 : TextConst 'ENU=Invoice,Credit Memo;ENA=Invoice,CR/Adj Note';
      WHTManagement@1500001 : Codeunit 28040;
      PurchInvHeader3@1500010 : Record 122;
      PurchCrMemoHeader3@1500012 : Record 124;
      PrepmtInvBuffer3@1500014 : TEMPORARY Record 461;
      PurLine@1500002 : Record 39;
      Currency@1000000000 : Record 4;
      TotalInvDiscAmt@1500006 : Decimal;
      InvDiscAmt@1500007 : Decimal;
      WHTEntry@1500020 : Record 28044;
      WHTPostingSetup@1500021 : Record 28043;
      TotalWHTAmount@1500022 : Decimal;
      GLReg@1500023 : Record 45;
      TotalWHTAmountLCY@1500024 : Decimal;
      Text020@150000 : TextConst 'ENU=must be %1, the same as in the field %2;ENA=must be %1, the same as in the field %2';

    PROCEDURE Invoice@1(VAR PurchHeader@1000 : Record 38);
    BEGIN
      Code(PurchHeader,0);
    END;

    PROCEDURE CreditMemo@2(VAR PurchHeader@1000 : Record 38);
    BEGIN
      Code(PurchHeader,1);
    END;

    LOCAL PROCEDURE Code@3(VAR PurchHeader2@1001 : Record 38;DocumentType@1000 : 'Invoice,Credit Memo');
    VAR
      PurchSetup@1011 : Record 312;
      SourceCodeSetup@1008 : Record 242;
      PaymentTerms@1032 : Record 3;
      Vend@1004 : Record 23;
      PurchHeader@1031 : Record 38;
      PurchLine@1021 : Record 39;
      PurchInvHeader@1015 : Record 122;
      PurchCrMemoHeader@1014 : Record 124;
      PurchInvLine@1013 : Record 123;
      PurchCrMemoLine@1012 : Record 125;
      PrepmtInvBuffer@1023 : TEMPORARY Record 461;
      TotalPrepmtInvLineBuffer@1029 : Record 461;
      TotalPrepmtInvLineBufferLCY@1028 : Record 461;
      GenJnlLine@1017 : Record 81;
      TempVATAmountLine@1022 : TEMPORARY Record 290;
      TempVATAmountLineDeduct@1037 : TEMPORARY Record 290;
      VendLedgEntry@1034 : Record 25;
      VATPostingSetup@1036 : Record 325;
      Currency@1035 : Record 4;
      TempPurchLines@1039 : TEMPORARY Record 39;
      TempOriginalPurchLine@150000 : TEMPORARY Record 39;
      GenJnlCheckLine@1002 : Codeunit 11;
      NoSeriesMgt@1005 : Codeunit 396;
      Window@1007 : Dialog;
      GenJnlLineDocNo@1006 : Code[20];
      GenJnlLineExtDocNo@1020 : Code[35];
      SrcCode@1009 : Code[10];
      PostingDescription@1010 : Text[50];
      GenJnlLineDocType@1016 : Integer;
      PrevLineNo@1026 : Integer;
      LineCount@1024 : Integer;
      PostedDocTabNo@1018 : Integer;
      LineNo@1025 : Integer;
    BEGIN
      PurchHeader := PurchHeader2;
      GLSetup.GET;
      PrepmtInvBuffer3.DELETEALL;
      WITH PurchHeader DO BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("Buy-from Vendor No.");
        TESTFIELD("Pay-to Vendor No.");
        TESTFIELD("Posting Date");
        TESTFIELD("Document Date");
        IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text000);

        IF NOT CheckOpenPrepaymentLines(PurchHeader,DocumentType) THEN
          ERROR(Text001);
        CheckDim(PurchHeader);

        Vend.GET("Buy-from Vendor No.");
        Vend.CheckBlockedVendOnDocs(Vend,TRUE);
        IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
          Vend.GET("Pay-to Vendor No.");
          Vend.CheckBlockedVendOnDocs(Vend,TRUE);
        END;

        // Get Doc. No. and save
        CASE DocumentType OF
          DocumentType::Invoice:
            BEGIN
              TESTFIELD("Prepayment Due Date");
              TESTFIELD("Prepmt. Cr. Memo No.",'');
              IF "Prepayment No." = '' THEN BEGIN
                TESTFIELD("Prepayment No. Series");
                "Prepayment No." :=
                  NoSeriesMgt.GetNextNo("Prepayment No. Series","Posting Date",TRUE);
                MODIFY;
                COMMIT;
              END;
              GenJnlLineDocNo := "Prepayment No.";
            END;
          DocumentType::"Credit Memo":
            BEGIN
              TESTFIELD("Prepayment No.",'');
              IF "Prepmt. Cr. Memo No." = '' THEN BEGIN
                TESTFIELD("Prepmt. Cr. Memo No. Series");
                "Prepmt. Cr. Memo No." :=
                  NoSeriesMgt.GetNextNo("Prepmt. Cr. Memo No. Series","Posting Date",TRUE);
                MODIFY;
                COMMIT;
              END;
              GenJnlLineDocNo := "Prepmt. Cr. Memo No.";
            END;
        END;

        Window.OPEN(
          '#1#################################\\' +
          Text002 +
          Text004 +
          Text005 +
          Text006);
        Window.UPDATE(1,STRSUBSTNO('%1 %2',SELECTSTR(1 + DocumentType,text019),"No."));

        PurchSetup.GET;
        SourceCodeSetup.GET;
        SrcCode := SourceCodeSetup.Purchases;
        IF "Prepmt. Posting Description" <> '' THEN
          PostingDescription := "Prepmt. Posting Description"
        ELSE
          PostingDescription :=
            COPYSTR(
              STRSUBSTNO(Text012,SELECTSTR(1 + DocumentType,text019),"Document Type","No."),
              1,MAXSTRLEN("Posting Description"));

        // Create posted header
        IF PurchSetup."Ext. Doc. No. Mandatory" THEN
          TESTFIELD("Vendor Invoice No.");
        CASE DocumentType OF
          DocumentType::Invoice:
            BEGIN
              PurchInvHeader.INIT;
              PurchInvHeader.TRANSFERFIELDS(PurchHeader);
              PurchInvHeader."Posting Description" := PostingDescription;
              PurchInvHeader."Payment Terms Code" := "Prepmt. Payment Terms Code";
              PurchInvHeader."Due Date" := "Prepayment Due Date";
              PurchInvHeader."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
              PurchInvHeader."Payment Discount %" := "Prepmt. Payment Discount %";
              PurchInvHeader."No." := GenJnlLineDocNo;
              PurchInvHeader."Pre-Assigned No. Series" := '';
              PurchInvHeader."Source Code" := SrcCode;
              PurchInvHeader."User ID" := USERID;
              PurchInvHeader."No. Printed" := 0;
              PurchInvHeader."Prepayment Invoice" := TRUE;
              PurchInvHeader."Prepayment Order No." := "No.";
              PurchInvHeader.INSERT;
              PurchInvHeader3 := PurchInvHeader;
              GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
              PostedDocTabNo := DATABASE::"Purch. Inv. Header";
              GenJnlLineExtDocNo := PurchInvHeader."Vendor Invoice No.";
              Window.UPDATE(1,STRSUBSTNO(Text003,"Document Type","No.",PurchInvHeader."No."));
            END;
          DocumentType::"Credit Memo":
            BEGIN
              IF PurchSetup."Ext. Doc. No. Mandatory" THEN
                TESTFIELD("Vendor Cr. Memo No.");
              PurchCrMemoHeader.INIT;
              PurchCrMemoHeader.TRANSFERFIELDS(PurchHeader);
              PurchCrMemoHeader."Payment Terms Code" := "Prepmt. Payment Terms Code";
              PurchCrMemoHeader."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
              PurchCrMemoHeader."Payment Discount %" := "Prepmt. Payment Discount %";
              IF "Prepmt. Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms.GET("Prepmt. Payment Terms Code");
                IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                  PurchCrMemoHeader."Payment Discount %" := 0;
                  PurchCrMemoHeader."Pmt. Discount Date" := 0D;
                END;
              END;
              PurchCrMemoHeader."Posting Description" := PostingDescription;
              PurchCrMemoHeader."Due Date" := "Prepayment Due Date";
              PurchCrMemoHeader."No." := GenJnlLineDocNo;
              PurchCrMemoHeader."Pre-Assigned No. Series" := '';
              PurchCrMemoHeader."Source Code" := SrcCode;
              PurchCrMemoHeader."User ID" := USERID;
              PurchCrMemoHeader."No. Printed" := 0;
              PurchCrMemoHeader."Prepayment Credit Memo" := TRUE;
              PurchCrMemoHeader."Prepayment Order No." := "No.";
              PurchCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
              PurchCrMemoHeader.INSERT;
              PurchCrMemoHeader3 := PurchCrMemoHeader;
              GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
              PostedDocTabNo := DATABASE::"Purch. Cr. Memo Hdr.";
              GenJnlLineExtDocNo := PurchCrMemoHeader."Vendor Cr. Memo No.";
              Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHeader."No."));
            END;
        END;
        IF PurchSetup."Copy Comments Order to Invoice" THEN
          CopyCommentLines("No.",PostedDocTabNo,GenJnlLineDocNo);
        // Reverse old lines
        IF DocumentType = DocumentType::Invoice THEN BEGIN
          GetPurchLinesToDeduct(PurchHeader,TempPurchLines);
          IF NOT TempPurchLines.ISEMPTY THEN
            CalcVATAmountLines(PurchHeader,TempPurchLines,TempVATAmountLineDeduct,DocumentType::"Credit Memo");
        END;

        // Create Lines
        PrepmtInvBuffer.DELETEALL;
        CalcVATAmountLines(PurchHeader,PurchLine,TempVATAmountLine,DocumentType);
        IF TempVATAmountLine.FINDSET THEN
          REPEAT
            TempVATAmountLineDeduct := TempVATAmountLine;
            IF TempVATAmountLineDeduct.FIND THEN BEGIN
              TempVATAmountLine."VAT Base" := TempVATAmountLine."VAT Base" - TempVATAmountLineDeduct."VAT Base";
              TempVATAmountLine."VAT Amount" := TempVATAmountLine."VAT Amount" - TempVATAmountLineDeduct."VAT Amount";
              TempVATAmountLine."Amount Including VAT" := TempVATAmountLine."Amount Including VAT" -
                TempVATAmountLineDeduct."Amount Including VAT";
              TempVATAmountLine."Line Amount" := TempVATAmountLine."Line Amount" - TempVATAmountLineDeduct."Line Amount";
              TempVATAmountLine."Inv. Disc. Base Amount" := TempVATAmountLine."Inv. Disc. Base Amount" -
                TempVATAmountLineDeduct."Inv. Disc. Base Amount";
              TempVATAmountLine."Invoice Discount Amount" := TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLineDeduct."Invoice Discount Amount";
              TempVATAmountLine."Calculated VAT Amount" := TempVATAmountLine."Calculated VAT Amount" -
                TempVATAmountLineDeduct."Calculated VAT Amount";
              TempVATAmountLine."VAT Difference" := TempVATAmountLine."VAT Difference" -
                TempVATAmountLineDeduct."VAT Difference";
              TempVATAmountLine.MODIFY;
            END;
          UNTIL TempVATAmountLine.NEXT = 0;
        SavePrepmtAmounts(PurchHeader,PurchLine,DocumentType,TempOriginalPurchLine);
        UpdateVATOnLines(PurchHeader,PurchLine,TempVATAmountLine,DocumentType);
        BuildInvLineBuffer(PurchHeader,PurchLine,DocumentType,PrepmtInvBuffer,TRUE);
        BuildInvLineBufferGST(
          PurchHeader,PurchLine,DocumentType,PrepmtInvBuffer3,PurchSetup."Invoice Rounding");
        RestorePrepmtAmounts(TempOriginalPurchLine,PurchLine,DocumentType);

        PrepmtInvBuffer.FIND('-');
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          IF PrepmtInvBuffer."Line No." <> 0 THEN
            LineNo := PrevLineNo + PrepmtInvBuffer."Line No."
          ELSE
            LineNo := PrevLineNo + 10000;
          CASE DocumentType OF
            DocumentType::Invoice:
              BEGIN
                PurchInvLine.INIT;
                PurchInvLine."Document No." := PurchInvHeader."No.";
                PurchInvLine."Line No." := LineNo;
                PurchInvLine."Buy-from Vendor No." := "Buy-from Vendor No.";
                PurchInvLine."Pay-to Vendor No." := "Pay-to Vendor No.";
                PurchInvLine.Type := PurchInvLine.Type::"G/L Account";
                PurchInvLine."No." := PrepmtInvBuffer."G/L Account No.";
                PurchInvLine."Posting Date" := "Posting Date";
                PurchInvLine."Shortcut Dimension 1 Code" := PrepmtInvBuffer."Global Dimension 1 Code";
                PurchInvLine."Shortcut Dimension 2 Code" := PrepmtInvBuffer."Global Dimension 2 Code";
                PurchInvLine."Dimension Set ID" := PrepmtInvBuffer."Dimension Set ID";
                PurchInvLine.Description := PrepmtInvBuffer.Description;
                PurchInvLine.Quantity := 1;
                IF GLSetup.CheckFullGSTonPrepayment(PrepmtInvBuffer."VAT Bus. Posting Group",
                     PrepmtInvBuffer."VAT Prod. Posting Group")
                THEN
                  PurchInvLine."Prepayment Line" := TRUE;
                IF "Prices Including VAT" THEN BEGIN
                  PurchInvLine."Direct Unit Cost" := PrepmtInvBuffer."Amount Incl. VAT";
                  PurchInvLine."Line Amount" := PrepmtInvBuffer."Amount Incl. VAT";
                END ELSE BEGIN
                  PurchInvLine."Direct Unit Cost" := PrepmtInvBuffer.Amount;
                  PurchInvLine."Line Amount" := PrepmtInvBuffer.Amount;
                END;
                PurchInvLine."Gen. Bus. Posting Group" := PrepmtInvBuffer."Gen. Bus. Posting Group";
                PurchInvLine."Gen. Prod. Posting Group" := PrepmtInvBuffer."Gen. Prod. Posting Group";
                PurchInvLine."VAT Bus. Posting Group" := PrepmtInvBuffer."VAT Bus. Posting Group";
                PurchInvLine."VAT Prod. Posting Group" := PrepmtInvBuffer."VAT Prod. Posting Group";
                PurchInvLine."VAT %" := PrepmtInvBuffer."VAT %";
                PurchInvLine.Amount := PrepmtInvBuffer.Amount;
                PurchInvLine."VAT Difference" := PrepmtInvBuffer."VAT Difference";
                PurchInvLine."Amount Including VAT" := PrepmtInvBuffer."Amount Incl. VAT";
                PurchInvLine."VAT Calculation Type" := PrepmtInvBuffer."VAT Calculation Type";
                PurchInvLine."VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount";
                PurchInvLine."VAT Identifier" := PrepmtInvBuffer."VAT Identifier";
                IF GLSetup.CheckFullGSTonPrepayment(PrepmtInvBuffer."VAT Bus. Posting Group",
                     PrepmtInvBuffer."VAT Prod. Posting Group")
                THEN BEGIN
                  TotalInvDiscAmt := 0;
                  PurLine.RESET;
                  PurLine.SETFILTER("Document No.",PurchLine."Document No.");
                  IF PurLine.FIND('-') THEN
                    REPEAT
                      InvDiscAmt := ROUND(PurLine."Inv. Discount Amount" * PurLine."Prepayment %" / 100,
                          Currency."Amount Rounding Precision");
                      TotalInvDiscAmt := TotalInvDiscAmt + InvDiscAmt;
                    UNTIL PurLine.NEXT = 0;

                  PurchInvLine."Inv. Discount Amount" := TotalInvDiscAmt;
                  PurchInvLine."Prepayment %" := PrepmtInvBuffer."Prepayment %";
                END;
                PurchInvLine.INSERT;
                PostedDocTabNo := DATABASE::"Purch. Inv. Line";
              END;
            DocumentType::"Credit Memo":
              BEGIN
                PurchCrMemoLine.INIT;
                PurchCrMemoLine."Document No." := PurchCrMemoHeader."No.";
                PurchCrMemoLine."Line No." := LineNo;
                PurchCrMemoLine."Buy-from Vendor No." := PurchCrMemoHeader."Buy-from Vendor No.";
                PurchCrMemoLine."Pay-to Vendor No." := PurchCrMemoHeader."Pay-to Vendor No.";
                PurchCrMemoLine.Type := PurchInvLine.Type::"G/L Account";
                PurchCrMemoLine."No." := PrepmtInvBuffer."G/L Account No.";
                PurchCrMemoLine."Posting Date" := "Posting Date";
                PurchCrMemoLine."Shortcut Dimension 1 Code" := PrepmtInvBuffer."Global Dimension 1 Code";
                PurchCrMemoLine."Shortcut Dimension 2 Code" := PrepmtInvBuffer."Global Dimension 2 Code";
                PurchCrMemoLine."Dimension Set ID" := PrepmtInvBuffer."Dimension Set ID";
                PurchCrMemoLine.Description := PrepmtInvBuffer.Description;
                PurchCrMemoLine.Quantity := 1;
                IF "Prices Including VAT" THEN BEGIN
                  PurchCrMemoLine."Direct Unit Cost" := PrepmtInvBuffer."Amount Incl. VAT";
                  PurchCrMemoLine."Line Amount" := PrepmtInvBuffer."Amount Incl. VAT";
                END ELSE BEGIN
                  PurchCrMemoLine."Direct Unit Cost" := PrepmtInvBuffer.Amount;
                  PurchCrMemoLine."Line Amount" := PrepmtInvBuffer.Amount;
                END;
                PurchCrMemoLine."Gen. Bus. Posting Group" := PrepmtInvBuffer."Gen. Bus. Posting Group";
                PurchCrMemoLine."Gen. Prod. Posting Group" := PrepmtInvBuffer."Gen. Prod. Posting Group";
                PurchCrMemoLine."VAT Bus. Posting Group" := PrepmtInvBuffer."VAT Bus. Posting Group";
                PurchCrMemoLine."VAT Prod. Posting Group" := PrepmtInvBuffer."VAT Prod. Posting Group";
                PurchCrMemoLine."VAT %" := PrepmtInvBuffer."VAT %";
                PurchCrMemoLine.Amount := PrepmtInvBuffer.Amount;
                PurchCrMemoLine."VAT Difference" := PrepmtInvBuffer."VAT Difference";
                PurchCrMemoLine."Amount Including VAT" := PrepmtInvBuffer."Amount Incl. VAT";
                PurchCrMemoLine."VAT Calculation Type" := PrepmtInvBuffer."VAT Calculation Type";
                PurchCrMemoLine."VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount";
                PurchCrMemoLine."VAT Identifier" := PrepmtInvBuffer."VAT Identifier";
                PurchCrMemoLine.INSERT;
                PostedDocTabNo := DATABASE::"Purch. Cr. Memo Line";
              END;
          END;
          PrevLineNo := LineNo;
          InsertExtendedText(
            PostedDocTabNo,GenJnlLineDocNo,PrepmtInvBuffer."G/L Account No.","Document Date","Language Code",PrevLineNo);
        UNTIL PrepmtInvBuffer.NEXT = 0;

        // G/L Posting
        LineCount := 0;
        CompressInvLineBuffer(PurchHeader,PrepmtInvBuffer);
        IF NOT PrepmtInvBuffer3.ISEMPTY THEN
          IF GLSetup."GST Report" THEN
            CompressInvLineBuffer(PurchHeader,PrepmtInvBuffer3);
        PrepmtInvBuffer.SETRANGE(Adjustment,FALSE);
        PrepmtInvBuffer.FINDSET(TRUE);
        REPEAT
          IF DocumentType = DocumentType::"Credit Memo" THEN
            PrepmtInvBuffer.ReverseAmounts;
          RoundAmounts(PurchHeader,PrepmtInvBuffer,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
          IF "Currency Code" = '' THEN BEGIN
            AdjustInvLineBuffers(PurchHeader,PrepmtInvBuffer,TotalPrepmtInvLineBuffer,DocumentType);
            TotalPrepmtInvLineBufferLCY := TotalPrepmtInvLineBuffer;
          END ELSE
            AdjustInvLineBuffers(PurchHeader,PrepmtInvBuffer,TotalPrepmtInvLineBufferLCY,DocumentType);
          PrepmtInvBuffer.MODIFY;
        UNTIL PrepmtInvBuffer.NEXT = 0;

        PrepmtInvBuffer.RESET;
        PrepmtInvBuffer.SETCURRENTKEY(Adjustment);
        PrepmtInvBuffer.FIND('+');
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);

          IF GLSetup."Additional Reporting Currency" <> '' THEN
            Currency.GET(GLSetup."Additional Reporting Currency")
          ELSE
            Currency.InitRoundingPrecision;
          IF PrepmtInvBuffer."VAT Calculation Type" = PrepmtInvBuffer."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
            VATPostingSetup.GET(
              PrepmtInvBuffer."VAT Bus. Posting Group",PrepmtInvBuffer."VAT Prod. Posting Group");
            PrepmtInvBuffer."VAT Amount" :=
              ROUND(
                PrepmtInvBuffer.Amount *
                VATPostingSetup."VAT %" / 100);
            PrepmtInvBuffer."VAT Amount (ACY)" :=
              ROUND(
                PrepmtInvBuffer."Amount (ACY)" *
                VATPostingSetup."VAT %" / 100,Currency."Amount Rounding Precision");
          END;

          GLSetup.GET;
          IF "Last Prepayment No." = '' THEN
            IF GLSetup."Enable WHT" THEN BEGIN
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                IF DocumentType = DocumentType::Invoice THEN
                  WHTManagement.InsertVendPrepaymentInvoiceWHT(PurchInvHeader,PurchHeader);
              END;
            END;
          GLSetup.GET;
          IF GLSetup."Enable WHT" THEN BEGIN
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);
            WHTEntry.SETRANGE("Document No.",PurchInvHeader."No.");
            IF WHTEntry.FIND('-') THEN
              REPEAT
                WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                IF (WHTPostingSetup."Realized WHT Type" <> WHTPostingSetup."Realized WHT Type"::Payment) AND
                   (WHTPostingSetup."Realized WHT Type" <> WHTPostingSetup."Realized WHT Type"::" ")
                THEN BEGIN
                  IF WHTEntry."Unrealized Amount" <> 0 THEN BEGIN
                    TotalWHTAmount := TotalWHTAmount + WHTEntry."Unrealized Amount";
                    TotalWHTAmountLCY := TotalWHTAmountLCY + WHTEntry."Unrealized Amount (LCY)";
                  END;
                END;
              UNTIL WHTEntry.NEXT = 0;

            IF WHTEntry.FIND('+') THEN
              IF GLReg.FINDLAST THEN BEGIN
                GLReg."To WHT Entry No." := WHTEntry."Entry No.";
                GLReg.MODIFY;
              END;
          END;

          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := PostingDescription;
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          GenJnlLine."Account No." := PrepmtInvBuffer."G/L Account No.";
          GenJnlLine."System-Created Entry" := TRUE;
          IF "Currency Code" <> '' THEN
            GenJnlLine.Amount := PrepmtInvBuffer.Amount - TotalWHTAmountLCY
          ELSE
            GenJnlLine.Amount := PrepmtInvBuffer.Amount - TotalWHTAmount;
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Currency Amount" := PrepmtInvBuffer."Amount (ACY)";
          GenJnlLine.Correction :=
            (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
          IF NOT PrepmtInvBuffer.Adjustment THEN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
          GenJnlLine."Gen. Bus. Posting Group" := PrepmtInvBuffer."Gen. Bus. Posting Group";
          GenJnlLine."Gen. Prod. Posting Group" := PrepmtInvBuffer."Gen. Prod. Posting Group";
          GenJnlLine."VAT Bus. Posting Group" := PrepmtInvBuffer."VAT Bus. Posting Group";
          GenJnlLine."VAT Prod. Posting Group" := PrepmtInvBuffer."VAT Prod. Posting Group";
          GenJnlLine."Tax Area Code" := PrepmtInvBuffer."Tax Area Code";
          GenJnlLine."Tax Liable" := PrepmtInvBuffer."Tax Liable";
          GenJnlLine."Tax Group Code" := PrepmtInvBuffer."Tax Group Code";
          GenJnlLine."VAT Calculation Type" := PrepmtInvBuffer."VAT Calculation Type";
          GenJnlLine."VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount";
          GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
          GenJnlLine."Source Curr. VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount (ACY)";
          GenJnlLine."VAT Amount" := PrepmtInvBuffer."VAT Amount";
          GenJnlLine."Source Curr. VAT Amount" := PrepmtInvBuffer."VAT Amount (ACY)";
          GenJnlLine."VAT Difference" := PrepmtInvBuffer."VAT Difference";
          GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
          GenJnlLine."Shortcut Dimension 1 Code" := PrepmtInvBuffer."Global Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := PrepmtInvBuffer."Global Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := PrepmtInvBuffer."Dimension Set ID";
          GenJnlLine."Job No." := PrepmtInvBuffer."Job No.";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Bill-to/Pay-to No." := "Pay-to Vendor No.";
          GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
          GenJnlLine."VAT Registration No." := "VAT Registration No.";
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
          GenJnlLine."Source No." := "Pay-to Vendor No.";
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."IC Partner Code" := "Buy-from IC Partner Code";
          GenJnlLine.Prepayment := TRUE;
          RunGenJnlPostLine(GenJnlLine);
          InsertGST(PurchHeader,PrepmtInvBuffer,DocumentType,GenJnlPostLine.GetVATEntryNo);
        UNTIL PrepmtInvBuffer.NEXT(-1) = 0;


        // Post customer entry
        Window.UPDATE(4,1);
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := PostingDescription;
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
        GenJnlLine."Account No." := "Pay-to Vendor No.";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount := -TotalPrepmtInvLineBuffer."Amount Incl. VAT" + TotalWHTAmount;
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := -TotalPrepmtInvLineBuffer."Amount Incl. VAT";
        GenJnlLine."Amount (LCY)" := -TotalPrepmtInvLineBufferLCY."Amount Incl. VAT" + TotalWHTAmountLCY;
        IF "Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" := "Currency Factor";
        GenJnlLine.Correction :=
          (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
        GenJnlLine."Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
        GenJnlLine."Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
        GenJnlLine."Bill-to/Pay-to No." := "Pay-to Vendor No.";
        GenJnlLine."Sell-to/Buy-from No." := "Buy-from Vendor No.";
        GenJnlLine."Salespers./Purch. Code" := "Purchaser Code";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Due Date" := "Prepayment Due Date";
        GenJnlLine."Payment Terms Code" := "Payment Terms Code";
        IF (DocumentType = DocumentType::Invoice) OR
           PaymentTerms."Calc. Pmt. Disc. on Cr. Memos"
        THEN BEGIN
          GenJnlLine."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
          GenJnlLine."Payment Discount %" := "Prepmt. Payment Discount %";
        END;
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Pay-to Vendor No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."IC Partner Code" := "Buy-from IC Partner Code";
        GenJnlLine.Prepayment := TRUE;
        GenJnlPostLine.RunWithCheck(GenJnlLine);

        // Balancing account
        IF "Bal. Account No." <> '' THEN BEGIN
          Window.UPDATE(5,1);
          VendLedgEntry.FINDLAST;
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := "Posting Description";
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := "Dimension Set ID";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
          GenJnlLine."Account No." := "Pay-to Vendor No.";
          IF "Document Type" = GenJnlLine."Document Type"::"Credit Memo" THEN
            GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
          ELSE
            GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
            GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
          GenJnlLine."Bal. Account No." := "Bal. Account No.";
          GenJnlLine."Currency Code" := "Currency Code";
          GenJnlLine.Amount :=
            TotalPrepmtInvLineBuffer."Amount Incl. VAT" + VendLedgEntry."Remaining Pmt. Disc. Possible" - TotalWHTAmount;
          GenJnlLine.Correction :=
            (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
          VendLedgEntry.CALCFIELDS(Amount);
          IF VendLedgEntry.Amount = 0 THEN
            GenJnlLine."Amount (LCY)" := TotalPrepmtInvLineBufferLCY."Amount Incl. VAT"
          ELSE
            GenJnlLine."Amount (LCY)" :=
              TotalPrepmtInvLineBufferLCY."Amount Incl. VAT" +
              ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");
          IF "Currency Code" = '' THEN
            GenJnlLine."Currency Factor" := 1
          ELSE
            GenJnlLine."Currency Factor" := "Currency Factor";
          GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
          GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
          GenJnlLine."Source No." := "Pay-to Vendor No.";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlPostLine.RunWithCheck(GenJnlLine);
        END;

        // Update lines & header
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        IF DocumentType = DocumentType::Invoice THEN BEGIN
          "Last Prepayment No." := GenJnlLineDocNo;
          "Prepayment No." := '';
          PurchLine.SETFILTER("Prepmt. Line Amount",'<>0');
          IF PurchLine.FIND('-') THEN
            REPEAT
              IF PurchLine."Prepmt. Line Amount" <> PurchLine."Prepmt. Amt. Inv." THEN BEGIN
                PurchLine."Prepmt. Amt. Inv." := PurchLine."Prepmt. Line Amount";
                PurchLine."Prepmt. Amount Inv. Incl. VAT" := PurchLine."Prepmt. Amt. Incl. VAT";
                PurchLine.CalcPrepaymentToDeduct;
                PurchLine."Prepmt VAT Diff. to Deduct" :=
                  PurchLine."Prepmt VAT Diff. to Deduct" + PurchLine."Prepayment VAT Difference";
                PurchLine."Prepayment VAT Difference" := 0;
                PurchLine.MODIFY;
              END;
            UNTIL PurchLine.NEXT = 0;
        END ELSE BEGIN
          "Last Prepmt. Cr. Memo No." := GenJnlLineDocNo;
          "Prepmt. Cr. Memo No." := '';
          PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
          IF PurchLine.FIND('-') THEN
            REPEAT
              PurchLine."Prepmt. Amt. Inv." := PurchLine."Prepmt Amt Deducted";
              PurchLine."Prepmt. Amount Inv. Incl. VAT" :=
                PurchLine."Prepmt. Amt. Inv." + PurchLine."Prepmt. Amt. Inv." * PurchLine."Prepayment VAT %" / 100;
              PurchLine."Prepmt Amt to Deduct" := 0;
              PurchLine."Prepmt VAT Diff. to Deduct" := 0;
              PurchLine."Prepayment VAT Difference" := 0;
              PurchLine.MODIFY;
            UNTIL PurchLine.NEXT = 0;
        END;
        IF Status <> Status::"Pending Prepayment" THEN
          Status := Status::"Pending Prepayment";
        MODIFY;
        GLSetup.GET;
        IF GLSetup."Enable WHT" THEN BEGIN
          IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
            IF DocumentType = DocumentType::"Credit Memo" THEN
              WHTManagement.InsertVendPrepaymentCrMemoWHT(PurchCrMemoHeader,PurchHeader);
          END;
        END;
      END;

      PurchHeader2 := PurchHeader;
    END;

    PROCEDURE CheckOpenPrepaymentLines@7(PurchHeader@1000 : Record 38;DocumentType@1003 : 'Invoice,Credit Memo') : Boolean;
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        IF FIND('-') THEN
          REPEAT
            IF PrepmtAmount(PurchLine,DocumentType) <> 0 THEN
              EXIT(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RoundAmounts@5(PurchHeader@1001 : Record 38;VAR PrepmtInvLineBuf@1000 : Record 461;VAR TotalPrepmtInvLineBuf@1002 : Record 461;VAR TotalPrepmtInvLineBufLCY@1003 : Record 461);
    VAR
      VAT@1004 : Boolean;
    BEGIN
      TotalPrepmtInvLineBuf.IncrAmounts(PrepmtInvLineBuf);

      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        VAT := PrepmtInvLineBuf.Amount <> PrepmtInvLineBuf."Amount Incl. VAT";

        PrepmtInvLineBuf."Amount Incl. VAT" :=
          AmountToLCY(
            PurchHeader,TotalPrepmtInvLineBuf."Amount Incl. VAT",TotalPrepmtInvLineBufLCY."Amount Incl. VAT");
        IF VAT THEN BEGIN
          IF GLSetup.CheckFullGSTonPrepayment(PrepmtInvLineBuf."VAT Bus. Posting Group",
               PrepmtInvLineBuf."VAT Prod. Posting Group")
          THEN
            PrepmtInvLineBuf.Amount :=
              AmountToLCY(
                PurchHeader,TotalPrepmtInvLineBuf.Amount,TotalPrepmtInvLineBufLCY.Amount)
          ELSE
            PrepmtInvLineBuf.Amount :=
              ROUND(
                PrepmtInvLineBuf."Amount Incl. VAT" / (1 + PrepmtInvLineBuf."VAT %" / 100))
        END ELSE
          PrepmtInvLineBuf.Amount := PrepmtInvLineBuf."Amount Incl. VAT";
        PrepmtInvLineBuf."VAT Amount" := PrepmtInvLineBuf."Amount Incl. VAT" - PrepmtInvLineBuf.Amount;
        IF PrepmtInvLineBuf."VAT Base Amount" <> 0 THEN
          IF GLSetup.CheckFullGSTonPrepayment(PrepmtInvLineBuf."VAT Bus. Posting Group",
               PrepmtInvLineBuf."VAT Prod. Posting Group")
          THEN
            PrepmtInvLineBuf."VAT Base Amount" := AmountToLCY(
                PurchHeader,TotalPrepmtInvLineBuf."VAT Base Amount",TotalPrepmtInvLineBufLCY."VAT Base Amount")
          ELSE
            PrepmtInvLineBuf."VAT Base Amount" := PrepmtInvLineBuf.Amount;
      END;

      TotalPrepmtInvLineBufLCY.IncrAmounts(PrepmtInvLineBuf);
    END;

    LOCAL PROCEDURE AmountToLCY@6(PurchHeader@1001 : Record 38;TotalAmt@1000 : Decimal;PrevTotalAmt@1002 : Decimal) : Decimal;
    VAR
      CurrExchRate@1003 : Record 330;
    BEGIN
      CurrExchRate.INIT;
      WITH PurchHeader DO
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",TotalAmt,"Currency Factor")) -
          PrevTotalAmt);
    END;

    LOCAL PROCEDURE AdjustInvLineBuffers@41(PurchHeader@1003 : Record 38;VAR PrepmtInvLineBuf@1002 : Record 461;VAR TotalPrepmtInvLineBuf@1001 : Record 461;DocumentType@1000 : 'Invoice,Credit Memo');
    VAR
      VATAdjustment@1004 : ARRAY [2] OF Decimal;
      VAT@1005 : ',Base,Amount';
    BEGIN
      CalcPrepmtAmtInvLCYInLines(PurchHeader,PrepmtInvLineBuf,DocumentType,VATAdjustment);
      IF ABS(VATAdjustment[VAT::Base]) > GLSetup."Amount Rounding Precision" THEN
        InsertCorrInvLineBuffer(PrepmtInvLineBuf,PurchHeader,VATAdjustment[VAT::Base])
      ELSE
        IF (VATAdjustment[VAT::Base] <> 0) OR (VATAdjustment[VAT::Amount] <> 0) THEN BEGIN
          PrepmtInvLineBuf.AdjustVATBase(VATAdjustment);
          TotalPrepmtInvLineBuf.AdjustVATBase(VATAdjustment);
        END;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtInvLCYInLines@42(PurchHeader@1002 : Record 38;VAR PrepmtInvLineBuf@1003 : Record 461;DocumentType@1001 : 'Invoice,Credit Memo';VAR VATAdjustment@1006 : ARRAY [2] OF Decimal);
    VAR
      PurchLine@1000 : Record 39;
      PrepmtInvBufAmount@1004 : ARRAY [2] OF Decimal;
      TotalAmount@1005 : ARRAY [2] OF Decimal;
      LineAmount@1007 : ARRAY [2] OF Decimal;
      Ratio@1010 : ARRAY [2] OF Decimal;
      PrepmtAmtReminder@1008 : ARRAY [2] OF Decimal;
      PrepmtAmountRnded@1009 : ARRAY [2] OF Decimal;
      VAT@1011 : ',Base,Amount';
    BEGIN
      PrepmtInvLineBuf.AmountsToArray(PrepmtInvBufAmount);
      IF DocumentType = DocumentType::"Credit Memo" THEN
        ReverseDecArray(PrepmtInvBufAmount);

      TempPrepmtInvLineBuf.SetFilterOnPKey(PrepmtInvLineBuf);
      TempPrepmtInvLineBuf.CALCSUMS(Amount,"Amount Incl. VAT");
      TempPrepmtInvLineBuf.AmountsToArray(TotalAmount);
      FOR VAT := VAT::Base TO VAT::Amount DO
        IF TotalAmount[VAT] = 0 THEN
          Ratio[VAT] := 0
        ELSE
          Ratio[VAT] := PrepmtInvBufAmount[VAT] / TotalAmount[VAT];
      IF TempPrepmtInvLineBuf.FINDSET THEN
        REPEAT
          TempPrepmtInvLineBuf.AmountsToArray(LineAmount);
          PrepmtAmountRnded[VAT::Base] := CalcRndedAmount(LineAmount[VAT::Base],Ratio[VAT::Base],PrepmtAmtReminder[VAT::Base]);
          PrepmtAmountRnded[VAT::Amount] := CalcRndedAmount(LineAmount[VAT::Amount],Ratio[VAT::Amount],PrepmtAmtReminder[VAT::Amount]);

          PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.",TempPrepmtInvLineBuf."Line No.");
          IF DocumentType = DocumentType::"Credit Memo" THEN BEGIN
            VATAdjustment[VAT::Base] :=
              VATAdjustment[VAT::Base] + PurchLine."Prepmt. Amount Inv. (LCY)" - PrepmtAmountRnded[VAT::Base];
            PurchLine."Prepmt. Amount Inv. (LCY)" := 0;
            VATAdjustment[VAT::Amount] :=
              VATAdjustment[VAT::Amount] + PurchLine."Prepmt. VAT Amount Inv. (LCY)" - PrepmtAmountRnded[VAT::Amount];
            PurchLine."Prepmt. VAT Amount Inv. (LCY)" := 0;
          END ELSE BEGIN
            PurchLine."Prepmt. Amount Inv. (LCY)" := PurchLine."Prepmt. Amount Inv. (LCY)" + PrepmtAmountRnded[VAT::Base];
            PurchLine."Prepmt. VAT Amount Inv. (LCY)" := PurchLine."Prepmt. VAT Amount Inv. (LCY)" + PrepmtAmountRnded[VAT::Amount];
          END;
          PurchLine.MODIFY;
        UNTIL TempPrepmtInvLineBuf.NEXT = 0;
      TempPrepmtInvLineBuf.DELETEALL;
      ReverseDecArray(VATAdjustment);
    END;

    LOCAL PROCEDURE CalcRndedAmount@51(LineAmount@1000 : Decimal;Ratio@1001 : Decimal;VAR Reminder@1002 : Decimal) RndedAmount : Decimal;
    VAR
      Amount@1003 : Decimal;
    BEGIN
      Amount := Reminder + LineAmount * Ratio;
      RndedAmount := ROUND(Amount);
      Reminder := Amount - RndedAmount;
    END;

    LOCAL PROCEDURE ReverseDecArray@53(VAR DecArray@1000 : ARRAY [2] OF Decimal);
    VAR
      Idx@1001 : Integer;
    BEGIN
      FOR Idx := 1 TO ARRAYLEN(DecArray) DO
        DecArray[Idx] := -DecArray[Idx];
    END;

    LOCAL PROCEDURE InsertCorrInvLineBuffer@43(VAR PrepmtInvLineBuf@1001 : Record 461;PurchHeader@1002 : Record 38;VATBaseAdjustment@1003 : Decimal);
    VAR
      NewPrepmtInvLineBuf@1000 : Record 461;
      SavedPrepmtInvLineBuf@1004 : Record 461;
      AdjmtAmountACY@1005 : Decimal;
    BEGIN
      SavedPrepmtInvLineBuf := PrepmtInvLineBuf;

      IF PurchHeader."Currency Code" = '' THEN
        AdjmtAmountACY := VATBaseAdjustment
      ELSE
        AdjmtAmountACY := 0;

      NewPrepmtInvLineBuf.FillAdjInvLineBuffer(
        PrepmtInvLineBuf,
        GetPrepmtAccNo(PrepmtInvLineBuf."Gen. Bus. Posting Group",PrepmtInvLineBuf."Gen. Prod. Posting Group"),
        VATBaseAdjustment,AdjmtAmountACY);
      PrepmtInvLineBuf.InsertInvLineBuffer(NewPrepmtInvLineBuf);

      NewPrepmtInvLineBuf.FillAdjInvLineBuffer(
        PrepmtInvLineBuf,
        GetCorrBalAccNo(PurchHeader,VATBaseAdjustment > 0),
        -VATBaseAdjustment,-AdjmtAmountACY);
      PrepmtInvLineBuf.InsertInvLineBuffer(NewPrepmtInvLineBuf);

      PrepmtInvLineBuf := SavedPrepmtInvLineBuf;
    END;

    PROCEDURE GetPrepmtAccNo@47(GenBusPostingGroup@1000 : Code[10];GenProdPostingGroup@1001 : Code[10]) : Code[20];
    BEGIN
      IF (GenBusPostingGroup <> GenPostingSetup."Gen. Bus. Posting Group") OR
         (GenProdPostingGroup <> GenPostingSetup."Gen. Prod. Posting Group")
      THEN BEGIN
        GenPostingSetup.GET(GenBusPostingGroup,GenProdPostingGroup);
        GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
      END;
      EXIT(GenPostingSetup."Purch. Prepayments Account");
    END;

    PROCEDURE GetCorrBalAccNo@48(PurchHeader@1000 : Record 38;PositiveAmount@1001 : Boolean) : Code[20];
    VAR
      BalAccNo@1002 : Code[20];
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        BalAccNo := GetInvRoundingAccNo(PurchHeader."Vendor Posting Group")
      ELSE
        BalAccNo := GetGainLossGLAcc(PurchHeader."Currency Code",PositiveAmount);
      EXIT(BalAccNo);
    END;

    PROCEDURE GetInvRoundingAccNo@49(VendorPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      VendPostingGr@1002 : Record 93;
      GLAcc@1001 : Record 15;
    BEGIN
      VendPostingGr.GET(VendorPostingGroup);
      VendPostingGr.TESTFIELD("Invoice Rounding Account");
      GLAcc.GET(VendPostingGr."Invoice Rounding Account");
      EXIT(VendPostingGr."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE GetGainLossGLAcc@50(CurrencyCode@1000 : Code[10];PositiveAmount@1002 : Boolean) : Code[20];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      IF PositiveAmount THEN BEGIN
        Currency.TESTFIELD("Realized Gains Acc.");
        EXIT(Currency."Realized Gains Acc.");
      END;
      Currency.TESTFIELD("Realized Losses Acc.");
      EXIT(Currency."Realized Losses Acc.");
    END;

    PROCEDURE UpdateVATOnLines@36(PurchHeader@1001 : Record 38;VAR PurchLine@1011 : Record 39;VAR VATAmountLine@1003 : Record 290;DocumentType@1000 : 'Invoice,Credit Memo,Statistic');
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      PrepmtAmt@1002 : Decimal;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1012 : Decimal;
      PrepmtAmtToInvTotal@1013 : Decimal;
      FullGST@150000 : Boolean;
      DeductedVATBaseAmount@150001 : Decimal;
      NewVATBaseAmountRnded@150002 : Decimal;
    BEGIN
      GLSetup.GET;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      WITH PurchLine DO BEGIN
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        LOCKTABLE;
        IF FIND('-') THEN
          REPEAT
            PrepmtAmtToInvTotal := PrepmtAmtToInvTotal + ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.");
          UNTIL NEXT = 0;
        IF FIND('-') THEN
          REPEAT
            PrepmtAmt := PrepmtAmount(PurchLine,DocumentType);
            IF PrepmtAmt <> 0 THEN BEGIN
              FullGST := GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATAmountLine.GET(
                "Prepayment VAT Identifier",
                "Prepmt. VAT Calc. Type",
                "Prepayment Tax Group Code",
                FALSE,
                PrepmtAmt >= 0,
                FullGST);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "Prepayment VAT Identifier",
                     "Prepmt. VAT Calc. Type",
                     "Prepayment Tax Group Code",
                     FALSE,
                     PrepmtAmt >= 0,
                     FullGST)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF PurchHeader."Prices Including VAT" THEN BEGIN
                  IF PrepmtAmt = 0 THEN BEGIN
                    VATAmount := 0;
                    NewAmountIncludingVAT := 0;
                  END ELSE BEGIN
                    IF FullGST THEN BEGIN
                      IF DocumentType = DocumentType::"Credit Memo" THEN BEGIN
                        VATAmount :=
                          "Prepmt. Amt. Incl. VAT" - "Prepayment Amount" - "Prepmt. VAT Amount Deducted";
                        DeductedVATBaseAmount := "Prepmt. VAT Base Deducted";
                      END ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * PrepmtAmt / VATAmountLine."Line Amount";
                      NewAmountIncludingVAT :=
                          TempVATAmountLineRemainder."Amount Including VAT" +
                          VATAmountLine."Amount Including VAT" * PrepmtAmt / VATAmountLine."Line Amount";
                      NewVATBaseAmount :=
                        TempVATAmountLineRemainder."VAT Base" +
                        (("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100) - "Prepmt. VAT Base Amt.") *
                        (1 - PurchHeader."VAT Base Discount %" / 100);
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" * PrepmtAmt / VATAmountLine."Line Amount";
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" * PrepmtAmt / VATAmountLine."Line Amount";
                    END;
                  END;
                  NewAmount :=
                    ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                    ROUND(VATAmount,Currency."Amount Rounding Precision");
                  IF NOT FullGST THEN
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                END ELSE BEGIN
                  NewAmount := PrepmtAmt;
                  IF FullGST THEN BEGIN
                    NewVATBaseAmount :=
                      TempVATAmountLineRemainder."VAT Base" +
                      ("Line Amount" - "Inv. Discount Amount" - "Prepmt. VAT Base Amt.") *
                      (1 - PurchHeader."VAT Base Discount %" / 100);
                    IF VATAmountLine."VAT Base" = 0 THEN
                      VATAmount := 0
                    ELSE BEGIN
                      IF "Prepayment %" = 0 THEN
                        VATAmount := 0
                      ELSE
                        IF DocumentType = DocumentType::"Credit Memo" THEN BEGIN
                          VATAmount :=
                            "Prepmt. Amt. Incl. VAT" - "Prepayment Amount" - "Prepmt. VAT Amount Deducted";
                          DeductedVATBaseAmount := "Prepmt. VAT Base Deducted";
                        END ELSE
                          VATAmount :=
                            TempVATAmountLineRemainder."VAT Amount" +
                            VATAmountLine."VAT Amount" * PrepmtAmt / VATAmountLine."Line Amount";
                    END;
                    IF "Prepayment %" = 0 THEN
                      NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision")
                    ELSE
                      NewAmountIncludingVAT :=
                        ROUND(NewAmount / ("Prepayment %" / 100),Currency."Amount Rounding Precision") +
                        ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                    IF VATAmountLine."VAT Base" = 0 THEN
                      VATAmount := 0
                    ELSE
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END;
                END;
                "Prepayment Amount" := NewAmount;
                IF FullGST THEN BEGIN
                  "Prepmt. Amt. Incl. VAT" :=
                    ROUND("Prepayment Amount" + VATAmount,Currency."Amount Rounding Precision");
                  NewVATBaseAmountRnded := ROUND(NewVATBaseAmount,Currency."Amount Rounding Precision");
                  IF NewVATBaseAmountRnded <> 0 THEN
                    "Prepmt. VAT Base Amt." := NewVATBaseAmountRnded
                  ELSE
                    "Prepmt. VAT Base Amt." :=
                      "Prepmt. VAT Base Amt." + NewVATBaseAmountRnded - DeductedVATBaseAmount;
                END ELSE BEGIN
                  "Prepmt. Amt. Incl. VAT" :=
                    ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "Prepmt. VAT Base Amt." := NewVATBaseAmount;
                END;
                IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                  VATDifference := 0
                ELSE
                  IF PrepmtAmtToInvTotal = 0 THEN
                    VATDifference :=
                      VATAmountLine."VAT Difference" * ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.") /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount")
                  ELSE
                    VATDifference :=
                      VATAmountLine."VAT Difference" * ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.") /
                      PrepmtAmtToInvTotal;
                "Prepayment VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");

                MODIFY;

                TempVATAmountLineRemainder."VAT Base" :=
                  NewVATBaseAmount - ROUND(NewVATBaseAmount,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                IF NOT PurchHeader."Prices Including VAT" THEN
                  IF FullGST THEN
                    IF "Prepayment %" <> 0 THEN
                      TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT +
                        ROUND((NewAmount / ("Prepayment %" / 100)),Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "Prepayment VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SavePrepmtAmounts@150006(PurchHeader@150003 : Record 38;PurchLine@150000 : Record 39;DocumentType@150002 : 'Invoice,Credit Memo,Statistic';VAR TempOriginalPurchLine@150001 : Record 39);
    BEGIN
      TempOriginalPurchLine.RESET;
      TempOriginalPurchLine.DELETEALL;

      ApplyFilter(PurchHeader,DocumentType,PurchLine);
      IF PurchLine.FINDSET THEN
        REPEAT
          IF PurchLine."Prepmt. Amt. Inv." <> PurchLine."Prepmt. Line Amount" THEN BEGIN
            TempOriginalPurchLine := PurchLine;
            TempOriginalPurchLine.INSERT;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE RestorePrepmtAmounts@150007(VAR TempOriginalPurchLine@150000 : Record 39;VAR PurchLine@150001 : Record 39;DocumentType@150002 : 'Invoice,Credit Memo,Statistic');
    BEGIN
      WITH TempOriginalPurchLine DO BEGIN
        RESET;
        IF FINDSET THEN
          REPEAT
            PurchLine.GET("Document Type","Document No.","Line No.");
            IF DocumentType = DocumentType::"Credit Memo" THEN BEGIN
              PurchLine."Prepmt. Amt. Incl. VAT" := PurchLine."Prepmt. Amt. Incl. VAT" - "Prepmt. Amt. Incl. VAT";
              PurchLine."Prepayment Amount" := PurchLine."Prepayment Amount" - "Prepayment Amount";
            END ELSE BEGIN
              PurchLine."Prepmt. Amt. Incl. VAT" := PurchLine."Prepmt. Amt. Incl. VAT" + "Prepmt. Amt. Incl. VAT";
              PurchLine."Prepayment Amount" := PurchLine."Prepayment Amount" + "Prepayment Amount";
            END;
            PurchLine.MODIFY;
          UNTIL NEXT = 0;
        DELETEALL;
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(VAR PurchHeader@1001 : Record 38;VAR PurchLine@1009 : Record 39;VAR VATAmountLine@1003 : Record 290;DocumentType@1008 : 'Invoice,Credit Memo,Statistic');
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      NewAmount@1002 : Decimal;
      NewPrepmtVATDiffAmt@1010 : Decimal;
      FullGST@150000 : Boolean;
    BEGIN
      GLSetup.GET;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH PurchLine DO BEGIN
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        IF FIND('-') THEN
          REPEAT
            NewAmount := PrepmtAmount(PurchLine,DocumentType);
            IF NewAmount <> 0 THEN BEGIN
              IF DocumentType = DocumentType::Invoice THEN
                NewAmount := "Prepmt. Line Amount";
              IF "Prepmt. VAT Calc. Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              FullGST := GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group");
              IF FullGST THEN
                IF "Prepayment VAT %" <> "VAT %" THEN
                  FIELDERROR("Prepayment VAT %",STRSUBSTNO(Text020,"VAT %",FIELDCAPTION("VAT %")));
              IF NOT VATAmountLine.GET(
                   "Prepayment VAT Identifier",
                   "Prepmt. VAT Calc. Type","Prepayment Tax Group Code",
                   FALSE,NewAmount >= 0,
                   FullGST)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "Prepayment VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "Prepmt. VAT Calc. Type";
                VATAmountLine."Tax Group Code" := "Prepayment Tax Group Code";
                VATAmountLine."VAT %" := "Prepayment VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := NewAmount >= 0;
                VATAmountLine."Full GST on Prepayment" := FullGST;
                VATAmountLine."Includes Prepayment" := TRUE;
                VATAmountLine.INSERT;
              END;
              VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + NewAmount;
              NewPrepmtVATDiffAmt := PrepmtVATDiffAmount(PurchLine,DocumentType);
              IF DocumentType = DocumentType::Invoice THEN
                NewPrepmtVATDiffAmt := "Prepayment VAT Difference" + "Prepmt VAT Diff. to Deduct" +
                  "Prepmt VAT Diff. Deducted";
              VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + NewPrepmtVATDiffAmt;
              CalcFullGSTOnLine(PurchLine,VATAmountLine,DocumentType,PurchHeader."Prices Including VAT");
              VATAmountLine.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FIND('-') THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF PurchHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    IF NOT "Full GST on Prepayment" THEN BEGIN
                      "VAT Base" :=
                        ROUND(
                          ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                          Currency."Amount Rounding Precision") - "VAT Difference";
                      "VAT Amount" :=
                        "VAT Difference" +
                        ROUND(
                          PrevVatAmountLine."VAT Amount" +
                          ("Line Amount" - "VAT Base" - "VAT Difference") *
                          (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    END;
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                          PurchHeader."Posting Date","Amount Including VAT",Quantity,PurchHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    IF NOT "Full GST on Prepayment" THEN BEGIN
                      "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                      "VAT Amount" :=
                        "VAT Difference" +
                        ROUND(
                          PrevVatAmountLine."VAT Amount" +
                          "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    END;
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                        PurchHeader."Posting Date","VAT Base",Quantity,PurchHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE CalcFullGSTOnLine@150000(PurchLine@150000 : Record 39;VAR VATAmountLine@150001 : Record 290;DocumentType@150002 : 'Invoice,Credit Memo,Statistic';PricesIncludingVAT@150003 : Boolean);
    BEGIN
      IF VATAmountLine."Full GST on Prepayment" THEN
        WITH PurchLine DO BEGIN
          IF DocumentType = DocumentType::"Credit Memo" THEN BEGIN
            VATAmountLine."VAT Base" :=
              VATAmountLine."VAT Base" + "Prepmt. VAT Base Amt.";
            VATAmountLine."VAT Amount" :=
              VATAmountLine."VAT Amount" + "Prepmt. Amount Inv. Incl. VAT" - "Prepayment Amount";
          END ELSE BEGIN
            VATAmountLine."VAT Amount" :=
              VATAmountLine."VAT Amount" + "Amount Including VAT" - Amount;
            VATAmountLine."VAT Base" :=
              VATAmountLine."VAT Base" + Amount;
          END;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Line Amount";
          IF NOT PricesIncludingVAT THEN
            VATAmountLine."Amount Including VAT" :=
              VATAmountLine."Amount Including VAT" + VATAmountLine."VAT Amount";
        END;
    END;

    PROCEDURE SumPrepmt@15(PurchHeader@1000 : Record 38;VAR PurchLine@1011 : Record 39;VAR VATAmountLine@1003 : Record 290;VAR TotalAmount@1001 : Decimal;VAR TotalVATAmount@1002 : Decimal;VAR VATAmountText@1004 : Text[30]);
    VAR
      PrepmtInvBuf@1005 : TEMPORARY Record 461;
      TotalPrepmtBuf@1007 : Record 461;
      TotalPrepmtBufLCY@1008 : Record 461;
      DifVATPct@1009 : Boolean;
      PrevVATPct@1010 : Decimal;
    BEGIN
      CalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,2);
      UpdateVATOnLines(PurchHeader,PurchLine,VATAmountLine,2);
      BuildInvLineBuffer(PurchHeader,PurchLine,2,PrepmtInvBuf,FALSE);
      IF PrepmtInvBuf.FIND('-') THEN BEGIN
        PrevVATPct := PrepmtInvBuf."VAT %";
        REPEAT
          RoundAmounts(PurchHeader,PrepmtInvBuf,TotalPrepmtBuf,TotalPrepmtBufLCY);
          IF PrepmtInvBuf."VAT %" <> PrevVATPct THEN
            DifVATPct := TRUE;
        UNTIL PrepmtInvBuf.NEXT = 0;
      END;
      TotalAmount := TotalPrepmtBuf.Amount;
      TotalVATAmount := TotalPrepmtBuf."VAT Amount";
      IF DifVATPct OR (PrepmtInvBuf."VAT %" = 0) THEN
        VATAmountText := Text014
      ELSE
        VATAmountText := STRSUBSTNO(Text015,PrevVATPct);
    END;

    PROCEDURE GetPurchLines@16(PurchHeader@1000 : Record 38;DocumentType@1003 : 'Invoice,Credit Memo,Statistic';VAR ToPurchLine@1001 : Record 39);
    VAR
      PurchSetup@1004 : Record 312;
      FromPurchLine@1002 : Record 39;
      InvRoundingPurchLine@1008 : Record 39;
      TempVATAmountLine@1005 : TEMPORARY Record 290;
      TotalAmt@1007 : Decimal;
      NextLineNo@1006 : Integer;
    BEGIN
      ApplyFilter(PurchHeader,DocumentType,FromPurchLine);
      IF FromPurchLine.FIND('-') THEN BEGIN
        REPEAT
          ToPurchLine := FromPurchLine;
          ToPurchLine.INSERT;
        UNTIL FromPurchLine.NEXT = 0;

        PurchSetup.GET;
        IF PurchSetup."Invoice Rounding" THEN BEGIN
          CalcVATAmountLines(PurchHeader,ToPurchLine,TempVATAmountLine,2);
          UpdateVATOnLines(PurchHeader,ToPurchLine,TempVATAmountLine,2);
          ToPurchLine.FIND('-');
          REPEAT
            TotalAmt := TotalAmt + ToPurchLine."Prepmt. Amt. Incl. VAT";
          UNTIL ToPurchLine.NEXT = 0;
          IF InitInvoiceRoundingLine(PurchHeader,TotalAmt,InvRoundingPurchLine) THEN
            WITH ToPurchLine DO BEGIN
              NextLineNo := "Line No." + 1;
              ToPurchLine := InvRoundingPurchLine;
              "Line No." := NextLineNo;

              IF DocumentType <> DocumentType::"Credit Memo" THEN
                "Prepmt. Line Amount" := "Line Amount"
              ELSE
                "Prepmt. Amt. Inv." := "Line Amount";
              "Prepmt. VAT Calc. Type" := "VAT Calculation Type";
              "Prepayment VAT Identifier" := "VAT Identifier";
              "Prepayment Tax Group Code" := "Tax Group Code";
              "Prepayment VAT Identifier" := "VAT Identifier";
              "Prepayment Tax Group Code" := "Tax Group Code";
              "Prepayment VAT %" := "VAT %";
              INSERT;
            END;
        END;
      END;
    END;

    PROCEDURE BuildInvLineBuffer@31(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;DocumentType@1005 : Option;VAR PrepmtInvBuf@1002 : Record 461;UpdateLines@1010 : Boolean);
    VAR
      PrepmtInvBuf2@1003 : Record 461;
      TotalPrepmtInvLineBuffer@1009 : Record 461;
      TotalPrepmtInvLineBufferDummy@1008 : Record 461;
      PurchSetup@1011 : Record 312;
    BEGIN
      WITH PurchHeader DO BEGIN
        TempPrepmtInvLineBuf.RESET;
        TempPrepmtInvLineBuf.DELETEALL;
        PurchSetup.GET;
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        PurchLine.SETRANGE("System-Created Entry",FALSE);
        IF PurchLine.FIND('-') THEN
          REPEAT
            IF PrepmtAmount(PurchLine,DocumentType) <> 0 THEN BEGIN
              FillInvLineBuffer(PurchHeader,PurchLine,PrepmtInvBuf2);
              IF UpdateLines THEN
                TempPrepmtInvLineBuf.CopyWithLineNo(PrepmtInvBuf2,PurchLine."Line No.");
              PrepmtInvBuf.InsertInvLineBuffer(PrepmtInvBuf2);
              IF PurchSetup."Invoice Rounding" THEN
                RoundAmounts(
                  PurchHeader,PrepmtInvBuf2,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferDummy);
            END;
          UNTIL PurchLine.NEXT = 0;
        IF PurchSetup."Invoice Rounding" THEN
          IF InsertInvoiceRounding(
               PurchHeader,PrepmtInvBuf2,TotalPrepmtInvLineBuffer,PurchLine."Line No.")
          THEN
            PrepmtInvBuf.InsertInvLineBuffer(PrepmtInvBuf2);
      END;
    END;

    PROCEDURE BuildInvLineBuffer2@9(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;DocumentType@1005 : 'Invoice,Credit Memo,Statistic';VAR PrepmtInvBuf@1002 : Record 461);
    BEGIN
      BuildInvLineBuffer(
        PurchHeader,PurchLine,DocumentType,PrepmtInvBuf,FALSE);
    END;

    PROCEDURE FillInvLineBuffer@4(PurchHeader@1001 : Record 38;PurchLine@1002 : Record 39;VAR PrepmtInvBuf@1000 : Record 461);
    VAR
      BASManagement@150000 : Codeunit 11601;
    BEGIN
      GLSetup.GET;
      WITH PrepmtInvBuf DO BEGIN
        CLEAR(PrepmtInvBuf);

        FillInvLineBufKey(PurchLine,PrepmtInvBuf);
        IF NOT PurchHeader."Compress Prepayment" THEN BEGIN
          "Line No." := PurchLine."Line No.";
          Description := PurchLine.Description;
        END;
        FillFromGLAcc(PurchHeader."Compress Prepayment");
        "Gen. Bus. Posting Group" := PurchLine."Gen. Bus. Posting Group";
        "VAT Bus. Posting Group" := PurchLine."VAT Bus. Posting Group";
        "VAT Calculation Type" := PurchLine."Prepmt. VAT Calc. Type";
        "Global Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
        Amount := PurchLine."Prepayment Amount";
        "VAT Amount" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
        IF GLSetup.CheckFullGSTonPrepayment(PurchLine."VAT Bus. Posting Group",PurchLine."VAT Prod. Posting Group") THEN BEGIN
          IF NOT BASManagement.VendorRegistered(PurchLine."Buy-from Vendor No.") THEN
            "VAT Prod. Posting Group" := PurchLine."VAT Prod. Posting Group";
          IF ("VAT Amount" = 0) AND (PurchLine."VAT %" <> 0) THEN BEGIN
            "VAT Base Amount" := 0;
            "VAT Base Amount (ACY)" := 0;
          END ELSE BEGIN
            "VAT Base Amount" := PurchLine."Prepmt. VAT Base Amt.";
            "VAT Base Amount (ACY)" := PurchLine."Prepmt. VAT Base Amt.";
          END;
          "Amount Incl. VAT" := Amount + "VAT Amount";
          "Invoice Discount Amount" := PurchLine."Prepmt. Line Amount" - PurchLine."Prepayment Amount";
          "Prepayment %" := PurchLine."Prepayment %";
        END ELSE BEGIN
          "VAT Base Amount" := PurchLine."Prepayment Amount";
          "VAT Base Amount (ACY)" := PurchLine."Prepayment Amount";
          "Amount Incl. VAT" := PurchLine."Prepmt. Amt. Incl. VAT";
        END;
        "Amount (ACY)" := PurchLine."Prepayment Amount";
        "VAT Amount (ACY)" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
        "VAT %" := PurchLine."Prepayment VAT %";
        "VAT Identifier" := PurchLine."Prepayment VAT Identifier";
        "VAT Difference" := PurchLine."Prepayment VAT Difference";
      END;
    END;

    LOCAL PROCEDURE FillInvLineBufKey@52(PurchLine@1002 : Record 39;VAR PrepmtInvLineBuf@1001 : Record 461);
    BEGIN
      WITH PrepmtInvLineBuf DO BEGIN
        "G/L Account No." := GetPrepmtAccNo(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
        "Dimension Set ID" := PurchLine."Dimension Set ID";
        "Job No." := PurchLine."Job No.";
        "Tax Area Code" := PurchLine."Tax Area Code";
        "Tax Liable" := PurchLine."Tax Liable";
        "Tax Group Code" := PurchLine."Tax Group Code";
      END;
    END;

    LOCAL PROCEDURE InsertInvoiceRounding@25(PurchHeader@1002 : Record 38;VAR PrepmtInvBuf@1000 : Record 461;TotalPrepmtInvBuf@1001 : Record 461;PrevLineNo@1008 : Integer) : Boolean;
    VAR
      PurchLine@1007 : Record 39;
    BEGIN
      GLSetup.GET;
      IF InitInvoiceRoundingLine(PurchHeader,TotalPrepmtInvBuf."Amount Incl. VAT",PurchLine) THEN BEGIN
        CreateDimensions(PurchLine);
        WITH PrepmtInvBuf DO BEGIN
          CLEAR(PrepmtInvBuf);
          "Invoice Rounding" := TRUE;
          "G/L Account No." := PurchLine."No.";
          "Dimension Set ID" := PurchLine."Dimension Set ID";
          "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
          "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
          "Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
          "VAT Prod. Posting Group" := PurchLine."VAT Prod. Posting Group";
          "VAT Calculation Type" := PurchLine."VAT Calculation Type";
          "Global Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
          "Global Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
          IF GLSetup.CheckFullGSTonPrepayment(PurchLine."VAT Bus. Posting Group",
               PurchLine."VAT Prod. Posting Group")
          THEN
            Amount := PurchLine."Line Amount" - PurchLine."Inv. Discount Amount"
          ELSE
            Amount := PurchLine."Line Amount";
          "Amount Incl. VAT" := PurchLine."Amount Including VAT";
          IF GLSetup.CheckFullGSTonPrepayment(PurchLine."VAT Bus. Posting Group",
               PurchLine."VAT Prod. Posting Group") AND NOT PurchHeader."Prices Including VAT"
          THEN BEGIN
            "VAT Base Amount" := PurchLine."Line Amount" - PurchLine."Inv. Discount Amount";
            "VAT Base Amount (ACY)" := PurchLine."Line Amount" - PurchLine."Inv. Discount Amount"
          END ELSE
            IF GLSetup.CheckFullGSTonPrepayment(PurchLine."VAT Bus. Posting Group",
                 PurchLine."VAT Prod. Posting Group") AND PurchHeader."Prices Including VAT"
            THEN BEGIN
              "VAT Base Amount" :=
                ROUND(
                  (PurchLine."Line Amount" - PurchLine."Inv. Discount Amount") /
                  (1 + PurchLine."Prepayment VAT %" / 100),
                  Currency."Amount Rounding Precision");
              "VAT Base Amount (ACY)" :=
                ROUND(
                  (PurchLine."Line Amount" - PurchLine."Inv. Discount Amount") /
                  (1 + PurchLine."Prepayment VAT %" / 100),
                  Currency."Amount Rounding Precision");
            END ELSE BEGIN
              "VAT Base Amount" := PurchLine."Line Amount";
              "VAT Base Amount (ACY)" := PurchLine."Line Amount"
            END;
          "VAT Amount" := PurchLine."Amount Including VAT" - PurchLine."Line Amount";
          "Amount (ACY)" := PurchLine."Prepayment Amount";
          "VAT Amount (ACY)" := PurchLine."Amount Including VAT" - PurchLine."Line Amount";
          "VAT %" := PurchLine."VAT %";
          "VAT Identifier" := PurchLine."VAT Identifier";
          "Tax Area Code" := PurchLine."Tax Area Code";
          "Tax Liable" := PurchLine."Tax Liable";
          "Tax Group Code" := PurchLine."Tax Group Code";
          "Line No." := PrevLineNo + 10000;
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitInvoiceRoundingLine@29(PurchHeader@1000 : Record 38;TotalAmount@1004 : Decimal;VAR PurchLine@1001 : Record 39) : Boolean;
    VAR
      Currency@1007 : Record 4;
      InvoiceRoundingAmount@1002 : Decimal;
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalAmount -
          ROUND(
            TotalAmount,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");

      IF InvoiceRoundingAmount = 0 THEN
        EXIT(FALSE);

      WITH PurchLine DO BEGIN
        "Document Type" := PurchHeader."Document Type";
        "Document No." := PurchHeader."No.";
        "System-Created Entry" := TRUE;
        Type := Type::"G/L Account";
        VALIDATE("No.",GetInvRoundingAccNo(PurchHeader."Vendor Posting Group"));
        VALIDATE(Quantity,1);
        IF PurchHeader."Prices Including VAT" THEN
          VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
        ELSE
          VALIDATE(
            "Direct Unit Cost",
            ROUND(
              InvoiceRoundingAmount /
              (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
              Currency."Amount Rounding Precision"));
        "Prepayment Amount" := "Direct Unit Cost";
        VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CompressInvLineBuffer@1000000000(PurchHeader@1000000001 : Record 38;VAR PrepmtInvBuffer@1000000000 : Record 461);
    VAR
      PrepmtInvBuffer2@1000 : TEMPORARY Record 461;
    BEGIN
      IF PurchHeader."Compress Prepayment" THEN
        EXIT;

      WITH PrepmtInvBuffer2 DO BEGIN
        PrepmtInvBuffer.FIND('-');
        REPEAT
          PrepmtInvBuffer2 := PrepmtInvBuffer;
          "Line No." := 0;
          IF FIND THEN BEGIN
            IncrAmounts(PrepmtInvBuffer);
            MODIFY;
          END ELSE
            INSERT;
        UNTIL PrepmtInvBuffer.NEXT = 0;

        PrepmtInvBuffer.DELETEALL;

        FIND('-');
        REPEAT
          PrepmtInvBuffer := PrepmtInvBuffer2;
          PrepmtInvBuffer.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE ApplyFilter@20(PurchHeader@1000 : Record 38;DocumentType@1001 : 'Invoice,Credit Memo,Statistic';VAR PurchLine@1002 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        RESET;
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        IF DocumentType IN [DocumentType::Invoice,DocumentType::Statistic] THEN
          SETFILTER("Prepmt. Line Amount",'<>0')
        ELSE
          SETFILTER("Prepmt. Amt. Inv.",'<>0');
      END;
    END;

    PROCEDURE PrepmtAmount@12(PurchLine@1000 : Record 39;DocumentType@1001 : 'Invoice,Credit Memo,Statistic') : Decimal;
    BEGIN
      WITH PurchLine DO
        CASE DocumentType OF
          DocumentType::Statistic:
            EXIT("Prepmt. Line Amount");
          DocumentType::Invoice:
            EXIT("Prepmt. Line Amount" - "Prepmt. Amt. Inv.");
          ELSE
            EXIT("Prepmt. Amt. Inv." - "Prepmt Amt Deducted");
        END;
    END;

    LOCAL PROCEDURE CheckDim@34(PurchHeader@1001 : Record 38);
    VAR
      PurchLine@1003 : Record 39;
    BEGIN
      PurchLine."Line No." := 0;
      CheckDimComb(PurchHeader,PurchLine);
      CheckDimValuePosting(PurchHeader,PurchLine);

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      IF PurchLine.FIND('-') THEN
        REPEAT
          CheckDimComb(PurchHeader,PurchLine);
          CheckDimValuePosting(PurchHeader,PurchLine);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(PurchHeader@1001 : Record 38;PurchLine@1000 : Record 39);
    VAR
      DimMgt@1002 : Codeunit 408;
    BEGIN
      IF PurchLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchHeader."Dimension Set ID") THEN
          ERROR(
            Text007,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimCombErr);
      IF PurchLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchLine."Dimension Set ID") THEN
          ERROR(
            Text008,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(PurchHeader@1004 : Record 38;VAR PurchLine@1000 : Record 39);
    VAR
      DimMgt@1005 : Codeunit 408;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF PurchLine."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := PurchHeader."Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::Job;
        // NumberArr[2] := PurchHeader."Job No.";
        TableIDArr[3] := DATABASE::"Salesperson/Purchaser";
        NumberArr[3] := PurchHeader."Purchaser Code";
        TableIDArr[4] := DATABASE::Campaign;
        NumberArr[4] := PurchHeader."Campaign No.";
        TableIDArr[5] := DATABASE::"Responsibility Center";
        NumberArr[5] := PurchHeader."Responsibility Center";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchHeader."Dimension Set ID") THEN
          ERROR(
            Text009,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine.Type);
        NumberArr[1] := PurchLine."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := PurchLine."Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := PurchLine."Work Center No.";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchLine."Dimension Set ID") THEN
          ERROR(
            Text010,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromNumber@1002 : Code[20];ToDocType@1000 : Integer;ToNumber@1003 : Code[20]);
    VAR
      PurchCommentLine@1004 : Record 43;
      PurchCommentLine2@1005 : Record 43;
    BEGIN
      WITH PurchCommentLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("No.",FromNumber);
        IF FIND('-') THEN
          REPEAT
            PurchCommentLine2 := PurchCommentLine;
            CASE ToDocType OF
              DATABASE::"Purch. Inv. Header":
                PurchCommentLine2."Document Type" :=
                  PurchCommentLine2."Document Type"::"Posted Invoice";
              DATABASE::"Purch. Cr. Memo Hdr.":
                PurchCommentLine2."Document Type" :=
                  PurchCommentLine2."Document Type"::"Posted Credit Memo";
            END;
            PurchCommentLine2."No." := ToNumber;
            PurchCommentLine2.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertExtendedText@17(TabNo@1000 : Integer;DocNo@1003 : Code[20];GLAccNo@1006 : Code[20];DocDate@1001 : Date;LanguageCode@1009 : Code[10];VAR PrevLineNo@1002 : Integer);
    VAR
      TempExtTextLine@1005 : TEMPORARY Record 280;
      PurchInvLine@1007 : Record 123;
      PurchCrMemoLine@1008 : Record 125;
      TransferExtText@1004 : Codeunit 378;
      NextLineNo@1010 : Integer;
    BEGIN
      TransferExtText.PrepmtGetAnyExtText(GLAccNo,TabNo,DocDate,LanguageCode,TempExtTextLine);
      IF TempExtTextLine.FIND('-') THEN BEGIN
        NextLineNo := PrevLineNo + 10000;
        REPEAT
          CASE TabNo OF
            DATABASE::"Purch. Inv. Line":
              BEGIN
                PurchInvLine."Document No." := DocNo;
                PurchInvLine."Line No." := NextLineNo;
                PurchInvLine.Description := TempExtTextLine.Text;
                PurchInvLine.INSERT;
              END;
            DATABASE::"Purch. Cr. Memo Line":
              BEGIN
                PurchCrMemoLine."Document No." := DocNo;
                PurchCrMemoLine."Line No." := NextLineNo;
                PurchCrMemoLine.Description := TempExtTextLine.Text;
                PurchCrMemoLine.INSERT;
              END;
          END;
          PrevLineNo := NextLineNo;
          NextLineNo := NextLineNo + 10000;
        UNTIL TempExtTextLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlPostLine.RunWithCheck(GenJnlLine);
    END;

    PROCEDURE UpdatePrepmtAmountOnPurchLines@13(PurchHeader@1001 : Record 38;NewTotalPrepmtAmount@1000 : Decimal);
    VAR
      Currency@1004 : Record 4;
      PurchLine@1002 : Record 39;
      TotalLineAmount@1003 : Decimal;
      TotalPrepmtAmount@1008 : Decimal;
      TotalPrepmtAmtInv@1010 : Decimal;
      LastLineNo@1009 : Integer;
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        SETFILTER("Line Amount",'<>0');
        SETFILTER("Prepayment %",'<>0');
        LOCKTABLE;
        IF FIND('-') THEN
          REPEAT
            TotalLineAmount := TotalLineAmount + "Line Amount";
            TotalPrepmtAmtInv := TotalPrepmtAmtInv + "Prepmt. Amt. Inv.";
            LastLineNo := "Line No.";
          UNTIL NEXT = 0
        ELSE
          ERROR(Text017,FIELDCAPTION("Prepayment %"));
        IF TotalLineAmount = 0 THEN
          ERROR(Text013,NewTotalPrepmtAmount);
        IF NOT (NewTotalPrepmtAmount IN [TotalPrepmtAmtInv ..TotalLineAmount]) THEN
          ERROR(Text016,TotalPrepmtAmtInv,TotalLineAmount);
        IF FIND('-') THEN
          REPEAT
            IF "Line No." <> LastLineNo THEN
              VALIDATE(
                "Prepmt. Line Amount",
                ROUND(
                  NewTotalPrepmtAmount * "Line Amount" / TotalLineAmount,
                  Currency."Amount Rounding Precision"))
            ELSE
              VALIDATE("Prepmt. Line Amount",NewTotalPrepmtAmount - TotalPrepmtAmount);
            TotalPrepmtAmount := TotalPrepmtAmount + "Prepmt. Line Amount";
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateDimensions@26(VAR PurchLine@1009 : Record 39);
    VAR
      SourceCodeSetup@1006 : Record 242;
      DimMgt@1010 : Codeunit 408;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := DATABASE::"Work Center";
      No[1] := PurchLine."Work Center No.";
      TableID[2] := DATABASE::"G/L Account";
      No[2] := PurchLine."No.";
      TableID[3] := DATABASE::Job;
      No[3] := PurchLine."Job No.";
      TableID[4] := DATABASE::"Responsibility Center";
      No[4] := PurchLine."Responsibility Center";
      PurchLine."Shortcut Dimension 1 Code" := '';
      PurchLine."Shortcut Dimension 2 Code" := '';
      PurchLine."Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Purchases,
          PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code",PurchLine."Dimension Set ID",DATABASE::Vendor);
    END;

    PROCEDURE GetPurchLinesToDeduct@10(PurchHeader@1000 : Record 38;VAR PurchLines@1002 : Record 39);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      ApplyFilter(PurchHeader,1,PurchLine);
      IF PurchLine.FINDSET THEN
        REPEAT
          IF (PrepmtAmount(PurchLine,0) <> 0) AND (PrepmtAmount(PurchLine,1) <> 0) THEN BEGIN
            PurchLines := PurchLine;
            PurchLines.INSERT;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE PrepmtVATDiffAmount@21(PurchLine@1000 : Record 39;DocumentType@1001 : 'Invoice,Credit Memo,Statistic') : Decimal;
    BEGIN
      WITH PurchLine DO
        CASE DocumentType OF
          DocumentType::Statistic:
            EXIT("Prepayment VAT Difference");
          DocumentType::Invoice:
            EXIT("Prepayment VAT Difference");
          ELSE
            EXIT("Prepmt VAT Diff. to Deduct");
        END;
    END;

    PROCEDURE InsertGST@1500004(PurchHeader@150000 : Record 38;PrepmtInvBuf2@1500004 : Record 461;DocumentType@150001 : 'Invoice,Credit Memo';VATEntryNo@1500001 : Integer);
    VAR
      RecGSTReport@1500002 : Record 28160;
      PurchCrmemoLine3@1500005 : Record 125;
      PurchInvLine3@1500006 : Record 123;
      EntryNo@1500003 : Integer;
    BEGIN
      IF NOT GLSetup."GST Report" THEN
        EXIT;
      IF PrepmtInvBuf2.Adjustment THEN
        EXIT;
      IF VATEntryNo = 0 THEN
        EXIT;
      IF RecGSTReport.FINDLAST THEN
        EntryNo := RecGSTReport."Entry No." + 1
      ELSE
        EntryNo := 1;

      WITH PrepmtInvBuf2 DO BEGIN
        IF PrepmtInvBuffer3.GET(
             "G/L Account No.","Job No.","Tax Area Code","Tax Liable","Tax Group Code",
             "Invoice Rounding",FALSE,"Line No.","Dimension Set ID")
        THEN BEGIN
          RecGSTReport.INIT;
          RecGSTReport."Entry No." := EntryNo;
          RecGSTReport."GST Entry No." := VATEntryNo;
          RecGSTReport."GST Entry Type" := RecGSTReport."GST Entry Type"::Purchase;
          RecGSTReport."GST Base" := "VAT Base Amount";
          RecGSTReport.Amount := "VAT Amount";
          RecGSTReport."VAT Calculation Type" := "VAT Calculation Type";
          RecGSTReport."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
          RecGSTReport."VAT Prod. Posting Group" := "VAT Prod. Posting Group";

          RecGSTReport."Posting Date" := PurchHeader."Posting Date";
          RecGSTReport."Vendor No." := PurchHeader."Buy-from Vendor No.";
          RecGSTReport."Vendor Name" := PurchHeader."Buy-from Vendor Name";

          GenPostingSetup.GET("Gen. Bus. Posting Group",PrepmtInvBuffer3."Gen. Prod. Posting Group");
          GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
          CASE DocumentType OF
            DocumentType::Invoice:
              BEGIN
                RecGSTReport."Document Type" := RecGSTReport."Document Type"::Invoice;
                RecGSTReport."Document No." := PurchInvHeader3."No.";
                PurchInvLine3.RESET;
                PurchInvLine3.SETRANGE("Document No.",PurchInvHeader3."No.");
                PurchInvLine3.SETRANGE("No.",GenPostingSetup."Purch. Prepayments Account");
                IF PurchInvLine3.FINDFIRST THEN BEGIN
                  RecGSTReport."Document Line Type" := PurchInvLine3.Type;
                  RecGSTReport."Document Line Code" := PurchInvLine3."No.";
                  RecGSTReport."Document Line Description" := PurchInvLine3.Description;
                  RecGSTReport."Document Line No." := PurchInvLine3."Line No.";
                END;
              END;
            DocumentType::"Credit Memo":
              BEGIN
                RecGSTReport."Document Type" := RecGSTReport."Document Type"::"Credit Memo";
                RecGSTReport."Document No." := PurchCrMemoHeader3."No.";
                PurchCrmemoLine3.RESET;
                PurchCrmemoLine3.SETRANGE("Document No.",PurchCrMemoHeader3."No.");
                PurchCrmemoLine3.SETRANGE("No.",GenPostingSetup."Purch. Prepayments Account");
                IF PurchCrmemoLine3.FINDFIRST THEN BEGIN
                  RecGSTReport."Document Line Type" := PurchCrmemoLine3.Type;
                  RecGSTReport."Document Line Code" := PurchCrmemoLine3."No.";
                  RecGSTReport."Document Line Description" := PurchCrmemoLine3.Description;
                  RecGSTReport."Document Line No." := PurchCrmemoLine3."Line No.";
                END;
              END;
          END;
          RecGSTReport.INSERT;
        END;
      END;
    END;

    PROCEDURE InsertInvLineBufferGST@1500001(VAR PrepmtInvBuf@1001 : Record 461;PrepmtInvBuf2@1000 : Record 461);
    BEGIN
      IF NOT GLSetup."GST Report" THEN
        EXIT;
      WITH PrepmtInvBuf DO BEGIN
        PrepmtInvBuf := PrepmtInvBuf2;
        IF FIND THEN BEGIN
          IncrAmounts(PrepmtInvBuf2);
          MODIFY;
        END ELSE
          INSERT;
      END;
    END;

    PROCEDURE FillInvLineBufferGST@1500000(PurchHeader@1001 : Record 38;PurchLine@1002 : Record 39;GLAcc@1007 : Record 15;VAR PrepmtInvBuf@1000 : Record 461);
    BEGIN
      IF NOT GLSetup."GST Report" THEN
        EXIT;
      GLSetup.GET;
      WITH PrepmtInvBuf DO BEGIN
        CLEAR(PrepmtInvBuf);

        "G/L Account No." := GLAcc."No.";
        "Gen. Bus. Posting Group" := PurchLine."Gen. Bus. Posting Group";
        "VAT Bus. Posting Group" := PurchLine."VAT Bus. Posting Group";
        "Gen. Prod. Posting Group" := PurchLine."Gen. Prod. Posting Group";
        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
        "VAT Calculation Type" := PurchLine."Prepmt. VAT Calc. Type";
        "Global Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := PurchLine."Dimension Set ID";
        "Job No." := PurchLine."Job No.";
        IF GLSetup."Full GST on Prepayment" THEN BEGIN
          "Invoice Discount Amount" := PurchLine."Prepmt. Line Amount" - PurchLine."Prepayment Amount";
          "Prepayment %" := PurchLine."Prepayment %";
        END;
        Amount := PurchLine."Prepayment Amount";
        "Amount Incl. VAT" := PurchLine."Prepmt. Amt. Incl. VAT";
        IF GLSetup."Full GST on Prepayment" AND NOT PurchHeader."Prices Including VAT" THEN
          "VAT Base Amount" := PurchLine."Line Amount" - PurchLine."Inv. Discount Amount"
        ELSE
          IF NOT GLSetup."Full GST on Prepayment" THEN
            "VAT Base Amount" := PurchLine."Prepayment Amount"
          ELSE
            IF GLSetup."Full GST on Prepayment" AND PurchHeader."Prices Including VAT" THEN
              "VAT Base Amount" := ROUND((PurchLine."Line Amount" - PurchLine."Inv. Discount Amount") /
                  (1 + PurchLine."Prepayment VAT %" / 100),Currency."Amount Rounding Precision");
        "VAT Amount" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
        "Amount (ACY)" := PurchLine."Prepayment Amount";
        IF GLSetup."Full GST on Prepayment" AND NOT PurchHeader."Prices Including VAT" THEN
          "VAT Base Amount (ACY)" := PurchLine."Line Amount" - PurchLine."Inv. Discount Amount"
        ELSE
          IF NOT GLSetup."Full GST on Prepayment" THEN
            "VAT Base Amount (ACY)" := PurchLine."Prepayment Amount"
          ELSE
            IF GLSetup."Full GST on Prepayment" AND PurchHeader."Prices Including VAT" THEN
              "VAT Base Amount (ACY)" := ROUND((PurchLine."Line Amount" - PurchLine."Inv. Discount Amount") /
                  (1 + PurchLine."Prepayment VAT %" / 100),Currency."Amount Rounding Precision");
        "VAT Amount (ACY)" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
        "VAT %" := PurchLine."Prepayment VAT %";
        "VAT Identifier" := PurchLine."Prepayment VAT Identifier";
        "Tax Area Code" := PurchLine."Tax Area Code";
        "Tax Liable" := PurchLine."Tax Liable";
        "Tax Group Code" := PurchLine."Tax Group Code";
        IF NOT PurchHeader."Compress Prepayment" THEN BEGIN
          "Line No." := PurchLine."Line No.";
          Description := PurchLine.Description;
        END ELSE
          Description := GLAcc.Name;
      END;
    END;

    PROCEDURE BuildInvLineBufferGST@1500002(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;DocumentType@1005 : 'Invoice,Credit Memo,Statistic';VAR PrepmtInvBuf@1002 : Record 461;InvoiceRounding@1007 : Boolean);
    VAR
      GLAcc@1006 : Record 15;
      TotalPrepmtInvLineBuffer@1009 : Record 461;
      TotalPrepmtInvLineBufferDummy@1008 : Record 461;
    BEGIN
      IF NOT GLSetup."GST Report" THEN
        EXIT;
      WITH PurchHeader DO BEGIN
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        PurchLine.SETRANGE("System-Created Entry",FALSE);
        IF PurchLine.FIND('-') THEN
          REPEAT
            IF PrepmtAmount(PurchLine,DocumentType) <> 0 THEN BEGIN
              IF (PurchLine."Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 (PurchLine."Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET(
                  PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
              FillInvLineBufferGST(PurchHeader,PurchLine,GLAcc,PrepmtInvBuffer3);
              InsertInvLineBufferGST(PrepmtInvBuf,PrepmtInvBuffer3);
              IF InvoiceRounding THEN
                RoundAmounts(PurchHeader,PrepmtInvBuffer3,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferDummy);
            END;
          UNTIL PurchLine.NEXT = 0;
        IF InvoiceRounding THEN
          IF InsertInvoiceRounding(
               PurchHeader,PrepmtInvBuffer3,TotalPrepmtInvLineBuffer,PurchLine."Line No.")
          THEN
            PrepmtInvBuf.InsertInvLineBuffer(PrepmtInvBuffer3);
      END;
    END;

    BEGIN
    END.
  }
}

