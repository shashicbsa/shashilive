OBJECT Codeunit 11600 ABN Management
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00;
    Version List=NAVAPAC7.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1450000@1450000 : TextConst 'ENU=You can enter only numbers in this field.;ENA=You can enter only numbers in this field.';
      Text1450001@1450001 : TextConst 'ENU=You should enter an 11-digit number in this field.;ENA=You should enter an 11-digit number in this field.';
      Text1450002@1450002 : TextConst 'ENU=The number is invalid.;ENA=The number is invalid.';
      Text1450003@1450003 : TextConst 'ENU=The number already exists for %1 %2. Do you wish to continue?;ENA=The number already exists for %1 %2. Do you wish to continue?';

    PROCEDURE CheckABN@1450000(ABN@1450000 : Text[11];Which@1450001 : 'Customer,Vendor,Internal,Contact');
    VAR
      Vendor@1450002 : Record 23;
      Customer@1450003 : Record 18;
      Contact@1450004 : Record 5050;
      CheckDigit@1450005 : Integer;
      AbnDigit@1450006 : ARRAY [11] OF Integer;
      WeightFactor@1450007 : ARRAY [11] OF Integer;
      AbnWeightSum@1450008 : Integer;
      i@1450009 : Integer;
      j@1450010 : Integer;
    BEGIN
      IF ABN = '' THEN
        EXIT;

      IF STRPOS(ABN,' ') <> 0 THEN
        ERROR(Text1450000);
      IF STRLEN(ABN) <> 11 THEN
        ERROR(Text1450001);

      j := -1;
      CheckDigit := 89;
      CLEAR(AbnDigit);
      CLEAR(WeightFactor);
      CLEAR(AbnWeightSum);

      FOR i := 1 TO 11 DO BEGIN
        IF NOT EVALUATE(AbnDigit[i],COPYSTR(ABN,i,1)) THEN
          ERROR(Text1450000);
        IF i = 1 THEN BEGIN
          AbnDigit[i] := AbnDigit[i] - 1;
          WeightFactor[i] := 10;
        END ELSE BEGIN
          j += 2;
          WeightFactor[i] := j;
        END;
        AbnWeightSum += (WeightFactor[i] * AbnDigit[i]);
      END;

      IF AbnWeightSum MOD CheckDigit <> 0 THEN
        ERROR(Text1450002);

      CASE Which OF
        Which::Vendor:
          BEGIN
            Vendor.SETCURRENTKEY(ABN);
            Vendor.SETRANGE(ABN,ABN);
            IF Vendor.FINDFIRST THEN
              IF NOT CONFIRM(Text1450003,FALSE,Vendor.TABLECAPTION,Vendor."No.") THEN
                ERROR('');
          END;
        Which::Customer:
          BEGIN
            Customer.SETCURRENTKEY(ABN);
            Customer.SETRANGE(ABN,ABN);
            IF Customer.FINDFIRST THEN
              IF NOT CONFIRM(Text1450003,FALSE,Customer.TABLECAPTION,Customer."No.") THEN
                ERROR('');
          END;
        Which::Contact:
          BEGIN
            Contact.SETCURRENTKEY(ABN,Type);
            Contact.SETRANGE(ABN,ABN);
            Contact.SETRANGE(Type,Contact.Type::Company);
            IF Contact.FINDFIRST THEN
              IF NOT CONFIRM(Text1450003,FALSE,Contact.TABLECAPTION,Contact."No.") THEN
                ERROR('');
          END;
      END;
    END;

    BEGIN
    END.
  }
}

