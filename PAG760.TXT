OBJECT Page 760 Trailing Sales Orders Chart
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Trailing Sales Orders;
               ENA=Trailing Sales Orders];
    SourceTable=Table485;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 SetActionsEnabled;
               END;

    OnFindRecord=BEGIN
                   UpdateChart;
                   IsChartDataReady := TRUE;

                   IF NOT IsChartAddInReady THEN
                     SetActionsEnabled;
                 END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;ActionGroup;
                      Name=Show;
                      CaptionML=[ENU=Show;
                                 ENA=Show];
                      Image=View }
      { 10      ;2   ;Action    ;
                      Name=AllOrders;
                      CaptionML=[ENU=All Orders;
                                 ENA=All Orders];
                      Enabled=AllOrdersEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetShowOrders(TrailingSalesOrdersSetup."Show Orders"::"All Orders");
                                 UpdateStatus;
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=OrdersUntilToday;
                      CaptionML=[ENU=Orders Until Today;
                                 ENA=Orders Until Today];
                      Enabled=OrdersUntilTodayEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetShowOrders(TrailingSalesOrdersSetup."Show Orders"::"Orders Until Today");
                                 UpdateStatus;
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=DelayedOrders;
                      CaptionML=[ENU=Delayed Orders;
                                 ENA=Delayed Orders];
                      Enabled=DelayedOrdersEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetShowOrders(TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders");
                                 UpdateStatus;
                               END;
                                }
      { 14      ;1   ;ActionGroup;
                      Name=PeriodLength;
                      CaptionML=[ENU=Period Length;
                                 ENA=Period Length];
                      Image=Period }
      { 7       ;2   ;Action    ;
                      Name=Day;
                      CaptionML=[ENU=Day;
                                 ENA=Day];
                      Enabled=DayEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Day);
                                 UpdateStatus;
                               END;
                                }
      { 8       ;2   ;Action    ;
                      Name=Week;
                      CaptionML=[ENU=Week;
                                 ENA=Week];
                      Enabled=WeekEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Week);
                                 UpdateStatus;
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Name=Month;
                      CaptionML=[ENU=Month;
                                 ENA=Month];
                      Enabled=MonthEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Month);
                                 UpdateStatus;
                               END;
                                }
      { 6       ;2   ;Action    ;
                      Name=Quarter;
                      CaptionML=[ENU=Quarter;
                                 ENA=Quarter];
                      Enabled=QuarterEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Quarter);
                                 UpdateStatus;
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name=Year;
                      CaptionML=[ENU=Year;
                                 ENA=Year];
                      Enabled=YearEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetPeriodLength(TrailingSalesOrdersSetup."Period Length"::Year);
                                 UpdateStatus;
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      Name=Options;
                      CaptionML=[ENU=Options;
                                 ENA=Options];
                      Image=SelectChart }
      { 16      ;2   ;ActionGroup;
                      Name=ValueToCalculate;
                      CaptionML=[ENU=Value to Calculate;
                                 ENA=Value to Calculate];
                      ActionContainerType=ActionItems;
                      Image=Calculate }
      { 17      ;3   ;Action    ;
                      Name=Amount;
                      CaptionML=[ENU=Amount;
                                 ENA=Amount];
                      Enabled=AmountEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetValueToCalcuate(TrailingSalesOrdersSetup."Value to Calculate"::"Amount Excl. VAT");
                                 UpdateStatus;
                               END;
                                }
      { 18      ;3   ;Action    ;
                      Name=NoofOrders;
                      CaptionML=[ENU=No. of Orders;
                                 ENA=No. of Orders];
                      Enabled=NoOfOrdersEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetValueToCalcuate(TrailingSalesOrdersSetup."Value to Calculate"::"No. of Orders");
                                 UpdateStatus;
                               END;
                                }
      { 19      ;2   ;ActionGroup;
                      CaptionML=[ENU=Chart Type;
                                 ENA=Chart Type];
                      Image=BarChart }
      { 20      ;3   ;Action    ;
                      Name=StackedArea;
                      CaptionML=[ENU=Stacked Area;
                                 ENA=Stacked Area];
                      Enabled=StackedAreaEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Area");
                                 UpdateStatus;
                               END;
                                }
      { 21      ;3   ;Action    ;
                      Name=StackedAreaPct;
                      CaptionML=[ENU=Stacked Area (%);
                                 ENA=Stacked Area (%)];
                      Enabled=StackedAreaPctEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Area (%)");
                                 UpdateStatus;
                               END;
                                }
      { 22      ;3   ;Action    ;
                      Name=StackedColumn;
                      CaptionML=[ENU=Stacked Column;
                                 ENA=Stacked Column];
                      Enabled=StackedColumnEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Column");
                                 UpdateStatus;
                               END;
                                }
      { 23      ;3   ;Action    ;
                      Name=StackedColumnPct;
                      CaptionML=[ENU=Stacked Column (%);
                                 ENA=Stacked Column (%)];
                      Enabled=StackedColumnPctEnabled;
                      OnAction=BEGIN
                                 TrailingSalesOrdersSetup.SetChartType(TrailingSalesOrdersSetup."Chart Type"::"Stacked Column (%)");
                                 UpdateStatus;
                               END;
                                }
      { 25      ;1   ;Separator  }
      { 26      ;1   ;Action    ;
                      Name=Refresh;
                      CaptionML=[ENU=Refresh;
                                 ENA=Refresh];
                      Image=Refresh;
                      OnAction=BEGIN
                                 NeedsUpdate := TRUE;
                                 UpdateStatus;
                               END;
                                }
      { 27      ;1   ;Separator  }
      { 13      ;1   ;Action    ;
                      Name=Setup;
                      CaptionML=[ENU=Setup;
                                 ENA=Setup];
                      Image=Setup;
                      OnAction=BEGIN
                                 RunSetup;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=container;
                ContainerType=ContentArea }

    { 12  ;1   ;Field     ;
                CaptionML=[ENU=Status Text;
                           ENA=Status Text];
                SourceExpr=StatusText }

    { 5   ;1   ;Field     ;
                Name=BusinessChart;
                CaptionML=[ENU=Business Chart;
                           ENA=Business Chart];
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.BusinessChart;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      TrailingSalesOrdersSetup@1002 : Record 760;
      OldTrailingSalesOrdersSetup@1005 : Record 760;
      TrailingSalesOrdersMgt@1000 : Codeunit 760;
      StatusText@1003 : Text[250];
      NeedsUpdate@1001 : Boolean;
      AllOrdersEnabled@1004 : Boolean INDATASET;
      OrdersUntilTodayEnabled@1006 : Boolean INDATASET;
      DelayedOrdersEnabled@1007 : Boolean INDATASET;
      DayEnabled@1008 : Boolean INDATASET;
      WeekEnabled@1009 : Boolean INDATASET;
      MonthEnabled@1010 : Boolean INDATASET;
      QuarterEnabled@1011 : Boolean INDATASET;
      YearEnabled@1012 : Boolean INDATASET;
      AmountEnabled@1013 : Boolean INDATASET;
      NoOfOrdersEnabled@1014 : Boolean INDATASET;
      StackedAreaEnabled@1015 : Boolean INDATASET;
      StackedAreaPctEnabled@1016 : Boolean INDATASET;
      StackedColumnEnabled@1017 : Boolean INDATASET;
      StackedColumnPctEnabled@1018 : Boolean INDATASET;
      IsChartAddInReady@1019 : Boolean;
      IsChartDataReady@1020 : Boolean;

    LOCAL PROCEDURE UpdateChart@6();
    BEGIN
      IF NOT NeedsUpdate THEN
        EXIT;
      TrailingSalesOrdersMgt.UpdateData(Rec);
      Update(CurrPage.BusinessChart);
      UpdateStatus;
      NeedsUpdate := FALSE;
    END;

    PROCEDURE UpdateStatus@8();
    BEGIN
      NeedsUpdate :=
        NeedsUpdate OR
        (OldTrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length") OR
        (OldTrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders") OR
        (OldTrailingSalesOrdersSetup."Use Work Date as Base" <> TrailingSalesOrdersSetup."Use Work Date as Base") OR
        (OldTrailingSalesOrdersSetup."Value to Calculate" <> TrailingSalesOrdersSetup."Value to Calculate") OR
        (OldTrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type");

      OldTrailingSalesOrdersSetup := TrailingSalesOrdersSetup;

      IF NeedsUpdate THEN
        StatusText := TrailingSalesOrdersSetup.GetCurrentSelectionText;

      SetActionsEnabled;
    END;

    PROCEDURE RunSetup@3();
    BEGIN
      PAGE.RUNMODAL(PAGE::"Trailing Sales Orders Setup",TrailingSalesOrdersSetup);
      TrailingSalesOrdersSetup.GET(USERID);
      UpdateStatus;
    END;

    PROCEDURE SetActionsEnabled@10();
    BEGIN
      AllOrdersEnabled := (TrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders"::"All Orders") AND
        IsChartAddInReady;
      OrdersUntilTodayEnabled :=
        (TrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders"::"Orders Until Today") AND
        IsChartAddInReady;
      DelayedOrdersEnabled := (TrailingSalesOrdersSetup."Show Orders" <> TrailingSalesOrdersSetup."Show Orders"::"Delayed Orders") AND
        IsChartAddInReady;
      DayEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Day) AND
        IsChartAddInReady;
      WeekEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Week) AND
        IsChartAddInReady;
      MonthEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Month) AND
        IsChartAddInReady;
      QuarterEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Quarter) AND
        IsChartAddInReady;
      YearEnabled := (TrailingSalesOrdersSetup."Period Length" <> TrailingSalesOrdersSetup."Period Length"::Year) AND
        IsChartAddInReady;
      AmountEnabled :=
        (TrailingSalesOrdersSetup."Value to Calculate" <> TrailingSalesOrdersSetup."Value to Calculate"::"Amount Excl. VAT") AND
        IsChartAddInReady;
      NoOfOrdersEnabled :=
        (TrailingSalesOrdersSetup."Value to Calculate" <> TrailingSalesOrdersSetup."Value to Calculate"::"No. of Orders") AND
        IsChartAddInReady;
      StackedAreaEnabled := (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Area") AND
        IsChartAddInReady;
      StackedAreaPctEnabled := (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Area (%)") AND
        IsChartAddInReady;
      StackedColumnEnabled := (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Column") AND
        IsChartAddInReady;
      StackedColumnPctEnabled :=
        (TrailingSalesOrdersSetup."Chart Type" <> TrailingSalesOrdersSetup."Chart Type"::"Stacked Column (%)") AND
        IsChartAddInReady;
    END;

    EVENT BusinessChart@-5::DataPointClicked@12(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
      SetDrillDownIndexes(point);
      TrailingSalesOrdersMgt.DrillDown(Rec);
    END;

    EVENT BusinessChart@-5::DataPointDoubleClicked@13(point@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartDataPoint");
    BEGIN
    END;

    EVENT BusinessChart@-5::AddInReady@14();
    BEGIN
      IsChartAddInReady := TRUE;
      TrailingSalesOrdersMgt.OnOpenPage(TrailingSalesOrdersSetup);
      UpdateStatus;
      IF IsChartDataReady THEN
        UpdateChart;
    END;

    BEGIN
    END.
  }
}

