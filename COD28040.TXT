OBJECT Codeunit 28040 WHTManagement
{
  OBJECT-PROPERTIES
  {
    Date=03/13/14;
    Time=12:00:00;
    Version List=NAVAPAC7.10.00.36281,UPG09R2,UPG13,UPG13R2;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd,
                TableData 45=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchInvLine@1500064 : Record 123;
      PurchCreditLine@1500063 : Record 125;
      SalesInvLine@1500062 : Record 113;
      SalesCreditLine@1500061 : Record 115;
      WHTPostingSetup@1500060 : Record 28043;
      CurrExchRate@1500059 : Record 330;
      TempVendLedgEntry@1500058 : Record 25;
      TempVendLedgEntry1@1500057 : Record 25;
      TempCustLedgEntry@1500056 : Record 21;
      TempCustLedgEntry1@1500055 : Record 21;
      WHTRevenueTypes@1500054 : Record 28042;
      SourceCodeSetup@1500053 : Record 242;
      Vendor@1500032 : Record 23;
      GLSetup@1500033 : Record 98;
      NoSeriesMgt@1500052 : Codeunit 396;
      WHTBusPostGrp@1500050 : Code[10];
      WHTProdPostGrp@1500049 : Code[10];
      WHTRevenueType@1500048 : Code[10];
      GenBusPostGrp@1500047 : Code[10];
      GenProdPostGrp@1500046 : Code[10];
      Dim1@1500045 : Code[10];
      Dim2@1500044 : Code[10];
      SourceCode@1500043 : Code[10];
      ReasonCode@1500031 : Code[10];
      ActualVendorNo@1500030 : Code[20];
      AmountVAT@1500029 : Decimal;
      Amount@1500028 : Decimal;
      AbsorbBase@1500027 : Decimal;
      CurrFactor@1500026 : Decimal;
      AppliedAmount@1500025 : Decimal;
      AppliedBase@1500066 : Decimal;
      TempRemAmt@1500022 : Decimal;
      TransType@1500021 : 'Purchase,Sale,Settlement';
      DocType@1500020 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      PayToAccType@1500019 : 'Vendor,Customer';
      BuyFromAccType@1500018 : 'Vendor,Customer';
      DocDate@1500017 : Date;
      CurrencyCode@1500016 : Code[10];
      DocNo@1500015 : Code[20];
      PayToVendCustNo@1500014 : Code[20];
      BuyFromVendCustNo@1500013 : Code[20];
      WHTReportLineNo@1500012 : Code[10];
      ExtDocNo@1500011 : Code[20];
      "Applies-toID"@1500037 : Code[20];
      PostingDate@1500010 : Date;
      UnrealizedWHT@1500009 : Boolean;
      NextWHTEntryNo@1500008 : Integer;
      TType@1500007 : 'Purchase,Sale';
      ApplyDocType@1500006 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      ApplyDocNo@1500005 : Code[20];
      TotAmt@1500004 : Decimal;
      NextEntry@1500003 : Integer;
      TempRemBase@1500001 : Decimal;
      Text1500000@1500036 : TextConst 'ENU=Currency Code should be same for Payment and Invoice.;ENA=Currency Code should be same for Payment and Invoice.';
      ExitLoop@1500034 : Boolean;
      Text1500001@1500035 : TextConst 'ENU=You cannot reprint the certificate from here. Go to reports and reprint.;ENA=You cannot reprint the certificate from here. Go to reports and reprint.';
      Text1500003@1500039 : TextConst 'ENU=The WHT posting groups are different and thus the entries cannot be apply.;ENA=The WHT posting groups are different and thus the entries cannot be apply.';
      TempGenJnlLine@1500040 : TEMPORARY Record 81;
      TempPurchInvLine@1500068 : Record 123;
      TempPurchCreditLine@1500067 : Record 125;
      TotalInvoiceAmount@1500042 : Decimal;
      TotalInvoiceAmountLCY@1500041 : Decimal;
      WHTMinInvoiceAmt@1500038 : Decimal;
      Text1500004@1500070 : TextConst 'ENU=You cannot post a transaction using different WHT minimum invoice amounts on lines.;ENA=You cannot post a transaction using different WHT minimum invoice amounts on lines.';
      AreaCode@1000000000 : Code[20];

    PROCEDURE ApplyVendInvoiceWHT@1500000(VAR VendLedgerEntry@1500001 : Record 25;VAR GenJnlLine@1500000 : Record 81) EntryNo : Integer;
    VAR
      Currency@1500002 : 'Vendor,Customer';
      RemainingAmt@1500003 : Decimal;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No." = '' THEN BEGIN
          IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
            Vendor.GET(GenJnlLine."Account No.");
            IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
              EXIT;
          END;
        END ELSE BEGIN
          Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END;

      TempVendLedgEntry1.RESET;
      SetVendAppliesToFilter(TempVendLedgEntry1,GenJnlLine);
      IF TempVendLedgEntry1.FINDSET(TRUE,FALSE) THEN
        REPEAT
          TempVendLedgEntry1.CALCFIELDS(
            Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
            "Original Amount","Original Amt. (LCY)");
          IF TempVendLedgEntry1."Rem. Amt for WHT" = 0 THEN
            TempVendLedgEntry1."Rem. Amt for WHT" := TempVendLedgEntry1."Remaining Amount";
          RemainingAmt := RemainingAmt + TempVendLedgEntry1."Rem. Amt for WHT";
          IF TempVendLedgEntry1."Document Type" = TempVendLedgEntry1."Document Type"::"Credit Memo" THEN
            RemainingAmt := RemainingAmt + TempVendLedgEntry1."Rem. Amt for WHT";
        UNTIL TempVendLedgEntry1.NEXT = 0;
      TotAmt := ABS(GenJnlLine.Amount);

      TempVendLedgEntry.RESET;
      SetVendAppliesToFilter(TempVendLedgEntry,GenJnlLine);
      TempVendLedgEntry.SETRANGE("Document Type",TempVendLedgEntry."Document Type"::"Credit Memo");
      IF TempVendLedgEntry.FINDSET THEN
        REPEAT
          TempVendLedgEntry.CALCFIELDS(
            Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
            "Original Amount","Original Amt. (LCY)");
          IF CheckPmtDisc(
               GenJnlLine."Posting Date",TempVendLedgEntry."Pmt. Discount Date",
               ABS(TempVendLedgEntry."Rem. Amt for WHT"),
               ABS(TempVendLedgEntry."Rem. Amt"),
               ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
               ABS(TotAmt))
          THEN
            TotAmt := TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible";

          IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
             (ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
          THEN BEGIN
            IF CheckPmtDisc(GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                 ABS(TempVendLedgEntry."Rem. Amt"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN BEGIN
              GenJnlLine.VALIDATE(
                Amount,
                -ABS(TempVendLedgEntry."Rem. Amt for WHT" - TempVendLedgEntry."Original Pmt. Disc. Possible"));
              RemainingAmt :=
                RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT" - TempVendLedgEntry."Original Pmt. Disc. Possible";
            END ELSE BEGIN
              GenJnlLine.VALIDATE(Amount,-ABS(TempVendLedgEntry."Rem. Amt for WHT"));
              IF TempVendLedgEntry."Document Type" <>
                 TempVendLedgEntry."Document Type"::"Credit Memo"
              THEN
                TotAmt := TotAmt - TempVendLedgEntry."Rem. Amt for WHT";
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
            END;
          END ELSE BEGIN
            IF CheckPmtDisc(GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                 ABS(TempVendLedgEntry."Rem. Amt"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              GenJnlLine.VALIDATE(Amount,-TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
            ELSE
              GenJnlLine.VALIDATE(Amount,-TotAmt);
            ExitLoop := TRUE;
          END;
          IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
            GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
          ELSE BEGIN
            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
            RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
            TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
            ExitLoop := FALSE;
          END;
          GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
          NextEntry :=
            ProcessPayment(
              GenJnlLine,VendLedgerEntry."Transaction No.",VendLedgerEntry."Entry No.",Currency::Vendor,FALSE);

          IF ExitLoop THEN
            EXIT(NextEntry);
        UNTIL TempVendLedgEntry.NEXT = 0;
      ExitLoop := FALSE;
      TempVendLedgEntry.RESET;
      SetVendAppliesToFilter(TempVendLedgEntry,GenJnlLine);
      TempVendLedgEntry.SETFILTER("Document Type",'<>%1',TempVendLedgEntry."Document Type"::"Credit Memo");
      IF TempVendLedgEntry.FINDSET THEN
        REPEAT
          TempVendLedgEntry.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount",
            "Original Amt. (LCY)");
          IF TempVendLedgEntry."Remaining Amount" = 0 THEN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                 ABS(TempVendLedgEntry."Rem. Amt"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

          IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
             (ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
          THEN BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                 ABS(TempVendLedgEntry."Rem. Amt"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN BEGIN
              IF (ABS(TotAmt) < ABS(TempVendLedgEntry."Rem. Amt for WHT")) OR (TempVendLedgEntry."Rem. Amt for WHT" = 0) THEN
                GenJnlLine.VALIDATE(Amount,TotAmt)
              ELSE
                GenJnlLine.VALIDATE(
                  Amount,
                  ABS(TempVendLedgEntry."Rem. Amt for WHT" - TempVendLedgEntry."Original Pmt. Disc. Possible"));

              IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
              RemainingAmt :=
                RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT" + TempVendLedgEntry."Original Pmt. Disc. Possible";
            END ELSE BEGIN
              GenJnlLine.VALIDATE(Amount,ABS(TempVendLedgEntry."Rem. Amt for WHT"));
              IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
            END;
          END ELSE BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                 ABS(TempVendLedgEntry."Rem. Amt"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              GenJnlLine.VALIDATE(Amount,TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
            ELSE
              GenJnlLine.VALIDATE(Amount,TotAmt);
            ExitLoop := TRUE;
          END;

          IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
            GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
          ELSE BEGIN
            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
            RemainingAmt := RemainingAmt + TempVendLedgEntry."Rem. Amt for WHT";
            TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
            ExitLoop := FALSE;
          END;

          GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
          NextEntry :=
            ProcessPayment(
              GenJnlLine,VendLedgerEntry."Transaction No.",VendLedgerEntry."Entry No.",Currency::Vendor,FALSE);

          IF ExitLoop THEN
            EXIT(NextEntry);
        UNTIL TempVendLedgEntry.NEXT = 0;
      EXIT(NextEntry);
    END;

    LOCAL PROCEDURE SetVendAppliesToFilter@150001(VAR VendLedgEntry@150000 : Record 25;GenJnlLine@150001 : Record 81);
    BEGIN
      IF GenJnlLine."Applies-to ID" <> '' THEN
        VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
      ELSE BEGIN
        VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      END;
    END;

    PROCEDURE ApplyCustInvoiceWHT@1500001(VAR CustLedgerEntry@1500001 : Record 21;VAR GenJnlLine@1500000 : Record 81) EntryNo : Integer;
    VAR
      Currency@1500002 : 'Vendor,Customer';
      RemainingAmt@1500003 : Decimal;
    BEGIN
      TotAmt := ABS(GenJnlLine.Amount);
      TempCustLedgEntry1.RESET;
      SetCustAppliesToFilter(TempCustLedgEntry1,GenJnlLine);
      IF TempCustLedgEntry1.FINDSET(TRUE,FALSE) THEN
        REPEAT
          TempCustLedgEntry1.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount",
            "Original Amt. (LCY)");
          IF TempCustLedgEntry1."Rem. Amt for WHT" = 0 THEN
            TempCustLedgEntry1."Rem. Amt for WHT" := TempCustLedgEntry1."Remaining Amount";
          RemainingAmt := RemainingAmt + TempCustLedgEntry1."Rem. Amt for WHT";
          IF TempCustLedgEntry1."Document Type" = TempCustLedgEntry1."Document Type"::"Credit Memo" THEN
            RemainingAmt := RemainingAmt + TempCustLedgEntry1."Rem. Amt for WHT";
        UNTIL TempCustLedgEntry1.NEXT = 0;

      TempCustLedgEntry.RESET;
      SetCustAppliesToFilter(TempCustLedgEntry,GenJnlLine);
      TempCustLedgEntry.SETRANGE("Document Type",TempCustLedgEntry."Document Type"::"Credit Memo");
      IF TempCustLedgEntry.FINDSET THEN
        REPEAT
          TempCustLedgEntry.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount",
            "Original Amt. (LCY)");
          IF CheckPmtDisc(
               GenJnlLine."Posting Date",
               TempCustLedgEntry."Pmt. Discount Date",
               ABS(TempCustLedgEntry."Rem. Amt for WHT"),
               ABS(TempCustLedgEntry."Rem. Amt"),
               ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
               ABS(TotAmt))
          THEN
            TotAmt := TotAmt + ABS(TempCustLedgEntry."Original Pmt. Disc. Possible");
          IF (ABS(RemainingAmt) <= ABS(TotAmt)) OR
             (ABS(TempCustLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
          THEN BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Rem. Amt for WHT"),
                 ABS(TempCustLedgEntry."Rem. Amt"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN BEGIN
              GenJnlLine.VALIDATE(
                Amount,
                ABS(TempCustLedgEntry."Rem. Amt for WHT" - TempCustLedgEntry."Original Pmt. Disc. Possible"));
              IF TempCustLedgEntry."Document Type" <> TempCustLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := -(TotAmt - TempCustLedgEntry."Rem. Amt for WHT");
              RemainingAmt :=
                RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT" + TempCustLedgEntry."Original Pmt. Disc. Possible";
            END ELSE BEGIN
              GenJnlLine.VALIDATE(Amount,ABS(TempCustLedgEntry."Rem. Amt for WHT"));
              IF TempCustLedgEntry."Document Type" <> TempCustLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := -(TotAmt - TempCustLedgEntry."Rem. Amt for WHT");
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
            END;
          END ELSE BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Rem. Amt for WHT"),
                 ABS(TempCustLedgEntry."Rem. Amt"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              GenJnlLine.VALIDATE(Amount,ABS(TotAmt - ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
            ELSE
              GenJnlLine.VALIDATE(Amount,ABS(TotAmt));
            ExitLoop := TRUE;
          END;
          IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Invoice THEN
            GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
          ELSE
            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
              TotAmt := TotAmt - TempCustLedgEntry."Rem. Amt for WHT";
              ExitLoop := FALSE;
            END;
          GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
          NextEntry :=
            ProcessPayment(
              GenJnlLine,CustLedgerEntry."Transaction No.",CustLedgerEntry."Entry No.",Currency::Customer,FALSE);
          IF ExitLoop THEN
            EXIT(NextEntry);
        UNTIL TempCustLedgEntry.NEXT = 0;

      ExitLoop := FALSE;
      TempCustLedgEntry.RESET;
      SetCustAppliesToFilter(TempCustLedgEntry,GenJnlLine);
      TempCustLedgEntry.SETFILTER("Document Type",'<>%1',TempCustLedgEntry."Document Type"::"Credit Memo");
      IF TempCustLedgEntry.FINDSET THEN
        REPEAT
          TempCustLedgEntry.CALCFIELDS(
            Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)","Original Amount","Original Amt. (LCY)");
          IF CheckPmtDisc(
               GenJnlLine."Posting Date",
               TempCustLedgEntry."Pmt. Discount Date",
               ABS(TempCustLedgEntry."Rem. Amt for WHT"),
               ABS(TempCustLedgEntry."Rem. Amt"),
               ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
               ABS(TotAmt))
          THEN
            TotAmt := TotAmt + ABS(TempCustLedgEntry."Original Pmt. Disc. Possible");
          IF (ABS(RemainingAmt) <= ABS(TotAmt)) OR
             (ABS(TempCustLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
          THEN BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Rem. Amt for WHT"),
                 ABS(TempCustLedgEntry."Rem. Amt"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN BEGIN
              RemainingAmt :=
                RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT" + TempCustLedgEntry."Original Pmt. Disc. Possible";
              GenJnlLine.VALIDATE(
                Amount,-ABS(TempCustLedgEntry."Rem. Amt for WHT" - TempCustLedgEntry."Original Pmt. Disc. Possible"));
              IF TempCustLedgEntry."Document Type" <> TempCustLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := (TotAmt - TempCustLedgEntry."Rem. Amt for WHT")
            END ELSE BEGIN
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
              GenJnlLine.VALIDATE(Amount,-ABS(TempCustLedgEntry."Rem. Amt for WHT"));
              IF TempCustLedgEntry."Document Type" <> TempCustLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := (TotAmt - TempCustLedgEntry."Rem. Amt for WHT");
            END;
          END ELSE BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Rem. Amt for WHT"),
                 ABS(TempCustLedgEntry."Rem. Amt"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              GenJnlLine.VALIDATE(Amount,-ABS(TotAmt - TempCustLedgEntry."Original Pmt. Disc. Possible"))
            ELSE
              GenJnlLine.VALIDATE(Amount,-ABS(TotAmt));
            ExitLoop := TRUE;
          END;
          IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Invoice THEN
            GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
          ELSE
            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
              TotAmt := TotAmt - TempCustLedgEntry."Rem. Amt for WHT";
              ExitLoop := FALSE;
            END;
          GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
          NextEntry :=
            ProcessPayment(
              GenJnlLine,CustLedgerEntry."Transaction No.",CustLedgerEntry."Entry No.",Currency::Customer,FALSE);
          IF ExitLoop THEN
            EXIT(NextEntry);
        UNTIL TempCustLedgEntry.NEXT = 0;
      EXIT(NextEntry);
    END;

    LOCAL PROCEDURE SetCustAppliesToFilter@150003(VAR CustLedgEntry@150000 : Record 21;GenJnlLine@150001 : Record 81);
    BEGIN
      IF GenJnlLine."Applies-to ID" <> '' THEN
        CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
      ELSE BEGIN
        CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      END;
    END;

    PROCEDURE ApplyManualCustInvoiceWHT@1500002(VAR CustLedgerEntry@1500001 : Record 21;VAR GenJnlLine@1500000 : Record 81) NextEntry : Integer;
    VAR
      WHTEntry@1500003 : Record 28044;
      Currency@1500002 : 'Vendor,Customer';
    BEGIN
      TempCustLedgEntry.RESET;
      TotAmt := ABS(GenJnlLine.Amount);
      IF GenJnlLine."Applies-to Doc. No." = '' THEN BEGIN
        TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        TempCustLedgEntry.SETRANGE("Document Type",TempCustLedgEntry."Document Type"::"Credit Memo");
        IF TempCustLedgEntry.FINDSET THEN
          REPEAT
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document No.",TempCustLedgEntry."Document No.");
            WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
            IF WHTEntry.FINDSET THEN
              REPEAT
                GenJnlLine.VALIDATE(Amount,WHTEntry."Remaining Unrealized Amount");
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
                GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
                TotAmt := TotAmt - WHTEntry."Remaining Unrealized Amount";
              UNTIL WHTEntry.NEXT = 0;
            CustLedgerEntry."Applies-to ID" := '';
            CustLedgerEntry.MODIFY;
          UNTIL TempCustLedgEntry.NEXT = 0;

        TempCustLedgEntry.RESET;
        TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        TempCustLedgEntry.SETFILTER("Document Type",'<>%1',TempCustLedgEntry."Document Type"::"Credit Memo");
        IF TempCustLedgEntry.FINDSET THEN
          REPEAT
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document No.",TempCustLedgEntry."Document No.");
            WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);
            IF WHTEntry.FINDSET THEN
              REPEAT
                IF TotAmt > ABS(WHTEntry."Remaining Unrealized Amount") THEN BEGIN
                  GenJnlLine.VALIDATE(Amount,WHTEntry."Remaining Unrealized Amount");
                  GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice;
                  GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
                  TotAmt := TotAmt - ABS(WHTEntry."Remaining Unrealized Amount");
                  ExitLoop := FALSE;
                END ELSE BEGIN
                  GenJnlLine.VALIDATE(Amount,-TotAmt);
                  GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice;
                  GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
                  ExitLoop := TRUE;
                END;
              UNTIL WHTEntry.NEXT = 0;
            NextEntry :=
              ProcessManualReceipt(
                GenJnlLine,CustLedgerEntry."Transaction No.",CustLedgerEntry."Entry No.",Currency::Customer);
            CustLedgerEntry."Applies-to ID" := '';
            CustLedgerEntry.MODIFY;
            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempCustLedgEntry.NEXT = 0;
      END ELSE
        NextEntry :=
          ProcessManualReceipt(
            GenJnlLine,CustLedgerEntry."Transaction No.",CustLedgerEntry."Entry No.",Currency::Customer);
    END;

    PROCEDURE InsertVendInvoiceWHT@1500003(VAR PurchInvHeader@1500000 : Record 122);
    VAR
      TempPurchLine@1500003 : Record 39;
      PrepaymentAmtDeducted@1500002 : Decimal;
    BEGIN
      WITH PurchInvHeader DO BEGIN
        PurchInvLine.RESET;
        PurchInvLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        PurchInvLine.SETRANGE("Document No.","No.");
        PurchInvLine.SETFILTER(Quantity,'<>0');
        IF PurchInvLine.FINDSET THEN BEGIN
          WHTBusPostGrp := PurchInvLine."WHT Business Posting Group";
          WHTProdPostGrp := PurchInvLine."WHT Product Posting Group";
          IF WHTPostingSetup.GET(PurchInvLine."WHT Business Posting Group",PurchInvLine."WHT Product Posting Group") THEN
            WHTMinInvoiceAmt := WHTPostingSetup."WHT Minimum Invoice Amount";
          REPEAT
            IF WHTPostingSetup.GET(PurchInvLine."WHT Business Posting Group",PurchInvLine."WHT Product Posting Group") THEN BEGIN
              IF (WHTBusPostGrp <> PurchInvLine."WHT Business Posting Group") OR
                 (WHTProdPostGrp <> PurchInvLine."WHT Product Posting Group")
              THEN BEGIN
                IF WHTMinInvoiceAmt <> WHTPostingSetup."WHT Minimum Invoice Amount" THEN
                  ERROR(Text1500004);
              END;
              WHTBusPostGrp := PurchInvLine."WHT Business Posting Group";
              WHTProdPostGrp := PurchInvLine."WHT Product Posting Group";
            END;
          UNTIL PurchInvLine.NEXT = 0;
        END;
      END;

      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN BEGIN
        Vendor.GET(PurchInvHeader."Pay-to Vendor No.");
        IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
          EXIT;
        TotalInvoiceAmount := 0;
        TotalInvoiceAmountLCY := 0;
        TempPurchInvLine.RESET;
        TempPurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
        TempPurchInvLine.SETFILTER(Quantity,'<>0');
        IF TempPurchInvLine.FINDSET THEN
          REPEAT
            IF WHTPostingSetup.GET(
                 TempPurchInvLine."WHT Business Posting Group",
                 TempPurchInvLine."WHT Product Posting Group")
            THEN
              IF TempPurchInvLine."WHT Absorb Base" <> 0 THEN
                TotalInvoiceAmount := TotalInvoiceAmount + TempPurchInvLine."WHT Absorb Base"
              ELSE
                TotalInvoiceAmount := TotalInvoiceAmount + TempPurchInvLine.Amount
          UNTIL TempPurchInvLine.NEXT = 0;

        IF PurchInvHeader."Currency Code" = '' THEN
          TotalInvoiceAmountLCY := TotalInvoiceAmount
        ELSE
          TotalInvoiceAmountLCY :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                PurchInvHeader."Document Date",
                PurchInvHeader."Currency Code",
                TotalInvoiceAmount,
                PurchInvHeader."Currency Factor"));

        IF CheckWHTCalculationRule(TotalInvoiceAmountLCY,WHTPostingSetup) THEN
          EXIT;
      END;

      WITH PurchInvHeader DO BEGIN
        PurchInvLine.RESET;
        PurchInvLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        PurchInvLine.SETRANGE("Document No.","No.");
        PurchInvLine.SETFILTER(Quantity,'<>0');
        PurchInvLine.SETRANGE("Prepayment Line",FALSE);
        IF PurchInvLine.FINDSET THEN
          REPEAT
            IF WHTPostingSetup.GET(PurchInvLine."WHT Business Posting Group",PurchInvLine."WHT Product Posting Group") THEN
              IF WHTPostingSetup."WHT %" > 0 THEN BEGIN
                DocNo := PurchInvLine."Document No.";
                DocType := DocType::Invoice;
                PayToAccType := PayToAccType::Vendor;
                PayToVendCustNo := "Pay-to Vendor No.";
                BuyFromAccType := BuyFromAccType::Vendor;
                GenBusPostGrp := PurchInvLine."Gen. Bus. Posting Group";
                GenProdPostGrp := PurchInvLine."Gen. Prod. Posting Group";
                TransType := TransType::Purchase;
                BuyFromVendCustNo := "Actual Vendor No.";
                PostingDate := "Posting Date";
                DocDate := "Document Date";
                CurrencyCode := "Currency Code";
                CurrFactor := "Currency Factor";
                ApplyDocType := "Applies-to Doc. Type";
                ApplyDocNo := "Applies-to Doc. No.";
                SourceCode := "Source Code";
                ReasonCode := "Reason Code";
      // UPG09R2.begin
      //YIMMNWHTR
                AreaCode := PurchInvLine."Area Code";
      //YIMMNWHTR
      // UPG09R2.end
                IF (WHTBusPostGrp <> PurchInvLine."WHT Business Posting Group") OR
                   (WHTProdPostGrp <> PurchInvLine."WHT Product Posting Group")
                THEN BEGIN
                  IF AmountVAT <> 0 THEN BEGIN
                    IF WHTPostingSetup."Realized WHT Type" IN
                       [WHTPostingSetup."Realized WHT Type"::Earliest,
                        WHTPostingSetup."Realized WHT Type"::Invoice]
                    THEN BEGIN
                      TempPurchLine.RESET;
                      TempPurchLine.SETCURRENTKEY("Document Type","Document No.",
                        "WHT Business Posting Group","WHT Product Posting Group");
                      TempPurchLine.SETRANGE("Document Type",TempPurchLine."Document Type"::Order);
                      TempPurchLine.SETRANGE("Document No.","Order No.");
                      TempPurchLine.SETRANGE("WHT Business Posting Group",WHTBusPostGrp);
                      TempPurchLine.SETRANGE("WHT Product Posting Group",WHTProdPostGrp);
                      TempPurchLine.CALCSUMS(TempPurchLine."Prepmt. Amt. Inv.",TempPurchLine."Prepmt Amt to Deduct");
                      PrepaymentAmtDeducted := TempPurchLine."Prepmt Amt to Deduct";
                      AmountVAT := AmountVAT - PrepaymentAmtDeducted;
                    END;
                    InsertWHT(TType::Purchase);
                  END;
                  WHTBusPostGrp := PurchInvLine."WHT Business Posting Group";
                  WHTProdPostGrp := PurchInvLine."WHT Product Posting Group";
                  Amount := 0;
                  AbsorbBase := 0;
                  AmountVAT := 0;
                  Amount := Amount + PurchInvLine.Amount;
                  AbsorbBase := AbsorbBase + PurchInvLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := AbsorbBase
                  ELSE
                    AmountVAT := Amount;
                END ELSE BEGIN
                  WHTBusPostGrp := PurchInvLine."WHT Business Posting Group";
                  WHTProdPostGrp := PurchInvLine."WHT Product Posting Group";
                  Amount := Amount + PurchInvLine.Amount;
                  AbsorbBase := AbsorbBase + PurchInvLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := AbsorbBase
                  ELSE
                    AmountVAT := Amount;
                END;
                WHTBusPostGrp := PurchInvLine."WHT Business Posting Group";
                WHTProdPostGrp := PurchInvLine."WHT Product Posting Group";
              END;
          UNTIL PurchInvLine.NEXT = 0;

        IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
          TempPurchLine.RESET;
          TempPurchLine.SETCURRENTKEY("Document Type","Document No.","WHT Business Posting Group","WHT Product Posting Group");
          TempPurchLine.SETRANGE("Document Type",TempPurchLine."Document Type"::Order);
          TempPurchLine.SETRANGE("Document No.","Order No.");
          TempPurchLine.SETRANGE("WHT Business Posting Group",WHTBusPostGrp);
          TempPurchLine.SETRANGE("WHT Product Posting Group",WHTProdPostGrp);
          TempPurchLine.CALCSUMS(TempPurchLine."Prepmt. Amt. Inv.",TempPurchLine."Prepmt Amt to Deduct");
          PrepaymentAmtDeducted := TempPurchLine."Prepmt Amt to Deduct";
          IF AmountVAT <> 0 THEN
            AmountVAT := AmountVAT - PrepaymentAmtDeducted;
        END;
        InsertWHT(TType::Purchase);
      END;
    END;

    PROCEDURE InsertVendCreditWHT@1500004(VAR PurchCreditHeader@1500001 : Record 124;AppliesID@1500002 : Code[20]);
    VAR
      WHTEntry@1500000 : Record 28044;
    BEGIN
      WITH PurchCreditHeader DO BEGIN
        PurchCreditLine.RESET;
        PurchCreditLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        PurchCreditLine.SETRANGE("Document No.","No.");
        PurchCreditLine.SETFILTER(Quantity,'<>0');
        IF PurchCreditLine.FINDSET THEN BEGIN
          WHTBusPostGrp := PurchCreditLine."WHT Business Posting Group";
          WHTProdPostGrp := PurchCreditLine."WHT Product Posting Group";
          IF WHTPostingSetup.GET(PurchCreditLine."WHT Business Posting Group",PurchCreditLine."WHT Product Posting Group") THEN
            WHTMinInvoiceAmt := WHTPostingSetup."WHT Minimum Invoice Amount";
          REPEAT
            IF WHTPostingSetup.GET(PurchCreditLine."WHT Business Posting Group",PurchCreditLine."WHT Product Posting Group") THEN BEGIN
              IF (WHTBusPostGrp <> PurchCreditLine."WHT Business Posting Group") OR
                 (WHTProdPostGrp <> PurchCreditLine."WHT Product Posting Group")
              THEN BEGIN
                IF WHTMinInvoiceAmt <> WHTPostingSetup."WHT Minimum Invoice Amount" THEN
                  ERROR(Text1500004);
              END;
              WHTBusPostGrp := PurchCreditLine."WHT Business Posting Group";
              WHTProdPostGrp := PurchCreditLine."WHT Product Posting Group";
            END;
          UNTIL PurchCreditLine.NEXT = 0;
        END;
      END;

      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN BEGIN
        Vendor.GET(PurchCreditHeader."Pay-to Vendor No.");
        IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
          EXIT;
        TotalInvoiceAmount := 0;
        TotalInvoiceAmountLCY := 0;
        TempPurchCreditLine.RESET;
        TempPurchCreditLine.SETRANGE("Document No.",PurchCreditHeader."No.");
        TempPurchCreditLine.SETFILTER(Quantity,'<>0');
        IF TempPurchCreditLine.FINDSET THEN
          REPEAT
            IF WHTPostingSetup.GET(
                 TempPurchCreditLine."WHT Business Posting Group",
                 TempPurchCreditLine."WHT Product Posting Group")
            THEN
              IF TempPurchCreditLine."WHT Absorb Base" <> 0 THEN
                TotalInvoiceAmount := TotalInvoiceAmount + TempPurchCreditLine."WHT Absorb Base"
              ELSE
                TotalInvoiceAmount := TotalInvoiceAmount + TempPurchCreditLine.Amount;
          UNTIL TempPurchCreditLine.NEXT = 0;

        IF PurchCreditHeader."Currency Code" = '' THEN
          TotalInvoiceAmountLCY := TotalInvoiceAmount
        ELSE
          TotalInvoiceAmountLCY :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                PurchCreditHeader."Document Date",
                PurchCreditHeader."Currency Code",
                TotalInvoiceAmount,
                PurchCreditHeader."Currency Factor"));

        TempVendLedgEntry.RESET;
        IF ((PurchCreditHeader."Applies-to Doc. Type" = PurchCreditHeader."Applies-to Doc. Type"::Invoice) AND
            (PurchCreditHeader."Applies-to Doc. No." <> ''))
        THEN
          TempVendLedgEntry.SETRANGE("Document No.",PurchCreditHeader."Applies-to Doc. No.")
        ELSE
          IF AppliesID <> '' THEN
            TempVendLedgEntry.SETRANGE("Applies-to ID",AppliesID);

        IF TempVendLedgEntry.GETFILTERS <> '' THEN BEGIN
          IF TempVendLedgEntry.FINDSET THEN BEGIN
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
            WHTEntry.SETRANGE("Document No.",TempVendLedgEntry."Document No.");
            IF NOT WHTEntry.FINDFIRST THEN
              IF CheckWHTCalculationRule(TotalInvoiceAmountLCY,WHTPostingSetup) THEN
                EXIT;
          END;
        END ELSE
          IF CheckWHTCalculationRule(TotalInvoiceAmountLCY,WHTPostingSetup) THEN
            EXIT;
      END;

      WITH PurchCreditHeader DO BEGIN
        PurchCreditLine.RESET;
        PurchCreditLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        PurchCreditLine.SETRANGE("Document No.","No.");
        PurchCreditLine.SETFILTER(Quantity,'<>0');
        IF PurchCreditLine.FINDSET THEN
          REPEAT
            IF WHTPostingSetup.GET(PurchCreditLine."WHT Business Posting Group",PurchCreditLine."WHT Product Posting Group") THEN
              IF WHTPostingSetup."WHT %" > 0 THEN BEGIN
                DocNo := PurchCreditLine."Document No.";
                DocType := DocType::"Credit Memo";
                PayToAccType := PayToAccType::Vendor;
                PayToVendCustNo := "Pay-to Vendor No.";
                BuyFromAccType := BuyFromAccType::Vendor;
                GenBusPostGrp := PurchCreditLine."Gen. Bus. Posting Group";
                GenProdPostGrp := PurchCreditLine."Gen. Prod. Posting Group";
                TransType := TransType::Purchase;
                BuyFromVendCustNo := "Actual Vendor No.";
                PostingDate := "Posting Date";
                DocDate := "Document Date";
                CurrencyCode := "Currency Code";
                CurrFactor := "Currency Factor";
                ApplyDocType := "Applies-to Doc. Type";
                ApplyDocNo := "Applies-to Doc. No.";
                "Applies-toID" := AppliesID;
                SourceCode := "Source Code";
                ReasonCode := "Reason Code";

      // UPG09R2.begin
      //YIMMNWHTR
                AreaCode:=PurchCreditLine."Area Code";

      //YIMMNWHTR
      // UPG09R2.end

                IF (WHTBusPostGrp <> PurchCreditLine."WHT Business Posting Group") OR
                   (WHTProdPostGrp <> PurchCreditLine."WHT Product Posting Group")
                THEN BEGIN
                  IF AmountVAT <> 0 THEN
                    InsertWHT(TType::Purchase);
                  WHTBusPostGrp := PurchCreditLine."WHT Business Posting Group";
                  WHTProdPostGrp := PurchCreditLine."WHT Product Posting Group";
                  Amount := 0;
                  AbsorbBase := 0;
                  AmountVAT := 0;
                  Amount := Amount + PurchCreditLine.Amount;
                  AbsorbBase := AbsorbBase + PurchCreditLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := -AbsorbBase
                  ELSE
                    AmountVAT := -Amount;
                END ELSE BEGIN
                  WHTBusPostGrp := PurchCreditLine."WHT Business Posting Group";
                  WHTProdPostGrp := PurchCreditLine."WHT Product Posting Group";
                  Amount := Amount + PurchCreditLine.Amount;
                  AbsorbBase := AbsorbBase + PurchCreditLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := -AbsorbBase
                  ELSE
                    AmountVAT := -Amount;
                END;
                WHTBusPostGrp := PurchCreditLine."WHT Business Posting Group";
                WHTProdPostGrp := PurchCreditLine."WHT Product Posting Group";
              END;
          UNTIL PurchCreditLine.NEXT = 0;
        InsertWHT(TType::Purchase);
      END;
    END;

    PROCEDURE InsertCustInvoiceWHT@1500005(VAR SalesInvHeader@1500000 : Record 112);
    BEGIN
      WITH SalesInvHeader DO BEGIN
        SalesInvLine.RESET;
        SalesInvLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        SalesInvLine.SETRANGE("Document No.","No.");
        SalesInvLine.SETFILTER(Quantity,'<>0');
        IF SalesInvLine.FINDSET THEN BEGIN
          WHTBusPostGrp := SalesInvLine."WHT Business Posting Group";
          WHTProdPostGrp := SalesInvLine."WHT Product Posting Group";
          IF WHTPostingSetup.GET(SalesInvLine."WHT Business Posting Group",SalesInvLine."WHT Product Posting Group") THEN
            WHTMinInvoiceAmt := WHTPostingSetup."WHT Minimum Invoice Amount";
          REPEAT
            IF WHTPostingSetup.GET(SalesInvLine."WHT Business Posting Group",SalesInvLine."WHT Product Posting Group") THEN BEGIN
              IF (WHTBusPostGrp <> SalesInvLine."WHT Business Posting Group") OR
                 (WHTProdPostGrp <> SalesInvLine."WHT Product Posting Group")
              THEN BEGIN
                IF WHTMinInvoiceAmt <> WHTPostingSetup."WHT Minimum Invoice Amount" THEN
                  ERROR(Text1500004);
              END;
              WHTBusPostGrp := SalesInvLine."WHT Business Posting Group";
              WHTProdPostGrp := SalesInvLine."WHT Product Posting Group";
            END;
          UNTIL SalesInvLine.NEXT = 0;
        END;
      END;

      WITH SalesInvHeader DO BEGIN
        SalesInvLine.RESET;
        SalesInvLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        SalesInvLine.SETRANGE("Document No.","No.");
        SalesInvLine.SETFILTER(Quantity,'<>0');
        SalesInvLine.SETRANGE("Prepayment Line",FALSE);
        IF SalesInvLine.FINDSET THEN
          REPEAT
            IF WHTPostingSetup.GET(SalesInvLine."WHT Business Posting Group",SalesInvLine."WHT Product Posting Group") THEN
              IF WHTPostingSetup."WHT %" > 0 THEN BEGIN
                DocNo := SalesInvLine."Document No.";
                DocType := DocType::Invoice;
                PayToAccType := PayToAccType::Customer;
                PayToVendCustNo := "Bill-to Customer No.";
                BuyFromAccType := BuyFromAccType::Customer;
                BuyFromVendCustNo := "Sell-to Customer No.";
                SourceCode := "Source Code";
                ReasonCode := "Reason Code";
                GenBusPostGrp := SalesInvLine."Gen. Bus. Posting Group";
                GenProdPostGrp := SalesInvLine."Gen. Prod. Posting Group";
                TransType := TransType::Sale;
                PostingDate := "Posting Date";
                DocDate := "Document Date";
                CurrencyCode := "Currency Code";
                CurrFactor := "Currency Factor";
                ApplyDocType := "Applies-to Doc. Type";
                ApplyDocNo := "Applies-to Doc. No.";

      // UPG09R2.begin
      //YIMMNWHTR
                AreaCode:=SalesInvLine."Area Code";
      //YIMMNWHTR
      // UPG09R2.end

                IF (WHTBusPostGrp <> SalesInvLine."WHT Business Posting Group") OR
                   (WHTProdPostGrp <> SalesInvLine."WHT Product Posting Group")
                THEN BEGIN
                  IF AmountVAT <> 0 THEN
                    InsertWHT(TType::Sale);
                  WHTBusPostGrp := SalesInvLine."WHT Business Posting Group";
                  WHTProdPostGrp := SalesInvLine."WHT Product Posting Group";
                  Amount := 0;
                  AbsorbBase := 0;
                  AmountVAT := 0;
                  Amount := Amount - SalesInvLine.Amount;
                  AbsorbBase := AbsorbBase - SalesInvLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := AbsorbBase
                  ELSE
                    AmountVAT := Amount;
                END ELSE BEGIN
                  WHTBusPostGrp := SalesInvLine."WHT Business Posting Group";
                  WHTProdPostGrp := SalesInvLine."WHT Product Posting Group";
                  Amount := Amount - SalesInvLine.Amount;
                  AbsorbBase := AbsorbBase - SalesInvLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := AbsorbBase
                  ELSE
                    AmountVAT := Amount;
                END;
                WHTBusPostGrp := SalesInvLine."WHT Business Posting Group";
                WHTProdPostGrp := SalesInvLine."WHT Product Posting Group";
              END;
          UNTIL SalesInvLine.NEXT = 0;
        InsertWHT(TType::Sale);
      END;
    END;

    PROCEDURE InsertCustCreditWHT@1500006(VAR SalesCreditHeader@1500001 : Record 114;AppliesID@1500002 : Code[20]);
    BEGIN
      WITH SalesCreditHeader DO BEGIN
        SalesCreditLine.RESET;
        SalesCreditLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        SalesCreditLine.SETRANGE("Document No.","No.");
        SalesCreditLine.SETFILTER(Quantity,'<>0');
        IF SalesCreditLine.FINDSET THEN BEGIN
          WHTBusPostGrp := SalesCreditLine."WHT Business Posting Group";
          WHTProdPostGrp := SalesCreditLine."WHT Product Posting Group";
          IF WHTPostingSetup.GET(SalesCreditLine."WHT Business Posting Group",SalesCreditLine."WHT Product Posting Group") THEN
            WHTMinInvoiceAmt := WHTPostingSetup."WHT Minimum Invoice Amount";
          REPEAT
            IF WHTPostingSetup.GET(SalesCreditLine."WHT Business Posting Group",SalesCreditLine."WHT Product Posting Group") THEN BEGIN
              IF (WHTBusPostGrp <> SalesCreditLine."WHT Business Posting Group") OR
                 (WHTProdPostGrp <> SalesCreditLine."WHT Product Posting Group")
              THEN BEGIN
                IF WHTMinInvoiceAmt <> WHTPostingSetup."WHT Minimum Invoice Amount" THEN
                  ERROR(Text1500004);
              END;
              WHTBusPostGrp := SalesCreditLine."WHT Business Posting Group";
              WHTProdPostGrp := SalesCreditLine."WHT Product Posting Group";
            END;
          UNTIL SalesCreditLine.NEXT = 0;
        END;
      END;

      WITH SalesCreditHeader DO BEGIN
        SalesCreditLine.RESET;
        SalesCreditLine.SETCURRENTKEY("Document No.","WHT Business Posting Group","WHT Product Posting Group");
        SalesCreditLine.SETRANGE("Document No.","No.");
        SalesCreditLine.SETFILTER(Quantity,'<>0');
        IF SalesCreditLine.FINDSET THEN
          REPEAT
            IF WHTPostingSetup.GET(SalesCreditLine."WHT Business Posting Group",SalesCreditLine."WHT Product Posting Group") THEN
              IF WHTPostingSetup."WHT %" > 0 THEN BEGIN
                DocNo := SalesCreditLine."Document No.";
                DocType := DocType::"Credit Memo";
                PayToAccType := PayToAccType::Customer;
                PayToVendCustNo := "Bill-to Customer No.";
                BuyFromAccType := BuyFromAccType::Customer;
                BuyFromVendCustNo := "Sell-to Customer No.";
                SourceCode := "Source Code";
                ReasonCode := "Reason Code";
      // UPG09R2.begin
      //YIMMNWHTR
                AreaCode:=  SalesCreditLine."Area Code";
      // UPG09R2.end
                GenBusPostGrp := SalesCreditLine."Gen. Bus. Posting Group";
                GenProdPostGrp := SalesCreditLine."Gen. Prod. Posting Group";
                TransType := TransType::Sale;
                PostingDate := "Posting Date";
                DocDate := "Document Date";
                CurrencyCode := "Currency Code";
                CurrFactor := "Currency Factor";
                ApplyDocType := "Applies-to Doc. Type";
                ApplyDocNo := "Applies-to Doc. No.";
                "Applies-toID" := AppliesID;
                IF (WHTBusPostGrp <> SalesCreditLine."WHT Business Posting Group") OR
                   (WHTProdPostGrp <> SalesCreditLine."WHT Product Posting Group")
                THEN BEGIN
                  IF AmountVAT <> 0 THEN
                    InsertWHT(TType::Sale);
                  WHTBusPostGrp := SalesCreditLine."WHT Business Posting Group";
                  WHTProdPostGrp := SalesCreditLine."WHT Product Posting Group";
                  Amount := 0;
                  AbsorbBase := 0;
                  AmountVAT := 0;
                  Amount := Amount - SalesCreditLine.Amount;
                  AbsorbBase := AbsorbBase - SalesCreditLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := -AbsorbBase
                  ELSE
                    AmountVAT := -Amount;
                END ELSE BEGIN
                  WHTBusPostGrp := SalesCreditLine."WHT Business Posting Group";
                  WHTProdPostGrp := SalesCreditLine."WHT Product Posting Group";
                  Amount := Amount - SalesCreditLine.Amount;
                  AbsorbBase := AbsorbBase - SalesCreditLine."WHT Absorb Base";
                  IF AbsorbBase <> 0 THEN
                    AmountVAT := -AbsorbBase
                  ELSE
                    AmountVAT := -Amount;
                END;
                WHTBusPostGrp := SalesCreditLine."WHT Business Posting Group";
                WHTProdPostGrp := SalesCreditLine."WHT Product Posting Group";
              END;
          UNTIL SalesCreditLine.NEXT = 0;
        InsertWHT(TType::Sale);
      END;
    END;

    PROCEDURE ProcessPayment@1500007(VAR GenJnlLine@1500025 : Record 81;TransactionNo@1500024 : Integer;EntryNo@1500023 : Integer;Source@1500022 : 'Vendor,Customer';AmountWithDisc@1500000 : Boolean) PaymentNo : Integer;
    VAR
      WHTEntry@1500021 : Record 28044;
      WHTEntry2@1500020 : Record 28044;
      WHTEntry3@1500019 : Record 28044;
      GLSetup@1500017 : Record 98;
      PaymentAmount@1500016 : Decimal;
      AppldAmount@1500014 : Decimal;
      WHTEntryTemp@1500012 : Record 28044;
      PurchCrMemoHeader@1500009 : Record 124;
      VendLedgEntry1@1500008 : Record 25;
      VendLedgEntry@1500007 : Record 25;
      ExpectedAmount@1500006 : Decimal;
      PaymentAmount1@1500005 : Decimal;
      TempWHT@1500004 : Record 28046;
      SalesCrMemoHeader@1500003 : Record 114;
      CustLedgEntry1@1500002 : Record 21;
      CustLedgEntry@1500001 : Record 21;
      TempGenJnlTemp@1500026 : Record 80;
      WHTEntry4@1106000000 : Record 28044;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No." = '' THEN BEGIN
          Vendor.GET(GenJnlLine."Account No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END ELSE BEGIN
          Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END;

      CASE Source OF
        Source::Customer:
          BEGIN
            WHTEntry4.RESET;
            WHTEntry4.SETCURRENTKEY("Document Type","Document No.");
            WHTEntry4.SETRANGE("Document Type", TempCustLedgEntry."Document Type");
            WHTEntry4.SETFILTER("Document No.", TempCustLedgEntry."Document No.");
            IF WHTEntry4.FINDFIRST THEN BEGIN
              IF ABS(GenJnlLine.Amount) < ABS(TempCustLedgEntry.Amount) THEN
                PaymentAmount1 := GenJnlLine.Amount
              ELSE
                PaymentAmount1 := -TempCustLedgEntry.Amount;
              IF CheckPmtDisc(
                GenJnlLine."Posting Date",
                TempCustLedgEntry."Pmt. Discount Date",ABS(TempCustLedgEntry."Amount to Apply"),
                ABS(TempCustLedgEntry."Remaining Amount"),ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                ABS(PaymentAmount1))
              THEN
                PaymentAmount1 := PaymentAmount1 - TempCustLedgEntry."Original Pmt. Disc. Possible";
            END ELSE
              IF (TempCustLedgEntry."Document No." = '') AND (GenJnlLine.Amount <> 0) THEN
                PaymentAmount1 := GenJnlLine.Amount;
          END;
        Source::Vendor:
          BEGIN
            WHTEntry4.RESET;
            WHTEntry4.SETCURRENTKEY("Document Type","Document No.");
            WHTEntry4.SETRANGE("Document Type", TempVendLedgEntry."Document Type");
            WHTEntry4.SETFILTER("Document No.", TempVendLedgEntry."Document No.");
            IF WHTEntry4.FINDFIRST THEN BEGIN
              IF ABS(GenJnlLine.Amount) < ABS(TempVendLedgEntry.Amount) THEN
                PaymentAmount1 := GenJnlLine.Amount
              ELSE
                PaymentAmount1 := -TempVendLedgEntry.Amount;
              IF CheckPmtDisc(
                GenJnlLine."Posting Date",
                TempVendLedgEntry."Pmt. Discount Date",ABS(TempVendLedgEntry."Amount to Apply"),
                ABS(TempVendLedgEntry."Remaining Amount"),ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                ABS(PaymentAmount1))
              THEN
                PaymentAmount1 := PaymentAmount1 - TempVendLedgEntry."Original Pmt. Disc. Possible"; //xxx
            END ELSE
              IF (TempVendLedgEntry."Document No." = '') AND (GenJnlLine.Amount <> 0) THEN
                PaymentAmount1 := GenJnlLine.Amount;
          END;
      END;

      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);
      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
      CASE Source OF
        Source::Vendor:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
        Source::Customer:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
      END;

      WHTEntry.SETRANGE(Closed,FALSE);
      WHTEntry.SETRANGE("Transaction No.",0);
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN
        WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.")
      ELSE
        WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
      IF WHTEntry.FINDSET THEN
        REPEAT
          WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
          IF (WHTPostingSetup."Realized WHT Type" =
              WHTPostingSetup."Realized WHT Type"::Payment)
          THEN BEGIN
            WHTEntry3.RESET;
            WHTEntry3 := WHTEntry;
            CASE Source OF
              Source::Vendor:
                BEGIN
                  IF GenJnlLine."Applies-to Doc. No." = '' THEN
                    EXIT;
                  PurchCrMemoHeader.RESET;
                  PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                  PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                  IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                    TempRemAmt := 0;
                    VendLedgEntry1.RESET;
                    VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                    VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                    IF VendLedgEntry1.FINDFIRST THEN
                      VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                    WHTEntryTemp.RESET;
                    WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                    WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                    WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                    WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntryTemp.FINDFIRST THEN BEGIN
                      TempRemBase := WHTEntryTemp."Unrealized Amount";
                      TempRemAmt := WHTEntryTemp."Unrealized Base";
                    END;
                  END;

                  VendLedgEntry.RESET;
                  VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                    VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                  ELSE
                    IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
                  IF VendLedgEntry.FINDFIRST THEN
                    VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                  ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                  IF VendLedgEntry1."Amount (LCY)" = 0 THEN
                    VendLedgEntry1."Rem. Amt" := 0;
                  IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                     (ABS(PaymentAmount1) >=
                      (ABS(VendLedgEntry."Rem. Amt" + VendLedgEntry1."Rem. Amt") -
                       ABS(VendLedgEntry."Original Pmt. Disc. Possible"))) AND
                     (NOT AmountWithDisc)
                  THEN BEGIN
                    IF VendLedgEntry."Remaining Amount" = 0 THEN BEGIN
                      AppldAmount :=
                        ROUND(
                          (PaymentAmount1 *
                           (WHTEntry."Unrealized Base" + TempRemAmt)) /
                          ExpectedAmount);
                      WHTEntry3."Remaining Unrealized Base" :=
                        ROUND(
                          WHTEntry."Remaining Unrealized Base" -
                          ROUND(
                            (PaymentAmount1 *
                             (WHTEntry."Unrealized Base" + TempRemAmt)) /
                            ExpectedAmount));
                      WHTEntry3."Remaining Unrealized Amount" :=
                        ROUND(
                          WHTEntry."Remaining Unrealized Amount" -
                          ROUND(
                            (PaymentAmount1 *
                             ((WHTEntry."Unrealized Base"
                               * WHTEntry."WHT %" / 100) + TempRemBase)) /
                            ExpectedAmount));
                    END ELSE BEGIN
                      AppldAmount :=
                        ROUND(
                          (PaymentAmount1 *
                           (WHTEntry."Unrealized Base" + TempRemAmt)) /
                          ExpectedAmount);
                      WHTEntry3."Remaining Unrealized Base" :=
                        ROUND(
                          WHTEntry."Remaining Unrealized Base" -
                          ROUND(
                            (PaymentAmount1 *
                             (WHTEntry."Unrealized Base" + TempRemAmt)) /
                            ExpectedAmount));
                      WHTEntry3."Remaining Unrealized Amount" :=
                        ROUND(
                          WHTEntry."Remaining Unrealized Amount" -
                          ROUND(
                            (PaymentAmount1 *
                             (WHTEntry."Unrealized Amount" + TempRemBase)) /
                            ExpectedAmount));
                    END
                  END ELSE BEGIN
                    AppldAmount :=
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
                        ExpectedAmount);
                    WHTEntry3."Remaining Unrealized Base" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Base" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
                          ExpectedAmount));
                    WHTEntry3."Remaining Unrealized Amount" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Amount" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) /
                          ExpectedAmount));
                  END;
                  PaymentAmount := PaymentAmount + AppldAmount;
                END;
              Source::Customer:
                BEGIN
                  SalesCrMemoHeader.RESET;
                  SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                  SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
                  IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
                    TempRemAmt := 0;
                    CustLedgEntry1.RESET;
                    CustLedgEntry1.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                    CustLedgEntry1.SETRANGE("Document Type",CustLedgEntry1."Document Type"::"Credit Memo");
                    IF CustLedgEntry1.FINDFIRST THEN
                      CustLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                    WHTEntryTemp.RESET;
                    WHTEntryTemp.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                    WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                    WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
                    WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntryTemp.FINDFIRST THEN BEGIN
                      TempRemBase := WHTEntryTemp."Unrealized Amount";
                      TempRemAmt := WHTEntryTemp."Unrealized Base";
                    END;
                  END;

                  CustLedgEntry.RESET;
                  CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                    CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice)
                  ELSE
                    IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                      CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::"Credit Memo");
                  IF CustLedgEntry.FINDFIRST THEN
                    CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                  IF CustLedgEntry1."Amount (LCY)" = 0 THEN
                    CustLedgEntry1."Rem. Amt" := 0;
                  ExpectedAmount := -(CustLedgEntry.Amount + CustLedgEntry1.Amount);
                  IF (GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date") AND
                     (ABS(PaymentAmount1) >= (ABS(CustLedgEntry."Rem. Amt" + CustLedgEntry1."Rem. Amt") -
                                              ABS(CustLedgEntry."Original Pmt. Disc. Possible"))) AND
                     (NOT AmountWithDisc)
                  THEN BEGIN
                    AppldAmount :=
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                    WHTEntry3."Remaining Unrealized Base" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Base" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                    WHTEntry3."Remaining Unrealized Amount" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Amount" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                  END ELSE BEGIN
                    AppldAmount :=
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                    WHTEntry3."Remaining Unrealized Base" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Base" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                    WHTEntry3."Remaining Unrealized Amount" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Amount" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                  END;
                  PaymentAmount := PaymentAmount + AppldAmount;
                END;
            END;
            IF (WHTEntry."Remaining Unrealized Base" = 0) AND (WHTEntry."Remaining Unrealized Amount" = 0) THEN
              WHTEntry3.Closed := TRUE;
            IF GenJnlLine."Currency Code" <> WHTEntry."Currency Code" THEN
              ERROR(Text1500000);
            IF AppldAmount = 0 THEN
              EXIT;
            WHTEntry2.INIT;
            WHTEntry2."Posting Date" := GenJnlLine."Document Date";
            WHTEntry2."Entry No." := NextEntryNo;
            WHTEntry2."Document Date" := WHTEntry."Document Date";
            WHTEntry2."Document Type" := GenJnlLine."Document Type";
            WHTEntry2."Document No." := WHTEntry."Document No.";
            WHTEntry2."Gen. Bus. Posting Group" := WHTEntry."Gen. Bus. Posting Group";
            WHTEntry2."Gen. Prod. Posting Group" := WHTEntry."Gen. Prod. Posting Group";
            WHTEntry2."Bill-to/Pay-to No." := WHTEntry."Bill-to/Pay-to No.";
            WHTEntry2."WHT Bus. Posting Group" := WHTEntry."WHT Bus. Posting Group";
            WHTEntry2."WHT Prod. Posting Group" := WHTEntry."WHT Prod. Posting Group";
            WHTEntry2."WHT Revenue Type" := WHTEntry."WHT Revenue Type";
            WHTEntry2."Currency Code" := GenJnlLine."Currency Code";
            WHTEntry2."Applies-to Entry No." := WHTEntry."Entry No.";
            WHTEntry2."User ID" := USERID;
            WHTEntry2."External Document No." := GenJnlLine."External Document No.";
            WHTEntry2."Actual Vendor No." := GenJnlLine."Actual Vendor No.";
            WHTEntry2."Original Document No." := GenJnlLine."Document No.";
            WHTEntry2."Source Code" := GenJnlLine."Source Code";
            WHTEntry2."Transaction No." := TransactionNo;
            WHTEntry2."Unrealized WHT Entry No." := WHTEntry."Entry No.";
            WHTEntry2."WHT %" := WHTEntry."WHT %";
            CASE Source OF
              Source::Vendor:
                BEGIN
                  WHTEntry2.Base := ROUND(AppldAmount);
                  WHTEntry2.Amount := ROUND(WHTEntry2.Base * WHTEntry2."WHT %" / 100);
                  WHTEntry2."Payment Amount" := PaymentAmount1;
                  WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Purchase;
                  WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  WHTEntry2."WHT Report" := WHTPostingSetup."WHT Report";
                  IF GenJnlLine."Certificate Printed" THEN BEGIN
                    WHTEntry2."WHT Report Line No" := GenJnlLine."WHT Report Line No.";
                    TempWHT.SETRANGE("Document No.",WHTEntry2."Document No.");
                    IF TempWHT.FINDFIRST THEN
                      WHTEntry2."WHT Certificate No." := TempWHT."WHT Certificate No.";
                  END ELSE BEGIN
                    IF ((Source = Source::Vendor) AND
                        (WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice)) OR
                       ((Source = Source::Customer) AND
                        (WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo"))
                    THEN
                      IF (WHTReportLineNo = '') AND
                         (WHTEntry2.Amount <> 0) AND
                         (WHTPostingSetup."WHT Report Line No. Series" <> '')
                      THEN
                        WHTReportLineNo :=
                          NoSeriesMgt.GetNextNo(
                            WHTPostingSetup."WHT Report Line No. Series",WHTEntry2."Posting Date",TRUE);
                    WHTEntry2."WHT Report Line No" := WHTReportLineNo;
                  END;
                  TType := TType::Purchase;
                END;
              Source::Customer:
                BEGIN
                  WHTEntry2.Base := ROUND(AppldAmount);
                  WHTEntry2.Amount := ROUND(WHTEntry2.Base * WHTEntry2."WHT %" / 100);
                  WHTEntry2."Payment Amount" := PaymentAmount1;
                  WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Sale;
                  TType := TType::Sale;
                END;
            END;

            IF WHTEntry2."Currency Code" <> '' THEN BEGIN
              CurrFactor := GenJnlLine."Currency Factor";
              WHTEntry2."Base (LCY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    WHTEntry2."Currency Code",
                    WHTEntry2.Base,CurrFactor));
              WHTEntry2."Amount (LCY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    WHTEntry2."Currency Code",
                    WHTEntry2.Amount,CurrFactor));
            END ELSE BEGIN
              WHTEntry2."Amount (LCY)" := WHTEntry2.Amount;
              WHTEntry2."Base (LCY)" := WHTEntry2.Base;
            END;
            IF WHTEntry2."Currency Code" <> '' THEN BEGIN
              CurrFactor := GenJnlLine."Currency Factor";
              WHTEntry2."Base (LCY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    WHTEntry2."Currency Code",
                    WHTEntry2.Base,CurrFactor));
              WHTEntry2."Amount (LCY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    WHTEntry2."Currency Code",
                    WHTEntry2.Amount,CurrFactor));
            END ELSE BEGIN
              WHTEntry2."Amount (LCY)" := WHTEntry2.Amount;
              WHTEntry2."Base (LCY)" := WHTEntry2.Base;
            END;
            IF VendLedgEntry."Original Pmt. Disc. Possible" <> 0 THEN BEGIN
              IF WHTEntry2.Base <> WHTEntry."Unrealized Base" THEN BEGIN
                IF VendLedgEntry."Remaining Amount" = 0 THEN BEGIN
                  WHTEntry3."Rem Unrealized Amount (LCY)" := WHTEntry2."Rem Unrealized Amount (LCY)";
                  WHTEntry3."Rem Unrealized Base (LCY)" := WHTEntry2."Rem Unrealized Base (LCY)";
                  WHTEntry3."Remaining Unrealized Amount" := WHTEntry2."Remaining Unrealized Amount";
                  WHTEntry3."Remaining Unrealized Base" := WHTEntry2."Remaining Unrealized Base";
                  WHTEntry4.RESET;
                  WHTEntry4.SETCURRENTKEY("Applies-to Entry No.");
                  WHTEntry4.SETFILTER("Applies-to Entry No.",'=%1',WHTEntry."Entry No.");
                  WHTEntry4.CALCSUMS(WHTEntry4.Base);
                  WHTEntry3."Pymt. Disc. Diff. Base" := WHTEntry."Unrealized Base" - (WHTEntry4.Base + WHTEntry2.Base);
                  WHTEntry3."Pymt. Disc. Diff. Amount" := ROUND(( WHTEntry3."Pymt. Disc. Diff. Base" * WHTEntry3."WHT %" )/100);
                  WHTEntry3."WHT Difference" :=
                    WHTEntry3."WHT Difference" + ABS(ABS(WHTEntry3."Pymt. Disc. Diff. Amount") -
                    ABS(WHTEntry."Unrealized Amount" - (WHTEntry4.Amount + WHTEntry2.Amount)));
                END
              END
            END ELSE BEGIN
              WHTEntry3."Rem Unrealized Amount (LCY)" :=
                WHTEntry."Rem Unrealized Amount (LCY)" - WHTEntry2."Amount (LCY)";
              WHTEntry3."Rem Unrealized Base (LCY)" :=
                WHTEntry."Rem Unrealized Base (LCY)" - WHTEntry2."Base (LCY)";
            END;

            WHTEntry2.INSERT;
            WHTEntry3.MODIFY;

            WHTEntry3.RESET;
            WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
            WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
            WHTEntry3.CALCSUMS(Amount,"Amount (LCY)");
            IF (ABS(ABS(WHTEntry3.Amount) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
               (ABS(ABS(WHTEntry3.Amount) - ABS(WHTEntry."Unrealized Amount")) > 0)
            THEN BEGIN
              WHTEntry2."WHT Difference" := WHTEntry2."WHT Difference" + ABS(WHTEntry."Unrealized Amount" - WHTEntry3.Amount);
              WHTEntry2.MODIFY;
            END;
            IF WHTEntry2."WHT Difference" = 0 THEN
              IF (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(WHTEntry."Unrealized Amount (LCY)")) < 0.1) AND
                 (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(WHTEntry."Unrealized Amount (LCY)")) > 0)
              THEN BEGIN
                // WHTEntry2."Amount (LCY)" := WHTEntry2."Amount (LCY)" -
                // WHTEntry."Unrealized Amount (LCY)" + WHTEntry3."Amount (LCY)";
                WHTEntry2."Amount (LCY)" := WHTEntry2."Amount (LCY)" + (WHTEntry."Unrealized Amount (LCY)" - WHTEntry3."Amount (LCY)");
                WHTEntry2.MODIFY;
              END;

            // Payment Method Code.Begin
            IF Source = Source::Customer THEN
              TempGenJnlTemp.SETRANGE(Type,TempGenJnlTemp.Type::Sales)
            ELSE
              TempGenJnlTemp.SETRANGE(Type,TempGenJnlTemp.Type::Purchases);
            IF TempGenJnlTemp.FINDFIRST THEN
              IF GenJnlLine."Journal Template Name" <> TempGenJnlTemp.Name THEN BEGIN
                // Payment Method Code.End;
                IF WHTEntry2.Amount <> 0 THEN
                  InsertWHTPostingBuffer(WHTEntry2,GenJnlLine,0,AmountWithDisc)
              END; // Payment Method Code
          END;
        UNTIL (WHTEntry.NEXT = 0);
      IF (WHTPostingSetup."Realized WHT Type" =
          WHTPostingSetup."Realized WHT Type"::Payment)
      THEN
        EXIT(WHTEntry2."Entry No." + 1);
    END;

    PROCEDURE ProcessManualReceipt@1500008(VAR GenJnlLine@1500007 : Record 81;TransactionNo@1500006 : Integer;EntryNo@1500005 : Integer;Source@1500004 : 'Vendor,Customer') PaymentNo : Integer;
    VAR
      WHTEntry@1500025 : Record 28044;
      WHTEntry2@1500024 : Record 28044;
      WHTEntry3@1500023 : Record 28044;
      PaymentAmount@1500020 : Decimal;
      PaymentAmountLCY@1500019 : Decimal;
      AppldAmount@1500018 : Decimal;
      WHTEntryTemp@1500016 : Record 28044;
      PaymentAmount1@1500009 : Decimal;
      WHTAmount@1500000 : Decimal;
    BEGIN
      PaymentAmount := GenJnlLine.Amount;
      PaymentAmount1 := GenJnlLine.Amount;
      PaymentAmountLCY := GenJnlLine."Amount (LCY)";
      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
      CASE Source OF
        Source::Vendor:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
        Source::Customer:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
      END;

      IF GenJnlLine."Applies-to Doc. No." <> '' THEN
        WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.")
      ELSE
        WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");

      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice)
      ELSE
        IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
          WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");

      IF WHTEntry.FINDSET THEN
        REPEAT
          WHTEntryTemp.RESET;
          WHTEntryTemp := WHTEntry;
          CASE Source OF
            Source::Vendor:
              BEGIN
                IF GenJnlLine."Applies-to Doc. No." = '' THEN
                  EXIT;
                WHTEntry3.RESET;
                WHTAmount := 0;
                WHTEntry3.COPY(WHTEntry);
                IF WHTEntry3.FINDSET THEN
                  REPEAT
                    WHTAmount := WHTAmount + WHTEntry3."Unrealized Amount";
                  UNTIL WHTEntry3.NEXT = 0;
                AppldAmount := -ROUND(GenJnlLine.Amount * WHTEntry."Unrealized Amount" / WHTAmount);

                IF AppldAmount = 0 THEN
                  AppliedBase := WHTEntry."Remaining Unrealized Base"
                ELSE
                  AppliedBase := ROUND(AppldAmount * 100 / WHTEntry."WHT %");

                IF WHTEntry."WHT %" <> 0 THEN
                  WHTEntryTemp."Remaining Unrealized Base" :=
                    ROUND(WHTEntry."Remaining Unrealized Base" - ROUND(AppldAmount * 100 / WHTEntry."WHT %"))
                ELSE
                  WHTEntryTemp."Remaining Unrealized Base" := 0;
                WHTEntryTemp."Remaining Unrealized Amount" :=
                  ROUND(
                    WHTEntry."Remaining Unrealized Amount" -
                    ROUND(AppldAmount));
                PaymentAmount := PaymentAmount + AppldAmount;
                TType := TType::Purchase;
              END;
            Source::Customer:
              BEGIN
                WHTEntry3.RESET;
                WHTAmount := 0;
                WHTEntry3.COPY(WHTEntry);
                IF WHTEntry3.FINDSET THEN
                  REPEAT
                    WHTAmount := WHTAmount + WHTEntry3."Unrealized Amount";
                  UNTIL WHTEntry3.NEXT = 0;

                AppldAmount := ROUND(GenJnlLine.Amount * WHTEntry."Unrealized Amount" / WHTAmount);

                IF AppldAmount = 0 THEN
                  AppliedBase := WHTEntry."Remaining Unrealized Base"
                ELSE
                  AppliedBase := ROUND(AppldAmount * 100 / WHTEntry."WHT %");

                TType := TType::Sale;

                IF WHTEntry."WHT %" <> 0 THEN
                  WHTEntryTemp."Remaining Unrealized Base" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Base" -
                      ROUND(
                        AppldAmount * 100 / WHTEntry."WHT %"))
                ELSE
                  WHTEntryTemp."Remaining Unrealized Base" := 0;

                WHTEntryTemp."Remaining Unrealized Amount" :=
                  ROUND(
                    WHTEntry."Remaining Unrealized Amount" -
                    ROUND(AppldAmount));
                PaymentAmount := PaymentAmount + AppldAmount;
              END;
          END;

          IF GenJnlLine."Currency Code" <> WHTEntry."Currency Code" THEN
            ERROR(Text1500000);
          WHTEntry2.INIT;
          WHTEntry2."Posting Date" := GenJnlLine."Document Date";
          WHTEntry2."Entry No." := NextEntryNo;
          WHTEntry2."Document Date" := WHTEntry."Document Date";
          WHTEntry2."Document Type" := GenJnlLine."Document Type";
          WHTEntry2."Document No." := WHTEntry."Document No.";
          WHTEntry2."Gen. Bus. Posting Group" := WHTEntry."Gen. Bus. Posting Group";
          WHTEntry2."Gen. Prod. Posting Group" := WHTEntry."Gen. Prod. Posting Group";
          WHTEntry2."Bill-to/Pay-to No." := WHTEntry."Bill-to/Pay-to No.";
          WHTEntry2."WHT Bus. Posting Group" := WHTEntry."WHT Bus. Posting Group";
          WHTEntry2."WHT Prod. Posting Group" := WHTEntry."WHT Prod. Posting Group";
          WHTEntry2."WHT Revenue Type" := WHTEntry."WHT Revenue Type";
          WHTEntry2."Currency Code" := GenJnlLine."Currency Code";
          WHTEntry2."Applies-to Entry No." := WHTEntry."Entry No.";
          WHTEntry2."User ID" := USERID;
          WHTEntry2."External Document No." := GenJnlLine."External Document No.";
          WHTEntry2."Original Document No." := GenJnlLine."Document No.";
          WHTEntry2."Source Code" := GenJnlLine."Source Code";
          WHTEntry2."Transaction No." := TransactionNo;
          IF TType = TType::Sale THEN
            WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Sale
          ELSE
            WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Purchase;
          WHTEntry2."WHT %" := WHTEntry."WHT %";
          WHTEntry2."Unrealized WHT Entry No." := WHTEntry."Entry No.";
          WHTEntry2.Base := ROUND(AppliedBase);
          WHTEntry2.Amount := ROUND(AppldAmount);
          IF WHTEntry2."Currency Code" <> '' THEN BEGIN
            CurrFactor :=
              CurrExchRate.ExchangeRate(WHTEntry2."Posting Date",WHTEntry2."Currency Code");
            WHTEntry2."Base (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  GenJnlLine."Document Date",
                  WHTEntry2."Currency Code",
                  WHTEntry2.Base,CurrFactor));
            WHTEntry2."Amount (LCY)" := ROUND(WHTEntry2."Base (LCY)");
          END ELSE BEGIN
            WHTEntry2."Amount (LCY)" := WHTEntry2.Amount;
            WHTEntry2."Base (LCY)" := WHTEntry2.Base;
          END;
          WHTEntry2.INSERT;
          WHTEntryTemp."Rem Unrealized Amount (LCY)" :=
            WHTEntry."Rem Unrealized Amount (LCY)" - WHTEntry2."Amount (LCY)";
          WHTEntryTemp."Rem Unrealized Base (LCY)" :=
            WHTEntry."Rem Unrealized Base (LCY)" - WHTEntry2."Base (LCY)";
          WHTEntryTemp.MODIFY;
          IF WHTEntry2.Amount <> 0 THEN
            InsertWHTPostingBuffer(WHTEntry2,GenJnlLine,0,FALSE);
        UNTIL (WHTEntry.NEXT = 0);
      EXIT(WHTEntry2."Entry No." + 1);
    END;

    PROCEDURE InsertWHTPostingBuffer@1500009(VAR WHTEntryGL@1500002 : Record 28044;VAR GenJnlLine@1500001 : Record 81;Source@1500000 : 'Payment,Refund';Oldest@1500008 : Boolean);
    VAR
      PurchSetup@1500006 : Record 98;
      GenJnlLine2@1500005 : Record 81;
      GenJnlLine3@1500004 : Record 81;
      HighestLineNo@1500003 : Integer;
    BEGIN
      WHTPostingSetup.GET(WHTEntryGL."WHT Bus. Posting Group",WHTEntryGL."WHT Prod. Posting Group");
      PurchSetup.GET;
      GenJnlLine2 := GenJnlLine;
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine2.FINDLAST;
      HighestLineNo := GenJnlLine2."Line No." + 10000;
      GenJnlLine3.RESET;
      GenJnlLine3 := GenJnlLine;
      GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine3."Line No." := HighestLineNo;
      IF GenJnlLine3.NEXT = 0 THEN
        GenJnlLine3."Line No." := HighestLineNo + 10000
      ELSE BEGIN
        WHILE GenJnlLine3."Line No." = HighestLineNo + 1 DO BEGIN
          HighestLineNo := GenJnlLine3."Line No.";
          IF GenJnlLine3.NEXT = 0 THEN
            GenJnlLine3."Line No." := HighestLineNo + 20000;
        END;
        GenJnlLine3."Line No." := HighestLineNo + 10000;
      END;

      GenJnlLine3.INIT;
      GenJnlLine3.VALIDATE("Posting Date",GenJnlLine."Posting Date");
      GenJnlLine3."Document Type" := GenJnlLine."Document Type";
      GenJnlLine3."Account Type" := GenJnlLine3."Account Type"::"G/L Account";
      GenJnlLine3."System-Created Entry" := TRUE;
      GenJnlLine3."Is WHT" := TRUE;
      IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN BEGIN
        IF TType = TType::Purchase THEN
          GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Purch. WHT Adj. Account No.");
        IF TType = TType::Sale THEN
          GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Sales WHT Adj. Account No.");
      END ELSE BEGIN
        IF TType = TType::Purchase THEN
          GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Payable WHT Account Code");
        IF TType = TType::Sale THEN BEGIN
          WHTPostingSetup.TESTFIELD("Prepaid WHT Account Code");
          GenJnlLine3.VALIDATE("Account No.",WHTPostingSetup."Prepaid WHT Account Code");
        END;
      END;
      GenJnlLine3.VALIDATE("Currency Code",WHTEntryGL."Currency Code");
      IF GLSetup."Round Amount for WHT Calc" THEN BEGIN
        GenJnlLine3.VALIDATE(Amount,ROUND(-WHTEntryGL.Amount,1,'<'));
        GenJnlLine3."Amount (LCY)" := ROUND(-WHTEntryGL."Amount (LCY)",1,'<');
      END ELSE BEGIN
        GenJnlLine3.VALIDATE(Amount,-WHTEntryGL.Amount);
        GenJnlLine3."Amount (LCY)" := -WHTEntryGL."Amount (LCY)";
      END;
      GenJnlLine3."Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
      GenJnlLine3."System-Created Entry" := TRUE; // Payment Method Code
      GLSetup.GET;
      IF (Oldest = TRUE) OR GLSetup."Manual Sales WHT Calc." THEN BEGIN
        IF TType = TType::Purchase THEN BEGIN
          CASE WHTPostingSetup."Bal. Payable Account Type" OF
            WHTPostingSetup."Bal. Payable Account Type"::"Bank Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"Bank Account";
            WHTPostingSetup."Bal. Payable Account Type"::"G/L Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"G/L Account";
          END;
          WHTPostingSetup.TESTFIELD("Bal. Payable Account No.");
          GenJnlLine3.VALIDATE("Bal. Account No.",WHTPostingSetup."Bal. Payable Account No.");
        END;

        IF TType = TType::Sale THEN BEGIN
          CASE WHTPostingSetup."Bal. Prepaid Account Type" OF
            WHTPostingSetup."Bal. Prepaid Account Type"::"Bank Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"Bank Account";
            WHTPostingSetup."Bal. Prepaid Account Type"::"G/L Account":
              GenJnlLine3."Bal. Account Type" := GenJnlLine3."Account Type"::"G/L Account";
          END;
          WHTPostingSetup.TESTFIELD("Bal. Prepaid Account No.");
          GenJnlLine3.VALIDATE("Bal. Account No.",WHTPostingSetup."Bal. Prepaid Account No.");
        END;
      END;
      GenJnlLine3."Source Code" := GenJnlLine."Source Code";
      GenJnlLine3."Reason Code" := GenJnlLine."Reason Code";
      GenJnlLine3."Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      GenJnlLine3."Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      GenJnlLine3."Allow Zero-Amount Posting" := TRUE;
      GenJnlLine3."WHT Business Posting Group" := WHTEntryGL."WHT Bus. Posting Group";
      GenJnlLine3."WHT Product Posting Group" := WHTEntryGL."WHT Prod. Posting Group";
      GenJnlLine3."Document Type" := GenJnlLine."Document Type";
      GenJnlLine3."Document No." := GenJnlLine."Document No.";
      GenJnlLine3."External Document No." := GenJnlLine."External Document No.";
      IF Source = Source::Refund THEN
        GenJnlLine3."Gen. Posting Type" := GenJnlLine3."Gen. Posting Type"::" ";
      GenJnlLine3.INSERT;
    END;

    PROCEDURE NextEntryNo@1500011() : Integer;
    VAR
      NewWHTEntry@1500000 : Record 28044;
    BEGIN
      NewWHTEntry.RESET;
      IF NewWHTEntry.FINDLAST THEN
        EXIT(NewWHTEntry."Entry No." + 1);

      EXIT(1);
    END;

    PROCEDURE NextTempEntryNo@1500012() : Integer;
    VAR
      NewWHTEntry@1500000 : Record 28046;
    BEGIN
      NewWHTEntry.RESET;
      IF NewWHTEntry.FINDLAST THEN
        EXIT(NewWHTEntry."Entry No." + 1);

      EXIT(1);
    END;

    PROCEDURE PrintWHTSlips@1500013(VAR GLReg@1500000 : Record 45);
    VAR
      GLEntry@1500019 : Record 17;
      WHTEntry@1500018 : Record 28044;
      WHTEntry2@1500017 : Record 28044;
      WHTSlipBuffer@1500015 : Record 28045;
      PurchSetup@1500014 : Record 312;
      ReportSelection@1500013 : Record 77;
      SalesSetup@1500011 : Record 311;
      GLRegFilter@1500010 : Text[250];
      StartTrans@1500009 : Integer;
      EndTrans@1500008 : Integer;
      x@1500007 : Integer;
      PrintSlips@1500006 : Integer;
      WHTSlipBuffer2@1500005 : Code[20];
      WHTSlipDocument2@1500004 : Code[20];
      VendorArray@1500003 : ARRAY [1000] OF Code[20];
      DocumentArray@1500002 : ARRAY [1000] OF Code[20];
      WHTSlipNo@1500001 : Code[20];
      ActualVendorNo@1500020 : Boolean;
    BEGIN
      x := 0;
      GLRegFilter := GLReg.GETFILTERS;
      GLEntry.RESET;
      IF GLReg."From Entry No." < 0 THEN
        GLEntry.SETRANGE("Entry No.",GLReg."To Entry No.",GLReg."From Entry No.")
      ELSE
        GLEntry.SETRANGE("Entry No.",GLReg."From Entry No.",GLReg."To Entry No.");
      GLEntry.FINDFIRST;
      StartTrans := GLEntry."Transaction No.";
      GLEntry.FINDLAST;
      EndTrans := GLEntry."Transaction No.";
      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Bill-to/Pay-to No.","Original Document No.","WHT Revenue Type");
      WHTEntry.SETRANGE("Transaction No.",StartTrans,EndTrans);
      IF NOT WHTEntry.FINDFIRST THEN
        EXIT;
      REPEAT
        IF WHTEntry."Transaction Type" = WHTEntry."Transaction Type"::Sale THEN BEGIN
          IF WHTEntry."Document Type" IN [
                                          WHTEntry."Document Type"::Invoice,
                                          WHTEntry."Document Type"::Payment]
          THEN
            EXIT;

          SalesSetup.GET;
          IF NOT SalesSetup."Print WHT on Credit Memo" THEN
            IF WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo" THEN
              EXIT;
        END;
        x := x + 1;
        IF WHTEntry."Actual Vendor No." <> '' THEN BEGIN
          VendorArray[x] := WHTEntry."Actual Vendor No.";
          ActualVendorNo := TRUE;
        END ELSE
          VendorArray[x] := WHTEntry."Bill-to/Pay-to No.";
        DocumentArray[x] := WHTEntry."Original Document No.";
      UNTIL WHTEntry.NEXT = 0;

      PurchSetup.GET;
      WHTSlipBuffer.DELETEALL;
      FOR PrintSlips := 1 TO x DO
        BEGIN
        WHTSlipBuffer.INIT;
        WHTSlipBuffer."Line No." := PrintSlips;
        WHTSlipBuffer."Vendor No." := VendorArray[PrintSlips];
        WHTSlipBuffer."Document No." := DocumentArray[PrintSlips];
        WHTSlipBuffer.INSERT;
      END;

      x := 0;
      CLEAR(VendorArray);
      CLEAR(DocumentArray);
      WHTSlipBuffer.RESET;
      WHTSlipBuffer.SETCURRENTKEY("Vendor No.","Document No.");
      WHTSlipBuffer.FINDSET;
      REPEAT
        x := x + 1;
        VendorArray[x] := WHTSlipBuffer."Vendor No.";
        DocumentArray[x] := WHTSlipBuffer."Document No.";
      UNTIL WHTSlipBuffer.NEXT = 0;

      FOR PrintSlips := 1 TO x DO
        BEGIN
        IF (VendorArray[PrintSlips] <> WHTSlipBuffer2) OR
           (DocumentArray[PrintSlips] <> WHTSlipDocument2)
        THEN BEGIN
          WHTSlipNo :=
            NoSeriesMgt.GetNextNo(
              PurchSetup."WHT Certificate No. Series",WHTEntry."Posting Date",TRUE);
          WHTEntry.RESET;
          WHTEntry.SETCURRENTKEY("Bill-to/Pay-to No.","Original Document No.","WHT Revenue Type");
          IF ActualVendorNo THEN
            WHTEntry.SETRANGE("Actual Vendor No.",VendorArray[PrintSlips])
          ELSE
            WHTEntry.SETRANGE("Bill-to/Pay-to No.",VendorArray[PrintSlips]);
          WHTEntry.SETRANGE("Original Document No.",DocumentArray[PrintSlips]);
          IF WHTEntry.FINDSET THEN
            REPEAT
              WHTRevenueTypes.RESET;
              WHTRevenueTypes.SETRANGE(Code,WHTEntry."WHT Revenue Type");
              WHTEntry2.RESET;
              WHTEntry2 := WHTEntry;
              IF WHTRevenueTypes.FINDFIRST THEN BEGIN
                WHTEntry2."WHT Certificate No." := WHTSlipNo;
                WHTEntry2.MODIFY;
              END;
            UNTIL WHTEntry.NEXT = 0;
          WHTEntry.RESET;
          WHTEntry.SETCURRENTKEY("Bill-to/Pay-to No.","Original Document No.","WHT Revenue Type");
          IF ActualVendorNo THEN
            WHTEntry.SETRANGE("Actual Vendor No.",VendorArray[PrintSlips])
          ELSE
            WHTEntry.SETRANGE("Bill-to/Pay-to No.",VendorArray[PrintSlips]);
          WHTEntry.SETRANGE("Original Document No.",DocumentArray[PrintSlips]);
          WHTEntry.SETRANGE("WHT Certificate No.",WHTSlipNo);
          IF WHTEntry.FINDSET THEN
            ReportSelection.RESET;
          ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"WHT Certificate");
          IF ReportSelection.FINDSET THEN
            REPEAT
              REPORT.RUN(ReportSelection."Report ID",PurchSetup."Print Dialog",FALSE,WHTEntry);
            UNTIL ReportSelection.NEXT = 0;
        END;
        WHTSlipBuffer2 := VendorArray[PrintSlips];
        WHTSlipDocument2 := DocumentArray[PrintSlips];
      END;
    END;

    PROCEDURE InsertVendJournalWHT@1500014(VAR GenJnlLine@1500000 : Record 81) EntryNo : Integer;
    BEGIN
      IF ((GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Invoice) AND
          (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::"Credit Memo") AND
          (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) AND
          (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund))
      THEN
        EXIT;

      IF NOT WHTPostingSetup.GET(
           GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group")
      THEN
        EXIT;

      TransType := TransType::Purchase;
      CASE GenJnlLine."Document Type" OF
        GenJnlLine."Document Type"::Invoice:
          DocType := DocType::Invoice;
        GenJnlLine."Document Type"::"Credit Memo":
          DocType := DocType::"Credit Memo";
        GenJnlLine."Document Type"::Payment:
          DocType := DocType::Payment;
        GenJnlLine."Document Type"::Refund:
          DocType := DocType::Refund;
      END;

      PostingDate := GenJnlLine."Posting Date";
      DocNo := GenJnlLine."Document No.";
      PayToAccType := PayToAccType::Vendor;
      PayToVendCustNo := GenJnlLine."Account No.";
      BuyFromAccType := BuyFromAccType::Vendor;
      BuyFromVendCustNo := GenJnlLine."Account No.";
      ActualVendorNo := GenJnlLine."Actual Vendor No.";
      ApplyDocType := GenJnlLine."Applies-to Doc. Type";
      ApplyDocNo := GenJnlLine."Applies-to Doc. No.";
      "Applies-toID" := GenJnlLine."Applies-to ID";
      WHTBusPostGrp := GenJnlLine."WHT Business Posting Group";
      WHTProdPostGrp := GenJnlLine."WHT Product Posting Group";
      WHTPostingSetup.RESET;
      WHTPostingSetup.GET(WHTBusPostGrp,WHTProdPostGrp);
      WHTRevenueType := WHTPostingSetup."Revenue Type";
      Amount := -GenJnlLine.Amount;
      AbsorbBase := -GenJnlLine."WHT Absorb Base";
      IF AbsorbBase <> 0 THEN
        AmountVAT := AbsorbBase
      ELSE
        AmountVAT := Amount;
      CurrFactor := GenJnlLine."Currency Factor";
      DocDate := GenJnlLine."Document Date";
      Dim1 := GenJnlLine."Shortcut Dimension 1 Code";
      Dim2 := GenJnlLine."Shortcut Dimension 2 Code";
      ExtDocNo := GenJnlLine."External Document No.";
      CurrencyCode := GenJnlLine."Currency Code";
      SourceCode := GenJnlLine."Source Code";
      TempGenJnlLine.RESET;
      TempGenJnlLine.DELETEALL;
      TempGenJnlLine := GenJnlLine;
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN BEGIN
        Vendor.GET(GenJnlLine."Account No.");
        IF Vendor.ABN <> '' THEN
          EXIT;
        IF CheckWHTCalculationRule(GenJnlLine."Amount (LCY)",WHTPostingSetup) THEN
          EXIT;
      END;
      EXIT(InsertWHT(TType::Purchase));
    END;

    PROCEDURE InsertCustJournalWHT@1500015(VAR GenJnlLine@1500000 : Record 81) EntryNo : Integer;
    BEGIN
      SourceCodeSetup.GET;
      IF GenJnlLine."Source Code" = SourceCodeSetup.Sales THEN
        EXIT;
      IF ((GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Invoice) AND
          (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::"Credit Memo") AND
          (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) AND
          (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund))
      THEN
        EXIT;

      IF NOT WHTPostingSetup.GET(
           GenJnlLine."WHT Business Posting Group",GenJnlLine."WHT Product Posting Group")
      THEN
        EXIT;

      TransType := TransType::Sale;
      CASE GenJnlLine."Document Type" OF
        GenJnlLine."Document Type"::Invoice:
          DocType := DocType::Invoice;
        GenJnlLine."Document Type"::"Credit Memo":
          DocType := DocType::"Credit Memo";
        GenJnlLine."Document Type"::Payment:
          DocType := DocType::Payment;
        GenJnlLine."Document Type"::Refund:
          DocType := DocType::Refund;
      END;

      PostingDate := GenJnlLine."Posting Date";
      DocNo := GenJnlLine."Document No.";
      PayToAccType := PayToAccType::Customer;
      PayToVendCustNo := GenJnlLine."Account No.";
      BuyFromAccType := BuyFromAccType::Customer;
      BuyFromVendCustNo := GenJnlLine."Account No.";
      ApplyDocType := GenJnlLine."Applies-to Doc. Type";
      ApplyDocNo := GenJnlLine."Applies-to Doc. No.";
      "Applies-toID" := GenJnlLine."Applies-to ID";
      WHTBusPostGrp := GenJnlLine."WHT Business Posting Group";
      WHTProdPostGrp := GenJnlLine."WHT Product Posting Group";
      WHTPostingSetup.RESET;
      WHTPostingSetup.GET(WHTBusPostGrp,WHTProdPostGrp);
      WHTRevenueType := WHTPostingSetup."Revenue Type";
      AbsorbBase := GenJnlLine."WHT Absorb Base";
      Amount := GenJnlLine.Amount;
      IF AbsorbBase <> 0 THEN
        AmountVAT := AbsorbBase
      ELSE
        AmountVAT := Amount;
      CurrFactor := GenJnlLine."Currency Factor";
      DocDate := GenJnlLine."Document Date";
      Dim1 := GenJnlLine."Shortcut Dimension 1 Code";
      Dim2 := GenJnlLine."Shortcut Dimension 2 Code";
      ExtDocNo := GenJnlLine."External Document No.";
      CurrencyCode := GenJnlLine."Currency Code";
      SourceCode := GenJnlLine."Source Code";
      EXIT(InsertWHT(TType::Sale));
    END;

    PROCEDURE InsertWHT@1500016(TransType@1500000 : 'Purchase,Sale') EntryNo : Integer;
    VAR
      WHTEntry@1500003 : Record 28044;
      TempWHTEntry@1500001 : Record 28044;
      VendLedgerEntry@1500004 : Record 25;
      VendLedgerEntry1@1500005 : Record 25;
      CustLedgerEntry@1500007 : Record 21;
      CustLedgerEntry1@1500006 : Record 21;
      TotalWHT@1500008 : Decimal;
      TotalWHTBase@1500009 : Decimal;
      PurchCrMemoHeader@1500010 : Record 124;
      ExpectedAmount@1500012 : Decimal;
      WHTEntryTemp@1500013 : Record 28044;
      VendLedgEntry1@1500015 : Record 25;
      VendLedgEntry@1500014 : Record 25;
      PaymentAmount1@1500016 : Decimal;
      AppldAmount@1500017 : Decimal;
      WHTEntry3@1500018 : Record 28044;
      IsRefund@1500022 : Boolean;
      RemainingAmt@1500023 : Decimal;
    BEGIN
      IF WHTPostingSetup.GET(WHTBusPostGrp,WHTProdPostGrp) THEN
        IF WHTPostingSetup."Realized WHT Type" <> WHTPostingSetup."Realized WHT Type"::" " THEN BEGIN
          UnrealizedWHT := (WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Payment);
          WHTEntry.INIT;
          WHTEntry."Entry No." := NextEntryNo;
          WHTEntry."Gen. Bus. Posting Group" := GenBusPostGrp;
          WHTEntry."Gen. Prod. Posting Group" := GenProdPostGrp;
          WHTEntry."WHT Bus. Posting Group" := WHTBusPostGrp;
          WHTEntry."WHT Prod. Posting Group" := WHTProdPostGrp;
          WHTEntry."Posting Date" := PostingDate;
          WHTEntry."Document Date" := DocDate;
          WHTEntry."Document No." := DocNo;
          WHTEntry."WHT %" := WHTPostingSetup."WHT %";
          WHTEntry."Applies-to Doc. Type" := ApplyDocType;
          WHTEntry."Applies-to Doc. No." := ApplyDocNo;
          WHTEntry."Source Code" := SourceCode;
          WHTEntry."Reason Code" := ReasonCode;
      // UPG09R2.begin
      //YIMMNWHTR

      WHTEntry."Area Code" :=AreaCode;

      //YIMMNWHTR
      // UPG09R2.end
          WHTEntry."WHT Revenue Type" := WHTPostingSetup."Revenue Type";
          WHTEntry."Document Type" := DocType;
          IF TransType = TransType::Purchase THEN
            WHTEntry."Transaction Type" := WHTEntry."Transaction Type"::Purchase
          ELSE
            WHTEntry."Transaction Type" := WHTEntry."Transaction Type"::Sale;
          WHTEntry."Actual Vendor No." := ActualVendorNo;
          WHTEntry."Source Code" := SourceCode;
          WHTEntry."Bill-to/Pay-to No." := PayToVendCustNo;
          WHTEntry."User ID" := USERID;
          WHTEntry."Currency Code" := CurrencyCode;

          // VAT for G/L entry/entries
          IF UnrealizedWHT THEN BEGIN
            WHTEntry.Amount := 0;
            WHTEntry.Base := 0;
            IF AbsorbBase <> 0 THEN
              WHTEntry."Unrealized Base" := AbsorbBase
            ELSE
              WHTEntry."Unrealized Base" := AmountVAT;
            WHTEntry."Unrealized Amount" :=
              ROUND(WHTEntry."Unrealized Base" * WHTEntry."WHT %" / 100);

            IF WHTEntry."Applies-to Doc. No." <> '' THEN BEGIN
              TempWHTEntry.RESET;
              TempWHTEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
              TempWHTEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
              TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
              TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
              IF TempWHTEntry.FINDFIRST THEN BEGIN
                IF ABS(WHTEntry."Unrealized Amount") <=
                   ABS(TempWHTEntry."Remaining Unrealized Amount")
                THEN BEGIN
                  TempWHTEntry."Remaining Unrealized Amount" :=
                    TempWHTEntry."Remaining Unrealized Amount" + WHTEntry."Unrealized Amount";
                  TempWHTEntry."Remaining Unrealized Base" :=
                    TempWHTEntry."Remaining Unrealized Base" + WHTEntry."Unrealized Base";
                  WHTEntry."Remaining Unrealized Amount" := 0;
                  WHTEntry."Remaining Unrealized Base" := 0;
                  WHTEntry.Closed := TRUE;
                END ELSE BEGIN
                  TempWHTEntry."Remaining Unrealized Amount" := 0;
                  TempWHTEntry."Remaining Unrealized Base" := 0;
                  WHTEntry."Remaining Unrealized Amount" :=
                    TempWHTEntry."Remaining Unrealized Amount" + WHTEntry."Unrealized Amount";
                  WHTEntry."Remaining Unrealized Base" :=
                    TempWHTEntry."Remaining Unrealized Base" + WHTEntry."Unrealized Base";
                END;

                IF (TempWHTEntry."Remaining Unrealized Base" = 0) AND
                   (TempWHTEntry."Remaining Unrealized Amount" = 0)
                THEN
                  TempWHTEntry.Closed := TRUE;

                TempWHTEntry.MODIFY;
                WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
              END;
            END ELSE BEGIN
              IF "Applies-toID" <> '' THEN BEGIN
                IF TransType = TransType::Purchase THEN BEGIN
                  VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::"Credit Memo");
                  VendLedgerEntry.SETRANGE("Document No.",WHTEntry."Document No.");
                  IF VendLedgerEntry.FINDFIRST THEN BEGIN
                    VendLedgerEntry1.SETRANGE("Closed by Entry No.",VendLedgerEntry."Entry No.");
                    IF VendLedgerEntry1.FINDSET THEN
                      REPEAT
                        TempWHTEntry.RESET;
                        TempWHTEntry.SETRANGE("Document Type",VendLedgerEntry1."Document Type");
                        TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry1."Document No.");
                        TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                        TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                        IF TempWHTEntry.FINDFIRST THEN BEGIN
                          WHTEntry."Remaining Unrealized Amount" :=
                            TempWHTEntry."Unrealized Amount" +
                            WHTEntry."Unrealized Amount";

                          WHTEntry."Remaining Unrealized Base" :=
                            TempWHTEntry."Unrealized Base" +
                            WHTEntry."Unrealized Base";
                          TempWHTEntry."Remaining Unrealized Amount" := 0;
                          TempWHTEntry."Remaining Unrealized Base" := 0;
                          TempWHTEntry.Closed := TRUE;
                          TempWHTEntry."Applies-to Entry No." := WHTEntry."Entry No.";
                          TempWHTEntry.MODIFY;
                        END;
                      UNTIL VendLedgerEntry1.NEXT = 0;

                    IF VendLedgerEntry."Closed by Entry No." <> 0 THEN BEGIN
                      VendLedgerEntry1.RESET;
                      VendLedgerEntry1.SETRANGE("Entry No.",VendLedgerEntry."Closed by Entry No.");
                      IF VendLedgerEntry1.FINDFIRST THEN BEGIN
                        TempWHTEntry.RESET;
                        TempWHTEntry.SETRANGE("Document Type",VendLedgerEntry1."Document Type");
                        TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry1."Document No.");
                        TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                        TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                        IF TempWHTEntry.FINDFIRST THEN BEGIN
                          IF ABS(WHTEntry."Remaining Unrealized Amount") <=
                             ABS(TempWHTEntry."Remaining Unrealized Amount")
                          THEN BEGIN
                            TempWHTEntry."Remaining Unrealized Amount" :=
                              TempWHTEntry."Remaining Unrealized Amount" +
                              WHTEntry."Remaining Unrealized Amount";
                            TempWHTEntry."Remaining Unrealized Base" :=
                              TempWHTEntry."Remaining Unrealized Base" +
                              WHTEntry."Remaining Unrealized Base";
                            TempWHTEntry.MODIFY;
                            WHTEntry."Remaining Unrealized Amount" := 0;
                            WHTEntry."Remaining Unrealized Base" := 0;
                            WHTEntry.Closed := TRUE;
                            WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                          END;
                        END;
                      END;
                    END;
                  END;
                END;

                IF TransType = TransType::Sale THEN BEGIN
                  CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::"Credit Memo");
                  CustLedgerEntry.SETRANGE("Document No.",WHTEntry."Document No.");
                  IF CustLedgerEntry.FINDFIRST THEN BEGIN
                    CustLedgerEntry1.SETRANGE("Closed by Entry No.",CustLedgerEntry."Entry No.");
                    IF CustLedgerEntry1.FINDSET THEN
                      REPEAT
                        TempWHTEntry.RESET;
                        TempWHTEntry.SETRANGE("Document Type",CustLedgerEntry1."Document Type");
                        TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry1."Document No.");
                        TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                        TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                        IF TempWHTEntry.FINDFIRST THEN BEGIN
                          WHTEntry."Remaining Unrealized Amount" :=
                            TempWHTEntry."Unrealized Amount" + WHTEntry."Unrealized Amount";
                          WHTEntry."Remaining Unrealized Base" :=
                            TempWHTEntry."Unrealized Base" + WHTEntry."Unrealized Base";
                          TempWHTEntry."Remaining Unrealized Amount" := 0;
                          TempWHTEntry."Remaining Unrealized Base" := 0;
                          TempWHTEntry.Closed := TRUE;
                          TempWHTEntry."Applies-to Entry No." := WHTEntry."Entry No.";
                          TempWHTEntry.MODIFY;
                        END;
                      UNTIL CustLedgerEntry1.NEXT = 0;

                    IF CustLedgerEntry."Closed by Entry No." <> 0 THEN BEGIN
                      CustLedgerEntry1.RESET;
                      CustLedgerEntry1.SETRANGE("Entry No.",CustLedgerEntry."Closed by Entry No.");
                      IF CustLedgerEntry1.FINDFIRST THEN BEGIN
                        TempWHTEntry.RESET;
                        TempWHTEntry.SETRANGE("Document Type",CustLedgerEntry1."Document Type");
                        TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry1."Document No.");
                        TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                        TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                        IF TempWHTEntry.FINDFIRST THEN BEGIN
                          IF ABS(WHTEntry."Remaining Unrealized Amount") <=
                             ABS(TempWHTEntry."Remaining Unrealized Amount")
                          THEN BEGIN
                            TempWHTEntry."Remaining Unrealized Amount" :=
                              TempWHTEntry."Remaining Unrealized Amount" +
                              WHTEntry."Remaining Unrealized Amount";
                            TempWHTEntry."Remaining Unrealized Base" :=
                              TempWHTEntry."Remaining Unrealized Base" +
                              WHTEntry."Remaining Unrealized Base";
                            TempWHTEntry.MODIFY;
                            WHTEntry."Remaining Unrealized Amount" := 0;
                            WHTEntry."Remaining Unrealized Base" := 0;
                            WHTEntry.Closed := TRUE;
                            WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                          END;
                        END;
                      END;
                    END;
                  END;
                END;
              END ELSE BEGIN
                WHTEntry."Remaining Unrealized Amount" := WHTEntry."Unrealized Amount";
                WHTEntry."Remaining Unrealized Base" := WHTEntry."Unrealized Base";
              END;
            END;
          END ELSE BEGIN
            IF AbsorbBase <> 0 THEN
              WHTEntry.Base := AbsorbBase
            ELSE
              WHTEntry.Base := AmountVAT;
            WHTEntry."Unrealized Amount" := 0;
            WHTEntry."Unrealized Base" := 0;
            WHTEntry."Remaining Unrealized Amount" := 0;
            WHTEntry."Remaining Unrealized Base" := 0;
            WHTEntry.Amount := ROUND(WHTEntry.Base * WHTEntry."WHT %" / 100);
            WHTEntry."Rem Realized Amount" := WHTEntry.Amount;
            WHTEntry."Rem Realized Base" := WHTEntry.Base;
            WHTEntry."Original Document No." := DocNo;
            WHTEntry."WHT Report" := WHTPostingSetup."WHT Report";
            IF ((WHTReportLineNo = '') AND
                (WHTPostingSetup."WHT Report Line No. Series" <> ''))
            THEN
              WHTEntry."WHT Report Line No" :=
                NoSeriesMgt.GetNextNo(
                  WHTPostingSetup."WHT Report Line No. Series",WHTEntry."Posting Date",TRUE);

            IF TransType = TransType::Purchase THEN BEGIN
              IF ((WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice) OR
                  (WHTEntry."Document Type" = WHTEntry."Document Type"::Payment))
              THEN BEGIN
                WHTEntry.Base := ABS(WHTEntry.Base);
                WHTEntry.Amount := ABS(WHTEntry.Amount);
                WHTEntry."Payment Amount" := ABS(Amount);
                WHTEntry."Rem Realized Base" := WHTEntry.Base;
                WHTEntry."Rem Realized Amount" := WHTEntry.Amount;
                IF (WHTPostingSetup."Realized WHT Type" =
                    WHTPostingSetup."Realized WHT Type"::Earliest)
                THEN BEGIN
                  IF WHTEntry."Applies-to Doc. No." <> '' THEN BEGIN
                    TempWHTEntry.RESET;
                    // TempWHTEntry.SETRANGE(Settled,FALSE);
                    TempWHTEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
                    TempWHTEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
                    TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice THEN
                      TempWHTEntry.SETRANGE(
                        "Document Type",
                        TempWHTEntry."Document Type"::Payment,
                        TempWHTEntry."Document Type"::"Credit Memo");

                    IF WHTEntry."Document Type" = WHTEntry."Document Type"::Payment THEN
                      TempWHTEntry.SETFILTER(
                        "Document Type",
                        '%1|%2',
                        TempWHTEntry."Document Type"::Invoice,
                        TempWHTEntry."Document Type"::Refund);

                    IF TempWHTEntry.FINDFIRST THEN BEGIN
                      IF TempWHTEntry.Prepayment THEN BEGIN
                        PaymentAmount1 := WHTEntry.Base;
                        WHTEntry3.RESET;
                        WHTEntry3 := TempWHTEntry;

                        PurchCrMemoHeader.RESET;
                        PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",WHTEntry."Applies-to Doc. No.");
                        PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                        IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                          TempRemAmt := 0;
                          VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                          VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                          IF VendLedgEntry1.FINDFIRST THEN
                            VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                          WHTEntryTemp.RESET;
                          WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                          WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                          WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                          WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                          WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                          IF WHTEntryTemp.FINDFIRST THEN BEGIN
                            TempRemBase := WHTEntryTemp."Unrealized Amount";
                            TempRemAmt := WHTEntryTemp."Unrealized Base";
                          END;
                        END;

                        VendLedgEntry.RESET;
                        VendLedgEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
                        IF WHTEntry."Applies-to Doc. Type" = WHTEntry."Applies-to Doc. Type"::Invoice THEN
                          VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                        ELSE
                          IF WHTEntry."Applies-to Doc. Type" = WHTEntry."Applies-to Doc. Type"::"Credit Memo" THEN
                            VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
                        IF VendLedgEntry.FINDFIRST THEN
                          VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                        ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                        IF VendLedgEntry1."Amount (LCY)" = 0 THEN
                          VendLedgEntry1."Rem. Amt" := 0;
                        IF (WHTEntry."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                           (ABS(PaymentAmount1) >=
                            (ABS(VendLedgEntry."Rem. Amt" + VendLedgEntry1."Rem. Amt") -
                             ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                        THEN BEGIN
                          AppldAmount :=
                            ROUND(
                              ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                               (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                              ExpectedAmount);
                          WHTEntry3."Remaining Unrealized Base" :=
                            ROUND(
                              TempWHTEntry."Remaining Unrealized Base" -
                              ROUND(
                                ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                                 (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                                ExpectedAmount));
                          WHTEntry3."Remaining Unrealized Amount" :=
                            ROUND(
                              TempWHTEntry."Remaining Unrealized Amount" -
                              ROUND(
                                ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                                 (TempWHTEntry."Unrealized Amount" + TempRemBase)) /
                                ExpectedAmount));
                        END ELSE BEGIN
                          AppldAmount :=
                            ROUND(
                              (PaymentAmount1 * (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                              ExpectedAmount);
                          WHTEntry3."Remaining Unrealized Base" :=
                            ROUND(
                              TempWHTEntry."Remaining Unrealized Base" -
                              ROUND(
                                (PaymentAmount1 * (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                                ExpectedAmount));
                          WHTEntry3."Remaining Unrealized Amount" :=
                            ROUND(
                              TempWHTEntry."Remaining Unrealized Amount" -
                              ROUND(
                                (PaymentAmount1 * (TempWHTEntry."Unrealized Amount" + TempRemBase)) /
                                ExpectedAmount));
                        END;
                        WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        WHTEntry."Unrealized WHT Entry No." := TempWHTEntry."Entry No.";
                        WHTEntry."WHT %" := TempWHTEntry."WHT %";
                        WHTEntry.Base := ROUND(AppldAmount);
                        WHTEntry.Amount := ROUND(WHTEntry.Base * WHTEntry."WHT %" / 100);
                        WHTEntry."Payment Amount" := PaymentAmount1;
                        WHTEntry."Rem Realized Base" := 0;
                        WHTEntry."Rem Realized Amount" := 0;

                        IF CurrencyCode = '' THEN BEGIN
                          WHTEntry3."Rem Unrealized Amount (LCY)" :=
                            TempWHTEntry."Rem Unrealized Amount (LCY)" - WHTEntry.Amount;
                          WHTEntry3."Rem Unrealized Base (LCY)" :=
                            TempWHTEntry."Rem Unrealized Base (LCY)" - WHTEntry.Base;
                        END ELSE BEGIN
                          WHTEntry3."Rem Unrealized Amount (LCY)" := TempWHTEntry."Rem Unrealized Amount (LCY)" -
                            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Amount,CurrFactor));
                          WHTEntry3."Rem Unrealized Base (LCY)" := TempWHTEntry."Rem Unrealized Base (LCY)" -
                            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Base,CurrFactor));
                        END;
                        IF (WHTEntry3."Remaining Unrealized Base" = 0) AND (WHTEntry3."Remaining Unrealized Amount" = 0) THEN
                          WHTEntry3.Closed := TRUE;
                        WHTEntry3.MODIFY;
                      END ELSE BEGIN
                        IF WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice THEN BEGIN
                          IF ABS(TempWHTEntry."Rem Realized Amount") >= ABS(WHTEntry.Amount) THEN BEGIN
                            IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo") OR
                                (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Refund))
                            THEN BEGIN
                              TempWHTEntry."Rem Realized Base" :=
                                TempWHTEntry."Rem Realized Base" + WHTEntry.Base;
                              TempWHTEntry."Rem Realized Amount" :=
                                TempWHTEntry."Rem Realized Amount" + WHTEntry.Amount;
                            END ELSE BEGIN
                              TempWHTEntry."Rem Realized Base" :=
                                TempWHTEntry."Rem Realized Base" - WHTEntry.Base;
                              TempWHTEntry."Rem Realized Amount" :=
                                TempWHTEntry."Rem Realized Amount" - WHTEntry.Amount;
                              WHTEntry.Amount := 0;
                            END;

                            IF CurrencyCode = '' THEN BEGIN
                              TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                              TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                            END ELSE BEGIN
                              TempWHTEntry."Rem Realized Amount (LCY)" :=
                                ROUND(
                                  CurrExchRate.ExchangeAmtFCYToLCY(
                                    DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount",CurrFactor));
                              TempWHTEntry."Rem Realized Base (LCY)" :=
                                ROUND(
                                  CurrExchRate.ExchangeAmtFCYToLCY(
                                    DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base",CurrFactor));
                            END;
                          END ELSE BEGIN
                            IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo") OR
                                (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Refund))
                            THEN BEGIN
                              WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                              WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                            END ELSE BEGIN
                              WHTEntry.Base := WHTEntry.Base - TempWHTEntry."Rem Realized Base";
                              WHTEntry.Amount := WHTEntry.Amount - TempWHTEntry."Rem Realized Amount";
                              WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - TempWHTEntry."Rem Realized Base";
                              WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" - TempWHTEntry."Rem Realized Amount";
                            END;
                            TempWHTEntry."Rem Realized Base" := 0;
                            TempWHTEntry."Rem Realized Amount" := 0;
                            TempWHTEntry."Rem Realized Base (LCY)" := 0;
                            TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                          END;
                        END ELSE BEGIN
                          TotAmt := 0;
                          TotAmt := TempGenJnlLine.Amount;
                          VendLedgerEntry.RESET;
                          VendLedgerEntry.SETRANGE("Document No.",TempWHTEntry."Document No.");
                          VendLedgerEntry.SETRANGE("Document Type",TempWHTEntry."Document Type");
                          IF VendLedgerEntry.FINDFIRST THEN BEGIN
                            TempVendLedgEntry.RESET;
                            TempVendLedgEntry.SETRANGE("Entry No.",VendLedgerEntry."Entry No.");
                            IF TempVendLedgEntry.FINDSET THEN BEGIN
                              TempVendLedgEntry.CALCFIELDS(
                                Amount,"Amount (LCY)",
                                "Remaining Amount","Remaining Amt. (LCY)");

                              IF ((WHTEntry."Document Type" = WHTEntry."Document Type"::Payment) AND
                                  (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Invoice))
                              THEN
                                BEGIN
                                IF CheckPmtDisc(
                                     TempGenJnlLine."Posting Date",
                                     TempVendLedgEntry."Pmt. Discount Date",
                                     ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                     ABS(TempVendLedgEntry."Rem. Amt"),
                                     ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                     ABS(TotAmt))
                                THEN
                                  TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";
                              END;

                              IF ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt) THEN BEGIN
                                IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo") OR
                                    (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Refund))
                                THEN BEGIN
                                  WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                  WHTEntry."Rem Realized Amount" :=
                                    WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                END ELSE BEGIN
                                  IF CheckPmtDisc(
                                       TempGenJnlLine."Posting Date",
                                       TempVendLedgEntry."Pmt. Discount Date",
                                       ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                       ABS(TempVendLedgEntry."Rem. Amt"),
                                       ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                       ABS(TotAmt))
                                  THEN BEGIN
                                    WHTEntry.Base := (WHTEntry.Base -
                                                      ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                                        TempVendLedgEntry."Original Pmt. Disc. Possible")) - ABS(TempWHTEntry.Amount);
                                    WHTEntry.Amount :=
                                      ROUND(WHTEntry.Base * WHTEntry."WHT %" / 100);
                                    WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" -
                                      ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                        TempVendLedgEntry."Original Pmt. Disc. Possible" - TempWHTEntry.Amount);
                                    WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" -
                                      ROUND(ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                          TempVendLedgEntry."Original Pmt. Disc. Possible" - TempWHTEntry.Amount) *
                                        WHTEntry."WHT %" / 100);
                                  END ELSE BEGIN
                                    WHTEntry.Base := (WHTEntry.Base -
                                                      ABS(TempVendLedgEntry."Rem. Amt for WHT")) - ABS(TempWHTEntry.Amount);
                                    WHTEntry.Amount :=
                                      ROUND(WHTEntry.Base * WHTEntry."WHT %" / 100);
                                    WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" -
                                      ABS(TempVendLedgEntry."Rem. Amt for WHT" - TempWHTEntry.Amount);
                                    WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" -
                                      ROUND(ABS(TempVendLedgEntry."Rem. Amt for WHT" - TempWHTEntry.Amount) * WHTEntry."WHT %" / 100);
                                  END;
                                END;
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo") OR
                                    (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Refund))
                                THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" + WHTEntry.Base;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" + WHTEntry.Amount;
                                END ELSE BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" - TotAmt;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" - ROUND(ABS(TotAmt) * WHTEntry."WHT %" / 100);
                                  WHTEntry.Amount := 0;
                                END;

                                IF CurrencyCode = '' THEN BEGIN
                                  TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                  TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                                END ELSE BEGIN
                                  TempWHTEntry."Rem Realized Amount (LCY)" :=
                                    ROUND(
                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                        DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount",CurrFactor));
                                  TempWHTEntry."Rem Realized Base (LCY)" :=
                                    ROUND(
                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                        DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base",CurrFactor));
                                END;
                                TotAmt := 0;
                              END;
                            END;
                          END;
                        END;

                        IF (TempWHTEntry."Rem Realized Amount" = 0) AND
                           (TempWHTEntry."Rem Realized Base" = 0)
                        THEN
                          TempWHTEntry.Closed := TRUE;
                        TempWHTEntry.MODIFY;
                      END;
                    END;
                  END ELSE BEGIN
                    IF "Applies-toID" <> '' THEN BEGIN
                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Payment THEN BEGIN
                        TotAmt := 0;
                        RemainingAmt := 0;
                        TempVendLedgEntry1.RESET;
                        TempVendLedgEntry1.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
                        IF TempVendLedgEntry1.FINDSET(TRUE,FALSE) THEN
                          REPEAT
                            TempVendLedgEntry1.CALCFIELDS(
                              Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
                              "Original Amount","Original Amt. (LCY)");
                            IF TempVendLedgEntry1."Rem. Amt for WHT" = 0 THEN
                              TempVendLedgEntry1."Rem. Amt for WHT" := TempVendLedgEntry1."Remaining Amt. (LCY)";
                            RemainingAmt := RemainingAmt + TempVendLedgEntry1."Rem. Amt for WHT";
                          UNTIL TempVendLedgEntry1.NEXT = 0;
                        TotAmt := ABS(TempGenJnlLine.Amount);
                        VendLedgerEntry.RESET;
                        VendLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Refund);
                        IF VendLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := WHTEntry."Rem Realized Base";
                          TotalWHT := WHTEntry."Rem Realized Amount";
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF ABS(TotalWHT) > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry."Rem Realized Base" :=
                                  WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (ABS(TotalWHT) > 0) AND (ABS(TotalWHT) <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL VendLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;

                        VendLedgerEntry.RESET;
                        VendLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
                        IF VendLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := WHTEntry."Rem Realized Base";
                          TotalWHT := WHTEntry."Rem Realized Amount";
                          REPEAT
                            IF VendLedgerEntry.Prepayment THEN BEGIN
                              TempVendLedgEntry.RESET;
                              TempVendLedgEntry.SETRANGE("Entry No.",VendLedgerEntry."Entry No.");
                              IF TempVendLedgEntry.FINDFIRST THEN BEGIN
                                TempVendLedgEntry.CALCFIELDS(
                                  Amount,"Amount (LCY)",
                                  "Remaining Amount","Remaining Amt. (LCY)");

                                IF CheckPmtDisc(
                                     TempGenJnlLine."Posting Date",
                                     TempVendLedgEntry."Pmt. Discount Date",
                                     ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                     ABS(TempVendLedgEntry."Rem. Amt"),
                                     ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                     ABS(TotAmt))
                                THEN
                                  TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

                                IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
                                   (ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
                                THEN BEGIN
                                  IF CheckPmtDisc(
                                       TempGenJnlLine."Posting Date",
                                       TempVendLedgEntry."Pmt. Discount Date",
                                       ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                       ABS(TempVendLedgEntry."Rem. Amt"),
                                       ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                       ABS(TotAmt))
                                  THEN BEGIN
                                    TempGenJnlLine.VALIDATE(
                                      Amount,
                                      ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                        TempVendLedgEntry."Original Pmt. Disc. Possible"));

                                    IF TempVendLedgEntry."Document Type" <>
                                       TempVendLedgEntry."Document Type"::"Credit Memo"
                                    THEN
                                      TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";

                                    RemainingAmt :=
                                      RemainingAmt -
                                      TempVendLedgEntry."Rem. Amt for WHT";
                                  END ELSE BEGIN
                                    TempGenJnlLine.VALIDATE(Amount,ABS(TempVendLedgEntry."Rem. Amt for WHT"));
                                    IF TempVendLedgEntry."Document Type" <>
                                       TempVendLedgEntry."Document Type"::"Credit Memo"
                                    THEN
                                      TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
                                    RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
                                  END;
                                END ELSE BEGIN
                                  IF CheckPmtDisc(
                                       TempGenJnlLine."Posting Date",
                                       TempVendLedgEntry."Pmt. Discount Date",
                                       ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                       ABS(TempVendLedgEntry."Rem. Amt"),
                                       ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                       ABS(TotAmt))
                                  THEN
                                    TempGenJnlLine.VALIDATE(Amount,TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
                                  ELSE
                                    TempGenJnlLine.VALIDATE(Amount,TotAmt);
                                  WHTEntry.Amount := 0;
                                  TotAmt := 0;
                                END;

                                IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
                                  TempGenJnlLine."Applies-to Doc. Type" := TempGenJnlLine."Applies-to Doc. Type"::Invoice
                                ELSE BEGIN
                                  IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                                    TempGenJnlLine."Applies-to Doc. Type" := TempGenJnlLine."Applies-to Doc. Type"::"Credit Memo";
                                  RemainingAmt := RemainingAmt + TempVendLedgEntry."Rem. Amt for WHT";
                                  TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
                                END;
                                TempGenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
                                PaymentAmount1 := TempGenJnlLine.Amount;

                                TempWHTEntry.RESET;
                                TempWHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
                                TempWHTEntry.SETRANGE("Transaction Type",TempWHTEntry."Transaction Type"::Purchase);
                                IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
                                  TempWHTEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
                                  TempWHTEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
                                END ELSE
                                  TempWHTEntry.SETRANGE("Bill-to/Pay-to No.",TempGenJnlLine."Account No.");
                                IF TempWHTEntry.FINDSET THEN
                                  REPEAT
                                    WHTEntry3.RESET;
                                    WHTEntry3 := TempWHTEntry;
                                    PurchCrMemoHeader.RESET;
                                    PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",TempGenJnlLine."Applies-to Doc. No.");
                                    PurchCrMemoHeader.SETRANGE(
                                      "Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                                    IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                                      TempRemAmt := 0;
                                      VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                                      VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                                      IF VendLedgEntry1.FINDFIRST THEN
                                        VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                                      WHTEntryTemp.RESET;
                                      WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                                      WHTEntryTemp.SETRANGE("Document Type",TempWHTEntry."Document Type"::"Credit Memo");
                                      WHTEntryTemp.SETRANGE("Transaction Type",TempWHTEntry."Transaction Type"::Purchase);
                                      WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",TempWHTEntry."WHT Bus. Posting Group");
                                      WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",TempWHTEntry."WHT Prod. Posting Group");
                                      IF WHTEntryTemp.FINDFIRST THEN BEGIN
                                        TempRemBase := WHTEntryTemp."Unrealized Amount";
                                        TempRemAmt := WHTEntryTemp."Unrealized Base";
                                      END;
                                    END;

                                    VendLedgEntry.RESET;
                                    VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
                                    IF TempGenJnlLine."Applies-to Doc. Type" = TempGenJnlLine."Applies-to Doc. Type"::Invoice THEN
                                      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                                    ELSE
                                      IF TempGenJnlLine."Applies-to Doc. Type" =
                                         TempGenJnlLine."Applies-to Doc. Type"::"Credit Memo"
                                      THEN
                                        VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
                                    IF VendLedgEntry.FINDFIRST THEN
                                      VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                    ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                                    IF VendLedgEntry1."Amount (LCY)" = 0 THEN
                                      VendLedgEntry1."Rem. Amt" := 0;
                                    IF (TempGenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                                       (ABS(PaymentAmount1) >=
                                        (ABS(VendLedgEntry."Rem. Amt" + VendLedgEntry1."Rem. Amt") -
                                         ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                                    THEN BEGIN
                                      AppldAmount :=
                                        ROUND(
                                          ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                                           (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                                          ExpectedAmount);
                                      WHTEntry3."Remaining Unrealized Base" :=
                                        ROUND(
                                          TempWHTEntry."Remaining Unrealized Base" -
                                          ROUND(
                                            ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                                             (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                                            ExpectedAmount));
                                      WHTEntry3."Remaining Unrealized Amount" :=
                                        ROUND(
                                          TempWHTEntry."Remaining Unrealized Amount" -
                                          ROUND(
                                            ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                                             (TempWHTEntry."Unrealized Amount" + TempRemBase)) /
                                            ExpectedAmount));
                                    END ELSE BEGIN
                                      AppldAmount :=
                                        ROUND(
                                          (PaymentAmount1 *
                                           (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                                          ExpectedAmount);
                                      WHTEntry3."Remaining Unrealized Base" :=
                                        ROUND(
                                          TempWHTEntry."Remaining Unrealized Base" -
                                          ROUND(
                                            (PaymentAmount1 * (TempWHTEntry."Unrealized Base" + TempRemAmt)) /
                                            ExpectedAmount));
                                      WHTEntry3."Remaining Unrealized Amount" :=
                                        ROUND(
                                          TempWHTEntry."Remaining Unrealized Amount" -
                                          ROUND(
                                            (PaymentAmount1 * (TempWHTEntry."Unrealized Amount" + TempRemBase)) /
                                            ExpectedAmount));
                                    END;

                                    InitWHTEntry(TempWHTEntry,AppldAmount,PaymentAmount1,WHTEntry3);
                                  UNTIL TempWHTEntry.NEXT(-1) = 0;
                              END;
                            END ELSE BEGIN
                              TempWHTEntry.RESET;
                              // TempWHTEntry.SETRANGE(Settled,FALSE);
                              TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry."Document No.");
                              TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                              TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                              IF TempWHTEntry.FINDFIRST THEN BEGIN
                                TempVendLedgEntry.RESET;
                                TempVendLedgEntry.SETRANGE("Entry No.",VendLedgerEntry."Entry No.");
                                IF TempVendLedgEntry.FINDFIRST THEN BEGIN
                                  TempVendLedgEntry.CALCFIELDS(
                                    Amount,"Amount (LCY)",
                                    "Remaining Amount","Remaining Amt. (LCY)");

                                  IF CheckPmtDisc(
                                       TempGenJnlLine."Posting Date",
                                       TempVendLedgEntry."Pmt. Discount Date",
                                       ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                       ABS(TempVendLedgEntry."Rem. Amt"),
                                       ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                       ABS(TotAmt))
                                  THEN
                                    TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

                                  IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
                                     (ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
                                  THEN BEGIN
                                    IF CheckPmtDisc(
                                         TempGenJnlLine."Posting Date",
                                         TempVendLedgEntry."Pmt. Discount Date",
                                         ABS(TempVendLedgEntry."Rem. Amt for WHT"),
                                         ABS(TempVendLedgEntry."Rem. Amt"),
                                         ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                                         ABS(TotAmt))
                                    THEN BEGIN
                                      IF TempVendLedgEntry."Document Type" <>
                                         TempVendLedgEntry."Document Type"::"Credit Memo"
                                      THEN
                                        TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";

                                      RemainingAmt :=
                                        RemainingAmt -
                                        TempVendLedgEntry."Rem. Amt for WHT" +
                                        TempVendLedgEntry."Original Pmt. Disc. Possible";

                                      WHTEntry.Base := WHTEntry.Base -
                                        ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                          TempVendLedgEntry."Original Pmt. Disc. Possible");
                                      WHTEntry.Amount := WHTEntry.Amount -
                                        ROUND(ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                            TempVendLedgEntry."Original Pmt. Disc. Possible") * WHTEntry."WHT %" / 100);
                                      WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" -
                                        ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                          TempVendLedgEntry."Original Pmt. Disc. Possible");
                                      WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" -
                                        ROUND(ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                                            TempVendLedgEntry."Original Pmt. Disc. Possible") * WHTEntry."WHT %" / 100);
                                    END ELSE BEGIN
                                      IF TempVendLedgEntry."Document Type" <>
                                         TempVendLedgEntry."Document Type"::"Credit Memo"
                                      THEN
                                        TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
                                      RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";

                                      WHTEntry.Base := WHTEntry.Base -
                                        ABS(TempVendLedgEntry."Rem. Amt for WHT");
                                      WHTEntry.Amount := WHTEntry.Amount -
                                        ROUND(ABS(TempVendLedgEntry."Rem. Amt for WHT") * WHTEntry."WHT %" / 100);
                                      WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" -
                                        ABS(TempVendLedgEntry."Rem. Amt for WHT");
                                      WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" -
                                        ROUND(ABS(TempVendLedgEntry."Rem. Amt for WHT") * WHTEntry."WHT %" / 100);
                                    END;
                                    TempWHTEntry."Rem Realized Base" := 0;
                                    TempWHTEntry."Rem Realized Amount" := 0;
                                    TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                    TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                                  END ELSE BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" - TotAmt;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" -
                                      ROUND(ABS(TotAmt) * WHTEntry."WHT %" / 100);
                                    WHTEntry.Amount := 0;
                                    TotAmt := 0;
                                  END;
                                END;

                                IF CurrencyCode = '' THEN BEGIN
                                  TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                  TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                                END ELSE BEGIN
                                  TempWHTEntry."Rem Realized Amount (LCY)" :=
                                    ROUND(
                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                        DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                  TempWHTEntry."Rem Realized Base (LCY)" :=
                                    ROUND(
                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                        DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                                END;
                                IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                    (TempWHTEntry."Rem Realized Base" = 0))
                                THEN
                                  TempWHTEntry.Closed := TRUE;
                                TempWHTEntry.MODIFY;
                              END;
                            END;
                          UNTIL VendLedgerEntry.NEXT = 0;
                          IF TotAmt > 0 THEN
                            BEGIN
                            WHTEntry.Base := TotAmt;
                            WHTEntry.Amount := ROUND(TotAmt * WHTPostingSetup."WHT %" / 100);
                            WHTEntry."Rem Realized Amount" := WHTEntry.Amount;
                            WHTEntry."Rem Realized Base" := WHTEntry.Base;
                            WHTEntry."Entry No." := NextEntryNo;
                          END ELSE
                            WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;

                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice THEN BEGIN
                        VendLedgerEntry.RESET;
                        VendLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        VendLedgerEntry.SETFILTER(
                          "Document Type",
                          '%1|%2',
                          VendLedgerEntry."Document Type"::Payment,
                          VendLedgerEntry."Document Type"::"Credit Memo");
                        IF VendLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment THEN BEGIN
                                  WHTEntry.Base := WHTEntry.Base - ABS(TempWHTEntry."Rem Realized Base");
                                  WHTEntry.Amount := WHTEntry.Amount - ABS(TempWHTEntry."Rem Realized Amount");
                                END;
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - ABS(TempWHTEntry."Rem Realized Base");
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" - ABS(TempWHTEntry."Rem Realized Amount");
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - ABS(TempWHTEntry."Rem Realized Base");
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" - ABS(TempWHTEntry."Rem Realized Amount");
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (TotalWHT <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo" THEN BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                  END ELSE BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                    WHTEntry.Base := 0;
                                    WHTEntry.Amount := 0;
                                  END;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL VendLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;
                    END;
                  END;
                END;
              END;

              // Purchase Credit Memo & Refund
              IF ((WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo") OR
                  (WHTEntry."Document Type" = WHTEntry."Document Type"::Refund))
              THEN BEGIN
                WHTEntry.Base := -ABS(WHTEntry.Base);
                WHTEntry.Amount := -ABS(WHTEntry.Amount);
                WHTEntry."Payment Amount" := -ABS(Amount);
                WHTEntry."Rem Realized Base" := WHTEntry.Base;
                WHTEntry."Rem Realized Amount" := WHTEntry.Amount;
                IF (WHTPostingSetup."Realized WHT Type" =
                    WHTPostingSetup."Realized WHT Type"::Earliest)
                THEN BEGIN
                  IF WHTEntry."Applies-to Doc. No." <> '' THEN BEGIN
                    TempWHTEntry.RESET;
                    // TempWHTEntry.SETRANGE(Settled,FALSE);
                    TempWHTEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
                    TempWHTEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
                    TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo" THEN
                      TempWHTEntry.SETFILTER(
                        "Document Type",
                        '%1|%2',
                        TempWHTEntry."Document Type"::Refund,
                        TempWHTEntry."Document Type"::Invoice);

                    IF WHTEntry."Document Type" = WHTEntry."Document Type"::Refund THEN
                      TempWHTEntry.SETFILTER(
                        "Document Type",
                        '%1|%2',
                        TempWHTEntry."Document Type"::"Credit Memo",
                        TempWHTEntry."Document Type"::Payment);

                    IF TempWHTEntry.FINDFIRST THEN BEGIN
                      IF ABS(TempWHTEntry."Rem Realized Amount") >= ABS(WHTEntry.Amount) THEN BEGIN
                        IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Invoice) OR
                            (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment))
                        THEN BEGIN
                          TempWHTEntry."Rem Realized Base" :=
                            TempWHTEntry."Rem Realized Base" + WHTEntry.Base;
                          TempWHTEntry."Rem Realized Amount" :=
                            TempWHTEntry."Rem Realized Amount" + WHTEntry.Amount;
                          WHTEntry."Rem Realized Base" := 0;
                          WHTEntry."Rem Realized Amount" := 0;
                        END ELSE BEGIN
                          TempWHTEntry."Rem Realized Base" :=
                            TempWHTEntry."Rem Realized Base" - WHTEntry.Base;
                          TempWHTEntry."Rem Realized Amount" :=
                            TempWHTEntry."Rem Realized Amount" - WHTEntry.Amount;
                          WHTEntry.Amount := 0;
                        END;

                        IF CurrencyCode = '' THEN BEGIN
                          TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                          TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                        END ELSE BEGIN
                          TempWHTEntry."Rem Realized Amount (LCY)" :=
                            ROUND(
                              CurrExchRate.ExchangeAmtFCYToLCY(
                                DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                          TempWHTEntry."Rem Realized Base (LCY)" :=
                            ROUND(
                              CurrExchRate.ExchangeAmtFCYToLCY(
                                DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                        END;
                      END ELSE BEGIN
                        IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Invoice) OR
                            (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment))
                        THEN BEGIN
                          WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                          WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                        END ELSE BEGIN
                          WHTEntry.Base := WHTEntry.Base - TempWHTEntry."Rem Realized Base";
                          WHTEntry.Amount := WHTEntry.Amount - TempWHTEntry."Rem Realized Amount";
                          WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - TempWHTEntry."Rem Realized Base";
                          WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" - TempWHTEntry."Rem Realized Amount";
                        END;
                        TempWHTEntry."Rem Realized Base" := 0;
                        TempWHTEntry."Rem Realized Amount" := 0;
                        TempWHTEntry."Rem Realized Base (LCY)" := 0;
                        TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                      END;

                      IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                          (TempWHTEntry."Rem Realized Base" = 0))
                      THEN
                        TempWHTEntry.Closed := TRUE;
                      TempWHTEntry.MODIFY;
                    END;
                  END ELSE BEGIN
                    IF "Applies-toID" <> '' THEN BEGIN
                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo" THEN BEGIN
                        VendLedgerEntry.RESET;
                        VendLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Refund);
                        IF VendLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := WHTEntry."Rem Realized Base";
                          TotalWHT := WHTEntry."Rem Realized Amount";
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF ABS(TotalWHT) > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry.Base := WHTEntry.Base + TempWHTEntry."Rem Realized Base";
                                WHTEntry.Amount := WHTEntry.Amount + TempWHTEntry."Rem Realized Amount";
                                WHTEntry."Rem Realized Base" :=
                                  WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (ABS(TotalWHT) > 0) AND (ABS(TotalWHT) <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                  WHTEntry.Base := 0;
                                  WHTEntry.Amount := 0;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL VendLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;

                        VendLedgerEntry.RESET;
                        VendLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
                        IF VendLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (ABS(TotalWHT) <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL VendLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;

                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Refund THEN BEGIN
                        VendLedgerEntry.RESET;
                        VendLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        VendLedgerEntry.SETFILTER(
                          "Document Type",
                          '%1|%2',
                          VendLedgerEntry."Document Type"::Payment,
                          VendLedgerEntry."Document Type"::"Credit Memo");
                        IF VendLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",VendLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo" THEN BEGIN
                                  WHTEntry.Base := WHTEntry.Base + ABS(TempWHTEntry."Rem Realized Base");
                                  WHTEntry.Amount := WHTEntry.Amount + ABS(TempWHTEntry."Rem Realized Amount");
                                END;
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + ABS(TempWHTEntry."Rem Realized Base");
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" + ABS(TempWHTEntry."Rem Realized Amount");
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (TotalWHT <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  IF  TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment THEN BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                  END ELSE BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                    WHTEntry.Base := 0;
                                    WHTEntry.Amount := 0;
                                  END;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL VendLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;
                    END;
                  END;
                END;
              END;
            END;

            IF TransType = TransType::Sale THEN BEGIN
              IF ((WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice) OR
                  (WHTEntry."Document Type" = WHTEntry."Document Type"::Payment))
              THEN BEGIN
                WHTEntry.Base := -ABS(WHTEntry.Base);
                WHTEntry.Amount := -ABS(WHTEntry.Amount);
                WHTEntry."Payment Amount" := -ABS(Amount);
                WHTEntry."Rem Realized Base" := WHTEntry.Base;
                WHTEntry."Rem Realized Amount" := WHTEntry.Amount;
                IF (WHTPostingSetup."Realized WHT Type" =
                    WHTPostingSetup."Realized WHT Type"::Earliest)
                THEN BEGIN
                  IF WHTEntry."Applies-to Doc. No." <> '' THEN BEGIN
                    CustLedgerEntry.RESET;
                    CustLedgerEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
                    CustLedgerEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
                    CustLedgerEntry.SETRANGE(Prepayment,FALSE);
                    IF CustLedgerEntry.FINDFIRST THEN BEGIN
                      TempWHTEntry.RESET;
                      TempWHTEntry.SETRANGE(Settled,FALSE);
                      TempWHTEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
                      TempWHTEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
                      TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                      TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice THEN
                        TempWHTEntry.SETFILTER(
                          "Document Type",
                          '%1|%2',
                          TempWHTEntry."Document Type"::Payment,
                          TempWHTEntry."Document Type"::"Credit Memo");

                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Payment THEN
                        TempWHTEntry.SETFILTER(
                          "Document Type",
                          '%1|%2',
                          TempWHTEntry."Document Type"::Invoice,
                          TempWHTEntry."Document Type"::Refund);

                      IF TempWHTEntry.FINDFIRST THEN BEGIN
                        IF ABS(TempWHTEntry."Rem Realized Amount") >= ABS(WHTEntry.Amount) THEN BEGIN
                          IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo") OR
                              (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Refund))
                          THEN BEGIN
                            TempWHTEntry."Rem Realized Base" :=
                              TempWHTEntry."Rem Realized Base" - WHTEntry.Base;
                            TempWHTEntry."Rem Realized Amount" :=
                              TempWHTEntry."Rem Realized Amount" - WHTEntry.Amount;
                            WHTEntry."Rem Realized Base" := 0;
                            WHTEntry."Rem Realized Amount" := 0;
                          END ELSE BEGIN
                            TempWHTEntry."Rem Realized Base" :=
                              TempWHTEntry."Rem Realized Base" - WHTEntry.Base;
                            TempWHTEntry."Rem Realized Amount" :=
                              TempWHTEntry."Rem Realized Amount" - WHTEntry.Amount;
                            WHTEntry.Amount := 0;
                          END;

                          IF CurrencyCode = '' THEN BEGIN
                            TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                            TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                          END ELSE BEGIN
                            TempWHTEntry."Rem Realized Amount (LCY)" :=
                              ROUND(
                                CurrExchRate.ExchangeAmtFCYToLCY(
                                  DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                            TempWHTEntry."Rem Realized Base (LCY)" :=
                              ROUND(
                                CurrExchRate.ExchangeAmtFCYToLCY(
                                  DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                          END;
                        END ELSE BEGIN
                          IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo") OR
                              (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Refund))
                          THEN BEGIN
                            WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - TempWHTEntry."Rem Realized Base";
                            WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" - TempWHTEntry."Rem Realized Amount";
                          END ELSE BEGIN
                            WHTEntry.Base := WHTEntry.Base - TempWHTEntry."Rem Realized Base";
                            WHTEntry.Amount := WHTEntry.Amount - TempWHTEntry."Rem Realized Amount";
                            WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - TempWHTEntry."Rem Realized Base";
                            WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" - TempWHTEntry."Rem Realized Amount";
                          END;
                          TempWHTEntry."Rem Realized Base" := 0;
                          TempWHTEntry."Rem Realized Amount" := 0;
                          TempWHTEntry."Rem Realized Base (LCY)" := 0;
                          TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                        END;

                        IF (TempWHTEntry."Rem Realized Amount" = 0) AND
                           (TempWHTEntry."Rem Realized Base" = 0)
                        THEN
                          TempWHTEntry.Closed := TRUE;
                        TempWHTEntry.MODIFY;
                      END;
                    END ELSE
                      WHTEntry.Amount := 0;
                  END ELSE BEGIN
                    IF "Applies-toID" <> '' THEN BEGIN
                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Payment THEN BEGIN
                        IsRefund := FALSE;
                        CustLedgerEntry.RESET;
                        CustLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Refund);
                        IF CustLedgerEntry.FINDFIRST THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          IsRefund := TRUE;
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry."Rem Realized Base" :=
                                  WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (ABS(TotalWHT) <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL CustLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;

                        CustLedgerEntry.RESET;
                        CustLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
                        CustLedgerEntry.SETRANGE(Prepayment,FALSE);
                        IF CustLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry.Base := WHTEntry.Base + TempWHTEntry."Rem Realized Base";
                                WHTEntry.Amount := WHTEntry.Amount + TempWHTEntry."Rem Realized Amount";
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (ABS(TotalWHT) <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                  WHTEntry.Base := 0;
                                  WHTEntry.Amount := 0;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL CustLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END ELSE
                          IF NOT IsRefund THEN
                            WHTEntry.Amount := 0;
                      END;

                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice THEN BEGIN
                        CustLedgerEntry.RESET;
                        CustLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        CustLedgerEntry.SETFILTER(
                          "Document Type",
                          '%1|%2',
                          CustLedgerEntry."Document Type"::Payment,
                          CustLedgerEntry."Document Type"::"Credit Memo");
                        IF CustLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment THEN BEGIN
                                  WHTEntry.Base := WHTEntry.Base + ABS(TempWHTEntry."Rem Realized Base");
                                  WHTEntry.Amount := WHTEntry.Amount + ABS(TempWHTEntry."Rem Realized Amount");
                                END;
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + ABS(TempWHTEntry."Rem Realized Base");
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" + ABS(TempWHTEntry."Rem Realized Amount");
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (TotalWHT <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo" THEN BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                  END ELSE BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                    WHTEntry.Base := 0;
                                    WHTEntry.Amount := 0;
                                  END;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL CustLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;
                    END;
                  END;
                END;
              END;

              // sales Credit Memo & Refund
              IF ((WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo") OR
                  (WHTEntry."Document Type" = WHTEntry."Document Type"::Refund))
              THEN BEGIN
                WHTEntry.Base := ABS(WHTEntry.Base);
                WHTEntry.Amount := ABS(WHTEntry.Amount);
                WHTEntry."Payment Amount" := ABS(Amount);
                WHTEntry."Rem Realized Base" := WHTEntry.Base;
                WHTEntry."Rem Realized Amount" := WHTEntry.Amount;
                IF (WHTPostingSetup."Realized WHT Type" =
                    WHTPostingSetup."Realized WHT Type"::Earliest)
                THEN BEGIN
                  IF WHTEntry."Applies-to Doc. No." <> '' THEN BEGIN
                    TempWHTEntry.RESET;
                    TempWHTEntry.SETRANGE(Settled,FALSE);
                    TempWHTEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
                    TempWHTEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
                    TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo" THEN
                      TempWHTEntry.SETFILTER(
                        "Document Type",
                        '%1|%2',
                        TempWHTEntry."Document Type"::Refund,
                        TempWHTEntry."Document Type"::Invoice);

                    IF WHTEntry."Document Type" = WHTEntry."Document Type"::Refund THEN
                      TempWHTEntry.SETFILTER(
                        "Document Type",
                        '%1|%2',
                        TempWHTEntry."Document Type"::"Credit Memo",
                        TempWHTEntry."Document Type"::Payment);

                    IF TempWHTEntry.FINDFIRST THEN BEGIN
                      IF ABS(TempWHTEntry."Rem Realized Amount") >= ABS(WHTEntry.Amount) THEN BEGIN
                        IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Invoice) OR
                            (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment))
                        THEN BEGIN
                          TempWHTEntry."Rem Realized Base" :=
                            TempWHTEntry."Rem Realized Base" + WHTEntry.Base;
                          TempWHTEntry."Rem Realized Amount" :=
                            TempWHTEntry."Rem Realized Amount" + WHTEntry.Amount;
                          WHTEntry."Rem Realized Base" := 0;
                          WHTEntry."Rem Realized Amount" := 0;
                        END ELSE BEGIN
                          TempWHTEntry."Rem Realized Base" :=
                            TempWHTEntry."Rem Realized Base" - WHTEntry.Base;
                          TempWHTEntry."Rem Realized Amount" :=
                            TempWHTEntry."Rem Realized Amount" - WHTEntry.Amount;
                          WHTEntry.Amount := 0;
                        END;

                        IF CurrencyCode = '' THEN BEGIN
                          TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                          TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                        END ELSE BEGIN
                          TempWHTEntry."Rem Realized Amount (LCY)" :=
                            ROUND(
                              CurrExchRate.ExchangeAmtFCYToLCY(
                                DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                          TempWHTEntry."Rem Realized Base (LCY)" :=
                            ROUND(
                              CurrExchRate.ExchangeAmtFCYToLCY(
                                DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                        END;
                      END ELSE BEGIN
                        IF ((TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Invoice) OR
                            (TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment))
                        THEN BEGIN
                          WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                          WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                        END ELSE BEGIN
                          WHTEntry.Base := WHTEntry.Base - TempWHTEntry."Rem Realized Base";
                          WHTEntry.Amount := WHTEntry.Amount - TempWHTEntry."Rem Realized Amount";
                          WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - TempWHTEntry."Rem Realized Base";
                          WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" - TempWHTEntry."Rem Realized Amount";
                        END;
                        TempWHTEntry."Rem Realized Base" := 0;
                        TempWHTEntry."Rem Realized Amount" := 0;
                        TempWHTEntry."Rem Realized Base (LCY)" := 0;
                        TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                      END;

                      IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                          (TempWHTEntry."Rem Realized Base" = 0))
                      THEN
                        TempWHTEntry.Closed := TRUE;
                      TempWHTEntry.MODIFY;
                    END;
                  END ELSE BEGIN
                    IF "Applies-toID" <> '' THEN BEGIN
                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo" THEN BEGIN
                        CustLedgerEntry.RESET;
                        CustLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Refund);
                        IF CustLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry.Base := WHTEntry.Base - TempWHTEntry."Rem Realized Base";
                                WHTEntry.Amount := WHTEntry.Amount - TempWHTEntry."Rem Realized Amount";
                                WHTEntry."Rem Realized Base" :=
                                  WHTEntry."Rem Realized Base" - TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" - TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (TotalWHT <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                  WHTEntry.Base := 0;
                                  WHTEntry.Amount := 0;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL CustLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;

                        CustLedgerEntry.RESET;
                        CustLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
                        IF CustLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" + TempWHTEntry."Rem Realized Base";
                                WHTEntry."Rem Realized Amount" := WHTEntry."Rem Realized Amount" + TempWHTEntry."Rem Realized Amount";
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (TotalWHT <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  TempWHTEntry."Rem Realized Base" :=
                                    TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                  TempWHTEntry."Rem Realized Amount" :=
                                    TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL CustLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;

                      IF WHTEntry."Document Type" = WHTEntry."Document Type"::Refund THEN BEGIN
                        CustLedgerEntry.RESET;
                        CustLedgerEntry.SETRANGE("Applies-to ID","Applies-toID");
                        CustLedgerEntry.SETFILTER(
                          "Document Type",
                          '%1|%2',
                          CustLedgerEntry."Document Type"::Payment,
                          CustLedgerEntry."Document Type"::"Credit Memo");
                        IF CustLedgerEntry.FINDSET THEN BEGIN
                          TotalWHTBase := ABS(WHTEntry."Rem Realized Base");
                          TotalWHT := ABS(WHTEntry."Rem Realized Amount");
                          REPEAT
                            TempWHTEntry.RESET;
                            TempWHTEntry.SETRANGE(Settled,FALSE);
                            TempWHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                            IF TempWHTEntry.FINDFIRST THEN BEGIN
                              IF TotalWHT > ABS(TempWHTEntry."Rem Realized Amount") THEN BEGIN
                                IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::"Credit Memo" THEN BEGIN
                                  WHTEntry.Base := WHTEntry.Base - ABS(TempWHTEntry."Rem Realized Base");
                                  WHTEntry.Amount := WHTEntry.Amount - ABS(TempWHTEntry."Rem Realized Amount");
                                END;
                                WHTEntry."Rem Realized Base" := WHTEntry."Rem Realized Base" - ABS(TempWHTEntry."Rem Realized Base");
                                WHTEntry."Rem Realized Amount" :=
                                  WHTEntry."Rem Realized Amount" - ABS(TempWHTEntry."Rem Realized Amount");
                                TotalWHTBase := TotalWHTBase - ABS(TempWHTEntry."Rem Realized Base");
                                TotalWHT := TotalWHT - ABS(TempWHTEntry."Rem Realized Amount");
                                TempWHTEntry."Rem Realized Base" := 0;
                                TempWHTEntry."Rem Realized Amount" := 0;
                                TempWHTEntry."Rem Realized Base (LCY)" := 0;
                                TempWHTEntry."Rem Realized Amount (LCY)" := 0;
                              END ELSE BEGIN
                                IF (TotalWHT > 0) AND (TotalWHT <= ABS(TempWHTEntry."Rem Realized Amount")) THEN BEGIN
                                  IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment THEN BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" + TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" + TotalWHT;
                                  END ELSE BEGIN
                                    TempWHTEntry."Rem Realized Base" :=
                                      TempWHTEntry."Rem Realized Base" - TotalWHTBase;
                                    TempWHTEntry."Rem Realized Amount" :=
                                      TempWHTEntry."Rem Realized Amount" - TotalWHT;
                                    WHTEntry.Base := 0;
                                    WHTEntry.Amount := 0;
                                  END;
                                  WHTEntry."Rem Realized Amount" := 0;
                                  WHTEntry."Rem Realized Base" := 0;
                                  TotalWHTBase := 0;
                                  TotalWHT := 0;
                                END;
                              END;

                              IF CurrencyCode = '' THEN BEGIN
                                TempWHTEntry."Rem Realized Base (LCY)" := TempWHTEntry."Rem Realized Base";
                                TempWHTEntry."Rem Realized Amount (LCY)" := TempWHTEntry."Rem Realized Amount";
                              END ELSE BEGIN
                                TempWHTEntry."Rem Realized Amount (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Amount (LCY)",CurrFactor));
                                TempWHTEntry."Rem Realized Base (LCY)" :=
                                  ROUND(
                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                      DocDate,CurrencyCode,TempWHTEntry."Rem Realized Base (LCY)",CurrFactor));
                              END;
                              IF ((TempWHTEntry."Rem Realized Amount" = 0) AND
                                  (TempWHTEntry."Rem Realized Base" = 0))
                              THEN
                                TempWHTEntry.Closed := TRUE;
                              TempWHTEntry.MODIFY;
                            END;
                          UNTIL CustLedgerEntry.NEXT = 0;
                          WHTEntry."Applies-to Entry No." := TempWHTEntry."Entry No.";
                        END;
                      END;
                    END;
                  END;
                END;
              END;
            END;

            IF WHTEntry.Amount = 0 THEN
              IF NextWHTEntryNo = 0 THEN
                EXIT
              ELSE
                EXIT(NextWHTEntryNo);

            IF ((WHTEntry."Rem Realized Amount" = 0) AND
                (WHTEntry."Rem Realized Base" = 0))
            THEN
              WHTEntry.Closed := TRUE;
          END;

          IF CurrencyCode = '' THEN BEGIN
            WHTEntry."Base (LCY)" := WHTEntry.Base;
            WHTEntry."Amount (LCY)" := WHTEntry.Amount;
            WHTEntry."Unrealized Amount (LCY)" := WHTEntry."Unrealized Amount";
            WHTEntry."Unrealized Base (LCY)" := WHTEntry."Unrealized Base";
            WHTEntry."Rem Realized Base (LCY)" := WHTEntry."Rem Realized Base";
            WHTEntry."Rem Realized Amount (LCY)" := WHTEntry."Rem Realized Amount";
            WHTEntry."Rem Unrealized Amount (LCY)" := WHTEntry."Remaining Unrealized Amount";
            WHTEntry."Rem Unrealized Base (LCY)" := WHTEntry."Remaining Unrealized Base";
          END ELSE BEGIN
            WHTEntry."Base (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Base,CurrFactor));
      // UPG09R2.begin
        //YIMMNWHTR -ST
            CurrExchRate.RESET;
            CurrExchRate.SETRANGE(CurrExchRate."Currency Code",CurrencyCode);
            CurrExchRate.SETRANGE(CurrExchRate."Starting Date",DocDate);
            IF CurrExchRate.FIND('-') THEN

         WHTEntry."Amount (LCY)" :=
            ROUND(WHTEntry.Amount*(CurrExchRate."Rel Tax Rate Amount"/CurrExchRate."Tax Rate Amount"));

         //ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Amount,CurrFactor));

      //YIMMNWHTR-EN



      {  WHTEntry."Base (LCY)" :=
          ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Base,CurrFactor));
      // UPG09R2.end
            WHTEntry."Amount (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Amount,CurrFactor));
       } // UPG09R2
            WHTEntry."Unrealized Base (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry."Unrealized Base",CurrFactor));
            WHTEntry."Rem Realized Amount (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry."Rem Realized Amount",CurrFactor));
            WHTEntry."Rem Realized Base (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry."Rem Realized Base",CurrFactor));
            WHTEntry."Unrealized Amount (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  DocDate,CurrencyCode,WHTEntry."Unrealized Amount",CurrFactor));
            WHTEntry."Rem Unrealized Amount (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  DocDate,CurrencyCode,WHTEntry."Remaining Unrealized Amount",CurrFactor));
            WHTEntry."Rem Unrealized Base (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  DocDate,CurrencyCode,WHTEntry."Remaining Unrealized Base",CurrFactor));
          END;

          IF (WHTEntry."Applies-to Doc. No." <> '') AND UnrealizedWHT THEN BEGIN
            TempWHTEntry.SETRANGE("Document Type",WHTEntry."Applies-to Doc. Type");
            TempWHTEntry.SETRANGE("Document No.",WHTEntry."Applies-to Doc. No.");
            TempWHTEntry.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
            TempWHTEntry.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
            IF TempWHTEntry.FINDFIRST THEN BEGIN
              TempWHTEntry."Rem Unrealized Amount (LCY)" :=
                TempWHTEntry."Rem Unrealized Amount (LCY)" + WHTEntry."Unrealized Amount (LCY)";
              TempWHTEntry."Rem Unrealized Base (LCY)" :=
                TempWHTEntry."Rem Unrealized Base (LCY)" + WHTEntry."Unrealized Base (LCY)";
              TempWHTEntry.MODIFY;
              WHTEntry."Rem Unrealized Amount (LCY)" := 0;
              WHTEntry."Rem Unrealized Base (LCY)" := 0;
            END;
          END;

          IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
            IF ABS(WHTEntry.Base) < WHTPostingSetup."WHT Minimum Invoice Amount" THEN
              EXIT;
          END;
          WHTEntry.INSERT;
          NextWHTEntryNo := WHTEntry."Entry No." + 1;

          IF TempWHTEntry.Prepayment THEN BEGIN
            WHTEntry3.RESET;
            WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
            WHTEntry3.SETRANGE("Applies-to Entry No.",TempWHTEntry."Entry No.");
            WHTEntry3.CALCSUMS(Amount,"Amount (LCY)");
            IF (ABS(ABS(WHTEntry3.Amount) - ABS(TempWHTEntry."Unrealized Amount")) < 0.1) AND
               (ABS(ABS(WHTEntry3.Amount) - ABS(TempWHTEntry."Unrealized Amount")) > 0)
            THEN BEGIN
              WHTEntry."WHT Difference" := TempWHTEntry."Unrealized Amount" - WHTEntry3.Amount;
              WHTEntry.Amount := WHTEntry.Amount + WHTEntry."WHT Difference";
              WHTEntry.MODIFY;
            END;
            IF (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(TempWHTEntry."Unrealized Amount (LCY)")) < 0.1) AND
               (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(TempWHTEntry."Unrealized Amount (LCY)")) > 0)
            THEN BEGIN
              WHTEntry."Amount (LCY)" := WHTEntry."Amount (LCY)" +
                TempWHTEntry."Unrealized Amount (LCY)" - WHTEntry3."Amount (LCY)";
              WHTEntry.MODIFY;
            END;
          END;
        END;
      EXIT(NextWHTEntryNo);
    END;

    PROCEDURE WHTAmountJournal@1500017(VAR GenJnlLine1@1500000 : Record 81;Post@1500019 : Boolean) WHTAmount : Decimal;
    VAR
      WHTEntry@1500018 : Record 28044;
      WHTEntry3@1500017 : Record 28044;
      TotalWHTAmount@1500016 : Decimal;
      TotalWHTAmount2@1500015 : Decimal;
      TotalWHTAmount3@1500014 : Decimal;
      PaymentAmount@1500013 : Decimal;
      PaymentAmountLCY@1500012 : Decimal;
      PurchCrMemoHeader@1500009 : Record 124;
      VendLedgEntry1@1500008 : Record 25;
      WHTEntryTemp@1500007 : Record 28044;
      VendLedgEntry@1500006 : Record 25;
      PaymentAmount1@1500005 : Decimal;
      AppldAmount@1500003 : Decimal;
      ExpectedAmount@1500002 : Decimal;
      GenJnlLine@1500001 : Record 81;
      Vendor@1500020 : Record 23;
      TotalWHTAmount4@1500021 : Decimal;
      WHTAmount1@1500022 : Decimal;
      RemainingAmt@1500023 : Decimal;
    BEGIN
      GenJnlLine.COPY(GenJnlLine1);
      IF (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) AND
         (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund)
      THEN
        EXIT;

      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No." = '' THEN BEGIN
          IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
            Vendor.GET(GenJnlLine."Account No.");
            IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
              EXIT;
          END;
        END ELSE BEGIN
          IF (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor)
             OR (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor)
          THEN BEGIN
            Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
            IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
              EXIT;
          END;
        END;

      TotalWHTAmount := 0;
      TotalWHTAmount2 := 0;
      TotalWHTAmount3 := 0;
      TotalWHTAmount4 := 0;
      RemainingAmt := 0;
      TotAmt := 0;
      TempVendLedgEntry.RESET;
      TempVendLedgEntry1.RESET;
      IF GenJnlLine."Applies-to Doc. No." = '' THEN BEGIN
        IF GenJnlLine."Applies-to ID" <> '' THEN BEGIN
          TempVendLedgEntry1.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
          TempVendLedgEntry1.SETRANGE(Open,TRUE);
          IF GenJnlLine."Bill-to/Pay-to No." = '' THEN
            TempVendLedgEntry1.SETRANGE("Buy-from Vendor No.",GenJnlLine."Account No.")
          ELSE
            TempVendLedgEntry1.SETRANGE("Buy-from Vendor No.",GenJnlLine."Bill-to/Pay-to No.");
        END ELSE
          EXIT(TotalWHTAmount);

        IF TempVendLedgEntry1.FINDSET THEN
          REPEAT
            TempVendLedgEntry1.CALCFIELDS(
              Amount,"Amount (LCY)",
              "Remaining Amount","Remaining Amt. (LCY)",
              "Original Amount","Original Amt. (LCY)");
            RemainingAmt := RemainingAmt + TempVendLedgEntry1."Remaining Amount";

            IF TempVendLedgEntry1."Document Type" = TempVendLedgEntry1."Document Type"::"Credit Memo" THEN
              RemainingAmt := RemainingAmt + TempVendLedgEntry1."Remaining Amount";
          UNTIL TempVendLedgEntry1.NEXT = 0;

        TotAmt := ABS(GenJnlLine.Amount);

        IF GenJnlLine."Applies-to ID" <> '' THEN BEGIN
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
          IF GenJnlLine."Bill-to/Pay-to No." = '' THEN
            TempVendLedgEntry.SETRANGE("Buy-from Vendor No.",GenJnlLine."Account No.")
          ELSE
            TempVendLedgEntry.SETRANGE("Buy-from Vendor No.",GenJnlLine."Bill-to/Pay-to No.");
        END ELSE
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");

        TempVendLedgEntry.SETRANGE(Open,TRUE);
        TempVendLedgEntry.SETRANGE("Document Type",TempVendLedgEntry."Document Type"::"Credit Memo");
        IF TempVendLedgEntry.FINDSET THEN
          REPEAT
            TempVendLedgEntry.CALCFIELDS(
              Amount,"Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Amount to Apply"),
                 ABS(TempVendLedgEntry."Remaining Amount"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              TotAmt := TotAmt + ABS(TempVendLedgEntry."Original Pmt. Disc. Possible");

            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
               (ABS(TempVendLedgEntry."Remaining Amount") < ABS(TotAmt))
            THEN BEGIN
              GenJnlLine.VALIDATE(Amount,-ABS(TempVendLedgEntry."Remaining Amount"));
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amount";
            END ELSE BEGIN
              GenJnlLine.VALIDATE(Amount,-TotAmt);
              ExitLoop := TRUE;
            END;

            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
            ELSE BEGIN
              IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amount";
              TotAmt := TotAmt + ABS(TempVendLedgEntry."Remaining Amount");
              ExitLoop := FALSE;
            END;

            GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
            PaymentAmount := GenJnlLine.Amount;
            PaymentAmount1 := GenJnlLine.Amount;
            PaymentAmountLCY := GenJnlLine."Amount (LCY)";
            WHTEntry.RESET;
            WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
            WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
            IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
              WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            END ELSE
              WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");

            IF WHTEntry.FINDSET THEN
              REPEAT
                PurchCrMemoHeader.RESET;
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                  VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  IF VendLedgEntry1.FINDFIRST THEN
                    VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                  WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN BEGIN
                    TempRemBase := WHTEntryTemp."Unrealized Amount";
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                  END;
                END;

                VendLedgEntry.RESET;
                VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                ELSE
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                    VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");

                IF VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");

                ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >=
                    (ABS(VendLedgEntry."Remaining Amount" +
                       VendLedgEntry1."Remaining Amount") -
                     ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                THEN
                  AppldAmount :=
                    ROUND(
                      ((PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
                       ExpectedAmount))
                ELSE
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);

                IF GenJnlLine."Currency Code" <> '' THEN BEGIN
                  CurrFactor :=
                    CurrExchRate.ExchangeRate(
                      GenJnlLine."Document Date",
                      GenJnlLine."Currency Code");

                  WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
                  WHTEntry3.RESET;
                  WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
                  WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
                  WHTEntry3.CALCSUMS(Amount);
                  IF (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
                     (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) > 0)
                  THEN
                    WHTAmount1 := WHTAmount1 + (WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + WHTAmount1));

                  TotalWHTAmount4 :=
                      CurrExchRate.ExchangeAmtFCYToLCY(
                        GenJnlLine."Document Date",
                        GenJnlLine."Currency Code",
                        // ROUND(AppldAmount * WHTEntry."WHT %" / 100),
                        WHTAmount1,
                        CurrFactor);

                  TotalWHTAmount4 :=
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      GenJnlLine."Document Date",
                      GenJnlLine."Currency Code",
                      TotalWHTAmount4,
                      CurrFactor);
                  TotalWHTAmount := (TotalWHTAmount + TotalWHTAmount4);
                END ELSE
                  BEGIN
                  // TotalWHTAmount := ROUND(TotalWHTAmount + AppldAmount * WHTEntry."WHT %" / 100);
                  WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
                  WHTEntry3.RESET;
                  WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
                  WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
                  WHTEntry3.CALCSUMS(Amount);
                  IF (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
                     (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) > 0)
                  THEN
                    WHTAmount1 := WHTAmount1 + (WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + WHTAmount1));

                  TotalWHTAmount := ROUND(TotalWHTAmount + WHTAmount1);
                END;
                TotalWHTAmount2 := TotalWHTAmount;
              UNTIL WHTEntry.NEXT = 0;

          UNTIL TempVendLedgEntry.NEXT = 0;
        ExitLoop := FALSE;
        TempVendLedgEntry.RESET;
        IF GenJnlLine."Applies-to ID" <> '' THEN BEGIN
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
          IF GenJnlLine."Bill-to/Pay-to No." = '' THEN
            TempVendLedgEntry.SETRANGE("Buy-from Vendor No.",GenJnlLine."Account No.")
          ELSE
            TempVendLedgEntry.SETRANGE("Buy-from Vendor No.",GenJnlLine."Bill-to/Pay-to No.");
        END ELSE
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");

        TempVendLedgEntry.SETRANGE(Open,TRUE);
        TempVendLedgEntry.SETFILTER("Document Type",'<>%1',TempVendLedgEntry."Document Type"::"Credit Memo");
        IF TempVendLedgEntry.FINDSET THEN BEGIN
          REPEAT
            TempVendLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Amount to Apply"),
                 ABS(TempVendLedgEntry."Remaining Amount"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              TotAmt := TotAmt + ABS(TempVendLedgEntry."Original Pmt. Disc. Possible");

            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
               (ABS(TempVendLedgEntry."Remaining Amount") < ABS(TotAmt))
            THEN BEGIN
              GenJnlLine.VALIDATE(Amount,ABS(TempVendLedgEntry."Remaining Amount"));
              TotAmt := TotAmt + ABS(TempVendLedgEntry."Remaining Amount");
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amount";
            END ELSE BEGIN
              GenJnlLine.VALIDATE(Amount,TotAmt);
              ExitLoop := TRUE;
            END;

            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
            ELSE BEGIN
              IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt + TempVendLedgEntry."Remaining Amount";
              TotAmt := TotAmt + TempVendLedgEntry."Remaining Amount";
              ExitLoop := FALSE;
            END;

            GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
            PaymentAmount := GenJnlLine.Amount;
            PaymentAmount1 := GenJnlLine.Amount;
            PaymentAmountLCY := GenJnlLine."Amount (LCY)";
            WHTEntry.RESET;
            WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
            WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
            IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
              WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            END ELSE
              WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
            IF WHTEntry.FINDSET THEN
              REPEAT
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                  VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  IF VendLedgEntry1.FINDFIRST THEN
                    VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                  WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN BEGIN
                    TempRemBase := WHTEntryTemp."Unrealized Amount";
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                  END;
                END;

                VendLedgEntry.RESET;
                VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                ELSE
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                    VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
                IF VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >=
                    (ABS(VendLedgEntry."Remaining Amount" + VendLedgEntry1."Remaining Amount") -
                     ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                THEN
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) /
                      ExpectedAmount)
                ELSE
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) /
                      ExpectedAmount);

                IF GenJnlLine."Currency Code" <> '' THEN BEGIN
                  CurrFactor :=
                    CurrExchRate.ExchangeRate(
                      GenJnlLine."Document Date",
                      GenJnlLine."Currency Code");
                  WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
                  WHTEntry3.RESET;
                  WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
                  WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
                  WHTEntry3.CALCSUMS(Amount);
                  IF (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
                     (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) > 0)
                  THEN
                    WHTAmount1 := WHTAmount1 + (WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + WHTAmount1));


                  TotalWHTAmount4 :=
                      CurrExchRate.ExchangeAmtFCYToLCY(
                        GenJnlLine."Document Date",
                        GenJnlLine."Currency Code",
                        WHTAmount1,
                         CurrFactor);
                  TotalWHTAmount4 :=
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      GenJnlLine."Document Date",
                      GenJnlLine."Currency Code",
                      TotalWHTAmount4,
                      CurrFactor);
                  TotalWHTAmount := (TotalWHTAmount + TotalWHTAmount4);
                END ELSE
                  BEGIN
                  WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
                  WHTEntry3.RESET;
                  WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
                  WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
                  WHTEntry3.CALCSUMS(Amount);
                  IF (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
                     (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) > 0)
                  THEN
                    WHTAmount1 := WHTAmount1 + (WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + WHTAmount1));

                  TotalWHTAmount := ROUND(TotalWHTAmount + WHTAmount1);
                END;
                TotalWHTAmount2 := TotalWHTAmount;
              UNTIL WHTEntry.NEXT = 0;

            IF ExitLoop THEN
              EXIT(TotalWHTAmount2);
          UNTIL TempVendLedgEntry.NEXT = 0;

          IF GenJnlLine."Currency Code" <> '' THEN BEGIN
            CurrFactor :=
              CurrExchRate.ExchangeRate(
                GenJnlLine."Document Date",
                GenJnlLine."Currency Code");

            TotalWHTAmount3 :=
              ROUND(
                TotalWHTAmount3 +
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    GenJnlLine."Currency Code",
                    TotalWHTAmount2,CurrFactor)));
          END;
        END;
        EXIT(TotalWHTAmount2);
      END;
      TotAmt := ABS(GenJnlLine.Amount);
      TempVendLedgEntry.RESET;
      TempVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      TempVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      IF TempVendLedgEntry.FINDFIRST THEN BEGIN
        IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN BEGIN
          TempVendLedgEntry.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount",
            "Original Amt. (LCY)");

          IF TempVendLedgEntry."Amount to Apply" = 0 THEN
            TempVendLedgEntry."Amount to Apply" := -ABSMin(TempVendLedgEntry."Remaining Amount",GenJnlLine.Amount);

          IF CheckPmtDisc(
               GenJnlLine."Posting Date",
               TempVendLedgEntry."Pmt. Discount Date",
               ABS(TempVendLedgEntry."Amount to Apply"),
               ABS(TempVendLedgEntry."Remaining Amount"),
               ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
               ABS(TotAmt))
          THEN
            TotAmt := TotAmt + ABS(TempVendLedgEntry."Original Pmt. Disc. Possible");

          IF ABS(TempVendLedgEntry."Remaining Amount") < ABS(TotAmt) THEN
            GenJnlLine.VALIDATE(Amount,ABS(TempVendLedgEntry."Remaining Amount"))
          ELSE
            GenJnlLine.VALIDATE(Amount,TotAmt);
        END ELSE
          IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
            TempVendLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF TempVendLedgEntry."Amount to Apply" = 0 THEN
              TempVendLedgEntry."Amount to Apply" := ABSMin(TempVendLedgEntry."Remaining Amount",GenJnlLine.Amount);

            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempVendLedgEntry."Pmt. Discount Date",
                 ABS(TempVendLedgEntry."Amount to Apply"),
                 ABS(TempVendLedgEntry."Remaining Amount"),
                 ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              TotAmt := TotAmt + ABS(TempVendLedgEntry."Original Pmt. Disc. Possible");

            IF ABS(TempVendLedgEntry."Remaining Amount") < ABS(TotAmt) THEN
              GenJnlLine.VALIDATE(Amount,-ABS(TempVendLedgEntry."Remaining Amount"))
            ELSE
              GenJnlLine.VALIDATE(Amount,-TotAmt);
          END;
      END;
      TotalWHTAmount := 0;
      PaymentAmount := GenJnlLine.Amount;
      PaymentAmount1 := GenJnlLine.Amount;
      PaymentAmountLCY := GenJnlLine."Amount (LCY)";
      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
      WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      END ELSE
        WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
      IF WHTEntry.FINDSET THEN BEGIN
        REPEAT
          PurchCrMemoHeader.SETRANGE(
            "Applies-to Doc. Type",
            PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
          PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
          IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
            TempRemAmt := 0;
            VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
            VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
            IF VendLedgEntry1.FINDFIRST THEN
              VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount","Remaining Amt. (LCY)");
            WHTEntryTemp.RESET;
            WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
            WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
            WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
            WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
            WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
            IF WHTEntryTemp.FINDFIRST THEN
              TempRemAmt := WHTEntryTemp."Unrealized Base";
          END;

          VendLedgEntry.RESET;
          VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
          VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
          IF VendLedgEntry.FINDFIRST THEN
            VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount","Remaining Amt. (LCY)");
          ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
          AppldAmount :=
            ROUND(
              (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
              ExpectedAmount);

          IF GenJnlLine."Currency Code" <> '' THEN BEGIN
            CurrFactor :=
              CurrExchRate.ExchangeRate(
                GenJnlLine."Document Date",
                GenJnlLine."Currency Code");

            WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
            WHTEntry3.RESET;
            WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
            WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
            WHTEntry3.CALCSUMS(Amount);
            IF (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
               (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) > 0)
            THEN
              WHTAmount1 := WHTAmount1 + (WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + WHTAmount1));


            TotalWHTAmount4 :=
                CurrExchRate.ExchangeAmtFCYToLCY(
                  GenJnlLine."Document Date",
                  GenJnlLine."Currency Code",
                  WHTAmount1,
                  CurrFactor);

            TotalWHTAmount4 :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                GenJnlLine."Document Date",
                GenJnlLine."Currency Code",
                TotalWHTAmount4,
                CurrFactor);
            TotalWHTAmount := (TotalWHTAmount + TotalWHTAmount4);
          END ELSE
            BEGIN
            WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
            WHTEntry3.RESET;
            WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
            WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
            WHTEntry3.CALCSUMS(Amount);
            TotalWHTAmount := ROUND(TotalWHTAmount + WHTAmount1,GLSetup."Inv. Rounding Precision (LCY)",'=');
          END;
        UNTIL WHTEntry.NEXT = 0;
        EXIT(TotalWHTAmount);
      END;
    END;

    PROCEDURE ApplyCustCalcWHT@1500018(VAR GenJnlLine@1500000 : Record 81) WHTAmt : Decimal;
    VAR
      Currency@1500001 : 'Vendor,Customer';
      RemainingAmt@1500002 : Decimal;
    BEGIN
      AppliedAmount := ABS(GenJnlLine."Amount (LCY)");
      TotAmt := ABS(GenJnlLine.Amount);
      TempCustLedgEntry1.RESET;
      SetCustAppliesToFilter(TempCustLedgEntry1,GenJnlLine);
      IF TempCustLedgEntry1.FINDSET THEN
        REPEAT
          TempCustLedgEntry1.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount",
            "Original Amt. (LCY)");

          RemainingAmt := RemainingAmt + TempCustLedgEntry1."Remaining Amount";

          IF TempCustLedgEntry1."Document Type" =
             TempCustLedgEntry1."Document Type"::"Credit Memo"
          THEN
            RemainingAmt := RemainingAmt + TempCustLedgEntry1."Remaining Amount";
        UNTIL TempCustLedgEntry1.NEXT = 0;

      TempCustLedgEntry.RESET;
      SetCustAppliesToFilter(TempCustLedgEntry,GenJnlLine);
      TempCustLedgEntry.SETRANGE("Document Type",TempCustLedgEntry."Document Type"::"Credit Memo");
      IF TempCustLedgEntry.FINDSET THEN
        REPEAT
          TempCustLedgEntry.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount","Original Amt. (LCY)");

          IF TempCustLedgEntry."Amount to Apply" = 0 THEN
            TempCustLedgEntry."Amount to Apply" := -ABSMin(TempCustLedgEntry."Remaining Amount",GenJnlLine.Amount);

          IF CheckPmtDisc(
               GenJnlLine."Posting Date",
               TempCustLedgEntry."Pmt. Discount Date",
               ABS(TempCustLedgEntry."Amount to Apply"),
               ABS(TempCustLedgEntry."Remaining Amount"),
               ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
               ABS(TotAmt))
          THEN
            TotAmt := TotAmt + ABS(TempCustLedgEntry."Original Pmt. Disc. Possible");

          IF (ABS(RemainingAmt) <= ABS(TotAmt)) OR
             (ABS(TempCustLedgEntry."Remaining Amount") < ABS(TotAmt))
          THEN BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Amount to Apply"),
                 ABS(TempCustLedgEntry."Remaining Amount"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN BEGIN
              GenJnlLine.VALIDATE(
                Amount,
                ABS(TempCustLedgEntry."Remaining Amount" -
                  TempCustLedgEntry."Original Pmt. Disc. Possible"));
              IF TempCustLedgEntry."Document Type" <>
                 TempCustLedgEntry."Document Type"::"Credit Memo"
              THEN
                TotAmt := -(TotAmt - TempCustLedgEntry."Remaining Amount");

              RemainingAmt :=
                RemainingAmt - TempCustLedgEntry."Remaining Amount" +
                TempCustLedgEntry."Original Pmt. Disc. Possible";
            END ELSE BEGIN
              GenJnlLine.VALIDATE(Amount,ABS(TempCustLedgEntry."Remaining Amount"));
              IF TempCustLedgEntry."Document Type" <>
                 TempCustLedgEntry."Document Type"::"Credit Memo"
              THEN
                TotAmt := -(TotAmt - TempCustLedgEntry."Remaining Amount");
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Remaining Amount";
            END;
          END ELSE BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Amount to Apply"),
                 ABS(TempCustLedgEntry."Remaining Amount"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              GenJnlLine.VALIDATE(
                Amount,TotAmt - ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"))
            ELSE
              GenJnlLine.VALIDATE(Amount,ABS(TotAmt));
            ExitLoop := TRUE;
          END;

          IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Invoice THEN
            GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
          ELSE
            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Remaining Amount";
              TotAmt := TotAmt - TempCustLedgEntry."Remaining Amount";
              ExitLoop := FALSE;
            END;

          GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
          WHTAmt += CalcWHT(GenJnlLine,Currency::Customer);
        UNTIL (TempCustLedgEntry.NEXT = 0) OR ExitLoop;

      ExitLoop := FALSE;
      TempCustLedgEntry.RESET;
      SetCustAppliesToFilter(TempCustLedgEntry,GenJnlLine);
      TempCustLedgEntry.SETFILTER("Document Type",'<>%1',TempCustLedgEntry."Document Type"::"Credit Memo");
      IF TempCustLedgEntry.FINDSET THEN
        REPEAT
          TempCustLedgEntry.CALCFIELDS(
            Amount,
            "Amount (LCY)",
            "Remaining Amount",
            "Remaining Amt. (LCY)",
            "Original Amount",
            "Original Amt. (LCY)");

          IF TempCustLedgEntry."Amount to Apply" = 0 THEN
            TempCustLedgEntry."Amount to Apply" := ABSMin(TempCustLedgEntry."Remaining Amount",GenJnlLine.Amount);

          IF CheckPmtDisc(
               GenJnlLine."Posting Date",
               TempCustLedgEntry."Pmt. Discount Date",
               ABS(TempCustLedgEntry."Amount to Apply"),
               ABS(TempCustLedgEntry."Remaining Amount"),
               ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
               ABS(TotAmt))
          THEN
            TotAmt := TotAmt + ABS(TempCustLedgEntry."Original Pmt. Disc. Possible");

          IF (ABS(RemainingAmt) <= ABS(TotAmt)) OR
             (ABS(TempCustLedgEntry."Remaining Amount") < ABS(TotAmt))
          THEN BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Amount to Apply"),
                 ABS(TempCustLedgEntry."Remaining Amount"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN BEGIN
              RemainingAmt :=
                RemainingAmt - TempCustLedgEntry."Remaining Amount" +
                TempCustLedgEntry."Original Pmt. Disc. Possible";

              GenJnlLine.VALIDATE(
                Amount,
                -ABS(TempCustLedgEntry."Remaining Amount" -
                  TempCustLedgEntry."Original Pmt. Disc. Possible"));

              IF TempCustLedgEntry."Document Type" <>
                 TempCustLedgEntry."Document Type"::"Credit Memo"
              THEN
                TotAmt := (TotAmt - TempCustLedgEntry."Remaining Amount");
            END ELSE BEGIN
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Remaining Amount";
              GenJnlLine.VALIDATE(Amount,-ABS(TempCustLedgEntry."Remaining Amount"));
              IF TempCustLedgEntry."Document Type" <> TempCustLedgEntry."Document Type"::"Credit Memo" THEN
                TotAmt := (TotAmt - TempCustLedgEntry."Remaining Amount");
            END;
          END ELSE BEGIN
            IF CheckPmtDisc(
                 GenJnlLine."Posting Date",
                 TempCustLedgEntry."Pmt. Discount Date",
                 ABS(TempCustLedgEntry."Amount to Apply"),
                 ABS(TempCustLedgEntry."Remaining Amount"),
                 ABS(TempCustLedgEntry."Original Pmt. Disc. Possible"),
                 ABS(TotAmt))
            THEN
              GenJnlLine.VALIDATE(
                Amount,-(TotAmt - ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
            ELSE
              GenJnlLine.VALIDATE(Amount,-ABS(TotAmt));
            ExitLoop := TRUE;
          END;

          IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Invoice THEN
            GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
          ELSE
            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempCustLedgEntry."Remaining Amount";
              TotAmt := TotAmt - TempCustLedgEntry."Remaining Amount";
              ExitLoop := FALSE;
            END;
          GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
          WHTAmt += CalcWHT(GenJnlLine,Currency::Customer);
        UNTIL (TempCustLedgEntry.NEXT = 0) OR ExitLoop;
      EXIT(WHTAmt);
    END;

    PROCEDURE CalcWHT@1500019(VAR GenJnlLine@1500004 : Record 81;Source@1500000 : 'Vendor,Customer') PaymentNo : Decimal;
    VAR
      WHTEntry@1500021 : Record 28044;
      WHTEntry3@1500019 : Record 28044;
      PaymentAmount@1500016 : Decimal;
      PaymentAmountLCY@1500015 : Decimal;
      AppldAmount@1500014 : Decimal;
      WHTEntryTemp@1500012 : Record 28044;
      PurchCrMemoHeader@1500010 : Record 124;
      VendLedgEntry1@1500009 : Record 25;
      VendLedgEntry@1500008 : Record 25;
      ExpectedAmount@1500007 : Decimal;
      PaymentAmount1@1500006 : Decimal;
      SalesCrMemoHeader@1500003 : Record 114;
      CustLedgEntry1@1500002 : Record 21;
      CustLedgEntry@1500001 : Record 21;
      WHTAmount1@1500022 : Decimal;
      WHTTotAmt@1500023 : Decimal;
    BEGIN
      PaymentAmount := GenJnlLine.Amount;
      PaymentAmount1 := GenJnlLine.Amount;
      PaymentAmountLCY := GenJnlLine."Amount (LCY)";
      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);

      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");

      CASE Source OF
        Source::Vendor:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
        Source::Customer:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
      END;

      WHTEntry.SETRANGE(Closed,FALSE);
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      END ELSE
        WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
      IF WHTEntry.FINDSET THEN BEGIN
        REPEAT
          CASE Source OF
            Source::Vendor:
              BEGIN
                IF GenJnlLine."Applies-to Doc. No." = '' THEN
                  EXIT;
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  VendLedgEntry1.RESET;
                  VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                  IF VendLedgEntry1.FINDFIRST THEN
                    VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN BEGIN
                    TempRemBase := WHTEntryTemp."Unrealized Amount";
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                  END;
                END;

                VendLedgEntry.RESET;
                VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                ELSE
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                    VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
                IF VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >=
                    (ABS(VendLedgEntry."Remaining Amount" + VendLedgEntry1."Remaining Amount") -
                     ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                THEN
                  AppldAmount :=
                    ROUND(
                      ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount)
                ELSE
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);

                PaymentAmount := PaymentAmount + AppldAmount;
              END;
            Source::Customer:
              BEGIN
                SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
                SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  CustLedgEntry1.RESET;
                  CustLedgEntry1.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                  CustLedgEntry1.SETRANGE("Document Type",CustLedgEntry1."Document Type"::"Credit Memo");
                  IF CustLedgEntry1.FINDFIRST THEN
                    CustLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
                  WHTEntryTemp.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN BEGIN
                    TempRemBase := WHTEntryTemp."Unrealized Amount";
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                  END;
                END;

                CustLedgEntry.RESET;
                CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                IF CustLedgEntry.FINDFIRST THEN
                  CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                ExpectedAmount := -(CustLedgEntry.Amount + CustLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >=
                    (ABS(CustLedgEntry."Remaining Amount" + CustLedgEntry1."Remaining Amount") -
                     ABS(CustLedgEntry."Original Pmt. Disc. Possible")))
                THEN
                  AppldAmount :=
                    ROUND(
                      ((PaymentAmount1 - CustLedgEntry."Original Pmt. Disc. Possible") *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount)
                ELSE
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                PaymentAmount := PaymentAmount + AppldAmount;
              END;
          END;

          IF GenJnlLine."Currency Code" <> WHTEntry."Currency Code" THEN
            ERROR(Text1500000);
          WHTAmount1 := ROUND(AppldAmount * WHTEntry."WHT %" / 100);
          WHTEntry3.RESET;
          WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
          WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
          WHTEntry3.CALCSUMS(Amount);
          IF (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
             (ABS(ABS(WHTEntry3.Amount) + ABS(WHTAmount1) - ABS(WHTEntry."Unrealized Amount")) > 0)
          THEN
            WHTAmount1 := WHTAmount1 + (WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + WHTAmount1));

          WHTTotAmt := ROUND(WHTTotAmt + WHTAmount1);
        UNTIL (WHTEntry.NEXT = 0);
        EXIT(WHTTotAmt);
      END;
    END;

    PROCEDURE ApplyTempWHTEntry@1500020(VAR GenJnlLine@1500006 : Record 81;Source@1500000 : 'Vendor,Customer') PaymentNo : Integer;
    VAR
      WHTEntry@1500024 : Record 28044;
      WHTEntry3@1500022 : Record 28046;
      PaymentAmount@1500019 : Decimal;
      PaymentAmountLCY@1500018 : Decimal;
      AppldAmount@1500017 : Decimal;
      WHTEntryTemp@1500015 : Record 28044;
      PurchCrMemoHeader@1500012 : Record 124;
      VendLedgEntry1@1500011 : Record 25;
      VendLedgEntry@1500010 : Record 25;
      ExpectedAmount@1500009 : Decimal;
      PaymentAmount1@1500008 : Decimal;
      TempWHTEntry@1500007 : Record 28046;
      SalesCrMemoHeader@1500005 : Record 114;
      CustLedgEntry1@1500004 : Record 21;
      CustLedgEntry@1500003 : Record 21;
      WHTSlipNo@1500002 : Code[10];
      PurchSetup@1500001 : Record 312;
    BEGIN
      PaymentAmount := GenJnlLine.Amount;
      PaymentAmount1 := GenJnlLine.Amount;
      PaymentAmountLCY := GenJnlLine."Amount (LCY)";
      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
      CASE Source OF
        Source::Vendor:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
        Source::Customer:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
      END;
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
      END ELSE
        WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
      IF WHTEntry.FINDSET THEN
        REPEAT
          CASE Source OF
            Source::Vendor:
              BEGIN
                IF GenJnlLine."Applies-to Doc. No." = '' THEN
                  EXIT;
                PurchCrMemoHeader.RESET;
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                  VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  IF VendLedgEntry1.FINDFIRST THEN
                    VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN BEGIN
                    TempRemBase := WHTEntryTemp."Unrealized Amount";
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                  END;
                END;
                VendLedgEntry.RESET;
                VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                ELSE
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                    VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");

                IF VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >=
                    (ABS(VendLedgEntry."Remaining Amt. (LCY)" + VendLedgEntry1."Remaining Amt. (LCY)") -
                     ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                THEN BEGIN
                  AppldAmount :=
                    ROUND(
                      ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                  WHTEntry."Remaining Unrealized Base" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Base" -
                      ROUND(
                        ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                         (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                  WHTEntry."Remaining Unrealized Amount" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Amount" -
                      ROUND(
                        ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                         (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                END ELSE BEGIN
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                  WHTEntry."Remaining Unrealized Base" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Base" -
                      ROUND(
                        (PaymentAmount1 *
                         (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                  WHTEntry."Remaining Unrealized Amount" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Amount" -
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) /
                        ExpectedAmount));
                END;
                PaymentAmount := PaymentAmount + AppldAmount;
              END;
            Source::Customer:
              BEGIN
                SalesCrMemoHeader.RESET;
                SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
                SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  CustLedgEntry1.RESET;
                  CustLedgEntry1.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                  CustLedgEntry1.SETRANGE("Document Type",CustLedgEntry1."Document Type"::"Credit Memo");
                  IF CustLedgEntry1.FINDFIRST THEN
                    CustLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN BEGIN
                    TempRemBase := WHTEntryTemp."Unrealized Amount";
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                  END;
                END;

                CustLedgEntry.RESET;
                CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                IF CustLedgEntry.FINDFIRST THEN
                  CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                ExpectedAmount := -(CustLedgEntry.Amount + CustLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >=
                    (ABS(CustLedgEntry."Remaining Amount" + CustLedgEntry1."Remaining Amt. (LCY)") -
                     ABS(CustLedgEntry."Original Pmt. Disc. Possible")))
                THEN BEGIN
                  AppldAmount :=
                    ROUND(
                      ((PaymentAmount1 - CustLedgEntry."Original Pmt. Disc. Possible") *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);

                  WHTEntry."Remaining Unrealized Base" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Base" -
                      ROUND(
                        ((PaymentAmount1 - CustLedgEntry."Original Pmt. Disc. Possible") *
                         (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));

                  WHTEntry."Remaining Unrealized Amount" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Amount" -
                      ROUND(
                        ((PaymentAmount1 - CustLedgEntry."Original Pmt. Disc. Possible") *
                         (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                END ELSE BEGIN
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);

                  WHTEntry."Remaining Unrealized Base" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Base" -
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                  WHTEntry."Remaining Unrealized Amount" :=
                    ROUND(
                      WHTEntry."Remaining Unrealized Amount" -
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                END;
                PaymentAmount := PaymentAmount + AppldAmount;
              END;
          END;

          TempWHTEntry.INIT;
          TempWHTEntry."Posting Date" := GenJnlLine."Document Date";
          TempWHTEntry."Entry No." := NextTempEntryNo;
          TempWHTEntry."Document Date" := WHTEntry."Document Date";
          TempWHTEntry."Document Type" := GenJnlLine."Document Type";
          TempWHTEntry."Document No." := WHTEntry."Document No.";
          TempWHTEntry."Gen. Bus. Posting Group" := WHTEntry."Gen. Bus. Posting Group";
          TempWHTEntry."Gen. Prod. Posting Group" := WHTEntry."Gen. Prod. Posting Group";
          TempWHTEntry."Bill-to/Pay-to No." := WHTEntry."Bill-to/Pay-to No.";
          TempWHTEntry."WHT Bus. Posting Group" := WHTEntry."WHT Bus. Posting Group";
          TempWHTEntry."WHT Prod. Posting Group" := WHTEntry."WHT Prod. Posting Group";
          TempWHTEntry."WHT Revenue Type" := WHTEntry."WHT Revenue Type";
          TempWHTEntry."Currency Code" := GenJnlLine."Currency Code";
          TempWHTEntry."Unrealized WHT Entry No." := WHTEntry."Entry No.";
          TempWHTEntry."Applies-to Entry No." := WHTEntry."Entry No.";
          TempWHTEntry."User ID" := USERID;
          TempWHTEntry."External Document No." := GenJnlLine."External Document No.";
          TempWHTEntry."Original Document No." := GenJnlLine."Document No.";
          TempWHTEntry."Source Code" := GenJnlLine."Source Code";
          TempWHTEntry."WHT %" := WHTEntry."WHT %";
          CASE Source OF
            Source::Vendor:
              BEGIN
                TempWHTEntry.Base := ROUND(AppldAmount);
                TempWHTEntry.Amount := ROUND(TempWHTEntry.Base * TempWHTEntry."WHT %" / 100);
                TempWHTEntry."Transaction Type" := TempWHTEntry."Transaction Type"::Purchase;
              END;
            Source::Customer:
              BEGIN
                TempWHTEntry.Base := ROUND(AppldAmount);
                TempWHTEntry.Amount := ROUND(TempWHTEntry.Base * TempWHTEntry."WHT %" / 100);
                TempWHTEntry."Transaction Type" := TempWHTEntry."Transaction Type"::Sale;
              END;
          END;
          IF TempWHTEntry."Currency Code" <> '' THEN BEGIN
            CurrFactor :=
              CurrExchRate.ExchangeRate(
                TempWHTEntry."Posting Date",TempWHTEntry."Currency Code");

            TempWHTEntry."Base (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  GenJnlLine."Document Date",
                  TempWHTEntry."Currency Code",
                  TempWHTEntry.Base,CurrFactor));

            TempWHTEntry."Amount (LCY)" :=
              ROUND(
                TempWHTEntry."Base (LCY)" * TempWHTEntry."WHT %" / 100);
          END ELSE BEGIN
            TempWHTEntry."Amount (LCY)" := TempWHTEntry.Amount;
            TempWHTEntry."Base (LCY)" := TempWHTEntry.Base;
          END;

          IF WHTSlipNo = '' THEN BEGIN
            PurchSetup.GET;
            WHTSlipNo :=
              NoSeriesMgt.GetNextNo(
                PurchSetup."WHT Certificate No. Series",TempWHTEntry."Posting Date",TRUE);
          END;

          TempWHTEntry."WHT Certificate No." := WHTSlipNo;
          WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
          TempWHTEntry."WHT Report" := WHTPostingSetup."WHT Report";

          IF GenJnlLine."WHT Report Line No." <> '' THEN
            TempWHTEntry."WHT Report Line No" := GenJnlLine."WHT Report Line No.";

          TempWHTEntry.INSERT;
          NextWHTEntryNo := NextWHTEntryNo + 1;
          TType := TType::Purchase;
          WHTEntry3.RESET;
          WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
          WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
          WHTEntry3.CALCSUMS(Amount,"Amount (LCY)");

          IF (ABS(ABS(WHTEntry3.Amount) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
             (ABS(ABS(WHTEntry3.Amount) - ABS(WHTEntry."Unrealized Amount")) > 0)
          THEN BEGIN
            TempWHTEntry."WHT Difference" := WHTEntry."Unrealized Amount" - WHTEntry3.Amount;
            TempWHTEntry.Amount := TempWHTEntry.Amount - TempWHTEntry."WHT Difference";
            TempWHTEntry.MODIFY;
          END;

          IF (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(WHTEntry."Unrealized Amount (LCY)")) < 0.1) AND
             (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(WHTEntry."Unrealized Amount (LCY)")) > 0)
          THEN BEGIN
            TempWHTEntry."Amount (LCY)" :=
              TempWHTEntry."Amount (LCY)" - WHTEntry."Unrealized Amount (LCY)" + WHTEntry3."Amount (LCY)";
            TempWHTEntry.MODIFY;
          END;
        UNTIL (WHTEntry.NEXT = 0);
    END;

    PROCEDURE ApplyTempVendInvoiceWHT@1500021(VAR GenJnlLine@1500002 : Record 81) EntryNo : Integer;
    VAR
      Currency@1500003 : 'Vendor,Customer';
      GenJnlLineTemp@1500000 : Record 81;
      RemainingAmt@1500004 : Decimal;
    BEGIN
      GenJnlLineTemp.COPY(GenJnlLine);
      TempVendLedgEntry1.RESET;
      IF GenJnlLine."Applies-to Doc. No." = '' THEN BEGIN
        TempVendLedgEntry1.SETRANGE(Open,TRUE);
        TempVendLedgEntry1.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        IF TempVendLedgEntry1.FINDSET THEN
          REPEAT
            TempVendLedgEntry1.CALCFIELDS(
              Amount,"Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");
            RemainingAmt := RemainingAmt + TempVendLedgEntry1."Remaining Amt. (LCY)";
            IF TempVendLedgEntry1."Document Type" = TempVendLedgEntry1."Document Type"::"Credit Memo" THEN
              RemainingAmt := RemainingAmt + TempVendLedgEntry1."Remaining Amt. (LCY)";
          UNTIL TempVendLedgEntry1.NEXT = 0;

        TotAmt := ABS(GenJnlLineTemp.Amount);
        TempVendLedgEntry.RESET;
        TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLineTemp."Document No.");
        TempVendLedgEntry.SETRANGE(Open,TRUE);
        TempVendLedgEntry.SETRANGE("Document Type",TempVendLedgEntry."Document Type"::"Credit Memo");
        IF TempVendLedgEntry.FINDSET THEN
          REPEAT
            TempVendLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF (GenJnlLineTemp."Posting Date" < TempVendLedgEntry."Pmt. Discount Date") AND
               (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") -
                                ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
            THEN
              TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
               (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") < ABS(TotAmt))
            THEN BEGIN
              IF (GenJnlLineTemp."Posting Date" < TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN BEGIN
                GenJnlLineTemp.VALIDATE(
                  Amount,
                  -ABS(TempVendLedgEntry."Remaining Amt. (LCY)" +
                    TempVendLedgEntry."Original Pmt. Disc. Possible"));
                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
                RemainingAmt :=
                  RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)" + TempVendLedgEntry."Original Pmt. Disc. Possible";
              END ELSE BEGIN
                GenJnlLineTemp.VALIDATE(Amount,-ABS(TempVendLedgEntry."Remaining Amt. (LCY)"));
                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
                RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
              END;
            END ELSE BEGIN
              IF (GenJnlLineTemp."Posting Date" < TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN
                GenJnlLineTemp.VALIDATE(Amount,TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
              ELSE
                GenJnlLineTemp.VALIDATE(Amount,TotAmt);
              ExitLoop := TRUE;
            END;

            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
              GenJnlLineTemp."Applies-to Doc. Type" := GenJnlLineTemp."Applies-to Doc. Type"::Invoice
            ELSE BEGIN
              IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                GenJnlLineTemp."Applies-to Doc. Type" := GenJnlLineTemp."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
              TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
              ExitLoop := FALSE;
            END;

            GenJnlLineTemp."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
            NextEntry := ApplyTempWHTEntry(GenJnlLineTemp,Currency::Vendor);
            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempVendLedgEntry.NEXT = 0;

        ExitLoop := FALSE;
        TempVendLedgEntry.RESET;
        TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        TempVendLedgEntry.SETRANGE(Open,TRUE);
        TempVendLedgEntry.SETFILTER("Document Type",'<>%1',TempVendLedgEntry."Document Type"::"Credit Memo");
        IF TempVendLedgEntry.FINDSET THEN BEGIN
          REPEAT
            TempVendLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");
            IF (GenJnlLineTemp."Posting Date" < TempVendLedgEntry."Pmt. Discount Date") AND
               (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") -
                                ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
            THEN
              TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";
            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
               (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") < ABS(TotAmt))
            THEN BEGIN
              IF (GenJnlLineTemp."Posting Date" < TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN BEGIN
                GenJnlLineTemp.VALIDATE(
                  Amount,
                  ABS(TempVendLedgEntry."Remaining Amt. (LCY)" -
                    TempVendLedgEntry."Original Pmt. Disc. Possible"));

                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
                RemainingAmt :=
                  RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)" + TempVendLedgEntry."Original Pmt. Disc. Possible";
              END ELSE BEGIN
                GenJnlLineTemp.VALIDATE(Amount,ABS(TempVendLedgEntry."Remaining Amt. (LCY)"));
                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
                RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
              END;
            END ELSE BEGIN
              IF (GenJnlLineTemp."Posting Date" < TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN
                GenJnlLineTemp.VALIDATE(Amount,TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
              ELSE
                GenJnlLineTemp.VALIDATE(Amount,TotAmt);
              ExitLoop := TRUE;
            END;

            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
              GenJnlLineTemp."Applies-to Doc. Type" := GenJnlLineTemp."Applies-to Doc. Type"::Invoice
            ELSE BEGIN
              IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                GenJnlLineTemp."Applies-to Doc. Type" := GenJnlLineTemp."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
              TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
            END;

            GenJnlLineTemp."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
            NextEntry := ApplyTempWHTEntry(GenJnlLineTemp,Currency::Vendor);
            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempVendLedgEntry.NEXT = 0;
        END ELSE
          NextEntry := ApplyTempWHTEntry(GenJnlLineTemp,Currency::Vendor);
      END ELSE
        NextEntry := ApplyTempWHTEntry(GenJnlLineTemp,Currency::Vendor);
    END;

    PROCEDURE VoidCheck2@1500023(CheckLedgEntry@1500000 : Record 272);
    VAR
      BankAccLedgEntry@1500002 : Record 271;
    BEGIN
      BankAccLedgEntry.GET(CheckLedgEntry."Bank Account Ledger Entry No.");
    END;

    PROCEDURE ApplyVendInvoiceWHTPosted@1500024(VAR VendLedgerEntry@1500002 : Record 25;VAR GenJnlLine@1500001 : Record 81;TransNo@1500000 : Integer) EntryNo : Integer;
    VAR
      Currency@1500003 : 'Vendor,Customer';
      RemainingAmt@1500004 : Decimal;
    BEGIN
      TempVendLedgEntry.RESET;
      IF GenJnlLine."Applies-to Doc. No." = '' THEN BEGIN
        TempVendLedgEntry1.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        TempVendLedgEntry1.SETRANGE(Open,TRUE);
        IF TempVendLedgEntry1.FINDSET(TRUE,FALSE) THEN
          REPEAT
            TempVendLedgEntry1.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF TempVendLedgEntry1."Rem. Amt for WHT" = 0 THEN
              TempVendLedgEntry1."Rem. Amt for WHT" := TempVendLedgEntry1."Remaining Amt. (LCY)";
            RemainingAmt := RemainingAmt + TempVendLedgEntry1."Rem. Amt for WHT";
            IF TempVendLedgEntry1."Document Type" = TempVendLedgEntry1."Document Type"::"Credit Memo" THEN
              RemainingAmt := RemainingAmt + TempVendLedgEntry1."Rem. Amt for WHT";
          UNTIL TempVendLedgEntry1.NEXT = 0;

        TotAmt := ABS(GenJnlLine.Amount);
        IF GenJnlLine."Applies-to ID" <> '' THEN
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
        ELSE
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        TempVendLedgEntry.SETRANGE("Document Type",TempVendLedgEntry."Document Type"::"Credit Memo");

        IF TempVendLedgEntry.FINDSET THEN
          REPEAT
            TempVendLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF (GenJnlLine."Posting Date" <= TempVendLedgEntry."Pmt. Discount Date") AND
               (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Rem. Amt for WHT") -
                                ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
            THEN
              TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
               (ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
            THEN BEGIN
              IF (GenJnlLine."Posting Date" <= TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN BEGIN
                GenJnlLine.VALIDATE(
                  Amount,
                  -ABS(TempVendLedgEntry."Rem. Amt for WHT" +
                    TempVendLedgEntry."Original Pmt. Disc. Possible"));

                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt - TempVendLedgEntry."Rem. Amt for WHT";
                RemainingAmt :=
                  RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT" + TempVendLedgEntry."Original Pmt. Disc. Possible";
              END ELSE BEGIN
                GenJnlLine.VALIDATE(Amount,-ABS(TempVendLedgEntry."Rem. Amt for WHT"));
                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt - TempVendLedgEntry."Rem. Amt for WHT";
                RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
              END;
            END ELSE BEGIN
              IF (GenJnlLine."Posting Date" <= TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN
                GenJnlLine.VALIDATE(Amount,TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
              ELSE
                GenJnlLine.VALIDATE(Amount,TotAmt);
              ExitLoop := TRUE;
            END;

            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
            ELSE BEGIN
              IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
              TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
              ExitLoop := FALSE;
            END;

            GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
            NextEntry :=
              ProcessPaymentPosted(
                GenJnlLine,TransNo,VendLedgerEntry."Entry No.",Currency::Vendor);

            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempVendLedgEntry.NEXT = 0;

        ExitLoop := FALSE;
        TempVendLedgEntry.RESET;
        IF GenJnlLine."Applies-to ID" <> '' THEN
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
        ELSE
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");

        TempVendLedgEntry.SETFILTER("Document Type",'<>%1',TempVendLedgEntry."Document Type"::"Credit Memo");
        IF TempVendLedgEntry.FINDSET THEN BEGIN
          REPEAT
            TempVendLedgEntry.CALCFIELDS(
              Amount,"Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF (GenJnlLine."Posting Date" <= TempVendLedgEntry."Pmt. Discount Date") AND
               (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Rem. Amt for WHT") -
                                ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
            THEN
              TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
               (ABS(TempVendLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
            THEN BEGIN
              IF (GenJnlLine."Posting Date" <= TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN BEGIN
                GenJnlLine.VALIDATE(
                  Amount,
                  ABS(TempVendLedgEntry."Rem. Amt for WHT" -
                    TempVendLedgEntry."Original Pmt. Disc. Possible"));

                IF TempVendLedgEntry."Document Type" <> TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
                RemainingAmt :=
                  RemainingAmt -
                  TempVendLedgEntry."Rem. Amt for WHT" +
                  TempVendLedgEntry."Original Pmt. Disc. Possible";
              END ELSE BEGIN
                GenJnlLine.VALIDATE(Amount,ABS(TempVendLedgEntry."Rem. Amt for WHT"));
                IF TempVendLedgEntry."Document Type" <>
                   TempVendLedgEntry."Document Type"::"Credit Memo"
                THEN
                  TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
                RemainingAmt := RemainingAmt - TempVendLedgEntry."Rem. Amt for WHT";
              END;
            END ELSE BEGIN
              IF (GenJnlLine."Posting Date" <= TempVendLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempVendLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempVendLedgEntry."Original Pmt. Disc. Possible")))
              THEN
                GenJnlLine.VALIDATE(Amount,TotAmt + TempVendLedgEntry."Original Pmt. Disc. Possible")
              ELSE
                GenJnlLine.VALIDATE(Amount,TotAmt);
              ExitLoop := TRUE;
            END;

            IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
            ELSE BEGIN
              IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
              RemainingAmt := RemainingAmt + TempVendLedgEntry."Rem. Amt for WHT";
              TotAmt := TotAmt + TempVendLedgEntry."Rem. Amt for WHT";
              ExitLoop := FALSE;
            END;

            GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
            NextEntry :=
              ProcessPaymentPosted(
                GenJnlLine,TransNo,VendLedgerEntry."Entry No.",Currency::Vendor);
            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempVendLedgEntry.NEXT = 0;
          EXIT(NextEntry);
        END;
        EXIT(
          ProcessPaymentPosted(
            GenJnlLine,TransNo,VendLedgerEntry."Entry No.",Currency::Vendor));
      END;
      EXIT(
        ProcessPaymentPosted(
          GenJnlLine,TransNo,VendLedgerEntry."Entry No.",Currency::Vendor));
    END;

    PROCEDURE ApplyCustInvoiceWHTPosted@1500025(VAR CustLedgerEntry@1500002 : Record 21;VAR GenJnlLine@1500001 : Record 81;TransNo@1500000 : Integer;AppliedEntryTransNo@1500004 : Integer) EntryNo : Integer;
    VAR
      Currency@1500003 : 'Vendor,Customer';
      RemainingAmt@1500005 : Decimal;
    BEGIN
      TempCustLedgEntry1.RESET;
      TotAmt := ABS(GenJnlLine.Amount);
      IF GenJnlLine."Applies-to Doc. No." = '' THEN BEGIN
        IF GenJnlLine."Applies-to ID" <> '' THEN
          TempCustLedgEntry1.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
        ELSE
          TempCustLedgEntry1.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        TempCustLedgEntry1.SETFILTER("Document No.",'<>%1',GenJnlLine."Document No.");
        IF TempCustLedgEntry1.FINDSET(TRUE,FALSE) THEN
          REPEAT
            TempCustLedgEntry1.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount","Original Amt. (LCY)");

            IF TempCustLedgEntry1."Rem. Amt for WHT" = 0 THEN
              TempCustLedgEntry1."Rem. Amt for WHT" := TempCustLedgEntry1."Remaining Amt. (LCY)";

            IF GenJnlLine."Posting Date" <= TempCustLedgEntry1."Pmt. Discount Date" THEN
              RemainingAmt :=
                RemainingAmt +
                TempCustLedgEntry1."Rem. Amt for WHT" -
                TempCustLedgEntry1."Original Pmt. Disc. Possible"
            ELSE
              RemainingAmt := RemainingAmt + TempCustLedgEntry1."Rem. Amt for WHT";

            IF TempCustLedgEntry1."Document Type" = TempCustLedgEntry1."Document Type"::"Credit Memo" THEN
              RemainingAmt := RemainingAmt + TempCustLedgEntry1."Rem. Amt for WHT";
          UNTIL TempCustLedgEntry1.NEXT = 0;

        TempCustLedgEntry.RESET;
        IF GenJnlLine."Applies-to ID" <> '' THEN
          TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
        ELSE
          TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        TempCustLedgEntry.SETRANGE("Document Type",TempCustLedgEntry."Document Type"::"Credit Memo");
        IF TempCustLedgEntry.FINDSET THEN
          REPEAT
            TempCustLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF (GenJnlLine."Posting Date" <= TempCustLedgEntry."Pmt. Discount Date") AND
               (ABS(TotAmt) >= (ABS(TempCustLedgEntry."Rem. Amt for WHT") -
                                ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
            THEN
              TotAmt := TotAmt + TempCustLedgEntry."Original Pmt. Disc. Possible";

            IF (ABS(RemainingAmt) <= ABS(TotAmt)) OR
               (ABS(TempCustLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
            THEN BEGIN
              IF (GenJnlLine."Posting Date" <= TempCustLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempCustLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
              THEN BEGIN
                GenJnlLine.VALIDATE(
                  Amount,
                  -ABS(TempCustLedgEntry."Rem. Amt for WHT" -
                    TempCustLedgEntry."Original Pmt. Disc. Possible"));

                IF TempCustLedgEntry."Document Type" <>
                   TempCustLedgEntry."Document Type"::"Credit Memo"
                THEN
                  TotAmt := -(TotAmt - TempCustLedgEntry."Rem. Amt for WHT");

                RemainingAmt :=
                  RemainingAmt -
                  TempCustLedgEntry."Rem. Amt for WHT" +
                  TempCustLedgEntry."Original Pmt. Disc. Possible";
              END ELSE BEGIN
                GenJnlLine.VALIDATE(Amount,ABS(TempCustLedgEntry."Rem. Amt for WHT"));
                IF TempCustLedgEntry."Document Type" <>
                   TempCustLedgEntry."Document Type"::"Credit Memo"
                THEN
                  TotAmt := -(TotAmt - TempCustLedgEntry."Rem. Amt for WHT");
                RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
              END;
            END ELSE BEGIN
              IF (GenJnlLine."Posting Date" <= TempCustLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempCustLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
              THEN
                GenJnlLine.VALIDATE(
                  Amount,ABS(TotAmt - TempCustLedgEntry."Original Pmt. Disc. Possible"))
              ELSE
                GenJnlLine.VALIDATE(Amount,ABS(TotAmt));
              ExitLoop := TRUE;
            END;

            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Invoice THEN BEGIN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice;
            END ELSE
              IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
                RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
                TotAmt := TotAmt - TempCustLedgEntry."Rem. Amt for WHT";
                ExitLoop := FALSE;
              END;
            GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
            NextEntry :=
              ProcessPaymentPosted(
                GenJnlLine,
                TempCustLedgEntry."Transaction No.",
                CustLedgerEntry."Entry No.",
                Currency::Customer);

            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempCustLedgEntry.NEXT = 0;

        ExitLoop := FALSE;
        TempCustLedgEntry.RESET;
        IF GenJnlLine."Applies-to ID" <> '' THEN
          TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
        ELSE
          TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Document No.");
        TempCustLedgEntry.SETFILTER("Document Type",'<>%1',TempCustLedgEntry."Document Type"::"Credit Memo");
        TempCustLedgEntry.SETFILTER("Document No.",'<>%1',GenJnlLine."Document No.");
        IF TempCustLedgEntry.FINDSET THEN BEGIN
          REPEAT
            TempCustLedgEntry.CALCFIELDS(
              Amount,
              "Amount (LCY)",
              "Remaining Amount",
              "Remaining Amt. (LCY)",
              "Original Amount",
              "Original Amt. (LCY)");

            IF (GenJnlLine."Posting Date" <= TempCustLedgEntry."Pmt. Discount Date") AND
               (ABS(TotAmt) >= (ABS(TempCustLedgEntry."Rem. Amt for WHT") -
                                ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
            THEN
              TotAmt := TotAmt + TempCustLedgEntry."Original Pmt. Disc. Possible";

            IF (ABS(RemainingAmt) <= ABS(TotAmt)) OR
               (ABS(TempCustLedgEntry."Rem. Amt for WHT") < ABS(TotAmt))
            THEN BEGIN
              IF (GenJnlLine."Posting Date" <= TempCustLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempCustLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
              THEN BEGIN
                RemainingAmt :=
                  RemainingAmt -
                  TempCustLedgEntry."Rem. Amt for WHT" +
                  TempCustLedgEntry."Original Pmt. Disc. Possible";

                IF TempCustLedgEntry."Rem. Amt for WHT" <> 0 THEN
                  GenJnlLine.VALIDATE(
                    Amount,
                    -ABS(TempCustLedgEntry."Rem. Amt for WHT" -
                      TempCustLedgEntry."Original Pmt. Disc. Possible"));

                IF TempCustLedgEntry."Document Type" <>
                   TempCustLedgEntry."Document Type"::"Credit Memo"
                THEN
                  TotAmt := (TotAmt - TempCustLedgEntry."Rem. Amt for WHT");
              END ELSE BEGIN
                RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
                IF (AppliedEntryTransNo <> 0) AND (TempCustLedgEntry."Transaction No." <> AppliedEntryTransNo) THEN
                  GenJnlLine.VALIDATE(Amount,0)
                ELSE
                  IF TempCustLedgEntry."Rem. Amt for WHT" <> 0 THEN
                    GenJnlLine.VALIDATE(Amount,-ABS(TempCustLedgEntry."Rem. Amt for WHT"));
                IF TempCustLedgEntry."Document Type" <> TempCustLedgEntry."Document Type"::"Credit Memo" THEN
                  TotAmt := (TotAmt - TempCustLedgEntry."Rem. Amt for WHT");
              END;
            END ELSE BEGIN
              IF (GenJnlLine."Posting Date" <= TempCustLedgEntry."Pmt. Discount Date") AND
                 (ABS(TotAmt) >= (ABS(TempCustLedgEntry."Rem. Amt for WHT") -
                                  ABS(TempCustLedgEntry."Original Pmt. Disc. Possible")))
              THEN
                GenJnlLine.VALIDATE(
                  Amount,
                  -ABS(TotAmt - TempCustLedgEntry."Original Pmt. Disc. Possible"))
              ELSE
                GenJnlLine.VALIDATE(Amount,-ABS(TotAmt));
              ExitLoop := TRUE;
            END;

            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Invoice THEN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
            ELSE
              IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
                GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
                RemainingAmt := RemainingAmt - TempCustLedgEntry."Rem. Amt for WHT";
                TotAmt := TotAmt - TempCustLedgEntry."Rem. Amt for WHT";
                ExitLoop := FALSE;
              END;

            GenJnlLine."Applies-to Doc. No." := TempCustLedgEntry."Document No.";
            IF TempCustLedgEntry."Document Type" = TempCustLedgEntry."Document Type"::Payment THEN BEGIN
              GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice;
              GenJnlLine."Applies-to Doc. No." := CustLedgerEntry."Document No.";
            END;

            NextEntry :=
              ProcessPaymentPosted(
                GenJnlLine,TransNo,CustLedgerEntry."Entry No.",Currency::Customer);

            IF ExitLoop THEN
              EXIT(NextEntry);
          UNTIL TempCustLedgEntry.NEXT = 0;
          EXIT(NextEntry);
        END;
        EXIT(
          ProcessPaymentPosted(
            GenJnlLine,TransNo,CustLedgerEntry."Entry No.",Currency::Customer));
      END;
      EXIT(
        ProcessPaymentPosted(
          GenJnlLine,TransNo,CustLedgerEntry."Entry No.",Currency::Customer));
    END;

    PROCEDURE ProcessPaymentPosted@1500026(VAR GenJnlLine@1500006 : Record 81;TransactionNo@1500005 : Integer;EntryNo@1500004 : Integer;Source@1500000 : 'Vendor,Customer') PaymentNo : Integer;
    VAR
      WHTEntry@1500024 : Record 28044;
      WHTEntry2@1500023 : Record 28044;
      WHTEntry3@1500022 : Record 28044;
      PaymentAmount@1500019 : Decimal;
      PaymentAmountLCY@1500018 : Decimal;
      AppldAmount@1500017 : Decimal;
      WHTEntryTemp@1500015 : Record 28044;
      PurchCrMemoHeader@1500012 : Record 124;
      VendLedgEntry1@1500011 : Record 25;
      VendLedgEntry@1500010 : Record 25;
      ExpectedAmount@1500009 : Decimal;
      PaymentAmount1@1500008 : Decimal;
      TempWHT@1500007 : Record 28046;
      SalesCrMemoHeader@1500003 : Record 114;
      CustLedgEntry1@1500002 : Record 21;
      CustLedgEntry@1500001 : Record 21;
      PmtDiscToBeDeducted@1500025 : Decimal;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No." = '' THEN BEGIN
          Vendor.GET(GenJnlLine."Account No.");
          IF Vendor.ABN <> '' THEN
            EXIT;
        END ELSE BEGIN
          Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
          IF Vendor.ABN <> '' THEN
            EXIT;
        END;
      PaymentAmount := GenJnlLine.Amount;
      PaymentAmount1 := GenJnlLine.Amount;
      PaymentAmountLCY := GenJnlLine."Amount (LCY)";

      WHTEntry.RESET;
      WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);

      IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
        WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");

      CASE Source OF
        Source::Vendor:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
        Source::Customer:
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
      END;

      WHTEntry.SETRANGE(Closed,FALSE);
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
      END ELSE
        WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");

      IF WHTEntry.FINDSET THEN
        REPEAT
          WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
          IF (WHTPostingSetup."Realized WHT Type" =
              WHTPostingSetup."Realized WHT Type"::Payment)
          THEN BEGIN
            WHTEntry3.RESET;
            WHTEntry3 := WHTEntry;
            CASE Source OF
              Source::Vendor:
                BEGIN
                  IF GenJnlLine."Applies-to Doc. No." = '' THEN
                    EXIT;
                  PurchCrMemoHeader.RESET;
                  PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                  PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                  IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                    TempRemAmt := 0;
                    VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                    VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                    IF VendLedgEntry1.FINDFIRST THEN
                      VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                    WHTEntryTemp.RESET;
                    WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                    WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                    WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                    WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntryTemp.FINDFIRST THEN BEGIN
                      TempRemBase := WHTEntryTemp."Unrealized Amount";
                      TempRemAmt := WHTEntryTemp."Unrealized Base";
                    END;
                  END;

                  VendLedgEntry.RESET;
                  VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                  IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                    VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                  ELSE
                    IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");

                  IF VendLedgEntry.FINDFIRST THEN
                    VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");

                  ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                  IF VendLedgEntry1."Amount (LCY)" = 0 THEN
                    VendLedgEntry1."Rem. Amt for WHT" := 0;
                  IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                     (ABS(PaymentAmount1) >=
                      (ABS(VendLedgEntry."Rem. Amt for WHT" + VendLedgEntry1."Rem. Amt for WHT") -
                       ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                  THEN BEGIN
                    AppldAmount :=
                      ROUND(
                        ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                         (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                    WHTEntry3."Remaining Unrealized Base" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Base" -
                        ROUND(
                          ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                           (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                    WHTEntry3."Remaining Unrealized Amount" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Amount" -
                        ROUND(
                          ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                           (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                  END ELSE BEGIN
                    AppldAmount :=
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
                        ExpectedAmount);

                    WHTEntry3."Remaining Unrealized Base" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Base" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
                          ExpectedAmount));

                    WHTEntry3."Remaining Unrealized Amount" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Amount" -
                        ROUND(
                          (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) /
                          ExpectedAmount));
                  END;
                  PaymentAmount := PaymentAmount + AppldAmount;
                END;
              Source::Customer:
                BEGIN
                  SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                  SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
                  IF SalesCrMemoHeader.FINDFIRST THEN BEGIN
                    TempRemAmt := 0;
                    CustLedgEntry1.RESET;
                    CustLedgEntry1.SETRANGE("Document Type",CustLedgEntry1."Document Type"::"Credit Memo");
                    CustLedgEntry1.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                    IF CustLedgEntry1.FINDFIRST THEN
                      CustLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                    WHTEntryTemp.RESET;
                    WHTEntryTemp.SETRANGE("Document No.",SalesCrMemoHeader."No.");
                    WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                    WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
                    WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                    WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                    IF WHTEntryTemp.FINDFIRST THEN BEGIN
                      TempRemBase := WHTEntryTemp."Unrealized Amount";
                      TempRemAmt := WHTEntryTemp."Unrealized Base";
                    END;
                  END;

                  CustLedgEntry.RESET;
                  CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                  CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                  IF CustLedgEntry.FINDFIRST THEN
                    CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                  IF CustLedgEntry1."Amount (LCY)" = 0 THEN
                    CustLedgEntry1."Rem. Amt for WHT" := 0;

                  ExpectedAmount := -(CustLedgEntry.Amount + CustLedgEntry1.Amount);
                  IF (GenJnlLine."Posting Date" <= CustLedgEntry."Pmt. Discount Date") AND
                     (ABS(PaymentAmount1) >=
                      (ABS(CustLedgEntry."Rem. Amt for WHT" + CustLedgEntry1."Rem. Amt for WHT") -
                       ABS(CustLedgEntry."Original Pmt. Disc. Possible")))
                  THEN BEGIN
                    PmtDiscToBeDeducted := CustLedgEntry."Original Pmt. Disc. Possible" *
                      (PaymentAmount1 / (ExpectedAmount + CustLedgEntry."Original Pmt. Disc. Possible"));
                    AppldAmount :=
                      ROUND(
                        ((PaymentAmount1 - PmtDiscToBeDeducted) *
                         (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                    WHTEntry3."Remaining Unrealized Base" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Base" -
                        ROUND(
                          ((PaymentAmount1 - PmtDiscToBeDeducted) *
                           (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));
                    WHTEntry3."Remaining Unrealized Amount" :=
                      ROUND(
                        WHTEntry."Remaining Unrealized Amount" -
                        ROUND(
                          ((PaymentAmount1 - PmtDiscToBeDeducted) *
                           (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                  END ELSE BEGIN
                    AppldAmount :=
                      ROUND(
                        (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount);
                    GLSetup.GET;
                    IF GLSetup."Manual Sales WHT Calc." AND GenJnlLine."WHT Payment" THEN BEGIN
                      IF ABS(PaymentAmount1) > ABS(WHTEntry."Unrealized Amount") THEN BEGIN
                        WHTEntry3."Remaining Unrealized Base" := 0;
                        WHTEntry3."Remaining Unrealized Amount" := 0;
                        WHTEntry3."Rem Unrealized Base (LCY)" := 0;
                        WHTEntry3."Rem Unrealized Amount (LCY)" := 0;
                      END;
                    END ELSE BEGIN
                      WHTEntry3."Remaining Unrealized Base" :=
                        ROUND(
                          WHTEntry."Remaining Unrealized Base" -
                          ROUND(
                            (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount));

                      WHTEntry3."Remaining Unrealized Amount" :=
                        ROUND(
                          WHTEntry."Remaining Unrealized Amount" -
                          ROUND(
                            (PaymentAmount1 * (WHTEntry."Unrealized Amount" + TempRemBase)) / ExpectedAmount));
                    END;
                  END;
                  PaymentAmount := PaymentAmount + AppldAmount;
                END;
            END;
            IF (WHTEntry."Remaining Unrealized Base" = 0) AND
               (WHTEntry."Remaining Unrealized Amount" = 0)
            THEN
              WHTEntry3.Closed := TRUE;

            IF GenJnlLine."Source Currency Code" <> WHTEntry."Currency Code" THEN
              ERROR(Text1500000);

            GLSetup.GET;
            IF GLSetup."Manual Sales WHT Calc." AND NOT GenJnlLine."WHT Payment" THEN
              AppldAmount := 0;
            IF AppldAmount = 0 THEN
              EXIT(WHTEntry2."Entry No.");

            WHTEntry2.INIT;
            WHTEntry2."Posting Date" := GenJnlLine."Document Date";
            WHTEntry2."Entry No." := NextEntryNo;
            WHTEntry2."Document Date" := WHTEntry."Document Date";
            WHTEntry2."Document Type" := GenJnlLine."Document Type";
            WHTEntry2."Document No." := WHTEntry."Document No.";
            WHTEntry2."Gen. Bus. Posting Group" := WHTEntry."Gen. Bus. Posting Group";
            WHTEntry2."Gen. Prod. Posting Group" := WHTEntry."Gen. Prod. Posting Group";
            WHTEntry2."Bill-to/Pay-to No." := WHTEntry."Bill-to/Pay-to No.";
            WHTEntry2."WHT Bus. Posting Group" := WHTEntry."WHT Bus. Posting Group";
            WHTEntry2."WHT Prod. Posting Group" := WHTEntry."WHT Prod. Posting Group";
            WHTEntry2."WHT Revenue Type" := WHTEntry."WHT Revenue Type";
            WHTEntry2."Unrealized WHT Entry No." := WHTEntry."Entry No.";
            WHTEntry2."Currency Code" := GenJnlLine."Source Currency Code";
            WHTEntry2."Applies-to Entry No." := WHTEntry."Entry No.";
            WHTEntry2."User ID" := USERID;
            WHTEntry2."External Document No." := GenJnlLine."External Document No.";
            WHTEntry2."Actual Vendor No." := GenJnlLine."Actual Vendor No.";
            WHTEntry2."Original Document No." := GenJnlLine."Document No.";
            WHTEntry2."Source Code" := GenJnlLine."Source Code";
            WHTEntry2."Transaction No." := TransactionNo;
            WHTEntry2."WHT %" := WHTEntry."WHT %";
            CASE Source OF
              Source::Vendor:
                BEGIN
                  WHTEntry2.Base := ROUND(AppldAmount);
                  WHTEntry2.Amount := ROUND(WHTEntry2.Base * WHTEntry2."WHT %" / 100);
                  WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Purchase;
                  WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  WHTEntry2."WHT Report" := WHTPostingSetup."WHT Report";
                  IF GenJnlLine."Certificate Printed" THEN BEGIN
                    WHTEntry2."WHT Report Line No" := GenJnlLine."WHT Report Line No.";
                    TempWHT.SETRANGE("Document No.",WHTEntry2."Document No.");
                    IF TempWHT.FINDFIRST THEN
                      WHTEntry2."WHT Certificate No." := TempWHT."WHT Certificate No.";
                  END ELSE BEGIN
                    IF ((Source = Source::Vendor) AND
                        (WHTEntry."Document Type" = WHTEntry."Document Type"::Invoice)) OR
                       ((Source = Source::Customer) AND
                        (WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo"))
                    THEN
                      IF (WHTReportLineNo = '') AND (WHTEntry2.Amount <> 0) AND
                         (WHTPostingSetup."WHT Report Line No. Series" <> '')
                      THEN
                        WHTReportLineNo :=
                          NoSeriesMgt.GetNextNo(
                            WHTPostingSetup."WHT Report Line No. Series",WHTEntry2."Posting Date",TRUE);

                    WHTEntry2."WHT Report Line No" := WHTReportLineNo;
                  END;
                END;
              Source::Customer:
                BEGIN
                  GLSetup.GET;
                  IF GLSetup."Manual Sales WHT Calc." AND GenJnlLine."WHT Payment" THEN BEGIN
                    WHTEntry2.Amount := GenJnlLine.Amount;
                    WHTEntry2.Base := ROUND((WHTEntry2.Amount * 100) / WHTEntry2."WHT %");
                    WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Sale;
                  END ELSE BEGIN
                    WHTEntry2.Base := ROUND(AppldAmount);
                    WHTEntry2.Amount := ROUND(WHTEntry2.Base * WHTEntry2."WHT %" / 100);
                    WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Sale;
                  END;
                END;
            END;

            WHTEntry2."Payment Amount" := PaymentAmount1;
            IF WHTEntry2."Currency Code" <> '' THEN BEGIN
              CurrFactor :=
                CurrExchRate.ExchangeRate(
                  WHTEntry2."Posting Date",WHTEntry2."Currency Code");

              WHTEntry2."Base (LCY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    WHTEntry2."Currency Code",
                    WHTEntry2.Base,CurrFactor));

              WHTEntry2."Amount (LCY)" :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    GenJnlLine."Document Date",
                    WHTEntry2."Currency Code",
                    WHTEntry2.Amount,CurrFactor));
            END ELSE BEGIN
              WHTEntry2."Amount (LCY)" := WHTEntry2.Amount;
              WHTEntry2."Base (LCY)" := WHTEntry2.Base;
            END;

            WHTEntry2.INSERT;
            TType := TType::Purchase;
            WHTEntry3.MODIFY;

            WHTEntry3.RESET;
            WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
            WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
            WHTEntry3.CALCSUMS(Amount,"Amount (LCY)");
            IF (ABS(ABS(WHTEntry3.Amount) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
               (ABS(ABS(WHTEntry3.Amount) - ABS(WHTEntry."Unrealized Amount")) > 0)
            THEN BEGIN
              WHTEntry2."WHT Difference" := WHTEntry."Unrealized Amount" - WHTEntry3.Amount;
              WHTEntry2.Amount := WHTEntry2.Amount - WHTEntry2."WHT Difference";
              WHTEntry2.MODIFY;
            END;

            IF (ABS(ABS(WHTEntry3."Amount (LCY)") -
                  ABS(WHTEntry."Unrealized Amount (LCY)")) < 0.1) AND
               (ABS(ABS(WHTEntry3."Amount (LCY)") - ABS(WHTEntry."Unrealized Amount (LCY)")) > 0)
            THEN BEGIN
              WHTEntry2."Amount (LCY)" := WHTEntry2."Amount (LCY)" -
                WHTEntry."Unrealized Amount (LCY)" + WHTEntry3."Amount (LCY)";
              WHTEntry2.MODIFY;
            END;
          END;
        UNTIL (WHTEntry.NEXT = 0);

      IF (WHTPostingSetup."Realized WHT Type" =
          WHTPostingSetup."Realized WHT Type"::Payment)
      THEN
        EXIT(WHTEntry2."Entry No." + 1);
    END;

    PROCEDURE CheckPmtDisc@1500028(PostingDate@1500000 : Date;PmtDiscDate@1500001 : Date;Amount1@1500002 : Decimal;Amount2@1500003 : Decimal;Amount3@1500004 : Decimal;Amount4@1500005 : Decimal) : Boolean;
    BEGIN
      IF (PostingDate <= PmtDiscDate) AND
         (Amount1 >= (Amount2 - Amount3)) AND
         (Amount4 >= (Amount2 - Amount3))
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE PreprintingWHT@1500010(VAR GenJournalLine@1500000 : Record 81);
    VAR
      WHTEntry@1500001 : Record 28044;
      TempWHTEntry@1500006 : Record 28046;
      VendLedgEntry@1500002 : Record 25;
      WHTExists@1500003 : Boolean;
      NoS@1500004 : Code[10];
      PurchSetup@1500005 : Record 312;
    BEGIN
      IF GenJournalLine."Certificate Printed" THEN
        ERROR(Text1500001);
      IF GenJournalLine."Document Type" <> GenJournalLine."Document Type"::Payment THEN
        EXIT;
      IF GenJournalLine."Skip WHT" THEN
        EXIT;
      PurchSetup.GET;
      IF GenJournalLine."Applies-to Doc. No." <> '' THEN BEGIN
        WHTEntry.RESET;
        WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
        IF GenJournalLine."Applies-to Doc. Type" = GenJournalLine."Applies-to Doc. Type"::Invoice THEN
          WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);
        IF GenJournalLine."Applies-to Doc. Type" = GenJournalLine."Applies-to Doc. Type"::"Credit Memo" THEN
          WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
        WHTEntry.SETRANGE("Document No.",GenJournalLine."Applies-to Doc. No.");
        IF WHTEntry.FINDFIRST THEN BEGIN
          WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
          WHTPostingSetup.TESTFIELD("WHT Report Line No. Series");
          GenJournalLine."WHT Report Line No." :=
            NoSeriesMgt.GetNextNo(
              WHTPostingSetup."WHT Report Line No. Series",GenJournalLine."Posting Date",TRUE);
        END;
      END ELSE BEGIN
        VendLedgEntry.RESET;
        VendLedgEntry.SETRANGE("Applies-to ID",GenJournalLine."Document No.");
        IF VendLedgEntry.FINDSET THEN
          REPEAT
            WHTEntry.RESET;
            WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
            IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice THEN
              WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::Invoice);
            IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN
              WHTEntry.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
            WHTEntry.SETRANGE("Document No.",VendLedgEntry."Document No.");
            IF NOT WHTExists THEN
              IF WHTEntry.FINDFIRST THEN BEGIN
                WHTPostingSetup.GET(WHTEntry."WHT Bus. Posting Group",WHTEntry."WHT Prod. Posting Group");
                WHTPostingSetup.TESTFIELD("WHT Report Line No. Series");
                NoS := WHTPostingSetup."WHT Report Line No. Series";
                WHTExists := TRUE;
              END;
          UNTIL VendLedgEntry.NEXT = 0;
        IF NoS <> '' THEN
          GenJournalLine."WHT Report Line No." :=
            NoSeriesMgt.GetNextNo(NoS,GenJournalLine."Posting Date",TRUE);
      END;

      ApplyTempVendInvoiceWHT(GenJournalLine);
      TempWHTEntry.RESET;
      TempWHTEntry.SETCURRENTKEY("Bill-to/Pay-to No.","Original Document No.","WHT Revenue Type");
      TempWHTEntry.SETRANGE("Original Document No.",GenJournalLine."Document No.");
      IF TempWHTEntry.FINDFIRST THEN
        IF TempWHTEntry."Document Type" = TempWHTEntry."Document Type"::Payment THEN
          REPORT.RUN(REPORT::"WHT certificate preprint",PurchSetup."Print Dialog",FALSE,TempWHTEntry);
      GenJournalLine."Certificate Printed" := TRUE;
      GenJournalLine.MODIFY;
    END;

    PROCEDURE CheckApplicationSalesWHT@1500034(VAR SalesHeader@1500000 : Record 36);
    VAR
      TempCustLedgEntry@1500002 : Record 21;
      WHTEntry@1500003 : Record 28044;
      SalesLine1@1500005 : Record 37;
      Exists@1000000000 : Boolean;
    BEGIN
      IF SalesHeader."Applies-to Doc. No." <> '' THEN
        TempCustLedgEntry.SETRANGE("Document No.",SalesHeader."Applies-to Doc. No.")
      ELSE
        TempCustLedgEntry.SETRANGE("Applies-to ID",SalesHeader."Applies-to ID");

      Exists:=FALSE; // UPG09R2

      IF TempCustLedgEntry.FINDSET THEN
        REPEAT
          WHTEntry.RESET;
          WHTEntry.SETRANGE("Document No.",TempCustLedgEntry."Document No.");
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
          IF WHTEntry.FINDSET THEN
            BEGIN // UPG09R2
            REPEAT
              SalesLine1.RESET;
              SalesLine1.SETRANGE("Document No.",SalesHeader."No.");
              SalesLine1.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine1.SETRANGE("WHT Business Posting Group",WHTEntry."WHT Bus. Posting Group");
              SalesLine1.SETRANGE("WHT Product Posting Group",WHTEntry."WHT Prod. Posting Group");
              // UPG09R2.begin
              //IF NOT SalesLine1.FINDFIRST THEN
              //  ERROR(Text1500003);
              IF SalesLine1.FINDFIRST THEN
                Exists:=TRUE;
              // UPG09R2.end
            UNTIL WHTEntry.NEXT = 0;
           // UPG09R2.begin
            END
            ELSE
            BEGIN
            SalesLine1.RESET;
            SalesLine1.SETRANGE("Document No.",SalesHeader."No.");
            SalesLine1.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine1.SETFILTER(SalesLine1."WHT Product Posting Group",'<>%1','');

             IF SalesLine1.FINDFIRST THEN
               Exists:=FALSE
             ELSE
             Exists:=TRUE;

            END;

           IF NOT Exists THEN
           ERROR(Text1500003);
           // UPG09R2.end
        UNTIL TempCustLedgEntry.NEXT = 0;
    END;

    PROCEDURE CheckApplicationPurchWHT@1500035(VAR PurchHeader@1500001 : Record 38);
    VAR
      TempVendLedgEntry@1500002 : Record 25;
      WHTEntry@1500003 : Record 28044;
      PurchLine1@1500005 : Record 39;
      Exists@1000000000 : Boolean;
    BEGIN
      IF PurchHeader."Applies-to Doc. No." <> '' THEN
        TempVendLedgEntry.SETRANGE("Document No.",PurchHeader."Applies-to Doc. No.")
      ELSE
        TempVendLedgEntry.SETRANGE("Applies-to ID",PurchHeader."Applies-to ID");

      Exists:=FALSE; // UPG09R2

      IF TempVendLedgEntry.FINDSET THEN
        REPEAT
          WHTEntry.RESET;
          WHTEntry.SETRANGE("Document No.",TempVendLedgEntry."Document No.");
          WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
          IF WHTEntry.FINDSET THEN
           BEGIN // UPG09R2
            REPEAT
              PurchLine1.RESET;
              PurchLine1.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine1.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine1.SETRANGE("WHT Business Posting Group",WHTEntry."WHT Bus. Posting Group");
              PurchLine1.SETRANGE("WHT Product Posting Group",WHTEntry."WHT Prod. Posting Group");
              // UPG09R2.begin
              //IF NOT PurchLine1.FINDFIRST THEN
              //  ERROR(Text1500003);
              IF  PurchLine1.FINDFIRST THEN
                 Exists:=TRUE;
              // UPG09R2.end
            UNTIL WHTEntry.NEXT = 0;
          // UPG09R2.begin
           END
          ELSE
          BEGIN
              PurchLine1.RESET;
              PurchLine1.SETRANGE("Document No.",PurchHeader."No.");
              PurchLine1.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine1.SETFILTER(PurchLine1."WHT Product Posting Group",'<>%1','');

              IF PurchLine1.FINDFIRST THEN
              Exists:=FALSE
              ELSE
              Exists:=TRUE;
          END;


           IF NOT Exists THEN
           ERROR(Text1500003);
          // UPG09R2.end
        UNTIL TempVendLedgEntry.NEXT = 0;
    END;

    PROCEDURE CheckApplicationGenSalesWHT@1500033(VAR GenJnlLine@1500000 : Record 81);
    VAR
      TempCustLedgEntry@1500002 : Record 21;
      WHTEntry@1500003 : Record 28044;
    BEGIN
      IF (GenJnlLine."Applies-to Doc. No." <> '') OR
         (GenJnlLine."Applies-to ID" <> '')
      THEN BEGIN
        TempCustLedgEntry.RESET;
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          TempCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.")
        ELSE
          TempCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        IF TempCustLedgEntry.FINDSET THEN
          REPEAT
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document No.",TempCustLedgEntry."Document No.");
            WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Sale);
            IF WHTEntry.FINDSET THEN
              REPEAT
                GenJnlLine.SETRANGE("WHT Business Posting Group",WHTEntry."WHT Bus. Posting Group");
                GenJnlLine.SETRANGE("WHT Product Posting Group",WHTEntry."WHT Prod. Posting Group");
                IF NOT GenJnlLine.FINDFIRST THEN
                  ERROR(Text1500003);
              UNTIL WHTEntry.NEXT = 0;
          UNTIL TempCustLedgEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CheckApplicationGenPurchWHT@1500022(VAR GenJnlLine@1500000 : Record 81);
    VAR
      TempVendLedgEntry@1500002 : Record 25;
      WHTEntry@1500003 : Record 28044;
    BEGIN
      IF (GenJnlLine."Applies-to Doc. No." <> '') OR
         (GenJnlLine."Applies-to ID" <> '')
      THEN BEGIN
        TempVendLedgEntry.RESET;
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          TempVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.")
        ELSE
          TempVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        IF TempVendLedgEntry.FINDSET THEN
          REPEAT
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document No.",TempVendLedgEntry."Document No.");
            WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
            IF WHTEntry.FINDSET THEN
              REPEAT
                GenJnlLine.SETRANGE("WHT Business Posting Group",WHTEntry."WHT Bus. Posting Group");
                GenJnlLine.SETRANGE("WHT Product Posting Group",WHTEntry."WHT Prod. Posting Group");
                IF NOT GenJnlLine.FINDFIRST THEN
                  ERROR(Text1500003);
              UNTIL WHTEntry.NEXT = 0;
          UNTIL TempVendLedgEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcVendExtraWHTForEarliest@1500030(VAR GenJnlLine@1500000 : Record 81) WHTAmount : Decimal;
    VAR
      VendorLedgerEntry@1500003 : Record 25;
      WHTEntry@1500004 : Record 28044;
      TotalWHTBase@1500005 : Decimal;
      WHTBase@1500001 : Decimal;
      TotalWHTAmount@1500006 : Decimal;
      TotalWHTAmount2@1500008 : Decimal;
      TotalWHTAmount3@1500007 : Decimal;
      VendLedgEntry@1500015 : Record 25;
      PaymentAmount1@1500009 : Decimal;
      PurchCrMemoHeader@1500010 : Record 124;
      VendLedgEntry1@1500012 : Record 25;
      WHTEntryTemp@1500011 : Record 28044;
      AppldAmount@1500014 : Decimal;
      ExpectedAmount@1500013 : Decimal;
      WHTEntry3@1500016 : Record 28044;
      Diff@1500017 : Decimal;
      RemainingAmt@1500022 : Decimal;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No." = '' THEN BEGIN
          Vendor.GET(GenJnlLine."Account No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END ELSE BEGIN
          Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END;

      WHTAmount := 0;
      TotalWHTBase := 0;
      WHTBase := 0;
      IF WHTPostingSetup.GET(
           GenJnlLine."WHT Business Posting Group",
           GenJnlLine."WHT Product Posting Group")
      THEN BEGIN
        IF (WHTPostingSetup."Realized WHT Type" =
            WHTPostingSetup."Realized WHT Type"::Earliest)
        THEN BEGIN
          IF GenJnlLine."WHT Absorb Base" <> 0 THEN
            WHTBase := ABS(GenJnlLine."WHT Absorb Base")
          ELSE
            WHTBase := ABS(GenJnlLine.Amount);
        END;
      END;
      TotalWHTBase := WHTBase;
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        VendorLedgerEntry.RESET;
        VendorLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment)THEN
          VendorLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            VendorLedgerEntry."Document Type"::Invoice);

        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund)THEN
          VendorLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            VendorLedgerEntry."Document Type"::"Credit Memo");

        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice)THEN
          VendorLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            VendorLedgerEntry."Document Type"::Payment);

        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo")THEN
          VendorLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            VendorLedgerEntry."Document Type"::Refund);

        IF VendorLedgerEntry.FINDFIRST THEN
          BEGIN
          IF GenJnlLine."Currency Code" <> VendorLedgerEntry."Currency Code" THEN
            ERROR(Text1500000);

          IF VendorLedgerEntry.Prepayment THEN BEGIN
            TotalWHTAmount := 0;
            PaymentAmount1 := GenJnlLine.Amount;
            WHTEntry.RESET;
            WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
            WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
            IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
              WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
            END ELSE
              WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
            IF WHTEntry.FINDSET THEN BEGIN
              REPEAT
                PurchCrMemoHeader.SETRANGE(
                  "Applies-to Doc. Type",
                  PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                  TempRemAmt := 0;
                  VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                  VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  IF VendLedgEntry1.FINDFIRST THEN
                    VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount");
                  WHTEntryTemp.RESET;
                  WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                  WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                  WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                  WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                  IF WHTEntryTemp.FINDFIRST THEN
                    TempRemAmt := WHTEntryTemp."Unrealized Base";
                END;

                VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                IF VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                   (ABS(PaymentAmount1) >= (ABS(VendLedgEntry."Remaining Amount" +
                                              VendLedgEntry1."Remaining Amount") -
                                            ABS(VendLedgEntry."Original Pmt. Disc. Possible")))
                THEN
                  AppldAmount :=
                    ROUND(
                      ((PaymentAmount1 - VendLedgEntry."Original Pmt. Disc. Possible") *
                       (WHTEntry."Unrealized Base" + TempRemAmt)) / ExpectedAmount)
                ELSE
                  AppldAmount :=
                    ROUND(
                      (PaymentAmount1 * (WHTEntry."Unrealized Base" + TempRemAmt)) /
                      ExpectedAmount);
                TotalWHTAmount := ROUND(TotalWHTAmount + AppldAmount * WHTEntry."WHT %" / 100);
              UNTIL WHTEntry.NEXT = 0;

              WHTEntry3.RESET;
              WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
              WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
              WHTEntry3.CALCSUMS(Amount,"Amount (LCY)");
              IF (ABS(ABS(WHTEntry3.Amount) + ABS(TotalWHTAmount) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
                 (ABS(ABS(WHTEntry3.Amount) + ABS(TotalWHTAmount) - ABS(WHTEntry."Unrealized Amount")) > 0)
              THEN BEGIN
                Diff := WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + TotalWHTAmount);
                TotalWHTAmount := TotalWHTAmount + Diff;
              END;

              EXIT(ROUND(TotalWHTAmount));
            END
          END ELSE BEGIN
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document No.",VendorLedgerEntry."Document No.");
            IF WHTEntry.FINDFIRST THEN
              IF WHTPostingSetup.GET(
                   WHTEntry."WHT Bus. Posting Group",
                   WHTEntry."WHT Prod. Posting Group")
              THEN
                IF ((WHTPostingSetup."Realized WHT Type" =
                     WHTPostingSetup."Realized WHT Type"::Earliest) AND
                    (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                THEN BEGIN
                  TotAmt := 0;
                  TotAmt := GenJnlLine.Amount;
                  TempVendLedgEntry.RESET;
                  TempVendLedgEntry.SETRANGE("Entry No.",VendorLedgerEntry."Entry No.");
                  IF TempVendLedgEntry.FINDSET THEN BEGIN
                    TempVendLedgEntry.CALCFIELDS(
                      Amount,"Amount (LCY)",
                      "Remaining Amount","Remaining Amt. (LCY)");

                    IF CheckPmtDisc(
                         GenJnlLine."Posting Date",
                         TempVendLedgEntry."Pmt. Discount Date",
                         ABS(TempVendLedgEntry."Amount to Apply"),
                         ABS(TempVendLedgEntry."Remaining Amount"),
                         ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),
                         ABS(TotAmt))
                    THEN
                      TotAmt := TotAmt - TempVendLedgEntry."Original Pmt. Disc. Possible";

                    IF ABS(WHTEntry."Rem Realized Base") >= WHTBase THEN
                      TotAmt := 0
                    ELSE
                      TotAmt := TotAmt - ABS(WHTEntry."Rem Realized Base");
                  END;
                  WHTBase := TotAmt;
                END;
          END;
        END;
      END ELSE BEGIN
        IF GenJnlLine."Applies-to ID" <> '' THEN BEGIN
          IF ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) OR
              (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund))
          THEN BEGIN
            VendorLedgerEntry.RESET;
            VendorLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendorLedgerEntry.SETFILTER(
              "Document Type",
              '%1|%2',
              VendorLedgerEntry."Document Type"::Payment,
              VendorLedgerEntry."Document Type"::"Credit Memo");
            IF VendorLedgerEntry.FINDSET THEN
              REPEAT
                WHTEntry.RESET;
                WHTEntry.SETRANGE("Document No.",VendorLedgerEntry."Document No.");
                IF WHTEntry.FINDSET THEN
                  REPEAT
                    IF WHTPostingSetup.GET(
                         WHTEntry."WHT Bus. Posting Group",
                         WHTEntry."WHT Prod. Posting Group")
                    THEN
                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Earliest) AND
                          (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                      THEN BEGIN
                        IF TotalWHTBase > ABS(WHTEntry."Rem Realized Base") THEN BEGIN
                          TotalWHTBase := TotalWHTBase - ABS(WHTEntry."Rem Realized Base");
                          IF (((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo")) OR
                              ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::Payment)))
                          THEN
                            WHTBase := WHTBase - ABS(WHTEntry."Rem Realized Base");
                        END ELSE BEGIN
                          IF (TotalWHTBase > 0) AND (ABS(TotalWHTBase) <= ABS(WHTEntry."Rem Realized Base")) THEN
                            TotalWHTBase := TotalWHTBase - TotalWHTBase;
                          IF (((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo")) OR
                              ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::Payment)))
                          THEN
                            WHTBase := 0;
                        END;
                      END;
                  UNTIL WHTEntry.NEXT = 0;
              UNTIL VendorLedgerEntry.NEXT = 0;
          END;

          IF ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) OR
              (GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo"))
          THEN BEGIN
            TotalWHTAmount := 0;
            TotalWHTAmount2 := 0;
            TotalWHTAmount3 := 0;
            RemainingAmt := 0;
            TotAmt := 0;
            TempVendLedgEntry1.RESET;
            TempVendLedgEntry1.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            TempVendLedgEntry1.SETRANGE(Open,TRUE);
            IF GenJnlLine."Bill-to/Pay-to No." = '' THEN
              TempVendLedgEntry1.SETRANGE("Buy-from Vendor No.",GenJnlLine."Account No.")
            ELSE
              TempVendLedgEntry1.SETRANGE("Buy-from Vendor No.",GenJnlLine."Bill-to/Pay-to No.");

            IF TempVendLedgEntry1.FINDSET THEN
              REPEAT
                TempVendLedgEntry1.CALCFIELDS(
                  Amount,"Amount (LCY)",
                  "Remaining Amount","Remaining Amt. (LCY)");

                RemainingAmt := RemainingAmt + TempVendLedgEntry1."Remaining Amt. (LCY)";
              UNTIL TempVendLedgEntry1.NEXT = 0;

            TotAmt := ABS(GenJnlLine."Amount (LCY)");
            CurrFactor :=
              CurrExchRate.ExchangeRate(
                GenJnlLine."Document Date",GenJnlLine."Currency Code");

            VendorLedgerEntry.RESET;
            VendorLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Refund);
            IF VendorLedgerEntry.FINDSET THEN
              REPEAT
                WHTEntry.RESET;
                WHTEntry.SETRANGE("Document No.",VendorLedgerEntry."Document No.");
                IF WHTEntry.FINDSET THEN
                  REPEAT
                    IF WHTPostingSetup.GET(
                         WHTEntry."WHT Bus. Posting Group",
                         WHTEntry."WHT Prod. Posting Group")
                    THEN
                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Earliest) AND
                          (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                      THEN BEGIN
                        IF TotalWHTBase > ABS(WHTEntry."Rem Realized Base") THEN BEGIN
                          TotalWHTBase := TotalWHTBase - ABS(WHTEntry."Rem Realized Base");
                          IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo" THEN
                            WHTBase := WHTBase - ABS(WHTEntry."Rem Realized Base");
                        END ELSE BEGIN
                          IF (TotalWHTBase > 0) AND (ABS(TotalWHTBase) <= ABS(WHTEntry."Rem Realized Base")) THEN BEGIN
                            TotalWHTBase := 0;
                            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo" THEN
                              WHTBase := 0;
                          END;
                        END;
                      END;
                  UNTIL WHTEntry.NEXT = 0;
              UNTIL VendorLedgerEntry.NEXT = 0;

            VendorLedgerEntry.RESET;
            VendorLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
            IF VendorLedgerEntry.FINDSET THEN
              BEGIN
              REPEAT
                IF GenJnlLine."Currency Code" <> VendorLedgerEntry."Currency Code" THEN
                  ERROR(Text1500000);

                IF VendorLedgerEntry.Prepayment THEN BEGIN
                  TempVendLedgEntry.RESET;
                  TempVendLedgEntry.SETRANGE("Entry No.",VendorLedgerEntry."Entry No.");
                  IF TempVendLedgEntry.FINDSET THEN BEGIN
                    TempVendLedgEntry.CALCFIELDS(
                      Amount,"Amount (LCY)",
                      "Remaining Amount","Remaining Amt. (LCY)");

                    IF CheckPmtDisc(
                         GenJnlLine."Posting Date",
                         TempVendLedgEntry."Pmt. Discount Date",
                         CurrExchRate.ExchangeAmtFCYToLCY(
                           GenJnlLine."Document Date",
                           GenJnlLine."Currency Code",
                           ABS(TempVendLedgEntry."Amount to Apply"),CurrFactor),
                         ABS(TempVendLedgEntry."Remaining Amt. (LCY)"),
                         CurrExchRate.ExchangeAmtFCYToLCY(
                           GenJnlLine."Document Date",
                           GenJnlLine."Currency Code",
                           ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),CurrFactor),
                         ABS(TotAmt))
                    THEN
                      TotAmt := TotAmt -
                        CurrExchRate.ExchangeAmtFCYToLCY(
                          GenJnlLine."Document Date",
                          GenJnlLine."Currency Code",
                          TempVendLedgEntry."Original Pmt. Disc. Possible",CurrFactor);

                    IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
                       (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") < ABS(TotAmt))
                    THEN BEGIN
                      IF CheckPmtDisc(
                           GenJnlLine."Posting Date",
                           TempVendLedgEntry."Pmt. Discount Date",
                           CurrExchRate.ExchangeAmtFCYToLCY(
                             GenJnlLine."Document Date",
                             GenJnlLine."Currency Code",
                             ABS(TempVendLedgEntry."Amount to Apply"),CurrFactor),
                           ABS(TempVendLedgEntry."Remaining Amt. (LCY)"),
                           CurrExchRate.ExchangeAmtFCYToLCY(
                             GenJnlLine."Document Date",
                             GenJnlLine."Currency Code",
                             ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),CurrFactor),
                           ABS(TotAmt))
                      THEN BEGIN
                        GenJnlLine.VALIDATE(
                          Amount,
                          ABS(TempVendLedgEntry."Remaining Amt. (LCY)" -
                            CurrExchRate.ExchangeAmtFCYToLCY(
                              GenJnlLine."Document Date",
                              GenJnlLine."Currency Code",
                              TempVendLedgEntry."Original Pmt. Disc. Possible",CurrFactor)));

                        IF TempVendLedgEntry."Document Type" <>
                           TempVendLedgEntry."Document Type"::"Credit Memo"
                        THEN
                          TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";

                        RemainingAmt :=
                          RemainingAmt -
                          TempVendLedgEntry."Remaining Amt. (LCY)";
                      END ELSE BEGIN
                        GenJnlLine.VALIDATE(Amount,ABS(TempVendLedgEntry."Remaining Amt. (LCY)"));
                        IF TempVendLedgEntry."Document Type" <>
                           TempVendLedgEntry."Document Type"::"Credit Memo"
                        THEN
                          TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
                        RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
                      END;
                    END ELSE BEGIN
                      IF CheckPmtDisc(
                           GenJnlLine."Posting Date",
                           TempVendLedgEntry."Pmt. Discount Date",
                           CurrExchRate.ExchangeAmtFCYToLCY(
                             GenJnlLine."Document Date",
                             GenJnlLine."Currency Code",
                             ABS(TempVendLedgEntry."Amount to Apply"),CurrFactor),
                           ABS(TempVendLedgEntry."Remaining Amt. (LCY)"),
                           CurrExchRate.ExchangeAmtFCYToLCY(
                             GenJnlLine."Document Date",
                             GenJnlLine."Currency Code",
                             ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),CurrFactor),
                           ABS(TotAmt))
                      THEN
                        GenJnlLine.VALIDATE(Amount,TotAmt +
                          CurrExchRate.ExchangeAmtFCYToLCY(
                            GenJnlLine."Document Date",
                            GenJnlLine."Currency Code",
                            TempVendLedgEntry."Original Pmt. Disc. Possible",CurrFactor))
                      ELSE
                        GenJnlLine.VALIDATE(Amount,TotAmt);
                      TotAmt := 0;
                    END;

                    IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::Invoice THEN
                      GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::Invoice
                    ELSE BEGIN
                      IF TempVendLedgEntry."Document Type" = TempVendLedgEntry."Document Type"::"Credit Memo" THEN
                        GenJnlLine."Applies-to Doc. Type" := GenJnlLine."Applies-to Doc. Type"::"Credit Memo";
                      RemainingAmt := RemainingAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
                      TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
                    END;
                    GenJnlLine."Applies-to Doc. No." := TempVendLedgEntry."Document No.";
                    PaymentAmount1 := GenJnlLine.Amount;
                    WHTEntry.RESET;
                    WHTEntry.SETCURRENTKEY("Transaction Type","Document No.","Document Type","Bill-to/Pay-to No.");
                    WHTEntry.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                    IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
                      WHTEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                      WHTEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                    END ELSE
                      WHTEntry.SETRANGE("Bill-to/Pay-to No.",GenJnlLine."Account No.");
                    IF WHTEntry.FINDSET THEN
                      REPEAT
                        PurchCrMemoHeader.RESET;
                        PurchCrMemoHeader.SETRANGE("Applies-to Doc. No.",GenJnlLine."Applies-to Doc. No.");
                        PurchCrMemoHeader.SETRANGE("Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                        IF PurchCrMemoHeader.FINDFIRST THEN BEGIN
                          TempRemAmt := 0;
                          VendLedgEntry1.SETRANGE("Document Type",VendLedgEntry1."Document Type"::"Credit Memo");
                          VendLedgEntry1.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                          IF VendLedgEntry1.FINDFIRST THEN
                            VendLedgEntry1.CALCFIELDS(Amount,"Remaining Amount",
                              "Amount (LCY)","Remaining Amt. (LCY)");
                          WHTEntryTemp.RESET;
                          WHTEntryTemp.SETRANGE("Document Type",WHTEntry."Document Type"::"Credit Memo");
                          WHTEntryTemp.SETRANGE("Transaction Type",WHTEntry."Transaction Type"::Purchase);
                          WHTEntryTemp.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                          WHTEntryTemp.SETRANGE("WHT Bus. Posting Group",WHTEntry."WHT Bus. Posting Group");
                          WHTEntryTemp.SETRANGE("WHT Prod. Posting Group",WHTEntry."WHT Prod. Posting Group");
                          IF WHTEntryTemp.FINDFIRST THEN BEGIN
                            TempRemBase := WHTEntryTemp."Unrealized Amount";
                            TempRemAmt := WHTEntryTemp."Unrealized Base";
                          END;
                        END;

                        VendLedgEntry.RESET;
                        VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                        IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::Invoice THEN
                          VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
                        ELSE
                          IF GenJnlLine."Applies-to Doc. Type" = GenJnlLine."Applies-to Doc. Type"::"Credit Memo" THEN
                            VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
                        IF VendLedgEntry.FINDFIRST THEN
                          VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount",
                            "Amount (LCY)","Remaining Amt. (LCY)");
                        ExpectedAmount := -(VendLedgEntry.Amount + VendLedgEntry1.Amount);
                        IF (GenJnlLine."Posting Date" <= VendLedgEntry."Pmt. Discount Date") AND
                           (ABS(PaymentAmount1) >=
                            (ABS(VendLedgEntry."Remaining Amt. (LCY)" + VendLedgEntry1."Remaining Amt. (LCY)") -
                             ABS(
                               CurrExchRate.ExchangeAmtFCYToLCY(
                                 GenJnlLine."Document Date",
                                 GenJnlLine."Currency Code",
                                 TempVendLedgEntry."Original Pmt. Disc. Possible",CurrFactor))))
                        THEN
                          AppldAmount :=
                            ROUND(
                              ((PaymentAmount1 -
                                CurrExchRate.ExchangeAmtFCYToLCY(
                                  GenJnlLine."Document Date",
                                  GenJnlLine."Currency Code",
                                  TempVendLedgEntry."Original Pmt. Disc. Possible",CurrFactor)) *
                               (WHTEntry."Unrealized Base" + TempRemAmt)) /
                              ExpectedAmount)
                        ELSE
                          AppldAmount :=
                            ROUND(
                              (PaymentAmount1 *
                               (WHTEntry."Unrealized Base" + TempRemAmt)) /
                              ExpectedAmount);
                        TotalWHTAmount := ROUND(TotalWHTAmount + AppldAmount * WHTEntry."WHT %" / 100);
                        IF GenJnlLine."Currency Code" <> '' THEN BEGIN
                          TotalWHTAmount2 :=
                            ROUND(
                              TotalWHTAmount2 +
                              ROUND(
                                CurrExchRate.ExchangeAmtLCYToFCY(
                                  GenJnlLine."Document Date",
                                  GenJnlLine."Currency Code",
                                  AppldAmount * WHTEntry."WHT %" / 100,
                                  CurrFactor)));
                        END ELSE
                          TotalWHTAmount2 := TotalWHTAmount;

                        WHTEntry3.RESET;
                        WHTEntry3.SETCURRENTKEY("Applies-to Entry No.");
                        WHTEntry3.SETRANGE("Applies-to Entry No.",WHTEntry."Entry No.");
                        WHTEntry3.CALCSUMS(Amount,"Amount (LCY)");
                        IF (ABS(ABS(WHTEntry3.Amount) + ABS(TotalWHTAmount2) - ABS(WHTEntry."Unrealized Amount")) < 0.1) AND
                           (ABS(ABS(WHTEntry3.Amount) + ABS(TotalWHTAmount2) - ABS(WHTEntry."Unrealized Amount")) > 0)
                        THEN BEGIN
                          Diff := WHTEntry."Unrealized Amount" - (WHTEntry3.Amount + TotalWHTAmount2);
                          TotalWHTAmount2 := TotalWHTAmount2 + Diff;
                        END;

                      UNTIL WHTEntry.NEXT = 0;
                  END;
                END ELSE  BEGIN
                  WHTEntry.RESET;
                  WHTEntry.SETRANGE("Document No.",VendorLedgerEntry."Document No.");
                  IF WHTEntry.FINDSET THEN
                    REPEAT
                      IF WHTPostingSetup.GET(
                           WHTEntry."WHT Bus. Posting Group",
                           WHTEntry."WHT Prod. Posting Group")
                      THEN
                        IF ((WHTPostingSetup."Realized WHT Type" =
                             WHTPostingSetup."Realized WHT Type"::Earliest) AND
                            (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                        THEN BEGIN
                          TempVendLedgEntry.RESET;
                          TempVendLedgEntry.SETRANGE("Entry No.",VendorLedgerEntry."Entry No.");
                          IF TempVendLedgEntry.FINDSET THEN BEGIN
                            TempVendLedgEntry.CALCFIELDS(
                              Amount,"Amount (LCY)",
                              "Remaining Amount","Remaining Amt. (LCY)");

                            IF CheckPmtDisc(
                                 GenJnlLine."Posting Date",
                                 TempVendLedgEntry."Pmt. Discount Date",
                                 CurrExchRate.ExchangeAmtFCYToLCY(
                                   GenJnlLine."Document Date",
                                   GenJnlLine."Currency Code",
                                   ABS(TempVendLedgEntry."Amount to Apply"),CurrFactor),
                                 ABS(TempVendLedgEntry."Remaining Amt. (LCY)"),
                                 CurrExchRate.ExchangeAmtFCYToLCY(
                                   GenJnlLine."Document Date",
                                   GenJnlLine."Currency Code",
                                   ABS(TempVendLedgEntry."Original Pmt. Disc. Possible"),CurrFactor),
                                 ABS(TotAmt))
                            THEN
                              TotAmt := TotAmt -
                                CurrExchRate.ExchangeAmtFCYToLCY(
                                  GenJnlLine."Document Date",
                                  GenJnlLine."Currency Code",
                                  TempVendLedgEntry."Original Pmt. Disc. Possible",CurrFactor);

                            IF (ABS(RemainingAmt) < ABS(TotAmt)) OR
                               (ABS(TempVendLedgEntry."Remaining Amt. (LCY)") < ABS(TotAmt))
                            THEN BEGIN
                              IF TempVendLedgEntry."Document Type" <>
                                 TempVendLedgEntry."Document Type"::"Credit Memo"
                              THEN
                                TotAmt := TotAmt + TempVendLedgEntry."Remaining Amt. (LCY)";
                              RemainingAmt := RemainingAmt - TempVendLedgEntry."Remaining Amt. (LCY)";
                            END ELSE
                              TotAmt := 0;
                          END;
                        END;
                    UNTIL WHTEntry.NEXT = 0;
                END;
              UNTIL VendorLedgerEntry.NEXT = 0;
              IF TotAmt > 0 THEN  BEGIN
                TotalWHTAmount3 := ROUND(TotalWHTAmount3 + TotAmt * WHTPostingSetup."WHT %" / 100);
                IF GenJnlLine."Currency Code" <> '' THEN
                  TotalWHTAmount2 :=
                    ROUND(
                      TotalWHTAmount2 +
                      ROUND(
                        CurrExchRate.ExchangeAmtLCYToFCY(
                          GenJnlLine."Document Date",
                          GenJnlLine."Currency Code",
                          TotAmt * WHTPostingSetup."WHT %" / 100,
                          CurrFactor)))
                ELSE
                  TotalWHTAmount2 := TotalWHTAmount2 + TotalWHTAmount3;
              END ELSE
                WHTBase := 0;
              IF ROUND(TotalWHTAmount2) <> 0 THEN
                EXIT(ROUND(TotalWHTAmount2));
            END;
          END;
        END;
      END;

      WHTAmount := ROUND(WHTBase * WHTPostingSetup."WHT %" / 100);

      IF WHTPostingSetup.GET(GenJnlLine."WHT Business Posting Group",
           GenJnlLine."WHT Product Posting Group")
      THEN
        IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN BEGIN
          IF WHTBase < WHTPostingSetup."WHT Minimum Invoice Amount" THEN
            WHTAmount := 0;
        END;
    END;

    PROCEDURE CalcCustExtraWHTForEarliest@1500032(VAR GenJnlLine@1500000 : Record 81) WHTAmount : Decimal;
    VAR
      CustLedgerEntry@1500003 : Record 21;
      WHTEntry@1500004 : Record 28044;
      TotalWHTBase@1500005 : Decimal;
      WHTBase@1500001 : Decimal;
      IsRefund@1500006 : Boolean;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN
        IF GenJnlLine."Bill-to/Pay-to No." = '' THEN BEGIN
          Vendor.GET(GenJnlLine."Account No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END ELSE BEGIN
          Vendor.GET(GenJnlLine."Bill-to/Pay-to No.");
          IF (Vendor.ABN <> '') OR Vendor."Foreign Vend" THEN
            EXIT;
        END;

      WHTAmount := 0;
      TotalWHTBase := 0;
      WHTBase := 0;
      IF WHTPostingSetup.GET(
           GenJnlLine."WHT Business Posting Group",
           GenJnlLine."WHT Product Posting Group")
      THEN BEGIN
        IF (WHTPostingSetup."Realized WHT Type" =
            WHTPostingSetup."Realized WHT Type"::Earliest)
        THEN BEGIN
          IF GenJnlLine."WHT Absorb Base" <> 0 THEN
            WHTBase := ABS(GenJnlLine."WHT Absorb Base")
          ELSE
            WHTBase := ABS(GenJnlLine.Amount);
        END;
      END;
      TotalWHTBase := WHTBase;
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgerEntry.RESET;
        CustLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment)THEN
          CustLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            CustLedgerEntry."Document Type"::Invoice);

        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund)THEN
          CustLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            CustLedgerEntry."Document Type"::"Credit Memo");

        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice)THEN
          CustLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            CustLedgerEntry."Document Type"::Payment);

        IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo")THEN
          CustLedgerEntry.SETFILTER(
            "Document Type",
            '%1',
            CustLedgerEntry."Document Type"::Refund);

        IF CustLedgerEntry.FINDFIRST THEN
          IF NOT CustLedgerEntry.Prepayment THEN BEGIN
            WHTEntry.RESET;
            WHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
            IF WHTEntry.FINDFIRST THEN
              IF WHTPostingSetup.GET(
                   WHTEntry."WHT Bus. Posting Group",
                   WHTEntry."WHT Prod. Posting Group")
              THEN
                IF ((WHTPostingSetup."Realized WHT Type" =
                     WHTPostingSetup."Realized WHT Type"::Earliest) AND
                    (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                THEN BEGIN
                  IF ABS(WHTEntry."Rem Realized Base") >= WHTBase THEN
                    WHTBase := 0
                  ELSE
                    WHTBase := WHTBase - ABS(WHTEntry."Rem Realized Base");
                END;
          END ELSE
            WHTBase := 0;
      END ELSE BEGIN
        IF GenJnlLine."Applies-to ID" <> '' THEN BEGIN
          IF ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) OR
              (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund))
          THEN BEGIN
            CustLedgerEntry.RESET;
            CustLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            CustLedgerEntry.SETFILTER(
              "Document Type",
              '%1|%2',
              CustLedgerEntry."Document Type"::Payment,
              CustLedgerEntry."Document Type"::"Credit Memo");
            IF CustLedgerEntry.FINDSET THEN
              REPEAT
                WHTEntry.RESET;
                WHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                IF WHTEntry.FINDSET THEN
                  REPEAT
                    IF WHTPostingSetup.GET(
                         WHTEntry."WHT Bus. Posting Group",
                         WHTEntry."WHT Prod. Posting Group")
                    THEN
                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Earliest) AND
                          (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                      THEN BEGIN
                        IF TotalWHTBase > ABS(WHTEntry."Rem Realized Base") THEN BEGIN
                          TotalWHTBase := TotalWHTBase - ABS(WHTEntry."Rem Realized Base");
                          IF (((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo")) OR
                              ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::Payment)))
                          THEN
                            WHTBase := WHTBase - ABS(WHTEntry."Rem Realized Base");
                        END ELSE BEGIN
                          IF (TotalWHTBase > 0) AND (ABS(TotalWHTBase) <= ABS(WHTEntry."Rem Realized Base")) THEN
                            TotalWHTBase := TotalWHTBase - TotalWHTBase;
                          IF (((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::"Credit Memo")) OR
                              ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice) AND
                               (WHTEntry."Document Type" = WHTEntry."Document Type"::Payment)))
                          THEN
                            WHTBase := 0;
                        END;
                      END;
                  UNTIL WHTEntry.NEXT = 0;
              UNTIL CustLedgerEntry.NEXT = 0;
          END;

          IF ((GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) OR
              (GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo"))
          THEN BEGIN
            IsRefund := FALSE;
            CustLedgerEntry.RESET;
            CustLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Refund);
            IF CustLedgerEntry.FINDSET THEN
              REPEAT
                IsRefund := TRUE;
                WHTEntry.RESET;
                WHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                IF WHTEntry.FINDSET THEN
                  REPEAT
                    IF WHTPostingSetup.GET(
                         WHTEntry."WHT Bus. Posting Group",
                         WHTEntry."WHT Prod. Posting Group")
                    THEN
                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Earliest) AND
                          (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                      THEN BEGIN
                        IF TotalWHTBase > ABS(WHTEntry."Rem Realized Base") THEN BEGIN
                          TotalWHTBase := TotalWHTBase - ABS(WHTEntry."Rem Realized Base");
                          IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo" THEN
                            WHTBase := WHTBase - ABS(WHTEntry."Rem Realized Base");
                        END ELSE BEGIN
                          IF (TotalWHTBase > 0) AND (ABS(TotalWHTBase) <= ABS(WHTEntry."Rem Realized Base")) THEN BEGIN
                            TotalWHTBase := 0;
                            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::"Credit Memo" THEN
                              WHTBase := 0;
                          END;
                        END;
                      END;
                  UNTIL WHTEntry.NEXT = 0;
              UNTIL CustLedgerEntry.NEXT = 0;

            CustLedgerEntry.RESET;
            CustLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
            CustLedgerEntry.SETRANGE(Prepayment,FALSE);
            IF CustLedgerEntry.FINDSET THEN
              REPEAT
                WHTEntry.RESET;
                WHTEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
                IF WHTEntry.FINDSET THEN
                  REPEAT
                    IF WHTPostingSetup.GET(
                         WHTEntry."WHT Bus. Posting Group",
                         WHTEntry."WHT Prod. Posting Group")
                    THEN
                      IF ((WHTPostingSetup."Realized WHT Type" =
                           WHTPostingSetup."Realized WHT Type"::Earliest) AND
                          (WHTEntry."WHT %" = WHTPostingSetup."WHT %"))
                      THEN BEGIN
                        IF TotalWHTBase > ABS(WHTEntry."Rem Realized Base") THEN BEGIN
                          TotalWHTBase := TotalWHTBase - ABS(WHTEntry."Rem Realized Base");
                          IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment THEN
                            WHTBase := WHTBase - ABS(WHTEntry."Rem Realized Base");
                        END ELSE BEGIN
                          IF (TotalWHTBase > 0) AND (ABS(TotalWHTBase) <= ABS(WHTEntry."Rem Realized Base")) THEN BEGIN
                            TotalWHTBase := 0;
                            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment THEN
                              WHTBase := 0;
                          END;
                        END;
                      END;
                  UNTIL WHTEntry.NEXT = 0;
              UNTIL CustLedgerEntry.NEXT = 0
            ELSE
              IF NOT IsRefund THEN
                WHTBase := 0;
          END;
        END;
      END;

      WHTAmount := ROUND(WHTBase * WHTPostingSetup."WHT %" / 100);
    END;

    PROCEDURE InsertVendPrepaymentInvoiceWHT@1000000001(VAR PurchInvHeader@1500000 : Record 122;VAR PurchHeader@1000000000 : Record 38);
    VAR
      PurchLine@1000000001 : Record 39;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN BEGIN
        Vendor.GET(PurchInvHeader."Pay-to Vendor No.");
        IF Vendor.ABN <> '' THEN
          EXIT;
      END;

      WITH PurchInvHeader DO BEGIN
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type","Document No.","WHT Business Posting Group","WHT Product Posting Group");
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");

        IF PurchLine.FINDSET THEN
          REPEAT
            IF (PurchLine."Prepmt. Line Amount" - PurchLine."Prepmt. Amt. Inv.") <> 0 THEN
              IF WHTPostingSetup.GET(PurchLine."WHT Business Posting Group",PurchLine."WHT Product Posting Group") THEN
                IF WHTPostingSetup."WHT %" > 0 THEN BEGIN
                  DocNo := "No.";
                  DocType := DocType::Invoice;
                  PayToAccType := PayToAccType::Vendor;
                  PayToVendCustNo := "Pay-to Vendor No.";
                  BuyFromAccType := BuyFromAccType::Vendor;
                  GenBusPostGrp := PurchLine."Gen. Bus. Posting Group";
                  GenProdPostGrp := PurchLine."Gen. Prod. Posting Group";
                  TransType := TransType::Purchase;
                  BuyFromVendCustNo := "Actual Vendor No.";
                  PostingDate := "Posting Date";
                  DocDate := "Document Date";
                  CurrencyCode := "Currency Code";
                  CurrFactor := "Currency Factor";
                  ApplyDocType := "Applies-to Doc. Type";
                  ApplyDocNo := "Applies-to Doc. No.";
                  SourceCode := "Source Code";
                  ReasonCode := "Reason Code";

                  IF (WHTBusPostGrp <> PurchLine."WHT Business Posting Group") OR
                     (WHTProdPostGrp <> PurchLine."WHT Product Posting Group")
                  THEN BEGIN
                    IF AmountVAT <> 0 THEN
                      InsertPrepaymentUnrealizedWHT(TType::Purchase);
                    WHTBusPostGrp := PurchLine."WHT Business Posting Group";
                    WHTProdPostGrp := PurchLine."WHT Product Posting Group";
                    Amount := 0;
                    AbsorbBase := 0;
                    AmountVAT := 0;
                    Amount := Amount + PurchLine."Prepayment Amount";
                    AbsorbBase := AbsorbBase + PurchLine."WHT Absorb Base";
                    IF AbsorbBase <> 0 THEN
                      AmountVAT := AbsorbBase
                    ELSE
                      AmountVAT := Amount;
                  END ELSE BEGIN
                    WHTBusPostGrp := PurchLine."WHT Business Posting Group";
                    WHTProdPostGrp := PurchLine."WHT Product Posting Group";
                    Amount := Amount + PurchLine."Prepayment Amount";
                    AbsorbBase := AbsorbBase + PurchLine."WHT Absorb Base";
                    IF AbsorbBase <> 0 THEN
                      AmountVAT := AbsorbBase
                    ELSE
                      AmountVAT := Amount;
                  END;
                  WHTBusPostGrp := PurchLine."WHT Business Posting Group";
                  WHTProdPostGrp := PurchLine."WHT Product Posting Group";
                END;
          UNTIL PurchLine.NEXT = 0;
        InsertPrepaymentUnrealizedWHT(TType::Purchase);
      END;
    END;

    PROCEDURE InsertPrepaymentUnrealizedWHT@1500038(TransType@1500000 : 'Purchase,Sale') EntryNo : Integer;
    VAR
      WHTEntry@1500003 : Record 28044;
    BEGIN
      IF WHTPostingSetup.GET(WHTBusPostGrp,WHTProdPostGrp) THEN
        IF WHTPostingSetup."Realized WHT Type" <> WHTPostingSetup."Realized WHT Type"::" " THEN BEGIN
          UnrealizedWHT := (WHTPostingSetup."Realized WHT Type" IN [WHTPostingSetup."Realized WHT Type"::Earliest,
                                                                    WHTPostingSetup."Realized WHT Type"::Invoice]);
          WHTEntry.INIT;
          WHTEntry."Entry No." := NextEntryNo;
          WHTEntry."Gen. Bus. Posting Group" := GenBusPostGrp;
          WHTEntry."Gen. Prod. Posting Group" := GenProdPostGrp;
          WHTEntry."WHT Bus. Posting Group" := WHTBusPostGrp;
          WHTEntry."WHT Prod. Posting Group" := WHTProdPostGrp;
          WHTEntry."Posting Date" := PostingDate;
          WHTEntry."Document Date" := DocDate;
          WHTEntry."Document No." := DocNo;
          WHTEntry."WHT %" := WHTPostingSetup."WHT %";
          WHTEntry."Applies-to Doc. Type" := ApplyDocType;
          WHTEntry."Applies-to Doc. No." := ApplyDocNo;
          WHTEntry."Source Code" := SourceCode;
          WHTEntry."Reason Code" := ReasonCode;
          WHTEntry."WHT Revenue Type" := WHTPostingSetup."Revenue Type";
          WHTEntry."Document Type" := DocType;
          IF TransType = TransType::Purchase THEN
            WHTEntry."Transaction Type" := WHTEntry."Transaction Type"::Purchase
          ELSE
            WHTEntry."Transaction Type" := WHTEntry."Transaction Type"::Sale;
          WHTEntry."Actual Vendor No." := ActualVendorNo;
          WHTEntry."Source Code" := SourceCode;
          WHTEntry."Bill-to/Pay-to No." := PayToVendCustNo;
          WHTEntry."User ID" := USERID;
          WHTEntry."Currency Code" := CurrencyCode;

          IF UnrealizedWHT THEN BEGIN
            WHTEntry.Amount := 0;
            WHTEntry.Base := 0;
            WHTEntry.Prepayment := TRUE;
            IF AbsorbBase <> 0 THEN
              WHTEntry."Unrealized Base" := AbsorbBase
            ELSE
              WHTEntry."Unrealized Base" := AmountVAT;

            WHTEntry."Unrealized Amount" :=
              ROUND(WHTEntry."Unrealized Base" * WHTEntry."WHT %" / 100);
            WHTEntry."Remaining Unrealized Amount" := WHTEntry."Unrealized Amount";
            WHTEntry."Remaining Unrealized Base" := WHTEntry."Unrealized Base";
          END;

          IF CurrencyCode = '' THEN BEGIN
            WHTEntry."Base (LCY)" := WHTEntry.Base;
            WHTEntry."Amount (LCY)" := WHTEntry.Amount;
            WHTEntry."Unrealized Amount (LCY)" := WHTEntry."Unrealized Amount";
            WHTEntry."Unrealized Base (LCY)" := WHTEntry."Unrealized Base";
            WHTEntry."Rem Realized Base (LCY)" := WHTEntry."Rem Realized Base";
            WHTEntry."Rem Realized Amount (LCY)" := WHTEntry."Rem Realized Amount";
            WHTEntry."Rem Unrealized Amount (LCY)" := WHTEntry."Remaining Unrealized Amount";
            WHTEntry."Rem Unrealized Base (LCY)" := WHTEntry."Remaining Unrealized Base";
          END ELSE BEGIN
            WHTEntry."Base (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Base,CurrFactor));
            WHTEntry."Amount (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry.Amount,CurrFactor));
            WHTEntry."Unrealized Base (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry."Unrealized Base",CurrFactor));
            WHTEntry."Rem Realized Amount (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry."Rem Realized Amount (LCY)",CurrFactor));
            WHTEntry."Rem Realized Base (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry."Rem Realized Base (LCY)",CurrFactor));
            WHTEntry."Unrealized Amount (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  DocDate,CurrencyCode,WHTEntry."Unrealized Amount",CurrFactor));
            WHTEntry."Rem Unrealized Amount (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  DocDate,CurrencyCode,WHTEntry."Remaining Unrealized Amount",CurrFactor));
            WHTEntry."Rem Unrealized Base (LCY)" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  DocDate,CurrencyCode,WHTEntry."Remaining Unrealized Base",CurrFactor));
          END;

          WHTEntry.INSERT;
          NextWHTEntryNo := WHTEntry."Entry No." + 1;
        END;
      EXIT(NextWHTEntryNo);
    END;

    PROCEDURE InitWHTEntry@1500027(TempWHTEntry@1500000 : Record 28044;AppldAmount@1500002 : Decimal;PaymentAmount1@1500003 : Decimal;VAR WHTEntry3@1500004 : Record 28044);
    VAR
      WHTEntry2@1500001 : Record 28044;
      TempWHT@1500005 : Record 28044;
      VendLedgEntry@1500006 : Record 25;
      WHTEntry4@1500007 : Record 28044;
    BEGIN
      WITH TempWHTEntry DO BEGIN
        WHTEntry2.INIT;
        WHTEntry2."Posting Date" := TempGenJnlLine."Document Date";
        WHTEntry2."Entry No." := NextEntryNo;
        WHTEntry2."Document Date" := "Document Date";
        WHTEntry2."Document Type" := TempGenJnlLine."Document Type";
        WHTEntry2."Document No." := DocNo;
        WHTEntry2."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        WHTEntry2."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        WHTEntry2."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
        WHTEntry2."WHT Bus. Posting Group" := "WHT Bus. Posting Group";
        WHTEntry2."WHT Prod. Posting Group" := "WHT Prod. Posting Group";
        WHTEntry2."WHT Revenue Type" := "WHT Revenue Type";
        WHTEntry2."Currency Code" := TempGenJnlLine."Currency Code";
        WHTEntry2."Applies-to Entry No." := "Entry No.";
        WHTEntry2."User ID" := USERID;
        WHTEntry2."External Document No." := TempGenJnlLine."External Document No.";
        WHTEntry2."Actual Vendor No." := TempGenJnlLine."Actual Vendor No.";
        WHTEntry2."Original Document No." := TempGenJnlLine."Document No.";
        WHTEntry2."Source Code" := TempGenJnlLine."Source Code";
        WHTEntry2."Unrealized WHT Entry No." := "Entry No.";
        WHTEntry2."WHT %" := "WHT %";
        VendLedgEntry.RESET;
        VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Document Type");
        VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Document No.");
        IF VendLedgEntry.FINDLAST THEN
          WHTEntry2."Transaction No." := VendLedgEntry."Transaction No.";
        WHTEntry2.Base := ROUND(AppldAmount);
        WHTEntry2.Amount := ROUND(WHTEntry2.Base * WHTEntry2."WHT %" / 100);
        WHTEntry2."Payment Amount" := PaymentAmount1;
        WHTEntry2."Transaction Type" := WHTEntry2."Transaction Type"::Purchase;
        WHTPostingSetup.GET("WHT Bus. Posting Group","WHT Prod. Posting Group");
        WHTEntry2."WHT Report" := WHTPostingSetup."WHT Report";

        IF TempGenJnlLine."Certificate Printed" THEN BEGIN
          WHTEntry2."WHT Report Line No" := TempGenJnlLine."WHT Report Line No.";
          TempWHT.SETRANGE("Document No.","Document No.");
          IF TempWHT.FINDFIRST THEN
            WHTEntry2."WHT Certificate No." := TempWHT."WHT Certificate No.";
        END ELSE BEGIN
          IF ((TransType = TransType::Purchase) AND
              ("Document Type" = "Document Type"::Invoice))
          THEN
            IF (WHTReportLineNo = '') AND
               (WHTEntry2.Amount <> 0) AND
               (WHTPostingSetup."WHT Report Line No. Series" <> '')
            THEN
              WHTReportLineNo :=
                NoSeriesMgt.GetNextNo(
                  WHTPostingSetup."WHT Report Line No. Series",WHTEntry2."Posting Date",TRUE);
          WHTEntry2."WHT Report Line No" := WHTReportLineNo;
        END;

        IF WHTEntry2."Currency Code" <> '' THEN BEGIN
          CurrFactor :=
            CurrExchRate.ExchangeRate(
              WHTEntry2."Posting Date",
              WHTEntry2."Currency Code");
          WHTEntry2."Base (LCY)" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                TempGenJnlLine."Document Date",
                WHTEntry2."Currency Code",
                WHTEntry2.Base,CurrFactor));
          WHTEntry2."Amount (LCY)" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                TempGenJnlLine."Document Date",
                WHTEntry2."Currency Code",
                WHTEntry2.Amount,CurrFactor));
        END ELSE BEGIN
          WHTEntry2."Amount (LCY)" := WHTEntry2.Amount;
          WHTEntry2."Base (LCY)" := WHTEntry2.Base;
        END;

        IF CurrencyCode = '' THEN BEGIN
          WHTEntry3."Rem Unrealized Amount (LCY)" -= WHTEntry2.Amount;
          WHTEntry3."Rem Unrealized Base (LCY)" -= WHTEntry2.Base;
        END ELSE BEGIN
          WHTEntry3."Rem Unrealized Amount (LCY)" -=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry2.Amount,CurrFactor));
          WHTEntry3."Rem Unrealized Base (LCY)" -=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(DocDate,CurrencyCode,WHTEntry2.Base,CurrFactor));
        END;
        WHTEntry3.Closed :=
          (WHTEntry3."Remaining Unrealized Base" = 0) AND (WHTEntry3."Remaining Unrealized Amount" = 0);

        IF ((WHTEntry2."Rem Realized Amount" = 0) AND
            (WHTEntry2."Rem Realized Base" = 0))
        THEN
          WHTEntry2.Closed := TRUE;

        WHTEntry2.INSERT;
        NextWHTEntryNo := WHTEntry2."Entry No." + 1;
        WHTEntry3.MODIFY;

        WHTEntry4.RESET;
        WHTEntry4.SETCURRENTKEY("Applies-to Entry No.");
        WHTEntry4.SETRANGE("Applies-to Entry No.","Entry No.");
        WHTEntry4.CALCSUMS(Amount,"Amount (LCY)");
        IF (ABS(ABS(WHTEntry4.Amount) - ABS("Unrealized Amount")) < 0.1) AND
           (ABS(ABS(WHTEntry4.Amount) - ABS("Unrealized Amount")) > 0)
        THEN BEGIN
          WHTEntry2."WHT Difference" := "Unrealized Amount" - WHTEntry4.Amount;
          WHTEntry2.Amount := WHTEntry2.Amount + WHTEntry2."WHT Difference";
          WHTEntry2.MODIFY;
        END;
        IF (ABS(ABS(WHTEntry4."Amount (LCY)") - ABS("Unrealized Amount (LCY)")) < 0.1) AND
           (ABS(ABS(WHTEntry4."Amount (LCY)") - ABS("Unrealized Amount (LCY)")) > 0)
        THEN BEGIN
          WHTEntry2."Amount (LCY)" := WHTEntry2."Amount (LCY)" +
            "Unrealized Amount (LCY)" - WHTEntry4."Amount (LCY)";
          WHTEntry2.MODIFY;
        END;
      END;
    END;

    PROCEDURE CheckWHTCalculationRule@1500029(TotalInvoiceAmountLCY@1500000 : Decimal;WHTPostingSetup@1500001 : Record 28043) : Boolean;
    BEGIN
      CASE WHTPostingSetup."WHT Calculation Rule" OF
        WHTPostingSetup."WHT Calculation Rule"::"Less than":
          IF ABS(TotalInvoiceAmountLCY) < WHTPostingSetup."WHT Minimum Invoice Amount" THEN
            EXIT(TRUE);
        WHTPostingSetup."WHT Calculation Rule"::"Less than or equal to":
          IF ABS(TotalInvoiceAmountLCY) <= WHTPostingSetup."WHT Minimum Invoice Amount" THEN
            EXIT(TRUE);
        WHTPostingSetup."WHT Calculation Rule"::"Equal to":
          IF ABS(TotalInvoiceAmountLCY) = WHTPostingSetup."WHT Minimum Invoice Amount" THEN
            EXIT(TRUE);
        WHTPostingSetup."WHT Calculation Rule"::"Greater than":
          IF ABS(TotalInvoiceAmountLCY) > WHTPostingSetup."WHT Minimum Invoice Amount" THEN
            EXIT(TRUE);
        WHTPostingSetup."WHT Calculation Rule"::"Greater than or equal to":
          IF ABS(TotalInvoiceAmountLCY) >= WHTPostingSetup."WHT Minimum Invoice Amount" THEN
            EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE InsertVendPrepaymentCrMemoWHT@1500031(VAR PurchCrMemoHeader@1500000 : Record 124;VAR PurchHeader@1000000000 : Record 38);
    VAR
      PurchLine@1000000001 : Record 39;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Enable GST (Australia)" THEN BEGIN
        Vendor.GET(PurchCrMemoHeader."Pay-to Vendor No.");
        IF Vendor.ABN <> '' THEN
          EXIT;
      END;

      WITH PurchCrMemoHeader DO BEGIN
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type","Document No.","WHT Business Posting Group","WHT Product Posting Group");
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");

        IF PurchLine.FINDSET THEN
          REPEAT
            IF (PurchLine."Prepmt. Line Amount" - PurchLine."Prepmt. Amt. Inv.") <> 0 THEN
              IF WHTPostingSetup.GET(PurchLine."WHT Business Posting Group",PurchLine."WHT Product Posting Group") THEN
                IF WHTPostingSetup."Realized WHT Type" = WHTPostingSetup."Realized WHT Type"::Earliest THEN
                  IF WHTPostingSetup."WHT %" > 0 THEN BEGIN
                    DocNo := "No.";
                    DocType := DocType::Invoice;
                    PayToAccType := PayToAccType::Vendor;
                    PayToVendCustNo := "Pay-to Vendor No.";
                    BuyFromAccType := BuyFromAccType::Vendor;
                    GenBusPostGrp := PurchLine."Gen. Bus. Posting Group";
                    GenProdPostGrp := PurchLine."Gen. Prod. Posting Group";
                    TransType := TransType::Purchase;
                    BuyFromVendCustNo := "Actual Vendor No.";
                    PostingDate := "Posting Date";
                    DocDate := "Document Date";
                    CurrencyCode := "Currency Code";
                    CurrFactor := "Currency Factor";
                    ApplyDocType := "Applies-to Doc. Type";
                    ApplyDocNo := "Applies-to Doc. No.";
                    SourceCode := "Source Code";
                    ReasonCode := "Reason Code";

                    IF (WHTBusPostGrp <> PurchLine."WHT Business Posting Group") OR
                       (WHTProdPostGrp <> PurchLine."WHT Product Posting Group")
                    THEN BEGIN
                      IF AmountVAT <> 0 THEN
                        InsertPrepaymentUnrealizedWHT(TType::Purchase);
                      WHTBusPostGrp := PurchLine."WHT Business Posting Group";
                      WHTProdPostGrp := PurchLine."WHT Product Posting Group";
                      Amount := 0;
                      AbsorbBase := 0;
                      AmountVAT := 0;
                      Amount := -(Amount + PurchLine."Prepayment Amount");
                      AbsorbBase := -(AbsorbBase + PurchLine."WHT Absorb Base");
                      IF AbsorbBase <> 0 THEN
                        AmountVAT := AbsorbBase
                      ELSE
                        AmountVAT := Amount;
                    END ELSE BEGIN
                      WHTBusPostGrp := PurchLine."WHT Business Posting Group";
                      WHTProdPostGrp := PurchLine."WHT Product Posting Group";
                      Amount := -(Amount + PurchLine."Prepayment Amount");
                      AbsorbBase := -(AbsorbBase + PurchLine."WHT Absorb Base");
                      IF AbsorbBase <> 0 THEN
                        AmountVAT := AbsorbBase
                      ELSE
                        AmountVAT := Amount;
                    END;
                    WHTBusPostGrp := PurchLine."WHT Business Posting Group";
                    WHTProdPostGrp := PurchLine."WHT Product Posting Group";
                  END;
          UNTIL PurchLine.NEXT = 0;
        InsertPrepaymentUnrealizedWHT(TType::Purchase);
      END;
    END;

    PROCEDURE ABSMin@84(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) < ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    BEGIN
    {
      //YIMMNWHTR
      For WHT area code.
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //UPG13
      NAV2009 R2 to NAV13 Merged Code in objects identification.
      //UPG13R2
      2013 to 2013R2 Merged Code.
    }
    END.
  }
}

