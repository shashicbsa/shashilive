OBJECT Table 5847 Average Cost Calc. Overview
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Average Cost Calc. Overview;
               ENA=Average Cost Calc. Overview];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENA=Entry No.] }
    { 2   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENA=Type];
                                                   OptionCaptionML=[ENU=Closing Entry,Increase,Applied Increase,Applied Decrease,Decrease,Revaluation;
                                                                    ENA=Closing Entry,Increase,Applied Increase,Applied Decrease,Decrease,Revaluation];
                                                   OptionString=Closing Entry,Increase,Applied Increase,Applied Decrease,Decrease,Revaluation }
    { 3   ;   ;Valuation Date      ;Date          ;CaptionML=[ENU=Valuation Date;
                                                              ENA=Valuation Date] }
    { 4   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENA=Item No.] }
    { 5   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENA=Location Code] }
    { 6   ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENA=Variant Code] }
    { 7   ;   ;Cost is Adjusted    ;Boolean       ;CaptionML=[ENU=Cost is Adjusted;
                                                              ENA=Cost is Adjusted] }
    { 11  ;   ;Attached to Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Attached to Entry No.;
                                                              ENA=Attached to Entry No.] }
    { 12  ;   ;Attached to Valuation Date;Date    ;CaptionML=[ENU=Attached to Valuation Date;
                                                              ENA=Attached to Valuation Date] }
    { 13  ;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              ENA=Level] }
    { 21  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ENA=Item Ledger Entry No.] }
    { 22  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENA=Posting Date] }
    { 23  ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ENA=Entry Type];
                                                   OptionCaptionML=[ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output;
                                                                    ENA=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output];
                                                   OptionString=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output }
    { 24  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENA=Document Type];
                                                   OptionCaptionML=[ENU=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo";
                                                                    ENA=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales CR/Adj Note,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase CR/Adj Note,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service CR/Adj Note"];
                                                   OptionString=[ ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo] }
    { 25  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENA=Document No.] }
    { 26  ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ENA=Document Line No.] }
    { 27  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENA=Description] }
    { 31  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENA=Quantity];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Applied Quantity    ;Integer       ;CaptionML=[ENU=Applied Quantity;
                                                              ENA=Applied Quantity] }
    { 33  ;   ;Cost Amount (Expected);Decimal     ;CaptionML=[ENU=Cost Amount (Expected);
                                                              ENA=Cost Amount (Expected)] }
    { 34  ;   ;Cost Amount (Actual);Decimal       ;CaptionML=[ENU=Cost Amount (Actual);
                                                              ENA=Cost Amount (Actual)] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Attached to Valuation Date,Attached to Entry No.,Type }
    {    ;Item Ledger Entry No.                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InvtSetup@1001 : Record 313;
      ValueEntry@1003 : Record 5802;
      InvtSetupRead@1002 : Boolean;

    PROCEDURE CalculateAverageCost@5801() AverageCost : Decimal;
    BEGIN
      AverageCost := 0;
      IF Type = Type::"Closing Entry" THEN BEGIN
        SetItemFilters;
        ValueEntry.SumCostsTillValuationDate(ValueEntry);
        IF ValueEntry."Item Ledger Entry Quantity" = 0 THEN
          EXIT(AverageCost);
        AverageCost :=
          (ValueEntry."Cost Amount (Actual)" + ValueEntry."Cost Amount (Expected)") /
          ValueEntry."Item Ledger Entry Quantity";
        EXIT(ROUND(AverageCost));
      END;
      IF Quantity = 0 THEN
        EXIT(AverageCost);
      AverageCost := ("Cost Amount (Actual)" + "Cost Amount (Expected)") / Quantity;
      EXIT(ROUND(AverageCost));
    END;

    PROCEDURE CalculateRemainingQty@1() : Decimal;
    BEGIN
      IF Type <> Type::"Closing Entry" THEN
        EXIT(0);
      SetItemFilters;
      ValueEntry.SumCostsTillValuationDate(ValueEntry);
      EXIT(ValueEntry."Item Ledger Entry Quantity");
    END;

    PROCEDURE CalculateCostAmt@4(Actual@1000 : Boolean) : Decimal;
    BEGIN
      IF Type <> Type::"Closing Entry" THEN
        EXIT(0);
      SetItemFilters;
      ValueEntry.SumCostsTillValuationDate(ValueEntry);
      IF Actual THEN
        EXIT(ValueEntry."Cost Amount (Actual)");
      EXIT(ValueEntry."Cost Amount (Expected)");
    END;

    PROCEDURE SetItemFilters@8();
    BEGIN
      ValueEntry."Item No." := "Item No.";
      ValueEntry."Valuation Date" := "Valuation Date";
      ValueEntry."Location Code" := "Location Code";
      ValueEntry."Variant Code" := "Variant Code";
    END;

    PROCEDURE GetInvtSetup@3();
    BEGIN
      IF InvtSetupRead THEN
        EXIT;
      InvtSetup.GET;
      InvtSetupRead := TRUE;
    END;

    BEGIN
    END.
  }
}

