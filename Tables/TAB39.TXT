OBJECT Table 39 Purchase Line
{
  OBJECT-PROPERTIES
  {
    Date=05/29/14;
    Time=12:00:00;
    Version List=NTTR,ARC,NWHTR,JX,TCH,EXP,TBI1.0,YIMM1.0,Mel1.0,YEID1.,UPG09R2,UPG13,UPG13R2;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReservePurchLine.VerifyQuantity(Rec,xRec);

               LOCKTABLE;
               PurchHeader."No." := '';
               // UPG09R2.begin
               IF ("Document Type"="Document Type"::Order) THEN
               PONumber:="Document No.";
               // UPG09R2.end
             END;

    OnModify=BEGIN
               // UPG09R2.begin
               TESTFIELD(Interfaced,FALSE); //YIMMJX


               TestStatusOpen;
               // UPG09R2.end

               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDSET THEN
                   REPEAT
                     PurchLine2.TESTFIELD(Type,Type);
                     PurchLine2.TESTFIELD("No.","No.");
                   UNTIL PurchLine2.NEXT = 0;
               END;

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") THEN
                 ReservePurchLine.VerifyChange(Rec,xRec);
               // UPG09R2.begin

               IF ("Document Type"="Document Type"::Order) THEN
               PONumber:="Document No.";
               // UPG09R2.end
             END;

    OnDelete=VAR
               PurchCommentLine@1001 : Record 43;
             BEGIN
               TESTFIELD(Interfaced,FALSE);   //YIMMJX// UPG09R2

               TestStatusOpen;
               IF NOT StatusCheckSuspended AND (PurchHeader.Status = PurchHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)"])
               THEN
                 VALIDATE(Quantity,0);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReservePurchLine.DeleteLine(Rec);
                 IF "Receipt No." = '' THEN
                   TESTFIELD("Qty. Rcd. Not Invoiced",0);
                 IF "Return Shipment No." = '' THEN
                   TESTFIELD("Return Qty. Shipped Not Invd.",0);

                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 WhseValidateSourceLine.PurchaseLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.",0);

               IF "Sales Order Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
                 SalesOrderLine."Purchase Order No." := '';
                 SalesOrderLine."Purch. Order Line No." := 0;
                 SalesOrderLine.MODIFY;
               END;

               IF "Special Order Sales Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 IF "Document Type" = "Document Type"::Order THEN BEGIN
                   SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.");
                   SalesOrderLine."Special Order Purchase No." := '';
                   SalesOrderLine."Special Order Purch. Line No." := 0;
                   SalesOrderLine.MODIFY;
                 END ELSE BEGIN
                   IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.") THEN
                     BEGIN
                     SalesOrderLine."Special Order Purchase No." := '';
                     SalesOrderLine."Special Order Purch. Line No." := 0;
                     SalesOrderLine.MODIFY;
                   END;
                 END;
               END;

               NonstockItemMgt.DelNonStockPurch(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDFIRST THEN
                   PurchLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               IF "Line No." <> 0 THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETRANGE("Document Type","Document Type");
                 PurchLine2.SETRANGE("Document No.","Document No.");
                 PurchLine2.SETRANGE("Attached to Line No.","Line No.");
                 PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 PurchLine2.DELETEALL(TRUE);
               END;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","Document No.");
               PurchCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT PurchCommentLine.ISEMPTY THEN
                 PurchCommentLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Line;
               ENA=Purchase Line];
    PasteIsValid=No;
    LookupPageID=Page518;
    DrillDownPageID=Page518;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENA=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENA=Quote,Order,Invoice,CR/Adj Note,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENA=Buy-from Vendor No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ENA=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENA=Line No.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                TestStatusOpen;

                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Special Order Sales No.");
                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF xRec.Type IN [Type::Item,Type::"Fixed Asset"] THEN BEGIN
                                                                    IF Quantity <> 0 THEN
                                                                      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec.Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;
                                                                Type := TempPurchLine.Type;
                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                VALIDATE("FA Posting Type");

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENA=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account";
                                                                    ENA=" ,G/L Account,Item,,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No)) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                               Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Type=CONST(G/L Account),
                                                                                                                                        System-Created Entry=CONST(Yes)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Item)) Item
                                                                                                                                        ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                ICPartner@1000 : Record 413;
                                                                ItemCrossReference@1001 : Record 5717;
                                                                PrepmtMgt@1002 : Codeunit 441;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Shipment No.",'');

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("No."),"Sales Order No.");

                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("No."),"Special Order Sales No.");

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    IF Type = Type::Item THEN
                                                                      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF Type = Type::Item THEN
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;
                                                                Type := TempPurchLine.Type;
                                                                "No." := TempPurchLine."No.";
                                                                // UPG09R2.begin
                                                                "Kwitansi No." := TempPurchLine."Kwitansi No.";
                                                                "Commercial Invoice No." := TempPurchLine."Commercial Invoice No.";
                                                                "Commercial Invoice Date" := TempPurchLine."Commercial Invoice Date";

                                                                "Tax Invoice No." := TempPurchLine."Tax Invoice No.";
                                                                "Tax Invoice Date" := TempPurchLine."Tax Invoice Date";
                                                                Narration := TempPurchLine.Narration;
                                                                // UPG09R2.end
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN BEGIN
                                                                  Quantity := TempPurchLine.Quantity;
                                                                  "Outstanding Qty. (Base)" := TempPurchLine."Outstanding Qty. (Base)";
                                                                END;

                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                GetPurchHeader;
                                                                PurchHeader.TESTFIELD("Buy-from Vendor No.");

                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                                "Currency Code" := PurchHeader."Currency Code";
                                                                "Expected Receipt Date" := PurchHeader."Expected Receipt Date";
                                                                "Shortcut Dimension 1 Code" := PurchHeader."Shortcut Dimension 1 Code";
                                                                "Shortcut Dimension 2 Code" := PurchHeader."Shortcut Dimension 2 Code";
                                                                // UPG09R2.begin
                                                                //YIMMNNPWPST, //YIMMARC
                                                                VALIDATE("Order Address Code",PurchHeader."Order Address Code");
                                                                VALIDATE("New NPWP",PurchHeader."New NPWP No");//YIMMCH
                                                                "Reason Code" := PurchHeader."Reason Code";
                                                                //YIMMNNPWPEN

                                                                //Mel1.0-Start
                                                                VALIDATE("Quote No ( Project No.)",PurchHeader."Quote No ( Project No.)");

                                                                //Mel1.0-End
                                                                // UPG09R2.end
                                                                IF NOT IsServiceItem THEN
                                                                  "Location Code" := PurchHeader."Location Code";
                                                                "Transaction Type" := PurchHeader."Transaction Type";
                                                                "Transport Method" := PurchHeader."Transport Method";
                                                                "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
                                                                "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
                                                                "WHT Business Posting Group" := PurchHeader."WHT Business Posting Group";
                                                                "Entry Point" := PurchHeader."Entry Point";
                                                                Area := PurchHeader.Area;
                                                                "Transaction Specification" := PurchHeader."Transaction Specification";
                                                                "Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Tax Liable" := PurchHeader."Tax Liable";
                                                                IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
                                                                  "Prepayment %" := PurchHeader."Prepayment %";
                                                                "Prepayment Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Prepayment Tax Liable" := PurchHeader."Tax Liable";
                                                                "Responsibility Center" := PurchHeader."Responsibility Center";

                                                                "Requested Receipt Date" := PurchHeader."Requested Receipt Date";
                                                                "Promised Receipt Date" := PurchHeader."Promised Receipt Date";
                                                                "Inbound Whse. Handling Time" := PurchHeader."Inbound Whse. Handling Time";
                                                                "Order Date" := PurchHeader."Order Date";
                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      // UPG09R2.begin
                                                                      //YIMM SR DT 180509>>
                                                                      MasterSetup.GET;
                                                                      "Gen. Prod. Posting Group":=MasterSetup."Default GPPG";
                                                                      //YIMM SR DT 180509<<
                                                                      // UPG09R2.end
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "WHT Product Posting Group" := GLAcc."WHT Product Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetGLSetup;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Posting Group" := Item."Inventory Posting Group";
                                                                      END;
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Unit Price (LCY)" := Item."Unit Price";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      "Overhead Rate" := Item."Overhead Rate";
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "WHT Product Posting Group" := Item."WHT Product Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepmtMgt.SetPurchPrepaymentPct(Rec,PurchHeader."Posting Date");

                                                                      IF Item."Price Includes VAT" THEN BEGIN
                                                                        IF NOT VATPostingSetup.GET(
                                                                             Item."VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group")
                                                                        THEN
                                                                          VATPostingSetup.INIT;
                                                                        CASE VATPostingSetup."VAT Calculation Type" OF
                                                                          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                                                                            VATPostingSetup."VAT %" := 0;
                                                                          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                                                                            ERROR(
                                                                              Text002,
                                                                              VATPostingSetup.FIELDCAPTION("VAT Calculation Type"),
                                                                              VATPostingSetup."VAT Calculation Type");
                                                                        END;
                                                                        "Unit Price (LCY)" :=
                                                                          ROUND("Unit Price (LCY)" / (1 + VATPostingSetup."VAT %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision");
                                                                      END;

                                                                      IF PurchHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      "Unit of Measure Code" := Item."Purch. Unit of Measure";
                                                                    END;
                                                                  Type::"3":
                                                                    ERROR(Text003);
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "WHT Product Posting Group" := FA."WHT Product Posting Group";
                                                                      // UPG09R2.begin
                                                                      "FA Class Code":=FA."FA Class Code";

                                                                     /// 02/01/2010-nitin>>>>>
                                                                      MasterSetup.GET;
                                                                      "Gen. Prod. Posting Group":=MasterSetup."Default GPPG";
                                                                     /// 02/01/2010-nitin<<<<<<<
                                                                      // UPG09R2.end
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      // UPG09R2.begin
                                                                      //TBI1.0 BEGIN
                                                                      IF COMPANYNAME = MasterSetup."Company Name TBI" THEN BEGIN
                                                                        "FA Posting Date" := PurchHeader."Posting Date";
                                                                      END;
                                                                      //TBI1.O END
                                                                      // UPG09R2.end
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "WHT Product Posting Group" := ItemCharge."WHT Product Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Indirect Cost %" := 0;
                                                                      "Overhead Rate" := 0;
                                                                    END;
                                                                END;

                                                                VALIDATE("Prepayment %");

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  IF NOT BASManagement.VendorRegistered("Buy-from Vendor No.") THEN
                                                                    "VAT Prod. Posting Group" := BASManagement.GetUnregGSTProdPostGroup("VAT Bus. Posting Group","Buy-from Vendor No.");
                                                                  IF Type <> Type::"Fixed Asset" THEN
                                                                    VALIDATE("VAT Prod. Posting Group");
                                                                  VALIDATE("WHT Product Posting Group");
                                                                  Quantity := xRec.Quantity;
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToShip
                                                                    ELSE
                                                                      InitQtyToReceive;
                                                                  END;
                                                                  UpdateWithWarehouseReceive;
                                                                  UpdateDirectUnitCost(FIELDNO("No."));
                                                                  "Job No." := xRec."Job No.";
                                                                  "Job Line Type" := xRec."Job Line Type";
                                                                  IF xRec."Job Task No." <> '' THEN BEGIN
                                                                    VALIDATE("Job Task No.",xRec."Job Task No.");
                                                                    IF "No." = xRec."No." THEN
                                                                      VALIDATE("Job Planning Line No.",xRec."Job Planning Line No.");
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                                DistIntegration.EnterPurchaseItemCrossRef(Rec);

                                                                GetDefaultBin;

                                                                PurchHeader.GET("Document Type","Document No.");
                                                                IF PurchHeader."Send IC Document" THEN
                                                                  CASE Type OF
                                                                    Type::" ",Type::"Charge (Item)":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := Type;
                                                                        "IC Partner Reference" := "No.";
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := Type;
                                                                        "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
                                                                      END;
                                                                    Type::Item:
                                                                      BEGIN
                                                                        ICPartner.GET(PurchHeader."Buy-from IC Partner Code");
                                                                        CASE ICPartner."Outbound Purch. Item No. Type" OF
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Common Item No.":
                                                                            VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Internal No.":
                                                                            BEGIN
                                                                              "IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                                                                              "IC Partner Reference" := "No.";
                                                                            END;
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Cross Reference":
                                                                            BEGIN
                                                                              VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                                                                              ItemCrossReference.SETRANGE("Cross-Reference Type",
                                                                                ItemCrossReference."Cross-Reference Type"::Vendor);
                                                                              ItemCrossReference.SETRANGE("Cross-Reference Type No.",
                                                                                "Buy-from Vendor No.");
                                                                              ItemCrossReference.SETRANGE("Item No.","No.");
                                                                              IF ItemCrossReference.FINDFIRST THEN
                                                                                "IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
                                                                            END;
                                                                          ICPartner."Outbound Purch. Item No. Type"::"Vendor Item No.":
                                                                            BEGIN
                                                                              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Vendor Item No.";
                                                                              "IC Partner Reference" := "Vendor Item No.";
                                                                            END;
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
                                                                        "IC Partner Reference" := '';
                                                                      END;
                                                                  END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENA=No.];
                                                   Description=YIMM }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF "Prepmt. Amt. Inv." <> 0 THEN
                                                                    IF NOT CONFIRM(Text046,FALSE,FIELDCAPTION("Direct Unit Cost"),FIELDCAPTION("Location Code")) THEN BEGIN
                                                                      "Location Code" := xRec."Location Code";
                                                                      EXIT;
                                                                    END;
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Special Order Sales No.");

                                                                IF "Location Code" <> xRec."Location Code" THEN
                                                                  InitItemAppl;

                                                                IF (xRec."Location Code" <> "Location Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  UpdateWithWarehouseReceive;
                                                                END;
                                                                "Bin Code" := '';

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Location Code"));

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                GetDefaultBin;
                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENA=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENA=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);

                                                                CheckReservationDateConflict(FIELDNO("Expected Receipt Date"));

                                                                IF "Expected Receipt Date" <> 0D THEN
                                                                  VALIDATE(
                                                                    "Planned Receipt Date",
                                                                    CalendarMgmt.CalcDateBOC2(InternalLeadTimeDays("Expected Receipt Date"),"Expected Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',FALSE))
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Expected Receipt Date");
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ENA=Expected Receipt Date] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENA=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENA=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ENA=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Drop Shipment" AND ("Document Type" <> "Document Type"::Invoice) THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Quantity),"Sales Order No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Shipped")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Shipped (Base)")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Received")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Quantity Received")));
                                                                  IF ("Quantity (Base)" * "Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Received (Base)")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Qty. Received (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text011,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                IF "Receipt No." <> '' THEN
                                                                  CheckReceiptRelation
                                                                ELSE
                                                                  IF "Return Shipment No." <> '' THEN
                                                                    CheckRetShptRelation;

                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") OR
                                                                   ("No." = xRec."No.")
                                                                THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToShip
                                                                  ELSE
                                                                    InitQtyToReceive;
                                                                END;
                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl;

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO(Quantity))
                                                                ELSE
                                                                  VALIDATE("Line Discount %");

                                                                UpdateWithWarehouseReceive;
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  ReservePurchLine.VerifyQuantity(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  CheckApplToItemLedgEntry;
                                                                END;

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Invoice) AND ("Prepayment %" <> 0) THEN
                                                                  UpdatePrePaymentAmounts;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;

                                                                CheckWMS;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENA=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENA=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice)) THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase)) THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ENA=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Receive" AND
                                                                     ("Qty. to Receive" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Receive" = Quantity - "Quantity Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ((("Qty. to Receive" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Receive" <> 0)) OR
                                                                   (ABS("Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (((Quantity < 0 ) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Quantity");
                                                                IF ((("Qty. to Receive (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Qty. to Receive (Base)" <> 0)) OR
                                                                   (ABS("Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text009,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Receive" < 0) THEN
                                                                  CheckApplToItemLedgEntry;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ENA=Qty. to Receive];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=VAR
                                                                MasterSetup@1000000000 : Record 50008;
                                                                ItemMaster@1000000001 : Record 60006;
                                                                PurchHeader@1000000002 : Record 38;
                                                              BEGIN
                                                                VALIDATE("Line Discount %");
                                                                // UPG09R2.begin
                                                                MasterSetup.GET;

                                                                IF (COMPANYNAME=MasterSetup."Company Name MELCO") THEN
                                                                   BEGIN

                                                                   PurchHeader.RESET;
                                                                    IF PurchHeader.GET("Document Type","Document No.") THEN;

                                                                     ItemMaster.SETCURRENTKEY(ItemMaster."Item No.",ItemMaster."Source Type",ItemMaster."Source Code");
                                                                     ItemMaster.SETRANGE(ItemMaster."Item No.",ItemCode);
                                                                     ItemMaster.SETRANGE(ItemMaster."Source Code",PurchHeader."Buy-from Vendor No.");

                                                                         IF (ItemMaster.FINDFIRST) THEN
                                                                               IF ("Direct Unit Cost"<>ItemMaster."Unit Price") THEN
                                                                                   BEGIN
                                                                                   ItemMaster."Unit Price":="Direct Unit Cost";
                                                                                   ItemMaster.MODIFY(TRUE);
                                                                                   END;
                                                                   END;
                                                                   // UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ENA=Direct Unit Cost];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Direct Unit Cost")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("No.");
                                                                TESTFIELD(Quantity);

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text99000000,
                                                                    FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF CurrFieldNo = FIELDNO("Unit Cost (LCY)") THEN
                                                                  IF Type = Type::Item THEN BEGIN
                                                                    GetItem;
                                                                    IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                      ERROR(
                                                                        Text010,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  END;

                                                                UnitCostCurrency := "Unit Cost (LCY)";
                                                                GetPurchHeader;
                                                                IF PurchHeader."Currency Code" <> '' THEN BEGIN
                                                                  PurchHeader.TESTFIELD("Currency Factor");
                                                                  GetGLSetup;
                                                                  UnitCostCurrency :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,"Currency Code",
                                                                        "Unit Cost (LCY)",PurchHeader."Currency Factor"),
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF ("Direct Unit Cost" <> 0) AND
                                                                   ("Direct Unit Cost" <> ("Line Discount Amount" / Quantity))
                                                                THEN
                                                                  "Indirect Cost %" :=
                                                                    ROUND(
                                                                      (UnitCostCurrency - "Direct Unit Cost" + "Line Discount Amount" / Quantity) /
                                                                      ("Direct Unit Cost" - "Line Discount Amount" / Quantity) * 100,0.00001)
                                                                ELSE
                                                                  "Indirect Cost %" := 0;

                                                                UpdateSalesCost;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
                                                                  UpdateJobPrices;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ENA=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENA=GST %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetPurchHeader;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,
                                                                    Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ENA=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                  IF ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") <> 0 THEN
                                                                    "Line Discount %" :=
                                                                      ROUND(
                                                                        "Line Discount Amount" /
                                                                        ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") * 100,
                                                                        0.00001)
                                                                  ELSE
                                                                    "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ENA=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                      "VAT Base (ACY)" :=
                                                                        ROUND(
                                                                          CurrExchRate.ExchangeAmtLCYToFCY(
                                                                            PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                                                                            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                                                PurchHeader."Posting Date","Currency Code","VAT Base Amount",
                                                                                PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                                                                          AddCurrency."Amount Rounding Precision");
                                                                      "Amount Including VAT (ACY)" :=
                                                                        ROUND("Amount (ACY)" + "VAT Base (ACY)" * "VAT %" / 100,
                                                                          AddCurrency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text011,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := Amount;
                                                                      IF "Use Tax" THEN
                                                                        "Amount Including VAT" := "VAT Base Amount"
                                                                      ELSE BEGIN
                                                                        "Amount Including VAT" :=
                                                                          Amount +
                                                                          ROUND(
                                                                            SalesTaxCalculate.CalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "VAT Base Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENA=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      IF "Use Tax" THEN BEGIN
                                                                        Amount := "Amount Including VAT";
                                                                        "VAT Base Amount" := Amount;
                                                                      END ELSE BEGIN
                                                                        Amount :=
                                                                          ROUND(
                                                                            SalesTaxCalculate.ReverseCalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "Amount Including VAT","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        "VAT Base Amount" := Amount;
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENA=Amount Including GST];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=[ENU=Unit Price (LCY);
                                                              ENA=Unit Price (LCY)];
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                  UpdateUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENA=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENA=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENA=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENA=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENA=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN
                                                                  "Location Code" := CheckApplToItemLedgEntry;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry;
                                                            END;

                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENA=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;// UPG09R2
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=VAR
                                                              Counter@1000000000 : Integer;
                                                              FetchValue@1000000001 : ARRAY [10] OF Text[30];
                                                            BEGIN
                                                              // UPG09R2.begin
                                                              TESTFIELD("No.");


                                                               GLSET.GET;

                                                               GLAc.RESET;
                                                               GLAc.SETRANGE(GLAc."No.","No.");

                                                              IF GLAc.FINDFIRST THEN
                                                              IF (GLAc.DimKey<>'') THEN
                                                               BEGIN
                                                                DimVal.RESET;
                                                                DimVal.SETRANGE(DimVal."Global Dimension No.",1);
                                                                Counter:=1;

                                                                REPEAT

                                                                      FetchValue[Counter]:=COPYSTR(GLAc.DimKey,Counter,1);

                                                                Counter:=Counter+1;

                                                                UNTIL(Counter>STRLEN(GLAc.DimKey));

                                                                DimVal.SETFILTER(DimVal.DimKey,'%1|%2|%3|%4',FetchValue[1],FetchValue[2],FetchValue[3],FetchValue[4]);


                                                                IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN
                                                                  "Shortcut Dimension 1 Code":= DimVal.Code;

                                                               END
                                                                 ELSE

                                                               BEGIN

                                                                DimVal.RESET;
                                                                DimVal.SETRANGE(DimVal."Global Dimension No.",1);

                                                                IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN
                                                                  "Shortcut Dimension 1 Code":= DimVal.Code;


                                                               END;

                                                              //TBI1.0 BEGIN
                                                              MasterSetup.GET;
                                                              IF ((COMPANYNAME = MasterSetup."Company Name TBI") AND (Type = Type::"Fixed Asset")) THEN
                                                              BEGIN
                                                                DimVal.RESET;
                                                                DimVal.SETRANGE(DimVal."Global Dimension No.",1);
                                                                IF PAGE.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN
                                                                  "Shortcut Dimension 1 Code":= DimVal.Code;
                                                              END;
                                                              //TBI1.0 END

                                                              VALIDATE("Shortcut Dimension 1 Code",DimVal.Code);
                                                              // UPG09R2.end
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENA=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;// UPG09R2
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENA=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=VAR
                                                                Job@1000 : Record 167;
                                                              BEGIN
                                                                TESTFIELD("Drop Shipment",FALSE);
                                                                TESTFIELD("Special Order",FALSE);
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF ReservEntryExist THEN
                                                                  TESTFIELD("Job No.",'');

                                                                IF "Job No." <> xRec."Job No." THEN BEGIN
                                                                  VALIDATE("Job Task No.",'');
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                END;

                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  EXIT;
                                                                END;

                                                                IF NOT (Type IN [Type::Item,Type::"G/L Account"]) THEN
                                                                  FIELDERROR("Job No.",STRSUBSTNO(Text012,FIELDCAPTION(Type),Type));
                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              ENA=Job No.] }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                                TestStatusOpen;

                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Indirect Cost %",0);

                                                                IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
                                                                  GetItem;
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                    ERROR(
                                                                      Text010,
                                                                      FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                END;

                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ENA=Indirect Cost %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");

                                                                "Outstanding Amt. Ex. VAT (LCY)" :=
                                                                  ROUND("Outstanding Amount (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ENA=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;CaptionML=[ENU=Qty. Rcd. Not Invoiced;
                                                              ENA=Qty. Rcd. Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Amt. Rcd. Not Invoiced;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Amt. Rcd. Not Invoiced",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND("Amt. Rcd. Not Invoiced",Currency2."Amount Rounding Precision");

                                                                "A. Rcd. Not Inv. Ex. VAT (LCY)" :=
                                                                  ROUND("Amt. Rcd. Not Invoiced (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amt. Rcd. Not Invoiced;
                                                              ENA=Amt. Rcd. Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Received   ;Decimal       ;CaptionML=[ENU=Quantity Received;
                                                              ENA=Quantity Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENA=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Receipt No.         ;Code20        ;CaptionML=[ENU=Receipt No.;
                                                              ENA=Receipt No.];
                                                   Editable=No }
    { 64  ;   ;Receipt Line No.    ;Integer       ;CaptionML=[ENU=Receipt Line No.;
                                                              ENA=Receipt Line No.];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ENA=Profit %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENA=Pay-to Vendor No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                                CalcInvDiscToInvoice;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ENA=Inv. Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Vendor Item No.     ;Text20        ;OnValidate=BEGIN
                                                                IF PurchHeader."Send IC Document" AND
                                                                   ("IC Partner Ref. Type" = "IC Partner Ref. Type"::"Vendor Item No.")
                                                                THEN
                                                                  "IC Partner Reference" := "Vendor Item No.";
                                                              END;

                                                   CaptionML=[ENU=Vendor Item No.;
                                                              ENA=Vendor Item No.] }
    { 71  ;   ;Sales Order No.     ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order No." <> "Sales Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales Order No.;
                                                              ENA=Sales Order No.];
                                                   Editable=No }
    { 72  ;   ;Sales Order Line No.;Integer       ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Sales Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order Line No." <> "Sales Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales Order Line No.;
                                                              ENA=Sales Order Line No.];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                                IF "Drop Shipment" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  EVALUATE("Inbound Whse. Handling Time",'<0D>');
                                                                  VALIDATE("Inbound Whse. Handling Time");
                                                                  InitOutstanding;
                                                                  InitQtyToReceive;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENA=Drop Shipment];
                                                   Editable=No }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENA=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENA=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENA=GST Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENA=Normal GST,Reverse Charge GST,Full GST,US Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENA=Transaction Type] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENA=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                   Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENA=Attached to Line No.];
                                                   Editable=No }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry Point;
                                                              ENA=Entry Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENA=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENA=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENA=US Tax Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENA=US Tax Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENA=US Tax Group Code] }
    { 88  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              ENA=Use US Tax] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENA=GST Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group".Code WHERE (ReasonCode=FIELD(Reason Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Purchase VAT Account");
                                                                    END;
                                                                END;
                                                                IF PurchHeader."Prices Including VAT" AND (Type = Type::Item) THEN
                                                                  "Direct Unit Cost" :=
                                                                    ROUND(
                                                                      "Direct Unit Cost" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENA=GST Prod. Posting Group];
                                                   Description=YIMMREXP }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENA=Currency Code];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ENA=Outstanding Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   CaptionML=[ENU=Amt. Rcd. Not Invoiced (LCY);
                                                              ENA=Amt. Rcd. Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(39),
                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ENA=Reserved Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Received",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENA=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                   Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  PurchLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  PurchLine2.TESTFIELD(Type,Type);
                                                                  PurchLine2.TESTFIELD("No.","No.");
                                                                  PurchLine2.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                                                                  PurchLine2.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENA=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENA=GST Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENA=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENA=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Direct Unit Cost");

                                                                GetPurchHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                GetGLSetup;
                                                                IF PurchHeader."Currency Code" = GLSetup."Additional Reporting Currency" THEN
                                                                  "Amount (ACY)" := "Line Amount"
                                                                ELSE
                                                                  "Amount (ACY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                                                                        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                                            PurchHeader."Posting Date","Currency Code","Line Amount",
                                                                            PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                                                                      AddCurrency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Amount");
                                                                 // UPG09R2.begin
                                                                //YIMMNTAPST

                                                                VALIDATE("Tax Amount (Vat)",("Outstanding Amount" -"Line Amount"));


                                                                //YIMMNTAPEN
                                                                // UPG09R2.end
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ENA=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENA=GST Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ENA=Inv. Disc. Amount to Invoice];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ENA=GST Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN
                                                                  BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENA=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.";
                                                                    ENA=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                              ItemVendorCatalog@1003 : Record 99;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Vendor,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Vendor Item No.":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemVendorCatalog.SETCURRENTKEY("Vendor No.");
                                                                      ItemVendorCatalog.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
                                                                      IF PAGE.RUNMODAL(PAGE::"Vendor Item Catalog",ItemVendorCatalog) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemVendorCatalog."Vendor Item No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ENA=IC Partner Reference] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=VAR
                                                                GenPostingSetup@1001 : Record 252;
                                                                GLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
                                                                  TESTFIELD("Document Type","Document Type"::Order);
                                                                  TESTFIELD("No.");
                                                                  GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                  IF GenPostingSetup."Purch. Prepayments Account" <> '' THEN BEGIN
                                                                    GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
                                                                    IF NOT BASManagement.VendorRegistered("Buy-from Vendor No.") THEN
                                                                      VATPostingSetup.GET(
                                                                        "VAT Bus. Posting Group",
                                                                        BASManagement.GetUnregGSTProdPostGroup("VAT Bus. Posting Group","Buy-from Vendor No."))
                                                                    ELSE BEGIN
                                                                      GetGLSetup;
                                                                      IF GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                        GLAcc.TESTFIELD("VAT Prod. Posting Group","VAT Prod. Posting Group");
                                                                      VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                    END;
                                                                  END ELSE
                                                                    CLEAR(VATPostingSetup);
                                                                  "Prepayment VAT %" := VATPostingSetup."VAT %";
                                                                  "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
                                                                  "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                  CASE "Prepmt. VAT Calc. Type" OF
                                                                    "VAT Calculation Type"::"Reverse Charge VAT",
                                                                    "VAT Calculation Type"::"Sales Tax":
                                                                      "Prepayment VAT %" := 0;
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      FIELDERROR("Prepmt. VAT Calc. Type",STRSUBSTNO(Text036,"Prepmt. VAT Calc. Type"));
                                                                  END;
                                                                  "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
                                                                END;

                                                                TestStatusOpen;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENA=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text038,"Prepmt. Amt. Inv."));
                                                                IF UpdateGSTAmounts THEN
                                                                  IF PrepmtLineAmtExclFullGST > LineAmountExclFullGST THEN
                                                                    FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,"Line Amount" - "Inv. Discount Amount"))
                                                                  ELSE
                                                                    IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                      FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,"Line Amount"));
                                                                IF Quantity <> 0 THEN
                                                                  VALIDATE("Prepayment %",
                                                                    ROUND(PrepmtLineAmtExclFullGST / (LineAmountExclFullGST * (Quantity - "Quantity Invoiced") / Quantity) * 100,0.00001))
                                                                ELSE
                                                                  VALIDATE("Prepayment %",ROUND(PrepmtLineAmtExclFullGST * 100 / LineAmountExclFullGST,0.00001));
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Line Amount;
                                                              ENA=Prepmt. Line Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ENA=Prepmt. Amt. Inv.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ENA=Prepmt. Amt. Incl. GST];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ENA=Prepayment Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ENA=Prepmt. GST Base Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ENA=Prepayment GST %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ENA=Prepmt. GST Calc. Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENA=Normal GST,Reverse Charge GST,Full GST,US Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ENA=Prepayment GST Identifier];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ENA=Prepayment US Tax Area Code] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Liable;
                                                              ENA=Prepayment US Tax Liable] }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ENA=Prepayment US Tax Group Code] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Direct Unit Cost" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Qty. to Invoice" * "Direct Unit Cost"));
                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text038,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                                                                      (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"));
                                                              END;

                                                   CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ENA=Prepmt Amt to Deduct];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ENA=Prepmt Amt Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENA=Prepayment Line];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ENA=Prepmt. Amount Inv. Incl. GST];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[ENU=Prepmt. Amount Inv. (LCY);
                                                              ENA=Prepmt. Amount Inv. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetPurchHeader;
                                                                  PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
                                                                  PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENA=IC Partner Code] }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=[ENU=Prepmt. VAT Amount Inv. (LCY);
                                                              ENA=Prepmt. GST Amount Inv. (LCY)];
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[ENU=Prepayment VAT Difference;
                                                              ENA=Prepayment GST Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[ENU=Prepmt VAT Diff. to Deduct;
                                                              ENA=Prepmt GST Diff. to Deduct];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[ENU=Prepmt VAT Diff. Deducted;
                                                              ENA=Prepmt GST Diff. Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 140 ;   ;Outstanding Amt. Ex. VAT (LCY);Decimal;
                                                   CaptionML=[ENU=Outstanding Amt. Ex. VAT (LCY);
                                                              ENA=Outstanding Amt. Ex. GST (LCY)] }
    { 141 ;   ;A. Rcd. Not Inv. Ex. VAT (LCY);Decimal;
                                                   CaptionML=[ENU=A. Rcd. Not Inv. Ex. VAT (LCY);
                                                              ENA=A. Rcd. Not Inv. Ex. GST (LCY)] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENA=Dimension Set ID];
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');

                                                                IF "Job Task No." <> xRec."Job Task No." THEN BEGIN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                  IF "Document Type" = "Document Type"::Order THEN
                                                                    TESTFIELD("Quantity Received",0);
                                                                END;

                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  CLEAR(JobJnlLine);
                                                                  "Job Line Type" := "Job Line Type"::" ";
                                                                  UpdateJobPrices;
                                                                  EXIT;
                                                                END;

                                                                JobSetCurrencyFactor;
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              ENA=Job Task No.] }
    { 1002;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text048,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   CaptionML=[ENU=Job Line Type;
                                                              ENA=Job Line Type];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ENA=" ,Schedule,Contract,Both Schedule and Contract"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1003;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Unit Price;
                                                              ENA=Job Unit Price];
                                                   BlankZero=Yes }
    { 1004;   ;Job Total Price     ;Decimal       ;CaptionML=[ENU=Job Total Price;
                                                              ENA=Job Total Price];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1005;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount;
                                                              ENA=Job Line Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              ENA=Job Line Discount Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount %;
                                                              ENA=Job Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price (LCY)","Job Unit Price (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Unit Price (LCY);
                                                              ENA=Job Unit Price (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1009;   ;Job Total Price (LCY);Decimal      ;CaptionML=[ENU=Job Total Price (LCY);
                                                              ENA=Job Total Price (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              ENA=Job Line Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              ENA=Job Line Disc. Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              ENA=Job Currency Factor];
                                                   BlankZero=Yes }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=[ENU=Job Currency Code;
                                                              ENA=Job Currency Code] }
    { 1019;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  CASE Type OF
                                                                    Type::"G/L Account":
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                    Type::Item:
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
                                                                  END;
                                                                  JobPlanningLine.TESTFIELD("No.","No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Qty. to Invoice");
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 1003;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              CASE Type OF
                                                                Type::"G/L Account":
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                                Type::Item:
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Item);
                                                              END;
                                                              JobPlanningLine.SETRANGE("No.","No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   CaptionML=[ENU=Job Planning Line No.;
                                                              ENA=Job Planning Line No.];
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text047,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                                "Job Remaining Qty. (Base)" := CalcBaseQty("Job Remaining Qty.");
                                                              END;

                                                   CaptionML=[ENU=Job Remaining Qty.;
                                                              ENA=Job Remaining Qty.];
                                                   DecimalPlaces=0:5 }
    { 1031;   ;Job Remaining Qty. (Base);Decimal  ;CaptionML=[ENU=Job Remaining Qty. (Base);
                                                              ENA=Job Remaining Qty. (Base)] }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Prod. Order No."),"Sales Order No.");

                                                                AddOnIntegrMgt.ValidateProdOrderOnPurchLine(Rec);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ENA=Prod. Order No.];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Variant Code"),"Sales Order No.");

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Variant Code"));

                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  InitItemAppl;
                                                                END;

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;
                                                                GetDefaultBin;
                                                                DistIntegration.EnterPurchaseItemCrossRef(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENA=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                          Item No.=FIELD(No.),
                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                          ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                   Quantity=FILTER(>=0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                         Item No.=FIELD(No.),
                                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                                         ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Bin Code"),"Sales Order No.");

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit 7302;
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENA=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENA=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Receipt No.",'');
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Unit of Measure Code"),"Sales Order No.");
                                                                IF (xRec."Unit of Measure" <> "Unit of Measure") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetPurchHeader;
                                                                  IF PurchHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",PurchHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                DistIntegration.EnterPurchaseItemCrossRef(Rec);
                                                                IF "Prod. Order No." = '' THEN BEGIN
                                                                  IF (Type = Type::Item) AND ("No." <> '') THEN BEGIN
                                                                    GetItem;
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                    "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                    "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                    "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                    IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                      InitItemAppl;
                                                                    UpdateUOMQtyPerStockQty;
                                                                  END ELSE
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 0;

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENA=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateDirectUnitCost(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENA=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENA=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENA=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ENA=Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Rcd. Not Invoiced (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Rcd. Not Invoiced (Base);
                                                              ENA=Qty. Rcd. Not Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ENA=Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENA=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(39),
                                                                                                                Source Subtype=FIELD(Document Type),
                                                                                                                Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ENA=Reserved Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENA=FA Posting Date] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::"Fixed Asset" THEN BEGIN
                                                                  TESTFIELD("Job No.",'');
                                                                  IF "FA Posting Type" = "FA Posting Type"::" " THEN
                                                                    "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
                                                                  GetFAPostingGroup
                                                                END ELSE BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=FA Posting Type;
                                                              ENA=FA Posting Type];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Maintenance";
                                                                    ENA=" ,Acquisition Cost,Maintenance"];
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENA=Depreciation Book Code] }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=[ENU=Salvage Value;
                                                              ENA=Salvage Value];
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENA=Depr. until FA Posting Date] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=[ENU=Depr. Acquisition Cost;
                                                              ENA=Depr. Acquisition Cost] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=[ENU=Maintenance Code;
                                                              ENA=Maintenance Code] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=[ENU=Insurance No.;
                                                              ENA=Insurance No.] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              ENA=Budgeted FA No.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENA=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   CaptionML=[ENU=Use Duplication List;
                                                              ENA=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENA=Responsibility Centre];
                                                   Editable=No }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";

                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupPurchaseItem(Rec,ReturnedCrossRef);
                                                                  VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  SetVendorItemNo;
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");
                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                  UpdateDirectUnitCost(FIELDNO("Cross-Reference No."));
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                IF PurchHeader."Send IC Document" AND (PurchHeader."IC Direction" = PurchHeader."IC Direction"::Outgoing) THEN BEGIN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Cross Reference";
                                                                  "IC Partner Reference" := "Cross-Reference No.";
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENA=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENA=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENA=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENA=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENA=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENA=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ENA=Nonstock] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                END ELSE
                                                                  "Drop Shipment" := FALSE;
                                                                VALIDATE("Drop Shipment","Drop Shipment");
                                                              END;

                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENA=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENA=Product Group Code] }
    { 5713;   ;Special Order       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Special Order" <> "Special Order") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order;
                                                              ENA=Special Order] }
    { 5714;   ;Special Order Sales No.;Code20     ;TableRelation=IF (Special Order=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales No." <> "Special Order Sales No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order Sales No.;
                                                              ENA=Special Order Sales No.] }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Special Order Sales No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales Line No." <> "Special Order Sales Line No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order Sales Line No.;
                                                              ENA=Special Order Sales Line No.] }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(39),
                                                                                                                             Source Subtype=FIELD(Document Type),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ENA=Whse. Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              ENA=Completely Received];
                                                   Editable=No }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Promised Receipt Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text023,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> 0D THEN
                                                                  VALIDATE("Order Date",
                                                                    CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Requested Receipt Date",
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',TRUE))
                                                                ELSE
                                                                  IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                    GetUpdateBasicDates;
                                                              END;

                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ENA=Requested Receipt Date] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF "Promised Receipt Date" <> 0D THEN
                                                                    VALIDATE("Planned Receipt Date","Promised Receipt Date")
                                                                  ELSE
                                                                    VALIDATE("Requested Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Promised Receipt Date");
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ENA=Promised Receipt Date] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Requested Receipt Date" <> 0D THEN BEGIN
                                                                  VALIDATE("Planned Receipt Date");
                                                                END ELSE
                                                                  GetUpdateBasicDates;
                                                              END;

                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENA=Lead Time Calculation] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Promised Receipt Date" <> 0D) OR
                                                                   ("Requested Receipt Date" <> 0D)
                                                                THEN
                                                                  VALIDATE("Planned Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Expected Receipt Date");
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENA=Inbound Whse. Handling Time] }
    { 5794;   ;Planned Receipt Date;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Receipt Date" <> 0D THEN BEGIN
                                                                  IF "Planned Receipt Date" <> 0D THEN
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  ELSE
                                                                    "Expected Receipt Date" := "Planned Receipt Date";
                                                                END ELSE
                                                                  IF "Planned Receipt Date" <> 0D THEN BEGIN
                                                                    "Order Date" :=
                                                                      CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',TRUE);
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  END ELSE
                                                                    GetUpdateBasicDates;

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                                CheckReservationDateConflict(FIELDNO("Planned Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Planned Receipt Date;
                                                              ENA=Planned Receipt Date] }
    { 5795;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Document Type" = "Document Type"::Order) AND
                                                                   ("Order Date" < WORKDATE) AND
                                                                   ("Order Date" <> 0D)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text018,
                                                                    FIELDCAPTION("Order Date"),"Order Date",WORKDATE);

                                                                IF "Order Date" <> 0D THEN
                                                                  "Planned Receipt Date" :=
                                                                    CalendarMgmt.CalcDateBOC(AdjustDateFormula("Lead Time Calculation"),"Order Date",
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',TRUE);

                                                                IF "Planned Receipt Date" <> 0D THEN
                                                                  "Expected Receipt Date" :=
                                                                    CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                ELSE
                                                                  "Expected Receipt Date" := "Planned Receipt Date";

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                                CheckReservationDateConflict(FIELDNO("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ENA=Order Date] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ENA=Allow Item Charge Assignment] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. to Assign;
                                                              ENA=Qty. to Assign];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. Assigned;
                                                              ENA=Qty. Assigned];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Ship ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Ship" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Ship" = Quantity - "Return Qty. Shipped" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Ship" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Ship (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Ship" > 0) THEN
                                                                  CheckApplToItemLedgEntry;
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Ship;
                                                              ENA=Return Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Ship (Base);Decimal ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Ship","Return Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Ship (Base);
                                                              ENA=Return Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Shipped Not Invd.;Decimal;
                                                   CaptionML=[ENU=Return Qty. Shipped Not Invd.;
                                                              ENA=Return Qty. Shipped Not Invd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Shpd Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Shpd Not Invd.(Base);
                                                              ENA=Ret. Qty. Shpd Not Invd.(Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Shpd. Not Invd.;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Shpd. Not Invd.",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Shpd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Return Shpd. Not Invd.;
                                                              ENA=Return Shpd. Not Invd.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Shpd. Not Invd. (LCY);Decimal;
                                                   CaptionML=[ENU=Return Shpd. Not Invd. (LCY);
                                                              ENA=Return Shpd. Not Invd. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Shipped ;Decimal       ;CaptionML=[ENU=Return Qty. Shipped;
                                                              ENA=Return Qty. Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Shipped (Base);Decimal ;CaptionML=[ENU=Return Qty. Shipped (Base);
                                                              ENA=Return Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 6600;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ENA=Return Shipment No.];
                                                   Editable=No }
    { 6601;   ;Return Shipment Line No.;Integer   ;CaptionML=[ENU=Return Shipment Line No.;
                                                              ENA=Return Shipment Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENA=Return Reason Code] }
    { 28006;  ;Prepmt. VAT Amount Deducted;Decimal;CaptionML=[ENU=Prepmt. VAT Amount Deducted;
                                                              ENA=Prepmt. GST Amount Deducted];
                                                   Editable=No }
    { 28007;  ;Prepmt. VAT Base Deducted;Decimal  ;CaptionML=[ENU=Prepmt. VAT Base Deducted;
                                                              ENA=Prepmt. GST Base Deducted];
                                                   Editable=No }
    { 28040;  ;WHT Business Posting Group;Code10  ;TableRelation="WHT Business Posting Group";
                                                   CaptionML=[ENU=WHT Business Posting Group;
                                                              ENA=WHT Business Posting Group] }
    { 28041;  ;WHT Product Posting Group;Code10   ;TableRelation=IF (WHT Business Posting Group=CONST()) "WHT Product Posting Group"
                                                                 ELSE "WHT Posting Setup"."WHT Product Posting Group" WHERE (WHT Business Posting Group=FIELD(WHT Business Posting Group),
                                                                                                                             NPWP=FIELD(Is Order Address Code),
                                                                                                                             Reason Code=FIELD(Reason Code));
                                                   CaptionML=[ENU=WHT Product Posting Group;
                                                              ENA=WHT Product Posting Group] }
    { 28042;  ;WHT Absorb Base     ;Decimal       ;CaptionML=[ENU=WHT Absorb Base;
                                                              ENA=WHT Absorb Base] }
    { 28081;  ;VAT Base (ACY)      ;Decimal       ;CaptionML=[ENU=VAT Base (ACY);
                                                              ENA=GST Base (ACY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28082;  ;VAT Amount (ACY)    ;Decimal       ;CaptionML=[ENU=VAT Amount (ACY);
                                                              ENA=GST Amount (ACY)];
                                                   AutoFormatType=1 }
    { 28083;  ;Amount Including VAT (ACY);Decimal ;CaptionML=[ENU=Amount Including VAT (ACY);
                                                              ENA=Amount Including GST (ACY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28084;  ;Amount (ACY)        ;Decimal       ;CaptionML=[ENU=Amount (ACY);
                                                              ENA=Amount (ACY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 28085;  ;VAT Difference (ACY);Decimal       ;CaptionML=[ENU=VAT Difference (ACY);
                                                              ENA=GST Difference (ACY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 50001;  ;Kwitansi No.        ;Code20        ;Description=YIMMNTT }
    { 50002;  ;Commercial Invoice No.;Code20      ;Description=YIMMNTT }
    { 50003;  ;Commercial Invoice Date;Date       ;Description=YIMMNTT }
    { 50004;  ;Tax Invoice No.     ;Code30        ;OnValidate=VAR
                                                                Length@1000000000 : Integer;
                                                                Text001@1000000001 : TextConst 'ENU=Length Can  16 ( Without Dots $ Dash) or 19 With Dots  & Dash';
                                                                CheckNumeric@1000000002 : Integer;
                                                                CheckVar@1000000003 : Text[50];
                                                                I@1000000004 : Integer;
                                                                Text002@1000000005 : TextConst 'ENU=The Number Should Be Numeric';
                                                                Part1@1000000006 : Text[30];
                                                                Part2@1000000007 : Text[30];
                                                                Part3@1000000008 : Text[30];
                                                                Part4@1000000009 : Text[30];
                                                                Text003@1000000010 : TextConst 'ENU=Please Input Format as NNN.NNN-NN.NNNNNNNN';
                                                                CLE@1000000011 : Record 21;
                                                                PurchaseHeader@1000000012 : Record 38;
                                                                OrderAddressCode@1000000013 : Record 224;
                                                                MasterSetup@1000000015 : Record 50008;
                                                                PurchCrMemoHeader@1000000016 : Record 124;
                                                              BEGIN
                                                                //YIMMNTT
                                                                //Code for Duplicacy of Tax Invoice No.
                                                                CLEAR(CheckSpecial);
                                                                MasterSetup.GET;


                                                                IF ("Reason Code"=MasterSetup."Reason (Normal)") THEN

                                                                BEGIN

                                                                PurchaseHeader.RESET;
                                                                PurchaseHeader.SETRANGE(PurchaseHeader."No.","Document No.");
                                                                PurchaseHeader.SETRANGE(PurchaseHeader."Document Type","Document Type");

                                                                IF PurchaseHeader.FINDSET THEN
                                                                     IF (PurchaseHeader."New NPWP No"<>'') THEN
                                                                          IF OrderAddressCode.GET(PurchaseHeader."Buy-from Vendor No.","New NPWP") THEN
                                                                             CheckSpecial:=OrderAddressCode.SpecialVendor;



                                                                IF ("Tax Invoice No." <> '') AND (NOT (CheckSpecial)) THEN
                                                                 BEGIN

                                                                   Length:=STRLEN("Tax Invoice No.");

                                                                   //IF (Length<>30) OR (Length<>19) OR (Length<>16) THEN
                                                                   //  ERROR(Text001);

                                                                   CASE Length OF

                                                                     16:
                                                                     BEGIN

                                                                        FOR I:=1 TO 16 DO
                                                                         BEGIN

                                                                         CheckVar:=COPYSTR("Tax Invoice No.",I,5);
                                                                           IF NOT (EVALUATE(CheckNumeric,CheckVar)) THEN
                                                                            ERROR(Text002);

                                                                          I:=I+5;

                                                                         END; //End of For Loop

                                                                     Part1:=COPYSTR("Tax Invoice No.",1,3);
                                                                     Part2:=COPYSTR("Tax Invoice No.",4,3);
                                                                     Part3:=COPYSTR("Tax Invoice No.",7,2);
                                                                     Part4:=COPYSTR("Tax Invoice No.",9,16);

                                                                     {//>>02042013/PC/CR#014   Code commented for CR#014
                                                                     IF ((MasterSetup."Company Name TBI" = COMPANYNAME) OR (MasterSetup."Company Name YEID" = COMPANYNAME)) THEN
                                                                       "Tax Invoice No.":=STRSUBSTNO('%1.%2-%3.%4',Part1,Part2,Part3,Part4)
                                                                     ELSE
                                                                       "Tax Invoice No.":=STRSUBSTNO('%1.%2.%3-%4',Part1,Part2,Part3,Part4);
                                                                     }//<<02042013/PC/CR#014



                                                                     "Tax Invoice No.":=STRSUBSTNO('%1.%2-%3.%4',Part1,Part2,Part3,Part4) ;  //>>02042013/PC/CR#014


                                                                     END; //End Of 16


                                                                     19:
                                                                     BEGIN

                                                                       Part1:=COPYSTR("Tax Invoice No.",1,3);
                                                                       Part2:=COPYSTR("Tax Invoice No.",5,3);
                                                                       Part3:=COPYSTR("Tax Invoice No.",9,2);
                                                                       Part4:=COPYSTR("Tax Invoice No.",12,8);

                                                                           IF NOT (EVALUATE(CheckNumeric,Part1)) THEN
                                                                             ERROR(Text002);

                                                                           IF NOT (EVALUATE(CheckNumeric,Part2)) THEN
                                                                             ERROR(Text002);

                                                                           IF NOT (EVALUATE(CheckNumeric,Part3)) THEN
                                                                             ERROR(Text002);

                                                                           IF NOT (EVALUATE(CheckNumeric,Part4)) THEN
                                                                             ERROR(Text002);


                                                                     Part1:=COPYSTR("Tax Invoice No.",4,1);
                                                                     Part2:=COPYSTR("Tax Invoice No.",8,1);
                                                                     Part3:=COPYSTR("Tax Invoice No.",11,1);

                                                                     { //>>02042013/PC/CR#014    Code commented for CR#014
                                                                     IF ((MasterSetup."Company Name TBI" = COMPANYNAME) OR (MasterSetup."Company Name YEID" = COMPANYNAME)) THEN BEGIN
                                                                       IF (Part1<>'.') OR (Part2<>'-') OR (Part3<>'.') THEN
                                                                         ERROR(Text003);
                                                                     END ELSE IF (Part1<>'.') OR (Part2<>'.') OR (Part3<>'-') THEN
                                                                         ERROR(Text003)
                                                                     } //<<02042013/PC/CR#014


                                                                     //>>02042013/PC/CR#014
                                                                     IF (Part1<>'.') OR (Part2<>'-') OR (Part3<>'.') THEN
                                                                       ERROR(Text003);
                                                                     //<<02042013/PC/CR#014


                                                                     END;  //End Of 19

                                                                    ELSE
                                                                      ERROR(Text001);

                                                                   END; //End Of Case Statement

                                                                 END;   //End Of This-->IF ("Tax Invoice No." <> '') AND (NOT (CheckSpecial)) THEN


                                                                IF ("Tax Invoice No." <> '') AND ("Document Type"="Document Type"::Invoice) THEN BEGIN

                                                                  //>>07032013/PC/CR#014
                                                                  IF NOT CheckSpecial THEN
                                                                    FormatConverter()
                                                                  ELSE
                                                                    "Tax_Inv_No._Copy_2" := "Tax Invoice No.";
                                                                  //<<07032013/PC/CR#014



                                                                  "PurchInv Line".RESET;
                                                                  "PurchInv Line".SETCURRENTKEY("PurchInv Line"."Tax Invoice No.");
                                                                //"PurchInv Line".SETRANGE("PurchInv Line"."Tax Invoice No.","Tax Invoice No.");  //>>07032013/PC/CR#014 Code commented for CR#014

                                                                  //>>07032013/PC/CR#014
                                                                  "PurchInv Line".SETFILTER("PurchInv Line"."Tax Invoice No."
                                                                                                                             ,'%1 |%2'
                                                                                                                             ,"Tax Invoice No.","Tax_Inv_No._Copy_2");
                                                                  //<<07032013/PC/CR#014

                                                                  "PurchInv Line".SETRANGE("PurchInv Line"."New NPWP","New NPWP");

                                                                  IF "PurchInv Line".FINDFIRST THEN BEGIN
                                                                    PurchCrMemoHeader.RESET;
                                                                    PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader."Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
                                                                    PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader."Applies-to Doc. No.","PurchInv Line"."Document No.");
                                                                    PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader.ActualCreditMemo,FALSE);
                                                                    IF NOT (PurchCrMemoHeader.FINDFIRST) THEN
                                                                      ERROR(Text1500064,"PurchInv Line"."Line No.","PurchInv Line"."Document No.");
                                                                  END;

                                                                  //IF "PurchInv Line".FINDFIRST AND ("Document Type"="Document Type"::Invoice)THEN
                                                                  //  ERROR(Text1500064,"PurchInv Line"."Line No.","PurchInv Line"."Document No.");


                                                                  PurchLine.RESET;
                                                                  PurchLine.SETCURRENTKEY(PurchLine."Tax Invoice No.");
                                                                  //PurchLine.SETRANGE(PurchLine."Tax Invoice No.","Tax Invoice No.");  //>>07032013/PC/CR#014 Code commented for CR#014
                                                                  PurchLine.SETFILTER(PurchLine."Tax Invoice No.",'%1 |%2',"Tax Invoice No.","Tax_Inv_No._Copy_2"); //>>07032013/PC/CR#014
                                                                  PurchLine.SETFILTER(PurchLine."Document No.",'<>%1',"Document No.");
                                                                  PurchLine.SETFILTER(PurchLine."Document Type",'%1',"Document Type");
                                                                  PurchLine.SETFILTER(PurchLine."New NPWP",'%1',"New NPWP");
                                                                  IF PurchLine.FINDFIRST THEN
                                                                    ERROR(Text1500063,PurchLine."Line No.",PurchLine."Document No.");

                                                                  //>>07032013/PC/CR#014
                                                                  "Tax_Inv_No._4thDigit" := COPYSTR("Tax Invoice No.",5,1);
                                                                  IF ((MasterSetup."Enable New Tax Inv. No. Rule")
                                                                      AND ("Tax_Inv_No._4thDigit" = '9')
                                                                      AND ("Tax Invoice Date" > DMY2DATE(31,3,2013))) THEN
                                                                     "CheckDuplicacyTaxInvNo."("Tax_Inv_No._Copy_2");
                                                                  //<<07032013/PC/CR#014
                                                                END;


                                                                //Code for Duplicacy of Tax Invoice No.

                                                                END; // End Of Top One IF

                                                                //YIMMNTT
                                                              END;

                                                   Description=YIMMNTT,YIMMNTCH,CR014 }
    { 50005;  ;Tax Invoice Date    ;Date          ;OnValidate=VAR
                                                                GracePeriod@1000000003 : Text[30];
                                                                CurrDate@1000000002 : Integer;
                                                                DateofExpiry@1000000001 : Date;
                                                                MasterSetupRec@1000000000 : Record 50008;
                                                                Text50001@1000000004 : TextConst 'ENU=The Tax Invoice Date %1 has Expired';
                                                                OrderAddressCode@1102159001 : Record 224;
                                                                PurchaseHeader@1102159002 : Record 38;
                                                              BEGIN
                                                                GracePeriod :=' ';
                                                                CurrDate :=0;
                                                                DateofExpiry :=0D;
                                                                MasterSetupRec.GET;
                                                                MasterSetup.GET;
                                                                GracePeriod := FORMAT(MasterSetupRec."Grace Period for WHT Closing")+'D';
                                                                CurrDate := DATE2DMY(TODAY,1);
                                                                IF CurrDate <= MasterSetupRec."Grace Period for WHT Closing" THEN
                                                                  BEGIN
                                                                  GracePeriod := '-4M'+'-'+FORMAT(CurrDate-1)+'D';
                                                                  //MESSAGE('%1',GracePeriod);
                                                                  DateofExpiry := CALCDATE(GracePeriod,TODAY);
                                                                  //MESSAGE('%1',DateofExpiry);
                                                                   IF "Tax Invoice Date" < DateofExpiry THEN
                                                                    ERROR(Text50001,"Tax Invoice Date");
                                                                  END ELSE BEGIN
                                                                  GracePeriod := '-3M'+'-'+FORMAT(CurrDate-1)+'D';
                                                                  //MESSAGE('%1',GracePeriod);
                                                                  DateofExpiry := CALCDATE(GracePeriod,TODAY);
                                                                  //MESSAGE('%1',DateofExpiry);
                                                                   IF "Tax Invoice Date" < DateofExpiry THEN
                                                                    ERROR(Text50001,"Tax Invoice Date");
                                                                  END;


                                                                //>>07032013/PC/CR#014

                                                                IF ("Reason Code"=MasterSetup."Reason (Normal)") AND ("Document Type"="Document Type"::Invoice) THEN
                                                                BEGIN

                                                                  IF "Tax Invoice No." <> '' THEN
                                                                  BEGIN

                                                                    PurchaseHeader.RESET;
                                                                    PurchaseHeader.GET("Document Type","Document No.");
                                                                    CLEAR(CheckSpecial);

                                                                    IF (PurchaseHeader."New NPWP No"<>'') THEN
                                                                      IF OrderAddressCode.GET(PurchaseHeader."Buy-from Vendor No.","New NPWP") THEN
                                                                        CheckSpecial:=OrderAddressCode.SpecialVendor;



                                                                    "Tax_Inv_No._4thDigit" := COPYSTR("Tax Invoice No.",5,1);
                                                                    IF ((MasterSetup."Enable New Tax Inv. No. Rule")
                                                                        AND ("Tax_Inv_No._4thDigit" = '9')
                                                                        AND ("Tax Invoice Date" > DMY2DATE(31,3,2013))) THEN
                                                                    BEGIN
                                                                      IF NOT CheckSpecial THEN
                                                                        FormatConverter()
                                                                      ELSE
                                                                        "Tax_Inv_No._Copy_2" := "Tax Invoice No.";
                                                                      "CheckDuplicacyTaxInvNo."("Tax_Inv_No._Copy_2");
                                                                    END;
                                                                  END;
                                                                END;

                                                                //<<07032013/PC/CR#014
                                                              END;

                                                   Description=YIMMNTT,CR014 }
    { 50006;  ;Narration           ;Text250       ;Description=YIMMNTT }
    { 50007;  ;Approve             ;Boolean       ;Description=YIMMNTAP }
    { 50008;  ;Tax Amount (Vat)    ;Decimal       ;Description=YIMMNTAP }
    { 50009;  ;Order Address Code  ;Code20        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                PayToVend@1000 : Record 23;
                                                              BEGIN
                                                                //YIMM
                                                                "WHT Product Posting Group" := '';
                                                                //<<YIMMAKSWHT
                                                                IF "Order Address Code"<>'' THEN
                                                                  "Is Order Address Code":=TRUE
                                                                ELSE
                                                                  "Is Order Address Code":=FALSE;
                                                                //YIMMAKSWHT>>

                                                                VALIDATE("New NPWP","Order Address Code");//YIMMCH
                                                              END;

                                                   CaptionML=ENU=NPWP No.;
                                                   Description=YIMMNNPWP }
    { 50012;  ;Reason Code         ;Code10        ;TableRelation="Reason Code".Code;
                                                   Description=YIMMARC }
    { 50013;  ;AreaCode            ;Code20        ;TableRelation="AREA CODE".No;
                                                   Description=YIMMNWHTR }
    { 50014;  ;Interfaced          ;Boolean       ;Description=Interface }
    { 50015;  ;Original Tax Inv. No.;Code30       ;Description=FIELD ADDED FOR CAPTURING THE ORIGINAL TAX INVOICE NO. }
    { 50016;  ;Is Order Address Code;Boolean      ;Editable=No }
    { 50017;  ;New NPWP            ;Code20        ;OnValidate=BEGIN
                                                                //YIMMCH
                                                                IF "New NPWP"<>'' THEN
                                                                  "Is Order Address Code":=TRUE
                                                                ELSE
                                                                  "Is Order Address Code":=FALSE;
                                                              END;

                                                   Description=YIMMCH }
    { 50018;  ;FA NO               ;Code20        ;TableRelation="Fixed Asset".No.;
                                                   Description=Field To Capture  FA NO. for maintainance }
    { 50019;  ;FA Class Code       ;Code10        ;TableRelation="FA Class";
                                                   CaptionML=ENU=FA Class Code;
                                                   Description=field added for capturing class code for PO of FA. }
    { 50020;  ;Export Type         ;Code20        ;OnValidate=VAR
                                                                ExprtType@1000000000 : Code[20];
                                                              BEGIN
                                                                {ExprtType:=Rec."Export Type";
                                                                IF ExprtAccRange.GET("Export Type") THEN
                                                                 BEGIN
                                                                  VALIDATE("No.",ExprtAccRange."Account Range");
                                                                  "Export Type":=ExprtType;
                                                                 END;
                                                                 }
                                                              END;

                                                   Description=Field Added w.r.t CR No. CR# : NIFMYIM018/FI/100916/002 }
    { 50022;  ;GL AccRange         ;Code10        ;Description=Field Added w.r.t CR No. CR# : NIFMYIM018/FI/100916/002 }
    { 51020;  ;Item Category       ;Option        ;OptionCaptionML=ENU=" ,Localized,Pass Through";
                                                   OptionString=[ ,Localized,Pass Through];
                                                   Description=Field added for TBI Item Category Code }
    { 52000;  ;Quote No ( Project No.);Text50     ;TableRelation="All Quotes"."Quote No." WHERE (Status=FILTER(Released));
                                                   Description=For Melco to Capture the Quote No. }
    { 52001;  ;ItemCode            ;Code20        ;TableRelation="Item Master"."Item No." WHERE (Source Code=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                MasterSetup@1000000000 : Record 50008;
                                                                ItemMaster@1000000001 : Record 60006;
                                                                PurchHeader@1000000002 : Record 38;
                                                              BEGIN
                                                                MasterSetup.GET;

                                                                IF (COMPANYNAME=MasterSetup."Company Name MELCO") THEN
                                                                 BEGIN

                                                                  PurchHeader.RESET;
                                                                  IF PurchHeader.GET("Document Type","Document No.") THEN;


                                                                  ItemMaster.SETCURRENTKEY(ItemMaster."Item No.",ItemMaster."Source Type",ItemMaster."Source Code");
                                                                  ItemMaster.SETRANGE(ItemMaster."Item No.",ItemCode);
                                                                  ItemMaster.SETRANGE(ItemMaster."Source Code",PurchHeader."Buy-from Vendor No.");

                                                                  IF ItemMaster.FINDFIRST THEN
                                                                      BEGIN
                                                                      "Description 2":=ItemMaster.Description;
                                                                      "Direct Unit Cost":=ItemMaster."Unit Price";
                                                                      END;
                                                                 END;
                                                              END;

                                                   Description=For Item Master-Melco PO }
    { 52002;  ;PONumber            ;Code20        ;Description=Field To Flow PO Number }
    { 52004;  ;InvoicedQty         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purch. Inv. Line".Quantity WHERE (ItemCode=FIELD(ItemCode),
                                                                                                      PONumber=FIELD(Document No.))) }
    { 52005;  ;Surat Jalan No      ;Text100        }
    { 52006;  ;Surat Jalan Date    ;Date           }
    { 52007;  ;Loc Code            ;Code20        ;TableRelation="Loc Master"."Loc Code";
                                                   CaptionML=ENU=Delivery Site;
                                                   Description=YEID-Location-AM }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ENA=Routing No.] }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Routing No.");

                                                                ProdOrderRtngLine.GET(
                                                                  ProdOrderRtngLine.Status::Released,
                                                                  "Prod. Order No.",
                                                                  "Routing Reference No.",
                                                                  "Routing No.",
                                                                  "Operation No.");

                                                                ProdOrderRtngLine.TESTFIELD(
                                                                  Type,
                                                                  ProdOrderRtngLine.Type::"Work Center");

                                                                "Expected Receipt Date" := ProdOrderRtngLine."Ending Date";
                                                                VALIDATE("Work Center No.",ProdOrderRtngLine."No.");
                                                                VALIDATE("Direct Unit Cost",ProdOrderRtngLine."Direct Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Operation No.;
                                                              ENA=Operation No.];
                                                   Editable=No }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Work Center No.",'');
                                                                IF "Work Center No." = '' THEN
                                                                  EXIT;

                                                                WorkCenter.GET("Work Center No.");
                                                                "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
                                                                "VAT Prod. Posting Group" := '';
                                                                IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                  "VAT Prod. Posting Group" := GenProdPostingGrp."Def. VAT Prod. Posting Group";
                                                                VALIDATE("VAT Prod. Posting Group");

                                                                "Overhead Rate" := WorkCenter."Overhead Rate";
                                                                VALIDATE("Indirect Cost %",WorkCenter."Indirect Cost %");

                                                                CreateDim(
                                                                  DATABASE::"Work Center","Work Center No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Work Center No.;
                                                              ENA=Work Centre No.];
                                                   Editable=No }
    { 99000753;;Finished           ;Boolean       ;CaptionML=[ENU=Finished;
                                                              ENA=Finished] }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=[ENU=Prod. Order Line No.;
                                                              ENA=Prod. Order Line No.];
                                                   Editable=No }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ENA=Overhead Rate];
                                                   DecimalPlaces=0:5 }
    { 99000756;;MPS Order          ;Boolean       ;CaptionML=[ENU=MPS Order;
                                                              ENA=MPS Order] }
    { 99000757;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReservePurchLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ENA=Planning Flexibility];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ENA=Unlimited,None];
                                                   OptionString=Unlimited,None }
    { 99000758;;Safety Lead Time   ;DateFormula   ;OnValidate=BEGIN
                                                                VALIDATE("Inbound Whse. Handling Time");
                                                              END;

                                                   CaptionML=[ENU=Safety Lead Time;
                                                              ENA=Safety Lead Time] }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=[ENU=Routing Reference No.;
                                                              ENA=Routing Reference No.] }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT;
                                                   MaintainSIFTIndex=No }
    {    ;Kwitansi No.,Document No.,Line No.,Document Type;
                                                   Clustered=Yes }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Pay-to Vendor No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY);
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   KeyGroups=Item(Dim);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Pay-to Vendor No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY);
                                                   KeyGroups=Vend(Dim);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No.;
                                                   KeyGroups=SOP(Blank) }
    {    ;Document Type,Type,Prod. Order No.,Prod. Order Line No.,Routing No.,Operation No.;
                                                   KeyGroups=Item(MFG) }
    {    ;Document Type,Document No.,Tax Invoice No.;
                                                   SumIndexFields=Line Amount,Tax Amount (Vat) }
    {    ;Document Type,Receipt No.,Receipt Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Expected Receipt Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Job No.,Job Task No.      ;SumIndexFields=Outstanding Amt. Ex. VAT (LCY),A. Rcd. Not Inv. Ex. VAT (LCY) }
    {    ;Document Type,Document No.,Type,No.      }
    {    ;Document Type,Document No.,WHT Business Posting Group,WHT Product Posting Group;
                                                   SumIndexFields=Prepmt. Amt. Inv.,Prepmt Amt to Deduct }
    {    ;Tax Invoice No.                          }
    {    ;No.                                      }
    {    ;Reason Code,AreaCode,WHT Business Posting Group,WHT Product Posting Group }
    {    ;FA Class Code,No.                        }
    {    ;Document No.,Item Category               }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document No.,Loc Code,Line No.           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ENA=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=You cannot change %1 because the order line is associated with sales order %2.;ENA=You cannot change %1 because the order line is associated with sales order %2.';
      Text002@1002 : TextConst 'ENU=Prices including VAT cannot be calculated when %1 is %2.;ENA=Prices including GST cannot be calculated when %1 is %2.';
      Text003@1003 : TextConst 'ENU=You cannot purchase resources.;ENA=You cannot purchase resources.';
      Text004@1004 : TextConst 'ENU=must not be less than %1;ENA=must not be less than %1';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 units.;ENA=You cannot invoice more than %1 units.';
      Text007@1006 : TextConst 'ENU=You cannot invoice more than %1 base units.;ENA=You cannot invoice more than %1 base units.';
      Text008@1007 : TextConst 'ENU=You cannot receive more than %1 units.;ENA=You cannot receive more than %1 units.';
      Text009@1008 : TextConst 'ENU=You cannot receive more than %1 base units.;ENA=You cannot receive more than %1 base units.';
      Text010@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ENA=You cannot change %1 when %2 is %3.';
      Text011@1010 : TextConst 'ENU=" must be 0 when %1 is %2";ENA=" must be 0 when %1 is %2"';
      Text012@1011 : TextConst 'ENU="must not be specified when %1 = %2";ENA="must not be specified when %1 = %2"';
      Text016@1014 : TextConst 'ENU="%1 is required for %2 = %3.";ENA="%1 is required for %2 = %3."';
      Text017@1015 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ENA=\The entered information may be disregarded by warehouse operations.';
      Text018@1016 : TextConst 'ENU=%1 %2 is earlier than the work date %3.;ENA=%1 %2 is earlier than the work date %3.';
      Text020@1018 : TextConst 'ENU=You cannot return more than %1 units.;ENA=You cannot return more than %1 units.';
      Text021@1019 : TextConst 'ENU=You cannot return more than %1 base units.;ENA=You cannot return more than %1 base units.';
      Text022@1020 : TextConst 'ENU=You cannot change %1, if item charge is already posted.;ENA=You cannot change %1, if item charge is already posted.';
      Text023@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENA=You cannot change the %1 when the %2 has been filled in.';
      Text029@1077 : TextConst 'ENU=must be positive.;ENA=must be positive.';
      Text030@1076 : TextConst 'ENU=must be negative.;ENA=must be negative.';
      Text031@1056 : TextConst 'ENU=You cannot define item tracking on this line because it is linked to production order %1.;ENA=You cannot define item tracking on this line because it is linked to production order %1.';
      Text032@1017 : TextConst 'ENU=%1 must not be greater than the sum of %2 and %3.;ENA=%1 must not be greater than the sum of %2 and %3.';
      Text033@1078 : TextConst 'ENU="Warehouse ";ENA="Warehouse "';
      Text034@1079 : TextConst 'ENU="Inventory ";ENA="Inventory "';
      Text035@1048 : TextConst 'ENU=%1 units for %2 %3 have already been returned or transferred. Therefore, only %4 units can be returned.;ENA=%1 units for %2 %3 have already been returned or transferred. Therefore, only %4 units can be returned.';
      Text036@1081 : TextConst 'ENU=You must cancel the existing approval for this document to be able to change the %1 field.;ENA=You must cancel the existing approval for this document to be able to change the %1 field.';
      Text037@1082 : TextConst 'ENU=cannot be %1.;ENA=cannot be %1.';
      Text038@1083 : TextConst 'ENU=cannot be less than %1.;ENA=cannot be less than %1.';
      Text039@1084 : TextConst 'ENU=cannot be more than %1.;ENA=cannot be more than %1.';
      Text040@1090 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ENA=You must use form %1 to enter %2, if item tracking is used.';
      Text99000000@1021 : TextConst 'ENU=You cannot change %1 when the purchase order is associated to a production order.;ENA=You cannot change %1 when the purchase order is associated to a production order.';
      PurchHeader@1022 : Record 38;
      PurchLine2@1023 : Record 39;
      TempPurchLine@1024 : Record 39;
      GLAcc@1025 : Record 15;
      Item@1026 : Record 27;
      Currency@1027 : Record 4;
      CurrExchRate@1028 : Record 330;
      ItemTranslation@1029 : Record 30;
      SalesOrderLine@1033 : Record 37;
      VATPostingSetup@1034 : Record 325;
      StdTxt@1035 : Record 7;
      FA@1036 : Record 5600;
      FADeprBook@1037 : Record 5612;
      FASetup@1038 : Record 5603;
      GenBusPostingGrp@1039 : Record 250;
      GenProdPostingGrp@1040 : Record 251;
      ReservEntry@1041 : Record 337;
      UnitOfMeasure@1043 : Record 204;
      ItemCharge@1044 : Record 5800;
      ItemChargeAssgntPurch@1045 : Record 5805;
      SKU@1046 : Record 5700;
      WorkCenter@1047 : Record 99000754;
      PurchasingCode@1049 : Record 5721;
      InvtSetup@1050 : Record 313;
      Location@1051 : Record 14;
      GLSetup@1074 : Record 98;
      ReturnReason@1068 : Record 6635;
      ItemVend@1031 : Record 99;
      CalChange@1062 : Record 7602;
      JobJnlLine@1071 : TEMPORARY Record 210;
      Reservation@1052 : Page 498;
      SalesTaxCalculate@1057 : Codeunit 398;
      ReservEngineMgt@1058 : Codeunit 99000831;
      ReservePurchLine@1059 : Codeunit 99000834;
      UOMMgt@1060 : Codeunit 5402;
      AddOnIntegrMgt@1061 : Codeunit 5403;
      DimMgt@1064 : Codeunit 408;
      DistIntegration@1065 : Codeunit 5702;
      NonstockItemMgt@1066 : Codeunit 5703;
      WhseValidateSourceLine@1067 : Codeunit 5777;
      LeadTimeMgt@1069 : Codeunit 5404;
      PurchPriceCalcMgt@1030 : Codeunit 7010;
      CalendarMgmt@1032 : Codeunit 7600;
      CheckDateConflict@1013 : Codeunit 99000815;
      TrackingBlocked@1070 : Boolean;
      StatusCheckSuspended@1073 : Boolean;
      GLSetupRead@1075 : Boolean;
      UnitCostCurrency@1063 : Decimal;
      UpdateFromVAT@1087 : Boolean;
      Text042@1088 : TextConst 'ENU=You cannot return more than the %1 units that you have received for %2 %3.;ENA=You cannot return more than the %1 units that you have received for %2 %3.';
      Text043@1089 : TextConst 'ENU=must be positive when %1 is not 0.;ENA=must be positive when %1 is not 0.';
      Text044@1080 : TextConst 'ENU=You cannot change %1 because this purchase order is associated with %2 %3.;ENA=You cannot change %1 because this purchase order is associated with %2 %3.';
      Text046@1091 : TextConst 'ENU=Microsoft Dynamics NAV will not update %1 when changing %2 because a prepayment invoice has been posted. Do you want to continue?;ENA=Microsoft Dynamics NAV will not update %1 when changing %2 because a prepayment invoice has been posted. Do you want to continue?';
      Text047@1092 : TextConst 'ENU=%1 can only be set when %2 is set.;ENA=%1 can only be set when %2 is set.';
      Text048@1093 : TextConst 'ENU=%1 cannot be changed when %2 is set.;ENA=%1 cannot be changed when %2 is set.';
      PrePaymentLineAmountEntered@1042 : Boolean;
      Text049@1085 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ENA=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text050@1086 : TextConst 'ENU=Cancelled.;ENA=Cancelled.';
      Text051@1012 : TextConst 'ENU=must have the same sign as the receipt;ENA=must have the same sign as the receipt';
      Text052@1053 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in receipt %1.;ENA=The quantity that you are trying to invoice is greater than the quantity in receipt %1.';
      Text053@1054 : TextConst 'ENU=must have the same sign as the return shipment;ENA=must have the same sign as the return shipment';
      Text054@1055 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.;ENA=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.';
      AddCurrency@1500067 : Record 4;
      BASManagement@1500000 : Codeunit 11601;
      Text1500000@1500063 : TextConst 'ENU=ONE;ENA=ONE';
      Text1500001@1500062 : TextConst 'ENU=TWO;ENA=TWO';
      Text1500002@1500061 : TextConst 'ENU=THREE;ENA=THREE';
      Text1500003@1500060 : TextConst 'ENU=FOUR;ENA=FOUR';
      Text1500004@1500059 : TextConst 'ENU=FIVE;ENA=FIVE';
      Text1500005@1500058 : TextConst 'ENU=SIX;ENA=SIX';
      Text1500006@1500057 : TextConst 'ENU=SEVEN;ENA=SEVEN';
      Text1500007@1500056 : TextConst 'ENU=EIGHT;ENA=EIGHT';
      Text1500008@1500055 : TextConst 'ENU=NINE;ENA=NINE';
      Text1500009@1500054 : TextConst 'ENU=TEN;ENA=TEN';
      Text1500010@1500053 : TextConst 'ENU=ELEVEN;ENA=ELEVEN';
      Text1500011@1500052 : TextConst 'ENU=TWELVE;ENA=TWELVE';
      Text1500012@1500051 : TextConst 'ENU=THIRTEEN;ENA=THIRTEEN';
      Text1500013@1500050 : TextConst 'ENU=FOURTEEN;ENA=FOURTEEN';
      Text1500014@1500049 : TextConst 'ENU=FIFTEEN;ENA=FIFTEEN';
      Text1500015@1500048 : TextConst 'ENU=SIXTEEN;ENA=SIXTEEN';
      Text1500016@1500047 : TextConst 'ENU=SEVENTEEN;ENA=SEVENTEEN';
      Text1500017@1500046 : TextConst 'ENU=EIGHTEEN;ENA=EIGHTEEN';
      Text1500018@1500045 : TextConst 'ENU=NINETEEN;ENA=NINETEEN';
      Text1500019@1500044 : TextConst 'ENU=TWENTY;ENA=TWENTY';
      Text1500020@1500043 : TextConst 'ENU=THIRTY;ENA=THIRTY';
      Text1500021@1500042 : TextConst 'ENU=FORTY;ENA=FORTY';
      Text1500022@1500041 : TextConst 'ENU=FIFTY;ENA=FIFTY';
      Text1500023@1500040 : TextConst 'ENU=SIXTY;ENA=SIXTY';
      Text1500024@1500039 : TextConst 'ENU=SEVENTY;ENA=SEVENTY';
      Text1500025@1500038 : TextConst 'ENU=EIGHTY;ENA=EIGHTY';
      Text1500026@1500037 : TextConst 'ENU=NINETY;ENA=NINETY';
      Text1500027@1500036 : TextConst 'ENU=THOUSAND;ENA=THOUSAND';
      Text1500028@1500035 : TextConst 'ENU=MILLION;ENA=MILLION';
      Text1500029@1500034 : TextConst 'ENU=BILLION;ENA=BILLION';
      Text1500030@1500033 : TextConst 'ENU=NUENG;ENA=NUENG';
      Text1500031@1500032 : TextConst 'ENU=SAWNG;ENA=SAWNG';
      Text1500032@1500031 : TextConst 'ENU=SARM;ENA=SARM';
      Text1500033@1500030 : TextConst 'ENU=SI;ENA=SI';
      Text1500034@1500029 : TextConst 'ENU=HA;ENA=HA';
      Text1500035@1500028 : TextConst 'ENU=HOK;ENA=HOK';
      Text1500036@1500027 : TextConst 'ENU=CHED;ENA=CHED';
      Text1500037@1500026 : TextConst 'ENU=PAED;ENA=PAED';
      Text1500038@1500025 : TextConst 'ENU=KOW;ENA=KOW';
      Text1500039@1500024 : TextConst 'ENU=SIB;ENA=SIB';
      Text1500040@1500023 : TextConst 'ENU=SIB-ED;ENA=SIB-ED';
      Text1500041@1500022 : TextConst 'ENU=SIB-SAWNG;ENA=SIB-SAWNG';
      Text1500042@1500021 : TextConst 'ENU=SIB-SARM;ENA=SIB-SARM';
      Text1500043@1500020 : TextConst 'ENU=SIB-SI;ENA=SIB-SI';
      Text1500044@1500019 : TextConst 'ENU=SIB-HA;ENA=SIB-HA';
      Text1500045@1500018 : TextConst 'ENU=SIB-HOK;ENA=SIB-HOK';
      Text1500046@1500017 : TextConst 'ENU=SIB-CHED;ENA=SIB-CHED';
      Text1500047@1500016 : TextConst 'ENU=SIB-PAED;ENA=SIB-PAED';
      Text1500048@1500015 : TextConst 'ENU=SIB-KOW;ENA=SIB-KOW';
      Text1500049@1500014 : TextConst 'ENU=YI-SIB;ENA=YI-SIB';
      Text1500050@1500013 : TextConst 'ENU=SARM-SIB;ENA=SARM-SIB';
      Text1500051@1500012 : TextConst 'ENU=SI-SIB;ENA=SI-SIB';
      Text1500052@1500011 : TextConst 'ENU=HA-SIB;ENA=HA-SIB';
      Text1500053@1500010 : TextConst 'ENU=HOK-SIB;ENA=HOK-SIB';
      Text1500054@1500009 : TextConst 'ENU=CHED-SIB;ENA=CHED-SIB';
      Text1500055@1500008 : TextConst 'ENU=PAED-SIB;ENA=PAED-SIB';
      Text1500056@1500007 : TextConst 'ENU=KOW-SIB;ENA=KOW-SIB';
      Text1500057@1500006 : TextConst 'ENU=PHAN;ENA=PHAN';
      Text1500058@1500005 : TextConst 'ENU=LAAN?;ENA=LAAN?';
      Text1500059@1500004 : TextConst 'ENU=PHAN-LAAN?;ENA=PHAN-LAAN?';
      Text1500060@1500003 : TextConst 'ENU=HUNDRED;ENA=HUNDRED';
      Text1500061@1500002 : TextConst 'ENU=ZERO;ENA=ZERO';
      Text1500062@1500001 : TextConst 'ENU=AND;ENA=AND';
      OnesText@1500066 : ARRAY [20] OF Text[30];
      TensText@1500065 : ARRAY [10] OF Text[30];
      ExponentText@1500064 : ARRAY [5] OF Text[30];
      CurrencyFactor@1500068 : Decimal;
      VATAmt@1500070 : Decimal;
      VATBase@1500071 : Decimal;
      DataConflictQst@1094 : TextConst 'ENU=The change creates a date conflict with existing reservations. Do you want to continue?;ENA=The change creates a date conflict with existing reservations. Do you want to continue?';
      "PurchInv Line"@1000000000 : Record 123;
      Text1500063@1000000003 : TextConst 'ENU=''Tax Invoice already exist in Purchase Line No :'' %1''  Of Document No : ''%2 ''';
      Text1500064@1000000002 : TextConst 'ENU=''Tax Invoice already exist in Posted Purchase Line No :'' %1''  Of Document No : ''%2 ''';
      PurchLine@1000000004 : Record 39;
      WHT_PROD_Posting_Group@1000000001 : Record 28041;
      MasterSetup@1000000005 : Record 50008;
      DimVal@1000000006 : Record 349;
      GLAc@1000000007 : Record 15;
      GLSET@1000000008 : Record 98;
      ExprtAccRange@1000000009 : Record 50013;
      GLAcc1@1000000010 : Record 15;
      Text1500065@1000000011 : TextConst 'ENU=Invoice Quantity can Not Be Greater then the %1';
      "//>>CR#014 Var"@1102159006 : Integer;
      "Tax_Inv_No._Copy_2"@1102159004 : Code[20];
      "Tax_Inv_No._4thDigit"@1102159005 : Code[1];
      CheckSpecial@1102159009 : Boolean;
      "//<<CR#014 Var"@1102159001 : Integer;
      Text1500066@1102159003 : TextConst 'ENU=''Tax Invoice No. already exists in VAT %1 Entry Of Purchase Invoice Document No : ''%2 ''';
      Text1500067@1102159002 : TextConst 'ENU=Tax Invoice No. already exists in Sales Invoice with Document No : ''%1 ''';
      "Text01-ErrorPurchCrMemo"@1102159007 : TextConst 'ENU=Tax Invoice No. already exists in Purch.Tax Cr. Memo with Document No : ''%1 ''';
      "Text02-ErrorSaleCrMemo"@1102159008 : TextConst 'ENU=Tax Invoice No. already exists in Sales Cr. Memo with Document No : ''%1 ''';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Shipped (Base)";
        "Return Qty. Shipped Not Invd." := "Return Qty. Shipped" - "Quantity Invoiced";
        "Ret. Qty. Shpd Not Invd.(Base)" := "Return Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Received (Base)";
        "Qty. Rcd. Not Invoiced" := "Quantity Received" - "Quantity Invoiced";
        "Qty. Rcd. Not Invoiced (Base)" := "Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END;
      "Completely Received" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@19();
    VAR
      AmountInclVAT@1000 : Decimal;
      AmountInclVATACY@1500000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Amt. Rcd. Not Invoiced" := 0;
        "Amt. Rcd. Not Invoiced (LCY)" := 0;
        "Return Shpd. Not Invd." := 0;
        "Return Shpd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetPurchHeader;
        IF PurchHeader.Status = PurchHeader.Status::Released THEN BEGIN
          AmountInclVAT := "Amount Including VAT";
          AmountInclVATACY := "Amount Including VAT (ACY)";
        END ELSE
          IF PurchHeader."Prices Including VAT" THEN
            AmountInclVAT := "Line Amount" - "Inv. Discount Amount"
          ELSE
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
              IF "Use Tax" THEN
                AmountInclVAT := "Line Amount" - "Inv. Discount Amount"
              ELSE
                AmountInclVAT :=
                  "Line Amount" - "Inv. Discount Amount" +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                      "Line Amount" - "Inv. Discount Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                    Currency."Amount Rounding Precision")
            END ELSE BEGIN
              AmountInclVAT :=
                ROUND(
                  ("Line Amount" - "Inv. Discount Amount") *
                  (1 + "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100)),
                  Currency."Amount Rounding Precision");
              IF (PurchHeader."Vendor Exchange Rate (ACY)" <> 0) OR
                 ((PurchHeader."Vendor Exchange Rate (ACY)" = 1) AND
                  ("Currency Code" <> GLSetup."Additional Reporting Currency"))
              THEN
                AmountInclVATACY :=
                  ROUND(
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                      CurrExchRate.ExchangeAmtFCYToLCY(
                        PurchHeader."Posting Date","Currency Code",AmountInclVAT,
                        PurchHeader."Currency Factor"),CurrencyFactor),
                    AddCurrency."Amount Rounding Precision");
            END;
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Shpd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Shipped Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Amt. Rcd. Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToReceive@15();
    BEGIN
      "Qty. to Receive" := "Outstanding Quantity";
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToShip@5803();
    BEGIN
      "Return Qty. to Ship" := "Outstanding Quantity";
      "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@46();
    BEGIN
      "Appl.-to Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped" + "Return Qty. to Ship" - "Quantity Invoiced");

      EXIT("Quantity Received" + "Qty. to Receive" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@17() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped (Base)" + "Return Qty. to Ship (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Received (Base)" + "Qty. to Receive (Base)" - "Qty. Invoiced (Base)");
    END;

    PROCEDURE CalcInvDiscToInvoice@33();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "Amount Including VAT (ACY)" := "Amount Including VAT (ACY)" - "VAT Difference (ACY)";
        "VAT Difference" := 0;
        "VAT Difference (ACY)" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@7();
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Prod. Order No.",'');
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE(Positive,TRUE);
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
        VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
    END;

    PROCEDURE SetPurchHeader@12(NewPurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := NewPurchHeader;

      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        Currency.GET(PurchHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetPurchHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> PurchHeader."Document Type") OR ("Document No." <> PurchHeader."No.") THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF PurchHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          PurchHeader.TESTFIELD("Currency Factor");
          Currency.GET(PurchHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
        GetGLSetup;
        CLEAR(CurrencyFactor);
        IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
          AddCurrency.GET(GLSetup."Additional Reporting Currency");
          IF (PurchHeader."Vendor Exchange Rate (ACY)" <> 0) AND (PurchHeader."Currency Code" = '') THEN
            CurrencyFactor :=
              CurrExchRate.ExchangeRateFactorFRS21(
                GetDate,GLSetup."Additional Reporting Currency",PurchHeader."Vendor Exchange Rate (ACY)")
          ELSE
            CurrencyFactor :=
              CurrExchRate.ExchangeRate(
                GetDate,GLSetup."Additional Reporting Currency");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@4();
    BEGIN
      TESTFIELD("No.");
      IF Item."No." <> "No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE UpdateDirectUnitCost@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
        UpdateAmounts;

      IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
         ("Prod. Order No." <> '')
      THEN
        EXIT;

      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,CalledByFieldNo);
        PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
        VALIDATE("Direct Unit Cost");

        IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
          SetVendorItemNo;
      END;
    END;

    PROCEDURE UpdateUnitCost@5();
    VAR
      DiscountAmountPerQty@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      GetGLSetup;
      IF Quantity = 0 THEN
        DiscountAmountPerQty := 0
      ELSE
        DiscountAmountPerQty :=
          ROUND(("Line Discount Amount" + "Inv. Discount Amount") / Quantity,
            GLSetup."Unit-Amount Rounding Precision");

      IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN
        "Unit Cost" := 0
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) / (1 + "VAT %" / 100) +
            GetOverheadRateFCY - "VAT Difference"
        ELSE
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) +
            GetOverheadRateFCY;

      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        "Unit Cost (LCY)" :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            GetDate,"Currency Code",
            "Unit Cost",PurchHeader."Currency Factor");
      END ELSE
        "Unit Cost (LCY)" := "Unit Cost";

      IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
        GetItem;
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
          IF GetSKU THEN
            "Unit Cost (LCY)" := SKU."Unit Cost" * "Qty. per Unit of Measure"
          ELSE
            "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
        END;
      END;

      "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
      IF PurchHeader."Currency Code" <> '' THEN
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");

      UpdateSalesCost;

      IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
        CreateTempJobJnlLine(FALSE);
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
        UpdateJobPrices;
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
    BEGIN
      IF CurrFieldNo <> FIELDNO("Allow Invoice Disc.") THEN
        TESTFIELD(Type);
      GetPurchHeader;

      IF "Line Amount" <> xRec."Line Amount" THEN
        "VAT Difference" := 0;
      IF "Line Amount" <> ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" :=
          ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount";
        IF (PurchHeader."Vendor Exchange Rate (ACY)" <> 0) OR
           ((PurchHeader."Vendor Exchange Rate (ACY)" = 1) AND
            (PurchHeader."Currency Code" <> GLSetup."Additional Reporting Currency"))
        THEN
          "Amount (ACY)" :=
            ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
                PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                    PurchHeader."Posting Date",PurchHeader."Currency Code","Line Amount",
                    PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
              AddCurrency."Amount Rounding Precision");
        "VAT Difference" := 0;
        "VAT Difference (ACY)" := 0;
      END;

      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
          IF "Direct Unit Cost" < 0 THEN
            FIELDERROR("Direct Unit Cost",STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
        END;
        IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            IF NOT CalculateFullGST("Prepmt. Line Amount") THEN
              "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text037,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END;
      END;
      UpdateVATAmounts;

      InitOutstandingAmount;

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;
      // UPG09R2.begin

      //YIMMNTAPST
      VALIDATE("Tax Amount (Vat)",("Outstanding Amount" -"Line Amount"));
      //YIMMNTAPEN


      //YIMMRWHTABSORB

      VALIDATE("WHT Absorb Base","Line Amount");
      //YIMMRWHTABSORB
      // UPG09R2.end
      CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      PurchLine2@1000 : Record 39;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
      TotalLineAmountACY@1500002 : Decimal;
      TotalAmountInclVATACY@1500000 : Decimal;
    BEGIN
      GetPurchHeader;
      PurchLine2.SETRANGE("Document Type","Document Type");
      PurchLine2.SETRANGE("Document No.","Document No.");
      PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0);
      PurchLine2.SETRANGE("VAT Identifier","VAT Identifier");
      PurchLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
        "VAT Base (ACY)" := 0;
        "Amount Including VAT (ACY)" := 0;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF PurchLine2.FINDSET THEN
            REPEAT
              TotalLineAmount := TotalLineAmount + PurchLine2."Line Amount";
              TotalInvDiscAmount := TotalInvDiscAmount + PurchLine2."Inv. Discount Amount";
              TotalAmount := TotalAmount + PurchLine2.Amount;
              TotalAmountInclVAT := TotalAmountInclVAT + PurchLine2."Amount Including VAT";
              TotalQuantityBase := TotalQuantityBase + PurchLine2."Quantity (Base)";
              TotalLineAmountACY := TotalLineAmountACY + PurchLine2."Amount (ACY)";
              TotalAmountInclVATACY := TotalAmountInclVATACY + PurchLine2."Amount Including VAT (ACY)";
            UNTIL PurchLine2.NEXT = 0;

        IF PurchHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - PurchHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                PurchHeader.TESTFIELD("VAT Base Discount %",0);
                "Amount Including VAT" :=
                  ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                IF "Use Tax" THEN
                  Amount := "Amount Including VAT"
                ELSE
                  Amount :=
                    ROUND(
                      SalesTaxCalculate.ReverseCalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmount;
                "VAT Base Amount" := Amount;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
                "Amount (ACY)" :=
                  ROUND(
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                      ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                          PurchHeader."Posting Date",PurchHeader."Currency Code",Amount,
                          PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                    AddCurrency."Amount Rounding Precision");
                "VAT Base (ACY)" :=
                  ROUND("Amount (ACY)" * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT (ACY)" :=
                  TotalLineAmountACY + "Amount (ACY)" +
                  ROUND(
                    (TotalLineAmountACY + "Amount (ACY)") * (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVATACY;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                IF "Use Tax" THEN
                  "Amount Including VAT" := Amount
                ELSE
                  "Amount Including VAT" :=
                    TotalAmount + Amount +
                    ROUND(
                      SalesTaxCalculate.CalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
      // UPG09R2.begin

      //YIMMNTAPST

      VALIDATE("Tax Amount (Vat)",("Outstanding Amount" -"Line Amount"));


      //YIMMNTAPEN
      // UPG09R2.end
    END;

    LOCAL PROCEDURE UpdateSalesCost@6();
    BEGIN
      CASE TRUE OF
        "Sales Order Line No." <> 0:
          // Drop Shipment
          SalesOrderLine.GET(
            SalesOrderLine."Document Type"::Order,
            "Sales Order No.",
            "Sales Order Line No.");
        "Special Order Sales Line No." <> 0:
          // Special Order
          BEGIN
            IF NOT
               SalesOrderLine.GET(
                 SalesOrderLine."Document Type"::Order,
                 "Special Order Sales No.",
                 "Special Order Sales Line No.")
            THEN
              EXIT;
          END;
        ELSE
          EXIT;
      END;
      SalesOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine."Unit Cost" := "Unit Cost" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine.VALIDATE("Unit Cost (LCY)");
      SalesOrderLine.MODIFY;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@10();
    VAR
      LocalGLAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      IF "FA Posting Type" = "FA Posting Type"::" " THEN
        "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
        FAPostingGr.TESTFIELD("Acquisition Cost Account");
        LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account");
      END ELSE BEGIN
        FAPostingGr.TESTFIELD("Maintenance Expense Account");
        LocalGLAcc.GET(FAPostingGr."Maintenance Expense Account");
      END;
      LocalGLAcc.CheckGLAcc;
      //LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      //"Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      IF BASManagement.VendorRegistered("Buy-from Vendor No.") THEN
        "VAT Prod. Posting Group" := LocalGLAcc."VAT Prod. Posting Group"
      ELSE
        "VAT Prod. Posting Group" := BASManagement.GetUnregGSTProdPostGroup("VAT Bus. Posting Group","Buy-from Vendor No.");
      VALIDATE("VAT Prod. Posting Group")
    END;

    PROCEDURE UpdateUOMQtyPerStockQty@9();
    BEGIN
      GetItem;
      "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
      "Unit Price (LCY)" := Item."Unit Price" * "Qty. per Unit of Measure";
      GetPurchHeader;
      IF PurchHeader."Currency Code" <> '' THEN
        "Unit Cost" :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            GetDate,PurchHeader."Currency Code",
            "Unit Cost (LCY)",PurchHeader."Currency Factor")
      ELSE
        "Unit Cost" := "Unit Cost (LCY)";
      UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("Prod. Order No.",'');
      TESTFIELD("No.");
      CLEAR(Reservation);
      Reservation.SetPurchLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE GetDate@28() : Date;
    BEGIN
      IF PurchHeader."Posting Date" <> 0D THEN
        EXIT(PurchHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE Signed@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(-Value);
      END;
    END;

    PROCEDURE BlanketOrderLookup@36();
    BEGIN
      PurchLine2.RESET;
      PurchLine2.SETCURRENTKEY("Document Type",Type,"No.");
      PurchLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      PurchLine2.SETRANGE(Type,Type);
      PurchLine2.SETRANGE("No.","No.");
      PurchLine2.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
      PurchLine2.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
      IF PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine2) = ACTION::LookupOK THEN BEGIN
        PurchLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := PurchLine2."Document No.";
        VALIDATE("Blanket Order Line No.",PurchLine2."Line No.");
      END;
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReservePurchLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      IF "Prod. Order No." <> '' THEN
        ERROR(Text031,"Prod. Order No.");

      TESTFIELD("Quantity (Base)");

      ReservePurchLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1008 : Record 242;
      TableID@1009 : ARRAY [10] OF Integer;
      No@1010 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetPurchHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",DATABASE::Vendor);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@30(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      TESTFIELD("No.");
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5805;
      AssignItemChargePurch@1001 : Codeunit 5805;
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      GetPurchHeader;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND
         ("Line Discount Amount" = 0) AND
         (NOT PurchHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntPurch.FINDLAST THEN BEGIN
        ItemChargeAssgntPurch."Document Type" := "Document Type";
        ItemChargeAssgntPurch."Document No." := "Document No.";
        ItemChargeAssgntPurch."Document Line No." := "Line No.";
        ItemChargeAssgntPurch."Item Charge No." := "No.";
        ItemChargeAssgntPurch."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      END;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Return Shipment No.")
      ELSE
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Receipt No.");
      CLEAR(AssignItemChargePurch);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text032,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntPurch."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND ("Unit Cost" <> xRec."Unit Cost") THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION("Unit Cost"));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF (CurrFieldNo <> 0) AND (Quantity <> xRec.Quantity) THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION(Quantity));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        GetPurchHeader;
        IF PurchHeader."Prices Including VAT" THEN
          TotalAmtToAssign :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          TotalAmtToAssign := "Line Amount" - "Inv. Discount Amount";
        REPEAT
          ShareOfVAT := 1;
          IF PurchHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntPurch."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntPurch."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign > 0 THEN BEGIN
            ItemChargeAssgntPurch."Amount to Assign" :=
              ROUND(ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
          END;
          ItemChargeAssgntPurch.MODIFY;
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF "Quantity Invoiced" <> 0 THEN BEGIN
        CALCFIELDS("Qty. Assigned");
        TESTFIELD("Qty. Assigned","Quantity Invoiced");
      END;
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntPurch.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Purchase Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      IF NOT PurchHeader.GET("Document Type","Document No.") THEN BEGIN
        PurchHeader."No." := '';
        PurchHeader.INIT;
      END;
      IF PurchHeader."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));

      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetPurchHeader;
      IF NOT "System-Created Entry" THEN
        IF Type <> Type::" " THEN
          PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@42(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateLeadTimeFields@11();
    VAR
      StartingDate@1000 : Date;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        IF "Document Type" IN
           ["Document Type"::Quote,"Document Type"::Order]
        THEN
          StartingDate := PurchHeader."Order Date"
        ELSE
          StartingDate := PurchHeader."Posting Date";

        EVALUATE("Lead Time Calculation",
          LeadTimeMgt.PurchaseLeadTime(
            "No.","Location Code","Variant Code",
            "Buy-from Vendor No."));
        IF FORMAT("Lead Time Calculation") = '' THEN
          "Lead Time Calculation" := PurchHeader."Lead Time Calculation";
        EVALUATE("Safety Lead Time",LeadTimeMgt.SafetyLeadTime("No.","Location Code","Variant Code"));
      END;
    END;

    PROCEDURE GetUpdateBasicDates@43();
    BEGIN
      GetPurchHeader;
      IF PurchHeader."Expected Receipt Date" <> 0D THEN
        VALIDATE("Expected Receipt Date",PurchHeader."Expected Receipt Date")
      ELSE
        VALIDATE("Order Date",PurchHeader."Order Date");
    END;

    PROCEDURE UpdateDates@39();
    BEGIN
      IF "Promised Receipt Date" <> 0D THEN
        VALIDATE("Promised Receipt Date")
      ELSE
        IF "Requested Receipt Date" <> 0D THEN
          VALIDATE("Requested Receipt Date")
        ELSE
          GetUpdateBasicDates;
    END;

    PROCEDURE InternalLeadTimeDays@35(PurchDate@1002 : Date) : Text[30];
    VAR
      TotalDays@1001 : DateFormula;
    BEGIN
      EVALUATE(
        TotalDays,'<' + FORMAT(CALCDATE("Safety Lead Time",CALCDATE("Inbound Whse. Handling Time",PurchDate)) - PurchDate) + 'D>');
      EXIT(FORMAT(TotalDays));
    END;

    PROCEDURE UpdateVATOnLines@32(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      NewAmountACY@1500008 : Decimal;
      NewAmountIncludingVATACY@1500007 : Decimal;
      NewVATBaseAmountACY@1500006 : Decimal;
      VATAmountACY@1500005 : Decimal;
      VATDifferenceACY@1500004 : Decimal;
      LineAmountToInvoiceACY@1500003 : Decimal;
      AddCurrency@1500002 : Record 4;
      CurrencyFactor@1500001 : Decimal;
      UseDate@1500000 : Date;
      FullGST@150009 : Boolean;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");
      GetGLSetup;
      UseDate := PurchHeader."Posting Date";
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        AddCurrency.GET(GLSetup."Additional Reporting Currency");
        IF UseDate <> 0D THEN
          IF (PurchHeader."Vendor Exchange Rate (ACY)" <> 0) AND (PurchHeader."Currency Code" = '') THEN
            CurrencyFactor :=
              CurrExchRate.ExchangeRateFactorFRS21(
                UseDate,GLSetup."Additional Reporting Currency",PurchHeader."Vendor Exchange Rate (ACY)")
          ELSE
            CurrencyFactor :=
              CurrExchRate.ExchangeRate(
                UseDate,GLSetup."Additional Reporting Currency");
      END;

      TempVATAmountLineRemainder.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              FullGST :=
                ("Prepayment Line" OR ("Prepmt. Line Amount" <> 0)) AND
                GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0,FullGST);
              IF VATAmountLine.Modified OR (PurchHeader."Vendor Exchange Rate (ACY)" <> 0) THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0,FullGST)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN BEGIN
                  LineAmountToInvoice := "Line Amount";
                  LineAmountToInvoiceACY := "Amount (ACY)";
                END ELSE BEGIN
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                  LineAmountToInvoiceACY :=
                    ROUND("Amount (ACY)" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                END;

                IF "Allow Invoice Disc." THEN BEGIN
                  IF VATAmountLine."Inv. Disc. Base Amount" = 0 THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    IF QtyType = QtyType::General THEN BEGIN
                      LineAmountToInvoice := "Line Amount";
                      LineAmountToInvoiceACY := "Amount (ACY)";
                    END ELSE BEGIN
                      LineAmountToInvoice :=
                        ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                      LineAmountToInvoiceACY :=
                        ROUND("Amount (ACY)" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                    END;
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    LineAmountToInvoiceDiscounted := ROUND(LineAmountToInvoiceDiscounted,Currency."Amount Rounding Precision");
                    IF (InvDiscAmount < 0) AND (LineAmountToInvoiceDiscounted = 0) THEN
                      InvDiscAmount := 0;
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                    IF "Inv. Disc. Amount to Invoice" <> 0 THEN
                      IF FullGST THEN
                        UpdateAmounts;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;
                IF QtyType = QtyType::General THEN
                  IF PurchHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      IF ((GLSetup."Additional Reporting Currency" <> '') AND
                          (PurchHeader."Currency Code" = GLSetup."Additional Reporting Currency") AND
                          (PurchHeader."Vendor Exchange Rate (ACY)" = 0))
                      THEN
                        VATAmountACY := TempVATAmountLineRemainder."VAT Amount (ACY)" +
                          ROUND(VATAmount,Currency."Amount Rounding Precision")
                      ELSE
                        VATAmountACY :=
                          TempVATAmountLineRemainder."VAT Amount (ACY)" +
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              UseDate,GLSetup."Additional Reporting Currency",
                              ROUND(
                                CurrExchRate.ExchangeAmtFCYToLCY(
                                  UseDate,PurchHeader."Currency Code",VATAmount,
                                  PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                            AddCurrency."Amount Rounding Precision");
                      NewAmount := 0;
                      NewAmountACY := 0;
                      NewVATBaseAmount := 0;
                      NewVATBaseAmountACY := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmountACY :=
                        ROUND(VATAmountLine."Amount (ACY)",AddCurrency."Amount Rounding Precision");
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      NewVATBaseAmountACY :=
                        ROUND(
                          NewAmountACY * (1 - PurchHeader."VAT Base Discount %" / 100),
                          AddCurrency."Amount Rounding Precision");

                      IF VATAmountLine."VAT Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";

                      IF VATAmountLine."VAT Base (ACY)" = 0 THEN
                        VATAmountACY := 0
                      ELSE
                        VATAmountACY :=
                          TempVATAmountLineRemainder."VAT Amount (ACY)" +
                          VATAmountLine."VAT Amount (ACY)" * NewAmountACY / VATAmountLine."VAT Base (ACY)";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewAmountIncludingVATACY := NewAmountACY + ROUND(VATAmountACY,AddCurrency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN BEGIN
                    VATDifference := 0;
                    VATDifferenceACY := 0;
                  END ELSE BEGIN
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    VATDifferenceACY :=
                      TempVATAmountLineRemainder."VAT Difference (ACY)" +
                      VATAmountLine."VAT Difference (ACY)" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  END;
                  IF LineAmountToInvoice = 0 THEN BEGIN
                    "VAT Difference" := 0;
                    "VAT Difference (ACY)" := 0;
                  END ELSE BEGIN
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                    "VAT Difference (ACY)" := ROUND(VATDifferenceACY,Currency."Amount Rounding Precision");
                  END;
                END;

                IF QtyType = QtyType::General THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                  "Amount Including VAT (ACY)" := ROUND(NewAmountIncludingVATACY,AddCurrency."Amount Rounding Precision");
                  "VAT Base (ACY)" := NewVATBaseAmountACY;
                  "Amount (ACY)" := NewAmountACY;
                END;
                InitOutstanding;
                IF NOT ((Type = Type::"Charge (Item)") AND ("Quantity Invoiced" <> "Qty. Assigned")) THEN BEGIN
                  SetUpdateFromVAT(TRUE);
                  UpdateUnitCost;
                END;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder."Amount Including VAT (ACY)" :=
                  NewAmountIncludingVATACY - ROUND(NewAmountIncludingVATACY,AddCurrency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount (ACY)" := VATAmountACY - NewAmountIncludingVATACY + NewAmountACY;
                TempVATAmountLineRemainder."VAT Difference (ACY)" := VATDifferenceACY - "VAT Difference (ACY)";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@24(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
      TotalVATAmount@1011 : Decimal;
      AddCurrency@1500002 : Record 4;
      CurrencyFactor@1500001 : Decimal;
      UseDate@1500000 : Date;
      TotalVATAmountACY@1500010 : Decimal;
      FullGST@150001 : Boolean;
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");
      GetGLSetup;
      UseDate := PurchHeader."Posting Date";
      IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         (PurchHeader."Posting Date" = 0D)
      THEN
        UseDate := WORKDATE;
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        AddCurrency.GET(GLSetup."Additional Reporting Currency");
        IF UseDate <> 0D THEN BEGIN
          IF (PurchHeader."Vendor Exchange Rate (ACY)" <> 0) AND (PurchHeader."Currency Code" = '') THEN
            CurrencyFactor :=
              CurrExchRate.ExchangeRateFactorFRS21(
                UseDate,GLSetup."Additional Reporting Currency",PurchHeader."Vendor Exchange Rate (ACY)")
          ELSE
            CurrencyFactor :=
              CurrExchRate.ExchangeRate(
                UseDate,GLSetup."Additional Reporting Currency");
        END;
      END;
      VATAmountLine.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetVPGInvRoundAcc) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              FullGST :=
                ("Prepayment Line" OR ("Prepmt. Line Amount" <> 0)) AND
                GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group");
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0,FullGST)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."Use Tax" := "Use Tax";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine."Full GST on Prepayment" := FullGST;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF PurchHeader."Currency Code" = GLSetup."Additional Reporting Currency" THEN
                      VATAmountLine."Amount (ACY)" := Amount
                    ELSE
                      VATAmountLine."Amount (ACY)" := VATAmountLine."Amount (ACY)" +
                        ROUND(
                          CurrExchRate.ExchangeAmtLCYToFCY(
                            UseDate,GLSetup."Additional Reporting Currency",
                            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                UseDate,PurchHeader."Currency Code",Amount,
                                PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                          AddCurrency."Amount Rounding Precision");
                    VATAmountLine."VAT Base (ACY)" := VATAmountLine."Amount (ACY)";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    VATAmountLine."VAT Difference (ACY)" :=
                      VATAmountLine."VAT Difference (ACY)" + "VAT Difference (ACY)";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT PurchHeader.Receive) AND PurchHeader.Invoice AND (NOT "Prepayment Line"):
                        BEGIN
                          IF "Receipt No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Rcd. Not Invoiced (Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (NOT PurchHeader.Ship) AND PurchHeader.Invoice:
                        BEGIN
                          IF "Return Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Shipped Not Invd.");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Shpd Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF PurchHeader."Currency Code" = GLSetup."Additional Reporting Currency" THEN
                      VATAmountLine."Amount (ACY)" := Amount
                    ELSE
                      VATAmountLine."Amount (ACY)" := VATAmountLine."Amount (ACY)" +
                        ROUND(
                          CurrExchRate.ExchangeAmtLCYToFCY(
                            UseDate,GLSetup."Additional Reporting Currency",
                            ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                UseDate,PurchHeader."Currency Code",ROUND(Amount * QtyToHandle / Quantity,
                                  Currency."Amount Rounding Precision"),
                                PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                          AddCurrency."Amount Rounding Precision");
                    VATAmountLine."VAT Base (ACY)" := VATAmountLine."Amount (ACY)";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF PurchHeader."Invoice Discount Calculation" <> PurchHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    VATAmountLine."VAT Difference (ACY)" :=
                      VATAmountLine."VAT Difference (ACY)" + "VAT Difference (ACY)";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Ship (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Receive (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF PurchHeader."Currency Code" = GLSetup."Additional Reporting Currency" THEN
                      VATAmountLine."Amount (ACY)" := Amount
                    ELSE
                      VATAmountLine."Amount (ACY)" := VATAmountLine."Amount (ACY)" +
                        ROUND(
                          CurrExchRate.ExchangeAmtLCYToFCY(
                            UseDate,GLSetup."Additional Reporting Currency",
                            ROUND(
                              CurrExchRate.ExchangeAmtFCYToLCY(
                                UseDate,PurchHeader."Currency Code",
                                ROUND(Amount * QtyToHandle / Quantity,Currency."Amount Rounding Precision"),
                                PurchHeader."Currency Factor"),
                              Currency."Amount Rounding Precision"),
                            CurrencyFactor),
                          AddCurrency."Amount Rounding Precision");
                    VATAmountLine."VAT Base (ACY)" := VATAmountLine."Amount (ACY)";
                    IF "Allow Invoice Disc." THEN BEGIN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    END ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    VATAmountLine."VAT Difference (ACY)" :=
                      VATAmountLine."VAT Difference (ACY)" + "VAT Difference (ACY)";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
              TotalVATAmountACY := TotalVATAmountACY + "Amount Including VAT (ACY)" - "Amount (ACY)";
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF PurchHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    IF "Full GST on Prepayment" AND "Includes Prepayment" THEN BEGIN
                      "VAT Amount" := "VAT Difference" +
                        ROUND(
                          PrevVatAmountLine."VAT Amount" +
                          "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      "Amount Including VAT" := "Line Amount";
                    END ELSE BEGIN
                      "VAT Base" :=
                        ROUND(
                          ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                          Currency."Amount Rounding Precision") - "VAT Difference";
                      "VAT Amount" :=
                        "VAT Difference" +
                        ROUND(
                          PrevVatAmountLine."VAT Amount" +
                          ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                          (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    END;
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      PrevVatAmountLine."VAT Amount (ACY)" :=
                        PrevVatAmountLine."VAT Amount (ACY)" -
                        ROUND(PrevVatAmountLine."VAT Amount (ACY)",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      IF "Full GST on Prepayment" THEN
                        CalcFullGSTValues(VATAmountLine,PurchLine,PurchHeader."Prices Including VAT");
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Base" := "Amount Including VAT"
                    ELSE
                      "VAT Base" :=
                        ROUND(
                          SalesTaxCalculate.ReverseCalculateTax(
                            PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                            PurchHeader."Posting Date","Amount Including VAT",Quantity,PurchHeader."Currency Factor"),
                          Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    IF NOT ("Full GST on Prepayment" AND "Includes Prepayment") THEN
                      "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                    "VAT Base (ACY)" :=
                      ROUND(
                        "Amount (ACY)" * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "VAT Amount (ACY)" :=
                      "VAT Difference (ACY)" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount (ACY)" +
                        "VAT Base (ACY)" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    "Amount Including VAT (ACY)" := "Amount (ACY)" + "VAT Amount (ACY)";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                        PrevVatAmountLine."VAT Amount (ACY)" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              UseDate,GLSetup."Additional Reporting Currency",
                              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                  UseDate,PurchHeader."Currency Code",PrevVatAmountLine."VAT Amount",
                                  PurchHeader."Currency Factor"),Currency."Amount Rounding Precision"),CurrencyFactor),
                            AddCurrency."Amount Rounding Precision");
                      END;
                      IF "Full GST on Prepayment" THEN
                        CalcFullGSTValues(VATAmountLine,PurchLine,PurchHeader."Prices Including VAT");
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Amount" := 0
                    ELSE
                      "VAT Amount" :=
                        SalesTaxCalculate.CalculateTax(
                          PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                          PurchHeader."Posting Date","VAT Base",Quantity,PurchHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            "Calculated VAT Amount (ACY)" := "VAT Amount (ACY)" - "VAT Difference (ACY)";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(PurchLine."VAT Identifier",PurchLine."VAT Calculation Type",
             PurchLine."Tax Group Code",PurchLine."Use Tax",PurchLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE UpdateWithWarehouseReceive@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Qty. to Receive",0)
            ELSE
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Receive",0)
            ELSE
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@47();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      IF "Prod. Order No." <> '' THEN
        EXIT;
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text033;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.")
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE GetOverheadRateFCY@40() : Decimal;
    VAR
      QtyPerUOM@1000 : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        QtyPerUOM := "Qty. per Unit of Measure"
      ELSE BEGIN
        GetItem;
        QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      END;

      EXIT(
        CurrExchRate.ExchangeAmtLCYToFCY(
          GetDate,"Currency Code","Overhead Rate" * QtyPerUOM,PurchHeader."Currency Factor"));
    END;

    PROCEDURE GetItemTranslation@44();
    BEGIN
      GetPurchHeader;
      IF ItemTranslation.GET("No.","Variant Code",PurchHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE AdjustDateFormula@48(DateFormulatoAdjust@1000 : DateFormula) : Text[30];
    BEGIN
      IF FORMAT(DateFormulatoAdjust) <> '' THEN
        EXIT(FORMAT(DateFormulatoAdjust));
      EVALUATE(DateFormulatoAdjust,'<0D>');
      EXIT(FORMAT(DateFormulatoAdjust));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE RowID1@49() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Purchase Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE IsInbound@75() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" > 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" < 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@71(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    PROCEDURE CrossReferenceNoLookUp@51();
    VAR
      ItemCrossReference@1000 : Record 5717;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        ItemCrossReference.RESET;
        ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
        ItemCrossReference.SETFILTER(
          "Cross-Reference Type",'%1|%2',
          ItemCrossReference."Cross-Reference Type"::Vendor,
          ItemCrossReference."Cross-Reference Type"::" ");
        ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
        IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
          PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,FIELDNO("Cross-Reference No."));
          PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
          VALIDATE("Direct Unit Cost");
        END;
      END;
    END;

    PROCEDURE ItemExists@52(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    LOCAL PROCEDURE CheckApplToItemLedgEntry@53() : Code[10];
    VAR
      ItemLedgEntry@1000 : Record 32;
      ApplyRec@1005 : Record 339;
      ItemTrackingLines@1006 : Page 6510;
      ReturnedQty@1003 : Decimal;
      RemainingtobeReturnedQty@1004 : Decimal;
    BEGIN
      IF "Appl.-to Item Entry" = 0 THEN
        EXIT;

      IF "Receipt No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF Signed(Quantity) > 0 THEN
        TESTFIELD("Prod. Order No.",'');
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;
      ItemLedgEntry.GET("Appl.-to Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,TRUE);
      IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));

      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");

      // Track qty in both alternative and base UOM for better error checking and reporting
      IF ABS("Quantity (Base)") > ItemLedgEntry.Quantity THEN
        ERROR(
          Text042,
          ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        IF ABS("Outstanding Qty. (Base)") > ItemLedgEntry."Remaining Quantity" THEN BEGIN
          ReturnedQty := ApplyRec.Returned(ItemLedgEntry."Entry No.");
          RemainingtobeReturnedQty := ItemLedgEntry.Quantity - ReturnedQty;
          IF NOT ("Qty. per Unit of Measure" = 0) THEN BEGIN
            ReturnedQty := ROUND(ReturnedQty / "Qty. per Unit of Measure",0.00001);
            RemainingtobeReturnedQty := ROUND(RemainingtobeReturnedQty / "Qty. per Unit of Measure",0.00001);
          END;

          IF ((("Qty. per Unit of Measure" = 0) AND (RemainingtobeReturnedQty < ABS("Outstanding Qty. (Base)"))) OR
              (("Qty. per Unit of Measure" <> 0) AND (RemainingtobeReturnedQty < ABS("Outstanding Quantity"))))
          THEN
            ERROR(
              Text035,
              ReturnedQty,ItemLedgEntry.FIELDCAPTION("Document No."),
              ItemLedgEntry."Document No.",RemainingtobeReturnedQty);
        END;

      EXIT(ItemLedgEntry."Location Code");
    END;

    PROCEDURE CalcPrepaymentToDeduct@59();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetPurchHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      LineAmount := ROUND(QtyToHandle * "Direct Unit Cost",Currency."Amount Rounding Precision");
      LineDiscAmount := ROUND("Line Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE JobTaskIsSet@61() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item]));
    END;

    PROCEDURE CreateTempJobJnlLine@55(GetPrices@1001 : Boolean);
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      IF Type = Type::"G/L Account" THEN
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account")
      ELSE
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::Item);
      JobJnlLine.VALIDATE(Quantity,Quantity);
      JobJnlLine.VALIDATE("No.","No.");
      JobJnlLine.VALIDATE("Variant Code","Variant Code");
      JobJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");

      IF NOT GetPrices THEN BEGIN
        IF xRec."Line No." <> 0 THEN BEGIN
          JobJnlLine."Unit Cost" := xRec."Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := xRec."Unit Cost (LCY)";
          JobJnlLine."Unit Price" := xRec."Job Unit Price";
          JobJnlLine."Line Amount" := xRec."Job Line Amount";
          JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
          JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        END ELSE BEGIN
          JobJnlLine."Unit Cost" := "Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := "Unit Cost (LCY)";
          JobJnlLine."Unit Price" := "Job Unit Price";
          JobJnlLine."Line Amount" := "Job Line Amount";
          JobJnlLine."Line Discount %" := "Job Line Discount %";
          JobJnlLine."Line Discount Amount" := "Job Line Discount Amount";
        END;
        JobJnlLine.VALIDATE("Unit Price");
      END ELSE
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    END;

    PROCEDURE UpdateJobPrices@69();
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      IF "Receipt No." = '' THEN BEGIN
        "Job Unit Price" := JobJnlLine."Unit Price";
        "Job Total Price" := JobJnlLine."Total Price";
        "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
        "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
        "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
        "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
        "Job Line Amount" := JobJnlLine."Line Amount";
        "Job Line Discount %" := JobJnlLine."Line Discount %";
        "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      END ELSE BEGIN
        PurchRcptLine.GET("Receipt No.","Receipt Line No.");
        "Job Unit Price" := PurchRcptLine."Job Unit Price";
        "Job Total Price" := PurchRcptLine."Job Total Price";
        "Job Unit Price (LCY)" := PurchRcptLine."Job Unit Price (LCY)";
        "Job Total Price (LCY)" := PurchRcptLine."Job Total Price (LCY)";
        "Job Line Amount (LCY)" := PurchRcptLine."Job Line Amount (LCY)";
        "Job Line Disc. Amount (LCY)" := PurchRcptLine."Job Line Disc. Amount (LCY)";
        "Job Line Amount" := PurchRcptLine."Job Line Amount";
        "Job Line Discount %" := PurchRcptLine."Job Line Discount %";
        "Job Line Discount Amount" := PurchRcptLine."Job Line Discount Amount";
      END;
    END;

    PROCEDURE JobSetCurrencyFactor@54();
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      "Job Currency Factor" := JobJnlLine."Currency Factor";
    END;

    PROCEDURE SetUpdateFromVAT@58(UpdateFromVAT2@1000 : Boolean);
    BEGIN
      UpdateFromVAT := UpdateFromVAT2;
    END;

    PROCEDURE InitQtyToReceive2@57();
    BEGIN
      "Qty. to Receive" := "Outstanding Quantity";
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      // CalcPrepaymentToDeduct;

      IF Quantity <> 0 THEN BEGIN
        GetPurchHeader;
        IF PurchHeader.Receive AND NOT PurchHeader.Invoice THEN
          "Prepmt Amt to Deduct" :=
            ROUND(
              "Prepmt. Amt. Inv." * "Qty. Rcd. Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              "Prepmt. Line Amount" - "Prepmt Amt Deducted",
              Currency."Amount Rounding Precision");
      END ELSE
        "Prepmt Amt to Deduct" := 0;

      IF "Job Planning Line No." <> 0 THEN
        VALIDATE("Job Planning Line No.");
    END;

    PROCEDURE InitTextVariable@1500000();
    BEGIN
      OnesText[1] := Text1500000;
      OnesText[2] := Text1500001;
      OnesText[3] := Text1500002;
      OnesText[4] := Text1500003;
      OnesText[5] := Text1500004;
      OnesText[6] := Text1500005;
      OnesText[7] := Text1500006;
      OnesText[8] := Text1500007;
      OnesText[9] := Text1500008;
      OnesText[10] := Text1500009;
      OnesText[11] := Text1500010;
      OnesText[12] := Text1500011;
      OnesText[13] := Text1500012;
      OnesText[14] := Text1500013;
      OnesText[15] := Text1500014;
      OnesText[16] := Text1500015;
      OnesText[17] := Text1500016;
      OnesText[18] := Text1500017;
      OnesText[19] := Text1500018;

      TensText[1] := '';
      TensText[2] := Text1500019;
      TensText[3] := Text1500020;
      TensText[4] := Text1500021;
      TensText[5] := Text1500022;
      TensText[6] := Text1500023;
      TensText[7] := Text1500024;
      TensText[8] := Text1500025;
      TensText[9] := Text1500026;

      ExponentText[1] := '';
      ExponentText[2] := Text1500027;
      ExponentText[3] := Text1500028;
      ExponentText[4] := Text1500029;
    END;

    PROCEDURE InitTextVariableTH@1500001();
    BEGIN
      OnesText[1] := Text1500030;
      OnesText[2] := Text1500031;
      OnesText[3] := Text1500032;
      OnesText[4] := Text1500033;
      OnesText[5] := Text1500034;
      OnesText[6] := Text1500035;
      OnesText[7] := Text1500036;
      OnesText[8] := Text1500037;
      OnesText[9] := Text1500038;
      OnesText[10] := Text1500039;
      OnesText[11] := Text1500040;
      OnesText[12] := Text1500041;
      OnesText[13] := Text1500042;
      OnesText[14] := Text1500043;
      OnesText[15] := Text1500044;
      OnesText[16] := Text1500045;
      OnesText[17] := Text1500046;
      OnesText[18] := Text1500047;
      OnesText[19] := Text1500048;

      TensText[1] := '';
      TensText[2] := Text1500049;
      TensText[3] := Text1500050;
      TensText[4] := Text1500051;
      TensText[5] := Text1500052;
      TensText[6] := Text1500053;
      TensText[7] := Text1500054;
      TensText[8] := Text1500055;
      TensText[9] := Text1500056;

      ExponentText[1] := '';
      ExponentText[2] := Text1500057;
      ExponentText[3] := Text1500058;
      ExponentText[4] := Text1500059;
    END;

    PROCEDURE FormatNoText@1500003(VAR NoText@1500000 : ARRAY [2] OF Text[80];No@1500001 : Decimal;CurrencyCode@1500002 : Code[10]);
    VAR
      PrintExponent@1500003 : Boolean;
      Ones@1500004 : Integer;
      Tens@1500005 : Integer;
      Hundreds@1500006 : Integer;
      Exponent@1500007 : Integer;
      NoTextIndex@1500008 : Integer;
    BEGIN
      CLEAR(NoText);
      NoTextIndex := 1;
      NoText[1] := '****';

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text1500061)
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds]);
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text1500060);
          END;
          IF Tens >= 2 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens]);
            IF Ones > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END ELSE
            IF (Tens * 10 + Ones) > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones]);
          IF PrintExponent AND (Exponent > 1) THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent]);
          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Text1500062);
      AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100) + '/100');

      IF CurrencyCode <> '' THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,CurrencyCode);
    END;

    PROCEDURE ShowLineComments@62();
    VAR
      PurchCommentLine@1000 : Record 43;
      PurchCommentSheet@1001 : Page 66;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      PurchCommentLine.SETRANGE("Document Type","Document Type");
      PurchCommentLine.SETRANGE("No.","Document No.");
      PurchCommentLine.SETRANGE("Document Line No.","Line No.");
      PurchCommentSheet.SETTABLEVIEW(PurchCommentLine);
      PurchCommentSheet.RUNMODAL;
    END;

    PROCEDURE SetDefaultQuantity@63();
    VAR
      PurchSetup@1000 : Record 312;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE UpdatePrePaymentAmounts@65();
    VAR
      ReceiptLine@1000 : Record 121;
      PurchOrderLine@1001 : Record 39;
      PurchOrderHeader@1002 : Record 38;
    BEGIN
      IF NOT ReceiptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE
        IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,ReceiptLine."Order No.",ReceiptLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted") *
                     Quantity / (PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,PurchOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;

      GetPurchHeader;
      PurchHeader.TESTFIELD("Prices Including VAT",PurchOrderHeader."Prices Including VAT");
      IF PurchHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE SetVendorItemNo@64();
    BEGIN
      GetItem;
      ItemVend.INIT;
      ItemVend."Vendor No." := "Buy-from Vendor No.";
      ItemVend."Variant Code" := "Variant Code";
      Item.FindItemVend(ItemVend,"Location Code");
      VALIDATE("Vendor Item No.",ItemVend."Vendor Item No.");
    END;

    PROCEDURE ZeroAmountLine@66(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF "Direct Unit Cost" = 0 THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Expected Receipt Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE GetVPGInvRoundAcc@72() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VendorPostingGroup@1001 : Record 93;
      PurchSetup@1002 : Record 312;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Invoice Rounding" THEN
        IF Vendor.GET(PurchHeader."Pay-to Vendor No.") THEN
          VendorPostingGroup.GET(Vendor."Vendor Posting Group");

      EXIT(VendorPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CheckReceiptRelation@94();
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.GET("Receipt No.","Receipt Line No.");
      IF (Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text051);
      IF ABS(Quantity) > ABS(PurchRcptLine."Qty. Rcd. Not Invoiced") THEN
        ERROR(Text052,PurchRcptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetShptRelation@74();
    VAR
      ReturnShptLine@1000 : Record 6651;
    BEGIN
      ReturnShptLine.GET("Return Shipment No.","Return Shipment Line No.");
      IF (Quantity * (ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text053);
      IF ABS(Quantity) > ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced") THEN
        ERROR(Text054,ReturnShptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@73();
    BEGIN
      IF ("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) THEN
        IF ("Qty. Rcd. Not Invoiced" <> 0) OR ("Return Qty. Shipped Not Invd." <> 0) THEN
          IF NOT CONFIRM(Text049,TRUE,TABLECAPTION) THEN
            ERROR(Text050);
    END;

    PROCEDURE InitType@22();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF (PurchHeader.Status = PurchHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    PROCEDURE FormatNoTextTH@1500002(VAR NoText@1500000 : ARRAY [2] OF Text[80];No@1500001 : Decimal;CurrencyCode@1500002 : Code[10]);
    VAR
      PrintExponent@1500003 : Boolean;
      Ones@1500004 : Integer;
      Tens@1500005 : Integer;
      Hundreds@1500006 : Integer;
      Exponent@1500007 : Integer;
      NoTextIndex@1500008 : Integer;
    BEGIN
      CLEAR(NoText);
      NoTextIndex := 1;
      NoText[1] := '****';

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text1500061)
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds]);
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text1500060);
          END;
          IF Tens >= 2 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens]);
            IF Ones > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END ELSE
            IF (Tens * 10 + Ones) > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones]);
          IF PrintExponent AND (Exponent > 1) THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent]);
          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Text1500062);
      AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100) + '/100');

      IF CurrencyCode <> '' THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,CurrencyCode);
    END;

    LOCAL PROCEDURE AddToNoText@1500004(VAR NoText@1500000 : ARRAY [2] OF Text[80];VAR NoTextIndex@1500001 : Integer;VAR PrintExponent@1500002 : Boolean;AddText@1500003 : Text[30]);
    BEGIN
      PrintExponent := TRUE;

      WHILE STRLEN(NoText[NoTextIndex] + ' ' + AddText) > MAXSTRLEN(NoText[1]) DO BEGIN
        NoTextIndex := NoTextIndex + 1;
        IF NoTextIndex > ARRAYLEN(NoText) THEN
          ERROR(Text029,AddText);
      END;

      NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + ' ' + AddText,'<');
    END;

    LOCAL PROCEDURE CalculateFullGST@150006(VAR PrepmtLineAmount@150000 : Decimal) : Boolean;
    BEGIN
      GetGLSetup;
      IF NOT GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
        EXIT(FALSE);

      UpdateVATAmounts;
      IF "Prepayment %" <> 0 THEN BEGIN
        PrepmtLineAmount :=
          ROUND(Amount * "Prepayment %" / 100,Currency."Amount Rounding Precision") +
          FullGSTAmount;
      END ELSE
        PrepmtLineAmount := 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateGSTAmounts@150005() : Boolean;
    BEGIN
      GetGLSetup;
      IF GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN BEGIN
        UpdateVATAmounts;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FullGSTAmount@150017() : Decimal;
    BEGIN
      IF PurchHeader."Prices Including VAT" THEN
        EXIT("Amount Including VAT" - Amount)
        ;
      EXIT(0);
    END;

    LOCAL PROCEDURE ExcludeVAT@150003(AmountInclVAT@150000 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(AmountInclVAT / (1 + "VAT %" / 100),Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE LineAmountExclFullGST@150004() : Decimal;
    BEGIN
      IF GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
        IF PurchHeader."Prices Including VAT" THEN
          EXIT(Amount + ExcludeVAT("Inv. Discount Amount"));
      EXIT("Line Amount");
    END;

    LOCAL PROCEDURE PrepmtLineAmtExclFullGST@150025() : Decimal;
    VAR
      VATAmount@150001 : Decimal;
      PrepmtLineAmt@150000 : Decimal;
    BEGIN
      IF NOT GLSetup.CheckFullGSTonPrepayment("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
        EXIT("Prepmt. Line Amount");

      PrepmtLineAmt := "Prepmt. Line Amount";
      IF PurchHeader."Prices Including VAT" THEN BEGIN
        VATAmount := FullGSTAmount;
        IF VATAmount > PrepmtLineAmt THEN
          EXIT(0);
        PrepmtLineAmt := ROUND(PrepmtLineAmt - VATAmount,Currency."Amount Rounding Precision");
      END;
      EXIT(AppendInvDiscount(PrepmtLineAmt));
    END;

    LOCAL PROCEDURE AppendInvDiscount@150027(LineAmount@150000 : Decimal) : Decimal;
    BEGIN
      IF "Inv. Discount Amount" = 0 THEN
        EXIT(LineAmount);
      EXIT(ROUND(LineAmount * "Line Amount" / ("Line Amount" - "Inv. Discount Amount"),Currency."Amount Rounding Precision"));
    END;

    PROCEDURE CalcFullGSTValues@150001(VAR VATAmountLine@150000 : Record 290;VAR PurchLine@150003 : Record 39;PriceIncludingVAT@150001 : Boolean);
    VAR
      RecPurchLine@150002 : Record 39;
    BEGIN
      WITH VATAmountLine DO BEGIN
        "VAT Base" := 0;
        "VAT Amount" := 0;
        "Inv. Discount Amount" := 0;
        RecPurchLine.RESET;
        RecPurchLine.SETFILTER("Document No.",PurchLine."Document No.");
        RecPurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
        RecPurchLine.SETFILTER("VAT Identifier",'%1',"VAT Identifier");
        IF RecPurchLine.FINDSET THEN BEGIN
          REPEAT
            IF PriceIncludingVAT THEN BEGIN
              VATBase :=
                ROUND(
                  ((RecPurchLine."Line Amount" - RecPurchLine."Inv. Discount Amount") /
                   (1 + RecPurchLine."Prepayment VAT %" / 100) - RecPurchLine."VAT Difference"),Currency."Amount Rounding Precision");
              VATAmt :=
                "VAT Difference" +
                (RecPurchLine."Line Amount" - RecPurchLine."Inv. Discount Amount" - VATBase - "VAT Difference") *
                (1 - PurchHeader."VAT Base Discount %" / 100);
              "VAT Base" := "VAT Base" + VATBase * (RecPurchLine."Qty. to Invoice" / RecPurchLine.Quantity);
              "VAT Amount" := "VAT Amount" + VATAmt * (RecPurchLine."Qty. to Invoice" / RecPurchLine.Quantity);
              "Invoice Discount Amount" := "Invoice Discount Amount" + ("Inv. Discount Amount" * RecPurchLine."Prepayment %" / 100);
            END ELSE BEGIN
              VATBase :=
                ROUND(
                  (RecPurchLine."Line Amount" - RecPurchLine."Inv. Discount Amount") *
                  (RecPurchLine."Qty. to Invoice" / RecPurchLine.Quantity),
                  Currency."Amount Rounding Precision");
              "VAT Base" := "VAT Base" + VATBase;
              "VAT Amount" := "VAT Amount" + (VATBase * RecPurchLine."Prepayment VAT %" / 100);
              "Invoice Discount Amount" :=
                "Invoice Discount Amount" + RecPurchLine."Inv. Discount Amount" * RecPurchLine."Prepayment %" / 100;
            END;
          UNTIL RecPurchLine.NEXT = 0;
          "VAT Base" := -1 * ROUND("VAT Base",Currency."Amount Rounding Precision");
          "VAT Amount" := -1 * ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
          "Invoice Discount Amount" := -1 * ROUND("Invoice Discount Amount",Currency."Amount Rounding Precision");
          IF PriceIncludingVAT THEN
            "Amount Including VAT" := ROUND("Line Amount",Currency."Amount Rounding Precision")
          ELSE BEGIN
            IF NOT Positive THEN
              "Amount Including VAT" := "Line Amount" - PurchLine."Inv. Discount Amount" + "VAT Amount"
            ELSE
              "Amount Including VAT" := "VAT Base" - PurchLine."Inv. Discount Amount" + "VAT Amount";
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@76();
    VAR
      DialogText@1001 : Text;
    BEGIN
      DialogText := Text033;
      IF (CurrFieldNo <> 0) AND (Type = Type::Item) THEN
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
    END;

    PROCEDURE IsServiceItem@77() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    PROCEDURE "//>>CR#014 Func"@1102159002();
    BEGIN
    END;

    PROCEDURE "CheckDuplicacyTaxInvNo."@1102159001("Tax_Inv_No._Copy_2"@1102159005 : Code[20]);
    VAR
      Sales_Tax_Inv_Header@1102159003 : Record 28071;
      Sales_Inv_Header@1102159002 : Record 112;
      Purch_Tax_Cr_Memo_Hdr@1102159001 : Record 28077;
      PurchCrMemoHeader@1102159006 : Record 124;
      Sales_Line@1102159007 : Record 37;
      "Sale_Cr._Memo_Line"@1102159008 : Record 115;
      Sales_Hdr@1102159009 : Record 36;
      PurchHeader1@1102159010 : Record 38;
    BEGIN
      IF "Tax Invoice No." <> '' THEN
      BEGIN

        //Unposted Purchase invoices
        PurchLine.RESET;
        PurchLine.SETRANGE(PurchLine."Document Type",PurchLine."Document Type"::Invoice);
        PurchLine.SETCURRENTKEY(PurchLine."Tax Invoice No.");
        PurchLine.SETFILTER(PurchLine."Tax Invoice No.",'%1 |%2',"Tax Invoice No.","Tax_Inv_No._Copy_2");
        PurchLine.SETFILTER(PurchLine."Document No.",'<>%1',"Document No.");
        IF PurchLine.FINDFIRST THEN
        REPEAT
          PurchHeader1.RESET;
          IF PurchHeader1.GET(PurchHeader1."Document Type"::Invoice,PurchLine."Document No.") THEN
          BEGIN
            IF PurchHeader1."Reason Code" = 'NORMAL' THEN
              ERROR(Text1500063,PurchLine."Line No.",PurchLine."Document No.");
          END;
        UNTIL PurchLine.NEXT = 0;

        //Posted purchase invoices
        "PurchInv Line".RESET;
        "PurchInv Line".SETCURRENTKEY("PurchInv Line"."Tax Invoice No.");
        "PurchInv Line".SETFILTER("PurchInv Line"."Tax Invoice No.",'%1 |%2',"Tax Invoice No.","Tax_Inv_No._Copy_2");
        IF "PurchInv Line".FINDFIRST THEN
        BEGIN
          PurchCrMemoHeader.RESET;
          PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader."Applies-to Doc. Type",PurchCrMemoHeader."Applies-to Doc. Type"::Invoice);
          PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader."Applies-to Doc. No.","PurchInv Line"."Document No.");
          PurchCrMemoHeader.SETRANGE(PurchCrMemoHeader.ActualCreditMemo,FALSE);
          IF NOT (PurchCrMemoHeader.FINDFIRST) THEN
            ERROR(Text1500064,"PurchInv Line"."Line No.","PurchInv Line"."Document No.");
        END;


        //Cust Acc Payable entries
        Sales_Line.RESET;
        Sales_Line.SETFILTER(Sales_Line."Document Type",'%1',Sales_Line."Document Type"::"Credit Memo");
        Sales_Line.SETCURRENTKEY(Sales_Line."Tax Invoice No.");
        Sales_Line.SETFILTER(Sales_Line."Tax Invoice No.",'%1 |%2',"Tax Invoice No.","Tax_Inv_No._Copy_2");
        IF Sales_Line.FINDFIRST THEN
        REPEAT
          Sales_Hdr.RESET;
          IF Sales_Hdr.GET(Sales_Hdr."Document Type"::"Credit Memo",Sales_Line."Document No.") THEN
          BEGIN
            IF (Sales_Hdr."Reason Code" = 'SALRT') THEN
              ERROR("Text02-ErrorSaleCrMemo",Sales_Line."Document No.");
          END;
        UNTIL Sales_Line.NEXT = 0;


        //Posted Cust Acc Payable entries
        "Sale_Cr._Memo_Line".RESET;
        "Sale_Cr._Memo_Line".SETCURRENTKEY("Sale_Cr._Memo_Line"."Tax Invoice No.");
        "Sale_Cr._Memo_Line".SETFILTER("Sale_Cr._Memo_Line"."Tax Invoice No.",'%1|%2',"Tax Invoice No.","Tax_Inv_No._Copy_2");
        IF "Sale_Cr._Memo_Line".FINDFIRST THEN
        BEGIN
          Sales_Inv_Header.RESET;
          Sales_Inv_Header.SETRANGE(Sales_Inv_Header."Applies-to Doc. Type",Sales_Inv_Header."Applies-to Doc. Type"::"Credit Memo");
          Sales_Inv_Header.SETRANGE(Sales_Inv_Header."Applies-to Doc. No.","Sale_Cr._Memo_Line"."Document No.");
          Sales_Inv_Header.SETRANGE(Sales_Inv_Header.ActualCreditMemo,FALSE);
          IF NOT (Sales_Inv_Header.FINDFIRST) THEN
            ERROR("Text02-ErrorSaleCrMemo","Sale_Cr._Memo_Line"."Document No.");
        END;



        //posted sales invoices
        Sales_Tax_Inv_Header.RESET;
        IF Sales_Tax_Inv_Header.GET("Tax Invoice No.") THEN
        BEGIN
          Sales_Inv_Header.RESET;
          Sales_Inv_Header.SETRANGE(Sales_Inv_Header."Pre-Assigned No.",Sales_Tax_Inv_Header."Pre-Assigned No.");
          IF Sales_Inv_Header.FINDFIRST THEN
            ERROR(Text1500067,Sales_Inv_Header."No.");
        END;


        //posted vendor sales invoices
        Purch_Tax_Cr_Memo_Hdr.RESET;
        IF Purch_Tax_Cr_Memo_Hdr.GET("Tax Invoice No.") THEN
          ERROR("Text01-ErrorPurchCrMemo",Purch_Tax_Cr_Memo_Hdr."Pre-Assigned No.");

      END;
    END;

    PROCEDURE FormatConverter@1102159004();
    BEGIN
        "Tax_Inv_No._Copy_2" := DELCHR("Tax Invoice No.",'=','.');
        "Tax_Inv_No._Copy_2" := DELCHR("Tax_Inv_No._Copy_2",'=','-');
        "Tax_Inv_No._Copy_2" := INSSTR("Tax_Inv_No._Copy_2",'.',4);
        "Tax_Inv_No._Copy_2" := INSSTR("Tax_Inv_No._Copy_2",'.',8);
        "Tax_Inv_No._Copy_2" := INSSTR("Tax_Inv_No._Copy_2",'-',11);
    END;

    PROCEDURE "//<<CR#014 Func"@1102159003();
    BEGIN
    END;

    LOCAL PROCEDURE CheckReservationDateConflict@1502(DateFieldNo@1000 : Integer);
    VAR
      ReservEntry@1002 : Record 337;
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      IF CurrFieldNo = DateFieldNo THEN
        IF PurchLineReserve.FindReservEntry(Rec,ReservEntry) THEN BEGIN
          ReservEntry.SETFILTER("Shipment Date",'<%1',"Expected Receipt Date");
          IF NOT ReservEntry.ISEMPTY THEN
            IF NOT CONFIRM(DataConflictQst) THEN
              ERROR('');
        END;
    END;

    LOCAL PROCEDURE ReservEntryExist@78() : Boolean;
    VAR
      NewReservEntry@1000 : Record 337;
    BEGIN
      ReservePurchLine.FilterReservFor(NewReservEntry,Rec);
      NewReservEntry.SETRANGE("Reservation Status",NewReservEntry."Reservation Status"::Reservation,
        NewReservEntry."Reservation Status"::Tracking);

      EXIT(NOT NewReservEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    BEGIN
      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN
        UpdateDirectUnitCost(FIELDNO("Return Reason Code"));

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Direct Unit Cost",0)
        ELSE
          UpdateDirectUnitCost(FIELDNO("Return Reason Code"));
      END;
    END;

    BEGIN
    {
      Date               Sign                 Ref_ID                 Description
      02042013            PC                  CR#014                 Implementation of New Tax Inv. No. Series Rule


      //YIMMNTT
         1) Fields added in the standard table for maintaining the information related to Tender Terima.
          a) Kwitansi No.
          b) Commercial Invoice No.
          c) Commercial Invoice Date
          d) Tax Invoice No.
          e) Tax Invoice Date
          f) Narration
         2) Code Added for duplicacy of Tax Invoice NO.

      //YIMMNTAP
       1) FIELDS ADDED FOR APPROVAL PROCESS
         a) APPROVE
         b) TAX AMOUNT (VAT).

       2) CODE ADDED FOR TAX AMOUNT (VAT) CALCULATION
       3) CODE ADDED FOR TEST STATUS OPEN.


      //YIMMNTTR
       1) FIELD ADDED IN THE SECONDARY KEY FOR TENDA TERIMA REPORT.

      //YIMMNNPWP
       1) Field added for Multiple NPWP No.(ID-50009)
       2) CODE ADDED TO FLOW THE VALUE OF ORDER ADDRESS CODE TO LINE FIELD THRU HEADER.

      //YIMMARC
       1) New Field Is added to Track Purchase credit Memo as Sales

      //YIMMNWHTR
      1) New Field added for WHT Report  and for WHT Area Code.

      //YIMMJX
      1) J-SOX VALIDATION ADDED (TESTFIELD ADDED NOT TO MODIFY OR DELETE INTERFACE DATA)

      //YIMMNTCH
       1) CHANGE THE LENGTH OF TAX INVOICE NO. FROM 20 TO 30 DIGITS

      //YIMM
      1) Key is changed from Location code to Tax Invoice No.
      2) Add code to make GPPG as default GPPPG

      //YIMMCH
      1) New Field is added to Map the Temp Vendor Concept (New Npwp No.)

      //TBI1.0  - FIELD ADDED FOR TBI ITEM MASTER-(ID-51020)
                - CODE ADDED FOR LOOKUP SHOP CODE WHEN ACC TYPE FIXED ASSET
                - Posting Date to FA Posting Date in case of FA
                - Key Added for Item Category. Grouping of Item Category in Sales Invoice ( Vendor Sales Invoice).

      //YIMMRWHTABSORB
      1) This Validate is to make the line amount as WHT Absorb


      //YIMM NEW CR: CR# : NIFMYIM018/FI/100916/002

      1) Three Fields added on ID : 50021,50020,50022.


      //Mel1.0- Field added for Melco Specific Customizatiopn ( ID 52000 - to capture the Proejct Code- Quote No.)
              - Code written to validate the same field with the header part.


      //YEID1.0-- Code added for Tax invoice no. format ( On validate of Tax Invoice No.)
      //YEID1.1--Caption for "Loc Code" changed as "Delivery Site"-RT 29Nov2011
      //UPG09R2
      5.0 to 2009 R2 Merged Code in objects identification.
      //Older Versions-NAVW16.00.01,NAVAP6.00,W15.00.01
      //UPG13
      2009R2 to 2013 Merged Code.
      //older Versions - NAVW17.00,NAVAPAC7.00,AP5.00
      //UPG13R2
      2013 to 2013R2 Merged Code.
      //Old version - NAVW17.10.00.36897,NAVAPAC7.10.00.36897,NTT,NTAP
    }
    END.
  }
}

