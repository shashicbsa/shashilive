OBJECT Table 8613 Config. Package Table
{
  OBJECT-PROPERTIES
  {
    Date=08/16/14;
    Time=[ 6:00:00];
    Modified=Yes;
    Version List=NAVW17.10.00.36703,S-003;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               InitPackageFields;

               //S-003{
               //Set init values for Config. Package Table
               WITH gCoU_NAVMgmt DO BEGIN
                 VALIDATE("Number Group Separator", NumberGroupSeparator_Txt);
                 VALIDATE("Number Decimal Separator", NumberDecimalSeparator_Txt);
                 VALIDATE("Number Negative Pattern", NumberNegativePattern_Int);
                 VALIDATE("Time Format", 'HH:mm:ss');
                 VALIDATE("Date Format", 'yyyy-MM-dd');
                 VALIDATE("Date Time Format", 'yyyy-MM-dd HH:mm:ss');
               END;
               //Set init values for Config. Package Fields
               UpdateFieldDataType;
               AutoNumberDelimitedColumnNo;
               SuggestFixedWidthSetup;
               //S-003}
             END;

    OnDelete=VAR
               ConfigLine@1003 : Record 8622;
               ConfigPackageField@1001 : Record 8616;
               ConfigPackageFilter@1000 : Record 8626;
             BEGIN
               DeletePackageData;

               ConfigPackageField.SETRANGE("Package Code","Package Code");
               ConfigPackageField.SETRANGE("Table ID","Table ID");
               ConfigPackageField.DELETEALL(TRUE);

               ConfigPackageFilter.SETRANGE("Package Code","Package Code");
               ConfigPackageFilter.SETRANGE("Table ID","Table ID");
               ConfigPackageFilter.DELETEALL;

               ConfigLine.SETRANGE("Package Code","Package Code");
               ConfigLine.SETRANGE("Table ID","Table ID");
               IF ConfigLine.FINDSET(TRUE) THEN
                 REPEAT
                   ConfigLine."Package Code" := '';
                   ConfigLine."Dimensions as Columns" := FALSE;
                   ConfigLine.MODIFY;
                 UNTIL ConfigLine.NEXT = 0;
             END;

    OnRename=BEGIN
               ERROR(Text004);
             END;

    CaptionML=ENU=Config. Package Table;
  }
  FIELDS
  {
    { 1   ;   ;Package Code        ;Code20        ;TableRelation="Config. Package";
                                                   CaptionML=ENU=Package Code }
    { 2   ;   ;Table ID            ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF ConfigMgt.IsSystemTable("Table ID") THEN
                                                                  ERROR(Text001,"Table ID");

                                                                IF "Table ID" <> xRec."Table ID" THEN
                                                                  "Page ID" := ConfigMgt.FindPage("Table ID");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ConfigValidateMgt.LookupTable("Table ID");
                                                              IF "Table ID" <> 0 THEN
                                                                VALIDATE("Table ID");
                                                            END;

                                                   CaptionML=ENU=Table ID;
                                                   NotBlank=Yes }
    { 3   ;   ;Table Name          ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                             Object ID=FIELD(Table ID)));
                                                   CaptionML=ENU=Table Name;
                                                   Editable=No }
    { 4   ;   ;No. of Package Records;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Record" WHERE (Package Code=FIELD(Package Code),
                                                                                                     Table ID=FIELD(Table ID)));
                                                   CaptionML=ENU=No. of Package Records;
                                                   Editable=No }
    { 5   ;   ;No. of Package Errors;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Error" WHERE (Package Code=FIELD(Package Code),
                                                                                                    Table ID=FIELD(Table ID)));
                                                   CaptionML=ENU=No. of Package Errors;
                                                   Editable=No }
    { 7   ;   ;Imported Date and Time;DateTime    ;CaptionML=ENU=Imported Date and Time;
                                                   Editable=No }
    { 8   ;   ;Exported Date and Time;DateTime    ;CaptionML=ENU=Exported Date and Time;
                                                   Editable=No }
    { 9   ;   ;Comments            ;Text250       ;CaptionML=ENU=Comments }
    { 10  ;   ;Created Date and Time;DateTime     ;CaptionML=ENU=Created Date and Time }
    { 11  ;   ;Company Filter (Source Table);Text30;
                                                   FieldClass=FlowFilter;
                                                   TableRelation=Company;
                                                   CaptionML=ENU=Company Filter (Source Table) }
    { 12  ;   ;Table Caption       ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table ID)));
                                                   CaptionML=ENU=Table Caption;
                                                   Editable=No }
    { 13  ;   ;Data Template       ;Code10        ;TableRelation="Config. Template Header";
                                                   CaptionML=ENU=Data Template }
    { 14  ;   ;Package Processing Order;Integer   ;CaptionML=ENU=Package Processing Order;
                                                   Editable=No }
    { 15  ;   ;Page ID             ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Page));
                                                   OnLookup=BEGIN
                                                              ConfigValidateMgt.LookupPage("Page ID");
                                                              VALIDATE("Page ID");
                                                            END;

                                                   CaptionML=ENU=Page ID }
    { 16  ;   ;Processing Order    ;Integer       ;CaptionML=ENU=Processing Order }
    { 17  ;   ;No. of Fields Included;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Field" WHERE (Package Code=FIELD(Package Code),
                                                                                                    Table ID=FIELD(Table ID),
                                                                                                    Include Field=CONST(Yes)));
                                                   CaptionML=ENU=No. of Fields Included;
                                                   Editable=No }
    { 18  ;   ;No. of Fields Available;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Field" WHERE (Package Code=FIELD(Package Code),
                                                                                                    Table ID=FIELD(Table ID)));
                                                   CaptionML=ENU=No. of Fields Available;
                                                   Editable=No }
    { 19  ;   ;No. of Fields to Validate;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Config. Package Field" WHERE (Package Code=FIELD(Package Code),
                                                                                                    Table ID=FIELD(Table ID),
                                                                                                    Validate Field=CONST(Yes)));
                                                   CaptionML=ENU=No. of Fields to Validate;
                                                   Editable=No }
    { 20  ;   ;Package Caption     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Config. Package"."Package Name" WHERE (Code=FIELD(Package Code)));
                                                   CaptionML=ENU=Package Caption;
                                                   Editable=No }
    { 21  ;   ;Imported by User ID ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserManagement@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserManagement.LookupUserID("Imported by User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Imported by User ID;
                                                   Editable=No }
    { 22  ;   ;Created by User ID  ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserManagement@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserManagement.LookupUserID("Created by User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Created by User ID;
                                                   Editable=No }
    { 24  ;   ;Dimensions as Columns;Boolean      ;OnValidate=BEGIN
                                                                IF "Dimensions as Columns" THEN BEGIN
                                                                  InitDimensionFields;
                                                                  UpdateDimensionsPackageData;
                                                                END ELSE
                                                                  DeleteDimensionFields;
                                                              END;

                                                   CaptionML=ENU=Dimensions as Columns }
    { 25  ;   ;Filtered            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Config. Package Filter" WHERE (Package Code=FIELD(Package Code),
                                                                                                     Table ID=FIELD(Table ID)));
                                                   CaptionML=ENU=Filtered;
                                                   Editable=No }
    { 26  ;   ;Skip Table Triggers ;Boolean       ;CaptionML=ENU=Skip Table Triggers }
    { 56301;  ;Import Destination  ;Option        ;OptionCaptionML=ENU=Package Data,Database;
                                                   OptionString=Package Data,Database;
                                                   Description=S-003 }
    { 56311;  ;Text File Header Excluded;Boolean  ;Description=S-003 }
    { 56312;  ;Text File Type      ;Option        ;OptionCaptionML=ENU=Delimited,Fixed Width;
                                                   OptionString=Delimited,Fixed Width;
                                                   Description=S-003 }
    { 56313;  ;Delimiter Type      ;Option        ;OptionString=Comma,Semicolon,Tab,Space,Other;
                                                   Description=S-003 }
    { 56314;  ;Other Delimiter     ;Text5         ;Description=S-003 }
    { 56315;  ;Text Qualifier      ;Text5         ;InitValue=";
                                                   Description=S-003 }
    { 56321;  ;Number Group Separator;Text5       ;Description=S-003 }
    { 56322;  ;Number Decimal Separator;Text5     ;Description=S-003 }
    { 56323;  ;Number Negative Pattern;Option     ;OptionCaptionML=ENU=(Number),-Number,- Number,Number-,Number -;
                                                   OptionString=(Number),-Number,- Number,Number-,Number -;
                                                   Description=S-003 }
    { 56331;  ;Time Format         ;Text20        ;Description=S-003 }
    { 56332;  ;Date Format         ;Text20        ;Description=S-003 }
    { 56333;  ;Date Time Format    ;Text40        ;Description=S-003 }
  }
  KEYS
  {
    {    ;Package Code,Table ID                   ;Clustered=Yes }
    {    ;Package Processing Order,Processing Order }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot use system table %1 in the package.';
      Text002@1005 : TextConst 'ENU=You cannot use the Dimensions as Columns function for table %1.';
      Text003@1006 : TextConst 'ENU=The Default Dimension and Dimension Value tables must be included in the package %1 to enable this option. The missing tables will be added to the package. Do you want to continue?';
      Text004@1008 : TextConst 'ENU=You cannot rename the configuration package table.';
      Text005@1009 : TextConst 'ENU=The setup of Dimensions as Columns was canceled.';
      Text010@1003 : TextConst 'ENU=Define the drill-down page in the %1 field.';
      ConfigValidateMgt@1000 : Codeunit 8617;
      ConfigMgt@1002 : Codeunit 8616;
      ConfigPackageMgt@1004 : Codeunit 8611;
      HideValidationDialog@1010 : Boolean;
      i@1007 : Integer;
      gCoU_NAVMgmt@1011 : Codeunit 44;

    LOCAL PROCEDURE InitPackageFields@1() : Boolean;
    VAR
      ConfigPackageField@1001 : Record 8616;
      ConfigLine@1004 : Record 8622;
      Field@1000 : Record 2000000041;
      ProcessingOrder@1002 : Integer;
      FieldsAdded@1003 : Boolean;
    BEGIN
      FieldsAdded := FALSE;
      ConfigPackageMgt.SetFieldFilter(Field,"Table ID",0);
      IF Field.FINDSET THEN
        REPEAT
          IF NOT ConfigPackageField.GET("Package Code","Table ID",Field."No.") AND
             NOT ConfigPackageMgt.ExceptionField("Table ID",Field."No.")
          THEN BEGIN
            ConfigPackageMgt.InsertPackageField(
              ConfigPackageField,"Package Code","Table ID",Field."No.",Field.FieldName,Field."Field Caption",
              TRUE,TRUE,FALSE,FALSE);
            ConfigPackageField.SETRANGE("Package Code","Package Code");
            ConfigPackageField.SETRANGE("Table ID","Table ID");
            ConfigPackageField.SETRANGE("Field ID",Field."No.");
            ConfigPackageMgt.SelectAllPackageFields(ConfigPackageField,TRUE);
            FieldsAdded := TRUE;
          END;
        UNTIL Field.NEXT = 0;

      IF FieldsAdded THEN BEGIN
        ProcessingOrder := 0;
        SetProcessingOrderPrimaryKey("Package Code","Table ID",ProcessingOrder);
        ConfigPackageField.RESET;
        ConfigPackageField.SETRANGE("Package Code","Package Code");
        ConfigPackageField.SETRANGE("Table ID","Table ID");
        ConfigPackageField.SETRANGE("Primary Key",FALSE);
        IF "Table ID" <> DATABASE::"Config. Line" THEN
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder)
        ELSE BEGIN
          ConfigPackageField.SETRANGE("Field ID",ConfigLine.FIELDNO("Line Type"),ConfigLine.FIELDNO("Table ID"));
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
          // package code must be processed just after table ID!
          ConfigPackageField.SETRANGE("Field ID",ConfigLine.FIELDNO("Package Code"));
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
          ConfigPackageField.SETRANGE("Field ID",ConfigLine.FIELDNO(Name),ConfigLine.FIELDNO("Package Code") - 1);
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
          ConfigPackageField.SETFILTER("Field ID",'%1..',ConfigLine.FIELDNO("Package Code") + 1);
          SetProcessingOrderFields(ConfigPackageField,ProcessingOrder);
        END;
      END;

      EXIT(FieldsAdded);
    END;

    LOCAL PROCEDURE SetProcessingOrderPrimaryKey@17(PackageCode@1006 : Code[20];TableID@1007 : Integer;VAR ProcessingOrder@1000 : Integer);
    VAR
      ConfigPackageField@1001 : Record 8616;
      RecRef@1004 : RecordRef;
      KeyRef@1003 : KeyRef;
      FieldRef@1002 : FieldRef;
      KeyFieldCount@1005 : Integer;
    BEGIN
      RecRef.OPEN(TableID);
      KeyRef := RecRef.KEYINDEX(1);
      FOR KeyFieldCount := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        ConfigPackageField.GET(PackageCode,TableID,FieldRef.NUMBER);
        ProcessingOrder += 1;
        ConfigPackageField."Processing Order" += ProcessingOrder;
        ConfigPackageField.MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetProcessingOrderFields@9(VAR ConfigPackageField@1000 : Record 8616;VAR ProcessingOrder@1002 : Integer);
    BEGIN
      IF ConfigPackageField.FINDSET THEN
        REPEAT
          ProcessingOrder += 1;
          ConfigPackageField."Processing Order" := ProcessingOrder;
          ConfigPackageField.MODIFY;
        UNTIL ConfigPackageField.NEXT = 0;
    END;

    PROCEDURE InitDimensionFields@3();
    VAR
      Dimension@1002 : Record 348;
      ConfigPackageField@1000 : Record 8616;
      ConfigPackageTable@1001 : Record 8613;
      Confirmed@1004 : Boolean;
    BEGIN
      IF NOT (ConfigMgt.IsDimSetIDTable("Table ID") OR ConfigMgt.IsDefaultDimTable("Table ID")) THEN
        ERROR(Text002,"Table ID");

      IF ConfigMgt.IsDefaultDimTable("Table ID") THEN BEGIN
        Confirmed :=
          (ConfigPackageTable.GET("Package Code",DATABASE::"Dimension Value") AND
           ConfigPackageTable.GET("Package Code",DATABASE::"Default Dimension")) OR
          (HideValidationDialog OR NOT GUIALLOWED);
        IF NOT Confirmed THEN
          Confirmed := CONFIRM(Text003,TRUE,"Package Code");
        IF Confirmed THEN BEGIN
          ConfigPackageMgt.InsertPackageTable(ConfigPackageTable,"Package Code",DATABASE::"Dimension Value");
          ConfigPackageMgt.InsertPackageTable(ConfigPackageTable,"Package Code",DATABASE::"Default Dimension");
        END ELSE
          ERROR(Text005);
      END;

      i := 0;
      IF Dimension.FINDSET THEN
        REPEAT
          i := i + 1;
          ConfigPackageMgt.InsertPackageField(
            ConfigPackageField,"Package Code","Table ID",ConfigMgt.DimensionFieldID + i,
            Dimension.Code,Dimension."Code Caption",TRUE,FALSE,FALSE,TRUE);
        UNTIL Dimension.NEXT = 0;
    END;

    PROCEDURE DeletePackageData@8();
    VAR
      ConfigPackageRecord@1001 : Record 8614;
    BEGIN
      ConfigPackageRecord.SETRANGE("Package Code","Package Code");
      ConfigPackageRecord.SETRANGE("Table ID","Table ID");
      ConfigPackageRecord.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteDimensionFields@7();
    VAR
      ConfigPackageField@1000 : Record 8616;
      ConfigPackageData@1002 : Record 8615;
    BEGIN
      ConfigPackageData.SETRANGE("Package Code","Package Code");
      ConfigPackageData.SETRANGE("Table ID","Table ID");
      ConfigPackageData.SETRANGE("Field ID",ConfigMgt.DimensionFieldID,ConfigMgt.DimensionFieldID + 999);
      ConfigPackageData.DELETEALL;

      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE(Dimension,TRUE);
      ConfigPackageField.DELETEALL;
    END;

    PROCEDURE DimensionFieldsCount@2() : Integer;
    VAR
      ConfigPackageField@1000 : Record 8616;
    BEGIN
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE(Dimension,TRUE);
      EXIT(ConfigPackageField.COUNT);
    END;

    PROCEDURE DimensionPackageDataExist@6() : Boolean;
    VAR
      ConfigPackageData@1000 : Record 8615;
    BEGIN
      ConfigPackageData.SETRANGE("Package Code","Package Code");
      ConfigPackageData.SETRANGE("Table ID","Table ID");
      ConfigPackageData.SETRANGE("Field ID",ConfigMgt.DimensionFieldID,ConfigMgt.DimensionFieldID + 999);
      EXIT(NOT ConfigPackageData.ISEMPTY);
    END;

    PROCEDURE ShowPackageRecords@5(Show@1004 : 'Records,Errors,All';ShowDim@1003 : Boolean);
    VAR
      ConfigPackageField@1000 : Record 8616;
      ConfigPackageRecord@1001 : Record 8614;
      ConfigPackageRecords@1002 : Page 8626;
      MatrixColumnCaptions@1005 : ARRAY [1000] OF Text[100];
    BEGIN
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.SETRANGE("Include Field",TRUE);
      IF NOT ShowDim THEN
        ConfigPackageField.SETRANGE(Dimension,FALSE);
      i := 1;
      CLEAR(MatrixColumnCaptions);
      IF ConfigPackageField.FINDSET THEN
        REPEAT
          MatrixColumnCaptions[i] := ConfigPackageField."Field Name";
          i := i + 1;
        UNTIL ConfigPackageField.NEXT = 0;

      CALCFIELDS("Table Caption");
      CLEAR(ConfigPackageRecords);
      ConfigPackageRecord.SETRANGE("Package Code","Package Code");
      ConfigPackageRecord.SETRANGE("Table ID","Table ID");
      CASE Show OF
        Show::Records:
          ConfigPackageRecord.SETRANGE(Invalid,FALSE);
        Show::Errors:
          ConfigPackageRecord.SETRANGE(Invalid,TRUE);
      END;
      ConfigPackageRecords.SETTABLEVIEW(ConfigPackageRecord);
      ConfigPackageRecords.LOOKUPMODE(TRUE);
      ConfigPackageRecords.Load(MatrixColumnCaptions,"Table Caption","Package Code","Table ID",ShowDim);
      ConfigPackageRecords.RUNMODAL;
    END;

    PROCEDURE ShowDatabaseRecords@4();
    VAR
      ConfigLine@1000 : Record 8622;
    BEGIN
      IF "Page ID" <> 0 THEN
        PAGE.RUN("Page ID")
      ELSE BEGIN
        ConfigLine.SETRANGE("Package Code","Package Code");
        ConfigLine.SETRANGE("Table ID","Table ID");
        IF ConfigLine.FINDFIRST AND (ConfigLine."Page ID" > 0) THEN
          PAGE.RUN(ConfigLine."Page ID")
        ELSE
          ERROR(Text010,FIELDCAPTION("Page ID"));
      END;
    END;

    PROCEDURE ShowPackageFields@11();
    VAR
      ConfigPackageField@1000 : Record 8616;
      ConfigPackageFields@1001 : Page 8624;
    BEGIN
      IF InitPackageFields THEN
        COMMIT;

      IF "Dimensions as Columns" THEN
        IF NOT DimensionPackageDataExist THEN BEGIN
          IF DimensionFieldsCount > 0 THEN
            DeleteDimensionFields;
          InitDimensionFields;
          COMMIT;
        END;

      ConfigPackageField.FILTERGROUP(2);
      ConfigPackageField.SETRANGE("Package Code","Package Code");
      ConfigPackageField.SETRANGE("Table ID","Table ID");
      ConfigPackageField.FILTERGROUP(0);
      ConfigPackageFields.SETTABLEVIEW(ConfigPackageField);
      ConfigPackageFields.RUNMODAL;
      CLEAR(ConfigPackageFields);
    END;

    PROCEDURE ShowPackageCard@14(PackageCode@1002 : Code[20]);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageCard@1001 : Page 8614;
    BEGIN
      ConfigPackage.FILTERGROUP(2);
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.FILTERGROUP(0);
      ConfigPackageCard.SETTABLEVIEW(ConfigPackage);
      ConfigPackageCard.RUNMODAL;
      CLEAR(ConfigPackageCard);
    END;

    PROCEDURE SetFieldStyle@12(FieldNumber@1000 : Integer) : Text;
    BEGIN
      CASE FieldNumber OF
        FIELDNO("No. of Package Records"):
          BEGIN
            CALCFIELDS("No. of Package Records");
            IF "No. of Package Records" > 0 THEN
              EXIT('Strong');
          END;
        FIELDNO("No. of Package Errors"):
          BEGIN
            CALCFIELDS("No. of Package Errors");
            IF "No. of Package Errors" > 0 THEN
              EXIT('Unfavorable');
          END;
      END;

      EXIT('');
    END;

    PROCEDURE ShowFilters@10();
    VAR
      ConfigPackageFilter@1001 : Record 8626;
      ConfigPackageFilters@1000 : Page 8623;
    BEGIN
      ConfigPackageFilter.FILTERGROUP(2);
      ConfigPackageFilter.SETRANGE("Package Code","Package Code");
      ConfigPackageFilter.SETRANGE("Table ID","Table ID");
      ConfigPackageFilter.FILTERGROUP(0);
      ConfigPackageFilters.SETTABLEVIEW(ConfigPackageFilter);
      ConfigPackageFilters.RUNMODAL;
      CLEAR(ConfigPackageFilters);
    END;

    PROCEDURE UpdateDimensionsPackageData@13();
    VAR
      ConfigPackageField@1000 : Record 8616;
      ConfigPackageRecord@1001 : Record 8614;
      ConfigPackageData@1002 : Record 8615;
    BEGIN
      ConfigPackageRecord.SETRANGE("Package Code","Package Code");
      ConfigPackageRecord.SETRANGE("Table ID","Table ID");
      IF ConfigPackageRecord.FINDSET THEN
        REPEAT
          ConfigPackageField.SETRANGE("Package Code","Package Code");
          ConfigPackageField.SETRANGE("Table ID","Table ID");
          ConfigPackageField.SETRANGE(Dimension,TRUE);
          IF ConfigPackageField.FINDSET THEN
            REPEAT
              ConfigPackageMgt.InsertPackageData(
                ConfigPackageData,"Package Code","Table ID",ConfigPackageRecord."No.",
                ConfigPackageField."Field ID",'',ConfigPackageRecord.Invalid);
            UNTIL ConfigPackageField.NEXT = 0;
        UNTIL ConfigPackageRecord.NEXT = 0;
    END;

    PROCEDURE SetHideValidationDialog@16(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE GetNoOfDatabaseRecords@15() : Integer;
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF "Table ID" = 0 THEN
        EXIT(0);

      RecRef.OPEN("Table ID",FALSE,"Company Filter (Source Table)");
      EXIT(RecRef.COUNT);
    END;

    PROCEDURE TextCheckSetup@30();
    VAR
      lRec_CPField@1000 : Record 8616;
      lInt_Position@1001 : Integer;
    BEGIN
      //S-003{
      //Check Number and Date Time Format
      TESTFIELD("Number Group Separator");
      TESTFIELD("Number Decimal Separator");
      TESTFIELD("Time Format");
      TESTFIELD("Date Format");
      TESTFIELD("Date Time Format");

      //Check Included Fields
      WITH lRec_CPField DO BEGIN
        GetPackageField(lRec_CPField);
        //Check Delimited
        IF ("Text File Type" = "Text File Type"::Delimited) THEN BEGIN
          //Included Fields should have Text File Column No. value
          SETCURRENTKEY("Package Code", "Table ID", "Delimited Column No.");
          SETRANGE("Delimited Column No.", 0);
          IF FINDFIRST THEN
            TESTFIELD("Delimited Column No.");

          //Included Fields should not overlapped
          SETRANGE("Delimited Column No.");
          IF FINDFIRST THEN
          REPEAT
            IF (lInt_Position >= "Delimited Column No.") THEN
              ERROR('[4Bz] %1 should not overlap in %2. %3', FIELDCAPTION("Delimited Column No."), TABLECAPTION, GETPOSITION);
            lInt_Position := "Delimited Column No.";
          UNTIL (NEXT = 0);
        END

        //Check Fixed Width
        ELSE IF ("Text File Type" = "Text File Type"::"Fixed Width") THEN BEGIN
          //Included Fields should have Fixed Width Start At value
          SETCURRENTKEY("Package Code", "Table ID", "Fixed Width Start At");
          SETRANGE("Fixed Width Start At", 0);
          IF FINDFIRST THEN
            TESTFIELD("Fixed Width Start At");

          //Included Fields should not overlapped
          SETRANGE("Fixed Width Start At");
          IF FINDFIRST THEN
          REPEAT
            IF (lInt_Position > "Fixed Width Start At") THEN
              ERROR('[4Bz] Fixed Width should not overlap in %1. %2!', TABLECAPTION, GETPOSITION);
            lInt_Position := "Fixed Width Start At" + "Fixed Width Length";
          UNTIL (NEXT = 0);
        END;
      END;
      //S-003}
    END;

    PROCEDURE TextDelimiter_Txt@23() Text_5 : Text[5];
    BEGIN
      //S-003{
      Text_5 := "Other Delimiter";
      CASE "Delimiter Type" OF
        "Delimiter Type"::Comma    : Text_5 := ',';
        "Delimiter Type"::Semicolon: Text_5 := ';';
        "Delimiter Type"::Tab      : Text_5[1] := 9;
        "Delimiter Type"::Space    : Text_5 := ' ';
        "Delimiter Type"::Other    : TESTFIELD("Other Delimiter");
      END;
      //S-003}
    END;

    PROCEDURE TextMaxFileColumnNo_Int@22() Integer : Integer;
    VAR
      lRec_CPField@1000 : Record 8616;
    BEGIN
      //S-003{
      WITH lRec_CPField DO BEGIN
        SETCURRENTKEY("Package Code", "Table ID", "Delimited Column No.");
        GetPackageField(lRec_CPField);
        IF FINDLAST THEN
          Integer := "Delimited Column No.";
      END;
      //S-003}
    END;

    PROCEDURE TextBoundQualifier_Txt@21(pTxt_Value@1000 : Text) Text : Text;
    BEGIN
      //S-003{
      Text := STRSUBSTNO('%1%2%1', "Text Qualifier", pTxt_Value);
      //S-003}
    END;

    PROCEDURE TextRemoveQualifier_Txt@25(pTxt_Value@1000 : Text) Text : Text;
    BEGIN
      //S-003{
      Text := DELCHR(pTxt_Value, '<>');
      Text := DELCHR(Text, '<>', "Text Qualifier");
      //S-003}
    END;

    PROCEDURE TextCastToCustomFormat_Txt@27(pVar_Value@1001 : Variant) Text : Text;
    BEGIN
      //S-003{
      //Cast Value to Custom Format Text
      WITH gCoU_NAVMgmt DO
        IF (pVar_Value.ISTEXT) OR (pVar_Value.ISCODE) THEN
          Text := pVar_Value
        ELSE IF (pVar_Value.ISINTEGER OR pVar_Value.ISBIGINTEGER OR pVar_Value.ISDECIMAL) THEN
          Text := TextFromNumber_Txt(pVar_Value, "Number Group Separator", "Number Decimal Separator", "Number Negative Pattern")
        ELSE IF (pVar_Value.ISTIME) THEN
          Text := TextFromDateTime_Txt(pVar_Value, "Time Format")
        ELSE IF (pVar_Value.ISDATE) THEN
          Text := TextFromDateTime_Txt(pVar_Value, "Date Format")
        ELSE IF (pVar_Value.ISDATETIME) THEN
          Text := TextFromDateTime_Txt(pVar_Value, "Date Time Format")
        ELSE IF (pVar_Value.ISOPTION) OR (pVar_Value.ISBOOLEAN) THEN
          Text := FORMAT(pVar_Value)
        ELSE IF (pVar_Value.ISDATEFORMULA) THEN
          Text := FORMAT(pVar_Value)
        ELSE IF (pVar_Value.ISDURATION) THEN
          Text := FORMAT(pVar_Value)
        ELSE IF (pVar_Value.ISGUID) THEN
          Text := pVar_Value;

      //Bound Text Qualifier
      Text := TextBoundQualifier_Txt(Text);
      //S-003}
    END;

    PROCEDURE TextCastFromCustomFormat@29(pTxt_Value@1001 : Text;pTxt_NavDataType@1002 : Text[20];pInt_NavDataLength@1003 : Integer;VAR vVar_Value@1000 : Variant);
    VAR
      lBol_Boolean@1004 : Boolean;
      lDur_Duration@1005 : Duration;
      lGUI_GUID@1006 : GUID;
    BEGIN
      //S-003{
      //Remove Text Qualifier to get value
      pTxt_Value := TextRemoveQualifier_Txt(pTxt_Value);

      //Cast Custom Format Text to Value
      CLEAR(vVar_Value);
      WITH gCoU_NAVMgmt DO
        CASE (pTxt_NavDataType) OF
          'Text', 'Code'          : vVar_Value := COPYSTR(pTxt_Value, 1, pInt_NavDataLength);
          'Integer', 'BigInteger' : vVar_Value := NumberFromText_Int(pTxt_Value, "Number Group Separator", "Number Decimal Separator", "Number Negative Pattern");
          'Decimal'               : vVar_Value := NumberFromText_Int(pTxt_Value, "Number Group Separator", "Number Decimal Separator", "Number Negative Pattern");
          'Time'                  : vVar_Value := TimeFromText_Tim(pTxt_Value, "Time Format");
          'Date'                  : vVar_Value := DateFromText_Dat(pTxt_Value, "Date Format");
          'DateTime'              : vVar_Value := DateTimeFromText_DTi(pTxt_Value, "Date Time Format");
          'Option'                : vVar_Value := pTxt_Value; //As String DataColumn
          'Boolean'               : vVar_Value := GetIf_Bol(EVALUATE(lBol_Boolean, pTxt_Value), lBol_Boolean, lBol_Boolean);
          'DateFormula'           : vVar_Value := pTxt_Value; //As String DataColumn
          'Duration'              : vVar_Value := GetIf_Dur(EVALUATE(lDur_Duration, pTxt_Value), lDur_Duration, lDur_Duration);
          'GUID'                  : IF EVALUATE(lGUI_GUID, pTxt_Value) THEN vVar_Value := lGUI_GUID ELSE vVar_Value := lGUI_GUID;
        END;
      //S-003}
    END;

    PROCEDURE CheckFieldIncluded@19();
    VAR
      lRec_CPField@1000 : Record 8616;
    BEGIN
      //S-003{
      WITH lRec_CPField DO BEGIN
        GetPackageField(lRec_CPField);
        IF (COUNT = 0) THEN
          ERROR('[4Bz] %1 should have at least one Included Field. %2', Rec.TABLECAPTION, Rec.GETPOSITION);
      END;
      //S-003}
    END;

    PROCEDURE GetPackageField@24(VAR vRec_CPField@1000 : Record 8616);
    BEGIN
      //S-003{
      WITH vRec_CPField DO BEGIN
        SETRANGE("Package Code", Rec."Package Code");
        SETRANGE("Table ID", Rec."Table ID");
        SETRANGE("Include Field", TRUE);
      END;
      //S-003}
    END;

    PROCEDURE UpdateFieldDataType@26();
    VAR
      lRec_CPField@1000 : Record 8616;
      lRec_Field@1001 : Record 2000000041;
    BEGIN
      //S-003{
      WITH lRec_CPField DO BEGIN
        SETRANGE("Package Code", Rec."Package Code");
        SETRANGE("Table ID", Rec."Table ID");
        IF FINDSET THEN
          REPEAT
            lRec_Field.GET("Table ID", "Field ID");
            IF ("Field Data Type" <> FORMAT(lRec_Field.Type)) THEN BEGIN
              VALIDATE("Field Data Type", FORMAT(lRec_Field.Type));
              VALIDATE("Field Data Length", lRec_Field.Len);
              MODIFY(TRUE);
            END;
          UNTIL (NEXT = 0);
      END;
      //S-003}
    END;

    PROCEDURE AutoNumberDelimitedColumnNo@28();
    VAR
      lRec_CPField@1000 : Record 8616;
      lInt_ColumnNo@1001 : Integer;
    BEGIN
      //S-003{
      //Auto number Delimited Column No
      WITH lRec_CPField DO BEGIN
        SETCURRENTKEY("Package Code", "Table ID", "Processing Order");
        SETRANGE("Package Code", Rec."Package Code");
        SETRANGE("Table ID", Rec."Table ID");
        MODIFYALL("Delimited Column No.", 0, TRUE);
        SETRANGE("Include Field", TRUE);
        IF FINDSET THEN BEGIN
          lInt_ColumnNo := 1;
          REPEAT
            VALIDATE("Delimited Column No.", lInt_ColumnNo);
            MODIFY(TRUE);
            lInt_ColumnNo += 1;
          UNTIL (NEXT = 0);
        END;
      END;
      //S-003}
    END;

    PROCEDURE SuggestFixedWidthSetup@31();
    VAR
      lRec_CPField@1000 : Record 8616;
      lInt_StartAt@1001 : Integer;
      lInt_Length@1002 : Integer;
    BEGIN
      //S-003{
      WITH lRec_CPField DO BEGIN
        SETCURRENTKEY("Package Code", "Table ID", "Processing Order");
        SETRANGE("Package Code", Rec."Package Code");
        SETRANGE("Table ID", Rec."Table ID");
        MODIFYALL("Fixed Width Start At", 0, TRUE);
        MODIFYALL("Fixed Width Length", 0, TRUE);
        SETRANGE("Include Field", TRUE);
        IF FINDSET THEN BEGIN
          lInt_StartAt := 1;
          REPEAT
            //Suggest length on Field Data Type, length of Field Name and Text Qualifier
            CASE "Field Data Type" OF
              'Text', 'Code': lInt_Length := "Field Data Length";
              'Integer'     : lInt_Length := 15;
              'BigInteger'  : lInt_Length := 20;
              'Decimal'     : lInt_Length := 25;
              'Time'        : lInt_Length := 10;
              'Date'        : lInt_Length := 15;
              'DateTime'    : lInt_Length := 30;
              'Option'      : lInt_Length := 30;
              'Boolean'     : lInt_Length := 3;
              'DateFormula' : lInt_Length := 10;
              'Duration'    : lInt_Length := 30;
              'GUID'        : lInt_Length := 38;
            END;
            lInt_Length := gCoU_NAVMgmt.MathMax_Int(gCoU_NAVMgmt.GetIf_Int("Validate Field", 1, 0) + STRLEN("Field Name"), lInt_Length);
            lInt_Length += STRLEN("Text Qualifier") * 2;
            //Update record
            VALIDATE("Fixed Width Start At", lInt_StartAt);
            VALIDATE("Fixed Width Length", lInt_Length);
            MODIFY(TRUE);
            //Move to next position
            lInt_StartAt += lInt_Length;
          UNTIL (NEXT = 0);
        END;
      END;
      //S-003}
    END;

    PROCEDURE UpdateImportedInformation@20();
    BEGIN
      //S-003{
      VALIDATE("Imported by User ID", USERID);
      VALIDATE("Imported Date and Time", CURRENTDATETIME);
      //S-003}
    END;

    PROCEDURE UpdateExportedInformation@18();
    BEGIN
      //S-003{
      VALIDATE("Exported Date and Time", CURRENTDATETIME);
      //S-003}
    END;

    BEGIN
    {
      Code  | Version | Author      | Description
      -----------------------------------------------------------------------------------------------------------------------------------
      S-003   140412    4BzSoftware   Universal Data Import Export.
    }
    END.
  }
}

