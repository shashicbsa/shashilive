OBJECT Table 5896 Inventory Adjmt. Entry (Order)
{
  OBJECT-PROPERTIES
  {
    Date=05/29/14;
    Time=12:00:00;
    Version List=NAVW17.10.00.36897;
  }
  PROPERTIES
  {
    Permissions=TableData 5896=i;
    CaptionML=[ENU=Inventory Adjmt. Entry (Order);
               ENA=Inventory Adjmt. Entry (Order)];
  }
  FIELDS
  {
    { 1   ;   ;Order Type          ;Option        ;CaptionML=[ENU=Order Type;
                                                              ENA=Order Type];
                                                   OptionCaptionML=[ENU=" ,Production,Transfer,Service,Assembly";
                                                                    ENA=" ,Production,Transfer,Service,Assembly"];
                                                   OptionString=[ ,Production,Transfer,Service,Assembly] }
    { 2   ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENA=Order No.] }
    { 3   ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENA=Order Line No.] }
    { 4   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENA=Item No.] }
    { 7   ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header".No.;
                                                   CaptionML=[ENU=Routing No.;
                                                              ENA=Routing No.] }
    { 8   ;   ;Routing Reference No.;Integer      ;CaptionML=[ENU=Routing Reference No.;
                                                              ENA=Routing Reference No.] }
    { 21  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=[ENU=Indirect Cost %;
                                                              ENA=Indirect Cost %];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Overhead Rate       ;Decimal       ;CaptionML=[ENU=Overhead Rate;
                                                              ENA=Overhead Rate];
                                                   AutoFormatType=2 }
    { 29  ;   ;Cost is Adjusted    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Cost is Adjusted;
                                                              ENA=Cost is Adjusted] }
    { 30  ;   ;Allow Online Adjustment;Boolean    ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Online Adjustment;
                                                              ENA=Allow Online Adjustment] }
    { 41  ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENA=Unit Cost];
                                                   AutoFormatType=2 }
    { 42  ;   ;Direct Cost         ;Decimal       ;CaptionML=[ENU=Direct Cost;
                                                              ENA=Direct Cost];
                                                   AutoFormatType=2 }
    { 43  ;   ;Indirect Cost       ;Decimal       ;CaptionML=[ENU=Indirect Cost;
                                                              ENA=Indirect Cost];
                                                   AutoFormatType=2 }
    { 44  ;   ;Single-Level Material Cost;Decimal ;CaptionML=[ENU=Single-Level Material Cost;
                                                              ENA=Single-Level Material Cost];
                                                   AutoFormatType=2 }
    { 45  ;   ;Single-Level Capacity Cost;Decimal ;CaptionML=[ENU=Single-Level Capacity Cost;
                                                              ENA=Single-Level Capacity Cost];
                                                   AutoFormatType=2 }
    { 46  ;   ;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              ENA=Single-Level Subcontrd. Cost];
                                                   AutoFormatType=2 }
    { 47  ;   ;Single-Level Cap. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              ENA=Single-Level Cap. Ovhd Cost];
                                                   AutoFormatType=2 }
    { 48  ;   ;Single-Level Mfg. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              ENA=Single-Level Mfg. Ovhd Cost];
                                                   AutoFormatType=2 }
    { 52  ;   ;Direct Cost (ACY)   ;Decimal       ;CaptionML=[ENU=Direct Cost (ACY);
                                                              ENA=Direct Cost (ACY)] }
    { 53  ;   ;Indirect Cost (ACY) ;Decimal       ;CaptionML=[ENU=Indirect Cost (ACY);
                                                              ENA=Indirect Cost (ACY)] }
    { 54  ;   ;Single-Lvl Material Cost (ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl. Material Cost (ACY);
                                                              ENA=Single-Lvl. Material Cost (ACY)];
                                                   AutoFormatType=2 }
    { 55  ;   ;Single-Lvl Capacity Cost (ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl. Capacity Cost (ACY);
                                                              ENA=Single-Lvl. Capacity Cost (ACY)];
                                                   AutoFormatType=2 }
    { 56  ;   ;Single-Lvl Subcontrd Cost(ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl. Subcontrd. Cost (ACY);
                                                              ENA=Single-Lvl. Subcontrd. Cost (ACY)];
                                                   AutoFormatType=2 }
    { 57  ;   ;Single-Lvl Cap. Ovhd Cost(ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl. Cap. Ovhd. Cost (ACY);
                                                              ENA=Single-Lvl. Cap. Ovhd. Cost (ACY)];
                                                   AutoFormatType=2 }
    { 58  ;   ;Single-Lvl Mfg. Ovhd Cost(ACY);Decimal;
                                                   CaptionML=[ENU=Single-Lvl. Mfg. Ovhd. Cost (ACY);
                                                              ENA=Single-Lvl. Mfg. Ovhd. Cost (ACY)];
                                                   AutoFormatType=2 }
    { 61  ;   ;Completely Invoiced ;Boolean       ;CaptionML=[ENU=Completely Invoiced;
                                                              ENA=Completely Invoiced] }
    { 62  ;   ;Is Finished         ;Boolean       ;CaptionML=[ENU=Is Finished;
                                                              ENA=Is Finished] }
  }
  KEYS
  {
    {    ;Order Type,Order No.,Order Line No.     ;Clustered=Yes }
    {    ;Cost is Adjusted,Allow Online Adjustment }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1002 : Record 98;
      GLSetupRead@1003 : Boolean;
      AmtRndgPrec@1001 : Decimal;
      AmtRndgPrecACY@1000 : Decimal;
      RndgResidual@1004 : Decimal;
      RndgResidualACY@1005 : Decimal;
      UnitAmtRndgPrec@1006 : Decimal;
      UnitAmtRndgPrecACY@1007 : Decimal;

    PROCEDURE RoundCosts@77(ShareOfTotalCost@1003 : Decimal);
    BEGIN
      GetRoundingPrecision(AmtRndgPrec,AmtRndgPrecACY);
      RoundAmounts(AmtRndgPrec,AmtRndgPrecACY,ShareOfTotalCost);
    END;

    PROCEDURE RoundUnitCosts@19(ShareOfTotalCost@1003 : Decimal);
    BEGIN
      GetUnitAmtRoundingPrecision(UnitAmtRndgPrec,UnitAmtRndgPrecACY);
      RoundAmounts(UnitAmtRndgPrec,UnitAmtRndgPrecACY,ShareOfTotalCost);
    END;

    LOCAL PROCEDURE RoundAmounts@20(RndgPrecLCY@1000 : Decimal;RndgPrecACY@1001 : Decimal;ShareOfTotalCost@1002 : Decimal);
    BEGIN
      "Direct Cost" := RoundCost("Direct Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);
      "Indirect Cost" := RoundCost("Indirect Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);
      "Single-Level Material Cost" := RoundCost("Single-Level Material Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);
      "Single-Level Capacity Cost" := RoundCost("Single-Level Capacity Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);
      "Single-Level Subcontrd. Cost" := RoundCost("Single-Level Subcontrd. Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);
      "Single-Level Cap. Ovhd Cost" := RoundCost("Single-Level Cap. Ovhd Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);
      "Single-Level Mfg. Ovhd Cost" := RoundCost("Single-Level Mfg. Ovhd Cost",ShareOfTotalCost,RndgPrecLCY,FALSE);

      "Direct Cost (ACY)" := RoundCost("Direct Cost (ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
      "Indirect Cost (ACY)" := RoundCost("Indirect Cost (ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
      "Single-Lvl Material Cost (ACY)" := RoundCost("Single-Lvl Material Cost (ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
      "Single-Lvl Capacity Cost (ACY)" := RoundCost("Single-Lvl Capacity Cost (ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
      "Single-Lvl Subcontrd Cost(ACY)" := RoundCost("Single-Lvl Subcontrd Cost(ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
      "Single-Lvl Cap. Ovhd Cost(ACY)" := RoundCost("Single-Lvl Cap. Ovhd Cost(ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := RoundCost("Single-Lvl Mfg. Ovhd Cost(ACY)",ShareOfTotalCost,RndgPrecACY,TRUE);
    END;

    PROCEDURE CalcOvhdCost@1(OutputQty@1001 : Decimal);
    BEGIN
      GetRoundingPrecision(AmtRndgPrec,AmtRndgPrecACY);

      "Single-Level Mfg. Ovhd Cost" :=
        (("Single-Level Material Cost" + "Single-Level Capacity Cost" +
          "Single-Level Subcontrd. Cost" + "Single-Level Cap. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * OutputQty);
      "Single-Level Mfg. Ovhd Cost" := ROUND("Single-Level Mfg. Ovhd Cost",AmtRndgPrec);

      "Single-Lvl Mfg. Ovhd Cost(ACY)" :=
        (("Single-Lvl Material Cost (ACY)" + "Single-Lvl Capacity Cost (ACY)" +
          "Single-Lvl Subcontrd Cost(ACY)" + "Single-Lvl Cap. Ovhd Cost(ACY)") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * OutputQty * CalcCurrencyFactor);
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := ROUND("Single-Lvl Mfg. Ovhd Cost(ACY)",AmtRndgPrecACY);
    END;

    PROCEDURE GetCostsFromItem@2(OutputQty@1000 : Decimal);
    BEGIN
      GetUnroundedCostsFromItem;
      RoundCosts(OutputQty);
      CalcCostFromCostShares;
    END;

    PROCEDURE GetUnitCostsFromItem@26();
    BEGIN
      GetUnroundedCostsFromItem;
      RoundUnitCosts(1);
      CalcCostFromCostShares;
    END;

    LOCAL PROCEDURE GetUnroundedCostsFromItem@21();
    VAR
      Item@1001 : Record 27;
      CurrExchRate@1002 : Decimal;
    BEGIN
      Item.GET("Item No.");

      "Indirect Cost %" := Item."Indirect Cost %";
      "Overhead Rate" := Item."Overhead Rate";

      "Single-Level Material Cost" := Item."Single-Level Material Cost";
      "Single-Level Capacity Cost" := Item."Single-Level Capacity Cost";
      "Single-Level Subcontrd. Cost" := Item."Single-Level Subcontrd. Cost";
      "Single-Level Cap. Ovhd Cost" := Item."Single-Level Cap. Ovhd Cost";
      "Single-Level Mfg. Ovhd Cost" := Item."Single-Level Mfg. Ovhd Cost";

      CurrExchRate := CalcCurrencyFactor;
      "Direct Cost (ACY)" := "Direct Cost" * CurrExchRate;
      "Indirect Cost (ACY)" := "Indirect Cost" * CurrExchRate;
      "Single-Lvl Material Cost (ACY)" := "Single-Level Material Cost" * CurrExchRate;
      "Single-Lvl Capacity Cost (ACY)" := "Single-Level Capacity Cost" * CurrExchRate;
      "Single-Lvl Subcontrd Cost(ACY)" := "Single-Level Subcontrd. Cost" * CurrExchRate;
      "Single-Lvl Cap. Ovhd Cost(ACY)" := "Single-Level Cap. Ovhd Cost" * CurrExchRate;
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := "Single-Level Mfg. Ovhd Cost" * CurrExchRate;
    END;

    LOCAL PROCEDURE CalcCostFromCostShares@29();
    BEGIN
      CalcDirectCostFromCostShares;
      CalcIndirectCostFromCostShares;
      CalcUnitCost;
    END;

    LOCAL PROCEDURE CalcCurrencyFactor@24() : Decimal;
    VAR
      OutputItemLedgEntry@1001 : Record 32;
      CurrExchRate@1002 : Record 330;
    BEGIN
      GetRoundingPrecision(AmtRndgPrec,AmtRndgPrecACY);
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        OutputItemLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
        OutputItemLedgEntry.SETRANGE("Order Type","Order Type");
        OutputItemLedgEntry.SETRANGE("Order No.","Order No.");
        IF "Order Type" = "Order Type"::Production THEN
          OutputItemLedgEntry.SETRANGE("Order Line No.","Order Line No.");
        OutputItemLedgEntry.SETRANGE("Entry Type",OutputItemLedgEntry."Entry Type"::Output);
        IF OutputItemLedgEntry.FINDLAST THEN
          EXIT(CurrExchRate.ExchangeRate(OutputItemLedgEntry."Posting Date",GLSetup."Additional Reporting Currency"));
      END;
    END;

    PROCEDURE SetProdOrderLine@3(ProdOrderLine@1000 : Record 5406);
    BEGIN
      INIT;
      "Order Type" := "Order Type"::Production;
      "Order No." := ProdOrderLine."Prod. Order No.";
      "Order Line No." := ProdOrderLine."Line No.";
      "Item No." := ProdOrderLine."Item No.";
      "Routing No." := ProdOrderLine."Routing No.";
      "Routing Reference No." := ProdOrderLine."Routing Reference No.";
      "Cost is Adjusted" := FALSE;
      "Is Finished" := ProdOrderLine.Status = ProdOrderLine.Status::Finished;
      GetUnitCostsFromItem;
      IF NOT INSERT THEN;
    END;

    PROCEDURE SetAsmOrder@13(AssemblyHeader@1000 : Record 900);
    BEGIN
      SetAssemblyDoc(AssemblyHeader."No.",AssemblyHeader."Item No.");
    END;

    PROCEDURE SetPostedAsmOrder@16(PostedAssemblyHeader@1000 : Record 910);
    BEGIN
      SetAssemblyDoc(PostedAssemblyHeader."Order No.",PostedAssemblyHeader."Item No.");
    END;

    LOCAL PROCEDURE SetAssemblyDoc@17(OrderNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      INIT;
      "Order Type" := "Order Type"::Assembly;
      "Order No." := OrderNo;
      "Item No." := ItemNo;
      "Cost is Adjusted" := FALSE;
      "Is Finished" := TRUE;
      GetCostsFromItem(1);
      IF NOT INSERT THEN;
    END;

    PROCEDURE CalcDirectCostFromCostShares@14();
    BEGIN
      "Direct Cost" :=
        "Single-Level Material Cost" +
        "Single-Level Capacity Cost" +
        "Single-Level Subcontrd. Cost" +
        "Single-Level Cap. Ovhd Cost";
      "Direct Cost (ACY)" :=
        "Single-Lvl Material Cost (ACY)" +
        "Single-Lvl Capacity Cost (ACY)" +
        "Single-Lvl Subcontrd Cost(ACY)" +
        "Single-Lvl Cap. Ovhd Cost(ACY)";
    END;

    PROCEDURE CalcIndirectCostFromCostShares@15();
    BEGIN
      "Indirect Cost" := "Single-Level Mfg. Ovhd Cost";
      "Indirect Cost (ACY)" := "Single-Lvl Mfg. Ovhd Cost(ACY)";
    END;

    PROCEDURE CalcUnitCost@4();
    BEGIN
      "Unit Cost" := "Direct Cost" + "Indirect Cost";
    END;

    PROCEDURE CalcDiff@7(VAR InvtAdjmtEntryOrder@1000 : Record 5896;OnlyCostShares@1001 : Boolean);
    BEGIN
      IF NOT OnlyCostShares THEN BEGIN
        "Direct Cost" := InvtAdjmtEntryOrder."Direct Cost" - "Direct Cost";
        "Indirect Cost" := InvtAdjmtEntryOrder."Indirect Cost" - "Indirect Cost";
      END;
      "Single-Level Material Cost" := InvtAdjmtEntryOrder."Single-Level Material Cost" - "Single-Level Material Cost";
      "Single-Level Capacity Cost" := InvtAdjmtEntryOrder."Single-Level Capacity Cost" - "Single-Level Capacity Cost";
      "Single-Level Subcontrd. Cost" := InvtAdjmtEntryOrder."Single-Level Subcontrd. Cost" - "Single-Level Subcontrd. Cost";
      "Single-Level Cap. Ovhd Cost" := InvtAdjmtEntryOrder."Single-Level Cap. Ovhd Cost" - "Single-Level Cap. Ovhd Cost";
      "Single-Level Mfg. Ovhd Cost" := InvtAdjmtEntryOrder."Single-Level Mfg. Ovhd Cost" - "Single-Level Mfg. Ovhd Cost";

      IF NOT OnlyCostShares THEN BEGIN
        "Direct Cost (ACY)" := InvtAdjmtEntryOrder."Direct Cost (ACY)" - "Direct Cost (ACY)";
        "Indirect Cost (ACY)" := InvtAdjmtEntryOrder."Indirect Cost (ACY)" - "Indirect Cost (ACY)";
      END;
      "Single-Lvl Material Cost (ACY)" := InvtAdjmtEntryOrder."Single-Lvl Material Cost (ACY)" - "Single-Lvl Material Cost (ACY)";
      "Single-Lvl Capacity Cost (ACY)" := InvtAdjmtEntryOrder."Single-Lvl Capacity Cost (ACY)" - "Single-Lvl Capacity Cost (ACY)";
      "Single-Lvl Subcontrd Cost(ACY)" := InvtAdjmtEntryOrder."Single-Lvl Subcontrd Cost(ACY)" - "Single-Lvl Subcontrd Cost(ACY)";
      "Single-Lvl Cap. Ovhd Cost(ACY)" := InvtAdjmtEntryOrder."Single-Lvl Cap. Ovhd Cost(ACY)" - "Single-Lvl Cap. Ovhd Cost(ACY)";
      "Single-Lvl Mfg. Ovhd Cost(ACY)" := InvtAdjmtEntryOrder."Single-Lvl Mfg. Ovhd Cost(ACY)" - "Single-Lvl Mfg. Ovhd Cost(ACY)";
    END;

    PROCEDURE AddDirectCost@5(CostAmtLCY@1000 : Decimal;CostAmtACY@1001 : Decimal);
    BEGIN
      "Direct Cost" += CostAmtLCY;
      "Direct Cost (ACY)" += CostAmtACY;
    END;

    PROCEDURE AddIndirectCost@6(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Indirect Cost" += CostAmtLCY;
      "Indirect Cost (ACY)" += CostAmtACY;
    END;

    PROCEDURE AddSingleLvlMaterialCost@8(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Material Cost" += CostAmtLCY;
      "Single-Lvl Material Cost (ACY)" += CostAmtACY;
    END;

    PROCEDURE AddSingleLvlCapacityCost@9(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Capacity Cost" += CostAmtLCY;
      "Single-Lvl Capacity Cost (ACY)" += CostAmtACY;
    END;

    PROCEDURE AddSingleLvlSubcontrdCost@10(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Subcontrd. Cost" += CostAmtLCY;
      "Single-Lvl Subcontrd Cost(ACY)" += CostAmtACY;
    END;

    PROCEDURE AddSingleLvlCapOvhdCost@11(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Cap. Ovhd Cost" += CostAmtLCY;
      "Single-Lvl Cap. Ovhd Cost(ACY)" += CostAmtACY;
    END;

    PROCEDURE AddSingleLvlMfgOvhdCost@12(CostAmtLCY@1001 : Decimal;CostAmtACY@1000 : Decimal);
    BEGIN
      "Single-Level Mfg. Ovhd Cost" += CostAmtLCY;
      "Single-Lvl Mfg. Ovhd Cost(ACY)" += CostAmtACY;
    END;

    LOCAL PROCEDURE GetRoundingPrecision@30(VAR AmtRndingPrecLCY@1001 : Decimal;VAR AmtRndingPrecACY@1000 : Decimal);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      AmtRndingPrecLCY := GLSetup."Amount Rounding Precision";
      AmtRndingPrecACY := Currency."Amount Rounding Precision";
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        Currency.GET(GLSetup."Additional Reporting Currency");
        Currency.CheckAmountRoundingPrecision;
        AmtRndingPrecACY := Currency."Amount Rounding Precision"
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetUnitAmtRoundingPrecision@18(VAR UnitAmtRndingPrecLCY@1001 : Decimal;VAR UnitAmtRndingPrecACY@1000 : Decimal);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      UnitAmtRndingPrecLCY := GLSetup."Unit-Amount Rounding Precision";
      UnitAmtRndingPrecACY := Currency."Unit-Amount Rounding Precision";
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        Currency.GET(GLSetup."Additional Reporting Currency");
        Currency.CheckAmountRoundingPrecision;
        UnitAmtRndingPrecACY := Currency."Unit-Amount Rounding Precision"
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE RoundCost@25(Cost@1000 : Decimal;ShareOfTotal@1002 : Decimal;AmtRndgPrec@1003 : Decimal;IsAmtACY@1004 : Boolean) : Decimal;
    VAR
      UnRoundedCost@1001 : Decimal;
    BEGIN
      IF Cost <> 0 THEN BEGIN
        IF IsAmtACY THEN BEGIN
          UnRoundedCost := Cost * ShareOfTotal + RndgResidualACY;
          Cost := ROUND(UnRoundedCost,AmtRndgPrec);
          RndgResidualACY := UnRoundedCost - Cost;
        END ELSE BEGIN
          UnRoundedCost := Cost * ShareOfTotal + RndgResidual;
          Cost := ROUND(UnRoundedCost,AmtRndgPrec);
          RndgResidual := UnRoundedCost - Cost;
        END;
        EXIT(Cost);
      END;
    END;

    BEGIN
    END.
  }
}

