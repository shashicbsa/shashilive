OBJECT Table 60041 Adv. Acc. Schedule Line
{
  OBJECT-PROPERTIES
  {
    Date=10/27/10;
    Time=[ 9:43:18];
    Version List=YIMM-CONSOL;
  }
  PROPERTIES
  {
    OnModify=BEGIN
               UpdateFilterSetup;
             END;

    OnDelete=BEGIN
               DeleteFilterSetup;
             END;

    LookupPageID=Page62083;
    DrillDownPageID=Page62083;
  }
  FIELDS
  {
    { 1   ;   ;Account Schedule Name;Code20       ;TableRelation="Adv. Acc. Schedule Name";
                                                   CaptionML=ENU=Schedule Name }
    { 2   ;   ;Type                ;Option        ;OptionCaptionML=ENU=Row,Column;
                                                   OptionString=Row,Column }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Row/Col No.         ;Code10         }
    { 5   ;   ;Description         ;Text80         }
    { 6   ;   ;Totaling            ;Text250       ;TableRelation=IF (Totaling Type=CONST(Posting Accounts),
                                                                     Totaling Type=CONST(Total Accounts)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      GLAcc.SETFILTER("No.",Totaling);
                                                                      GLAcc.CALCFIELDS(Balance);
                                                                    END;

                                                                  "Totaling Type"::Formula,"Totaling Type"::Percentage:
                                                                    CheckFormula(Totaling);

                                                                  "Totaling Type"::" ":
                                                                    Totaling := '';
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No }
    { 7   ;   ;Totaling Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE(Totaling);
                                                              END;

                                                   CaptionML=ENU=Totaling Type;
                                                   OptionCaptionML=ENU=" ,Posting Accounts,Total Accounts,Formula,Percentage";
                                                   OptionString=[ ,Posting Accounts,Total Accounts,Formula,Percentage] }
    { 11  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 12  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=ENU=Dimension 1 Filter;
                                                   CaptionClass=GetCaptionClass(1) }
    { 13  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=ENU=Dimension 2 Filter;
                                                   CaptionClass=GetCaptionClass(2) }
    { 14  ;   ;Budget Filter       ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="G/L Budget Name";
                                                   CaptionML=ENU=Budget Filter }
    { 15  ;   ;Business Unit Filter;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Business Unit";
                                                   CaptionML=ENU=Business Unit Filter }
    { 16  ;   ;Show                ;Option        ;CaptionML=ENU=Show;
                                                   OptionCaptionML=ENU=Yes,No,,When Positive Balance,When Negative Balance;
                                                   OptionString=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance }
    { 19  ;   ;Dimension 1 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Dimension 1 Totaling;
                                                   CaptionClass=GetCaptionClass(5) }
    { 20  ;   ;Dimension 2 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Dimension 2 Totaling;
                                                   CaptionClass=GetCaptionClass(6) }
    { 23  ;   ;Bold                ;Boolean       ;CaptionML=ENU=Bold }
    { 24  ;   ;Italic              ;Boolean       ;CaptionML=ENU=Italic }
    { 25  ;   ;Underline           ;Boolean       ;CaptionML=ENU=Underline }
    { 26  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=ENU=Show Opposite Sign }
    { 27  ;   ;Line Type           ;Option        ;OptionCaptionML=ENU=Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year;
                                                   OptionString=Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year }
    { 28  ;   ;Amount Type         ;Option        ;CaptionML=ENU=Amount Type;
                                                   OptionCaptionML=ENU=Net Amount,Debit Amount,Credit Amount;
                                                   OptionString=Net Amount,Debit Amount,Credit Amount }
    { 30  ;   ;Color               ;Option        ;CaptionML=ENU=Color;
                                                   OptionCaptionML=ENU=" ,,red,blue,pink";
                                                   OptionString=[ ,,red,blue,pink] }
    { 31  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Source No.");
                                                              END;

                                                   OptionCaptionML=ENU=" ,Customer,Vendor";
                                                   OptionString=[ ,Customer,Vendor] }
    { 32  ;   ;Source No.          ;Code250       ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor;
                                                   OnValidate=VAR
                                                                Cust@1000000000 : Record 18;
                                                                Vend@1000000001 : Record 23;
                                                              BEGIN
                                                                CASE "Source Type" OF
                                                                  "Source Type"::Customer:
                                                                    BEGIN
                                                                      Cust.SETFILTER("No.","Source No.");
                                                                      Cust.CALCFIELDS(Balance);
                                                                    END;

                                                                  "Source Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.SETFILTER("No.","Source No.");
                                                                      Vend.CALCFIELDS(Balance);
                                                                    END;

                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No }
    { 34  ;   ;Ledger Entry Type   ;Option        ;CaptionML=ENU=Ledger Entry Type;
                                                   OptionCaptionML=ENU=G/L Entries,G/L Budget Entries;
                                                   OptionString=G/L Entries,G/L Budget Entries }
    { 35  ;   ;Comparison Date Formula;DateFormula;OnValidate=BEGIN
                                                                IF FORMAT("Comparison Date Formula") <> '' THEN
                                                                  VALIDATE("Comparison Period Formula",'');
                                                              END;

                                                   CaptionML=ENU=Comparison Date Formula }
    { 36  ;   ;Rounding Factor     ;Option        ;CaptionML=ENU=Rounding Factor;
                                                   OptionCaptionML=ENU=None,0.01,0.1,1,1000,1000000;
                                                   OptionString=None,0.01,0.1,1,1000,1000000 }
    { 37  ;   ;Comparison Period Formula;Code20   ;OnValidate=VAR
                                                                Steps@1001 : Integer;
                                                                Type@1000 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter';
                                                                RangeFromType@1007 : 'Int,CP,LP';
                                                                RangeToType@1006 : 'Int,CP,LP';
                                                                RangeFromInt@1005 : Integer;
                                                                RangeToInt@1004 : Integer;
                                                              BEGIN
                                                                ParsePeriodFormula(
                                                                  "Comparison Period Formula",
                                                                  Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);
                                                                IF "Comparison Period Formula" <> '' THEN
                                                                  CLEAR("Comparison Date Formula");
                                                              END;

                                                   CaptionML=ENU=Comparison Period Formula }
    { 38  ;   ;Comment             ;Text250        }
    { 39  ;   ;Cell Filters        ;Text30        ;InitValue=No;
                                                   Editable=No }
    { 40  ;   ;Description 2       ;Text80         }
    { 41  ;   ;Skip Calculation    ;Boolean        }
    { 42  ;   ;Description 3       ;Text80         }
    { 43  ;   ;Skip Source Filter  ;Boolean        }
    { 44  ;   ;Business Unit Totaling;Text80      ;TableRelation="Business Unit";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Business Unit Totaling }
    { 45  ;   ;Elimination Entry Only;Boolean      }
  }
  KEYS
  {
    {    ;Account Schedule Name,Type,Line No.     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Default Report';
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 1 Filter';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 2 Filter';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 3 Filter';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension 4 Filter';
      Text010@1010 : TextConst 'ENU=,, Totaling';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension 1 Totaling';
      Text012@1012 : TextConst 'ENU=1,5,,Dimension 2 Totaling';
      Text013@1013 : TextConst 'ENU=1,5,,Dimension 3 Totaling';
      Text014@1014 : TextConst 'ENU=1,5,,Dimension 4 Totaling';
      AccSchedName@1015 : Record 60040;
      GLAcc@1000000005 : Record 15;
      GLSetup@1018 : Record 98;
      HasGLSetup@1019 : Boolean;
      Text015@1020 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.';
      Text101@1000000000 : TextConst 'ENU=%1 is not a valid Period Formula';
      Text102@1000000004 : TextConst 'ENU=P';
      Text103@1000000003 : TextConst 'ENU=FY';
      Text104@1000000002 : TextConst 'ENU=CP';
      Text105@1000000001 : TextConst 'ENU=LP';

    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      GLSetup.GET;
      CASE DimNo OF
        1: DimVal.SETRANGE("Dimension Code",GLSetup."Shortcut Dimension 1 Code");
        2: DimVal.SETRANGE("Dimension Code",GLSetup."Shortcut Dimension 2 Code");
        3: DimVal.SETRANGE("Dimension Code",GLSetup."Shortcut Dimension 3 Code");
        4: DimVal.SETRANGE("Dimension Code",GLSetup."Shortcut Dimension 4 Code");
      END;

      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := Text + DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    PROCEDURE GetCaptionClass@7(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GLSetup.GET;
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF GLSetup."Shortcut Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + GLSetup."Shortcut Dimension 1 Code")
            ELSE
              EXIT(Text006);
          END;
        2:
          BEGIN
            IF GLSetup."Shortcut Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + GLSetup."Shortcut Dimension 2 Code")
            ELSE
              EXIT(Text007);
          END;
        3:
          BEGIN
            IF GLSetup."Shortcut Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + GLSetup."Shortcut Dimension 3 Code")
            ELSE
              EXIT(Text008);
          END;
        4:
          BEGIN
            IF GLSetup."Shortcut Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + GLSetup."Shortcut Dimension 4 Code")
            ELSE
              EXIT(Text009);
          END;
        5:
          BEGIN
            IF GLSetup."Shortcut Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + GLSetup."Shortcut Dimension 1 Code" + ',, Totaling')
            ELSE
              EXIT(Text011);
          END;
        6:
          BEGIN
            IF GLSetup."Shortcut Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + GLSetup."Shortcut Dimension 2 Code" + ',, Totaling')
            ELSE
              EXIT(Text012);
          END;
        7:
          BEGIN
            IF GLSetup."Shortcut Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + GLSetup."Shortcut Dimension 3 Code" + ',, Totaling')
            ELSE
              EXIT(Text013);
          END;
        8:
          BEGIN
            IF GLSetup."Shortcut Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + GLSetup."Shortcut Dimension 4 Code" + ',, Totaling')
            ELSE
              EXIT(Text014);
          END;
      END;
    END;

    PROCEDURE UpdateFilterSetup@1000000004();
    VAR
      ColumnLayout@1000000002 : Record 60041;
      RowLayout@1000000001 : Record 60041;
      AccSchedFilterSetup@1000000000 : Record 60042;
    BEGIN
      IF (Description <> '')  OR ("Description 2" <> '') THEN
        IF Type = Type::Row THEN BEGIN
          ColumnLayout.SETRANGE("Account Schedule Name","Account Schedule Name");
          ColumnLayout.SETRANGE(Type,ColumnLayout.Type::Column);
          IF ColumnLayout.FINDFIRST THEN
            REPEAT
            IF AccSchedFilterSetup.GET("Account Schedule Name","Line No.",ColumnLayout."Line No.") THEN BEGIN
              AccSchedFilterSetup."Row No." := "Row/Col No.";
              AccSchedFilterSetup."Row Description" := Description;
              AccSchedFilterSetup."Row Description 2" := "Description 2";
              AccSchedFilterSetup."Row Description 3" := "Description 3";
              AccSchedFilterSetup."Column No." := ColumnLayout."Row/Col No.";
              AccSchedFilterSetup."Column Description" := ColumnLayout.Description;
              AccSchedFilterSetup."Column Description 2" := ColumnLayout."Description 2";
              AccSchedFilterSetup."Column Description 3" := ColumnLayout."Description 3";
              AccSchedFilterSetup.MODIFY;
            END;
          UNTIL ColumnLayout.NEXT=0;
        END ELSE  IF Type = Type::Column THEN BEGIN
          RowLayout.SETRANGE("Account Schedule Name","Account Schedule Name");
          RowLayout.SETRANGE(Type,ColumnLayout.Type::Row);
          IF RowLayout.FINDFIRST THEN
            REPEAT
            IF AccSchedFilterSetup.GET("Account Schedule Name",RowLayout."Line No.","Line No.") THEN BEGIN
              AccSchedFilterSetup."Row No." := RowLayout."Row/Col No.";
              AccSchedFilterSetup."Row Description" := RowLayout.Description;
              AccSchedFilterSetup."Row Description 2" := RowLayout."Description 2";
              AccSchedFilterSetup."Row Description 3" := RowLayout."Description 3";
              AccSchedFilterSetup."Column No." := "Row/Col No.";
              AccSchedFilterSetup."Column Description" := Description;
              AccSchedFilterSetup."Column Description 2" := "Description 2";
              AccSchedFilterSetup."Column Description 3" := "Description 3";
              AccSchedFilterSetup.MODIFY;
            END;
          UNTIL RowLayout.NEXT=0;
        END;
    END;

    PROCEDURE DeleteFilterSetup@1000000005();
    VAR
      AccSchedFilterSetup@1000000000 : Record 60042;
    BEGIN
        IF Type = Type::Row THEN BEGIN
          AccSchedFilterSetup.SETRANGE("Account Schedule Name","Account Schedule Name");
          AccSchedFilterSetup.SETRANGE("Row Line No.","Line No.");
          AccSchedFilterSetup.DELETEALL;
        END ELSE  IF Type = Type::Column THEN BEGIN
          AccSchedFilterSetup.SETRANGE("Account Schedule Name","Account Schedule Name");
          AccSchedFilterSetup.SETRANGE("Column Line No.","Line No.");
          AccSchedFilterSetup.DELETEALL;
        END;
    END;

    PROCEDURE CheckFormula@1(Formula@1000 : Code[80]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      FOR i := 1 TO STRLEN(Formula) DO BEGIN
        IF Formula[i] = '(' THEN
          ParenthesesLevel := ParenthesesLevel + 1
        ELSE
          IF Formula[i] = ')' THEN
            ParenthesesLevel := ParenthesesLevel - 1;
        IF ParenthesesLevel < 0 THEN
          ERROR(Text001,i);
        IF Formula[i] IN ['+','-','*','/','^'] THEN BEGIN
          IF HasOperator THEN
            ERROR(Text002,i)
          ELSE
            HasOperator := TRUE;
          IF i = STRLEN(Formula) THEN
            ERROR(Text003,i)
          ELSE
            IF Formula[i+1] = ')' THEN
              ERROR(Text003,i);
        END ELSE
          HasOperator := FALSE;
      END;
      IF ParenthesesLevel > 0 THEN
        ERROR(Text004)
      ELSE
        IF ParenthesesLevel < 0 THEN
          ERROR(Text005);
    END;

    PROCEDURE ParsePeriodFormula@1000000013(Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal Year';VAR RangeFromType@1009 : 'Int,CP,LP';VAR RangeToType@1008 : 'Int,CP,LP';VAR RangeFromInt@1003 : Integer;VAR RangeToInt@1000 : Integer);
    VAR
      OriginalFormula@1004 : Code[20];
    BEGIN
      // <PeriodFormula> ::= <signed integer> <formula> | blank
      // <signed integer> ::= <sign> <positive integer> | blank
      // <sign> ::= + | - | blank
      // <positive integer> ::= <digit 1-9> <digits>
      // <digit 1-9> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      // <digits> ::= 0 <digits> | <digit 1-9> <digits> | blank
      // <formula> ::= P | FY <range> | FH <range> | FQ <range>
      // <range> ::= blank | [<range2>]
      // <range2> ::= <index> .. <index> | <index>
      // <index> ::= <positive integer> | CP | LP

      OriginalFormula := Formula;
      Formula := DELCHR(Formula);

      IF NOT ParseFormula(Formula,Steps,Type) THEN
        ERROR(Text101,OriginalFormula);

      IF Type = Type::"Fiscal Year" THEN
        IF NOT ParseRange(Formula,RangeFromType,RangeFromInt,RangeToType,RangeToInt) THEN
          ERROR(Text101,OriginalFormula);

      IF Formula <> '' THEN
        ERROR(Text101,OriginalFormula);
    END;

    LOCAL PROCEDURE ParseFormula@1000000012(VAR Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter') : Boolean;
    BEGIN
      Steps := 0;
      Type := Type::" ";

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseSignedInteger(Formula,Steps) THEN
        EXIT(FALSE);

      IF Formula = '' THEN
        EXIT(FALSE);

      IF NOT ParseType(Formula,Type) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseSignedInteger@1000000011(VAR Formula@1000 : Code[20];VAR Int@1001 : Integer) : Boolean;
    BEGIN
      Int := 0;

      CASE COPYSTR(Formula,1,1) OF
        '-':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
            Int := -Int;
          END;
        '+':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
          END;
        ELSE
          BEGIN
            IF NOT ParseInt(Formula,Int,TRUE) THEN
              EXIT(FALSE);
          END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseInt@2(VAR Formula@1001 : Code[20];VAR Int@1000 : Integer;AllowNotInt@1003 : Boolean) : Boolean;
    VAR
      IntegerStr@1002 : Code[20];
    BEGIN
      IF COPYSTR(Formula,1,1) IN ['1'..'9'] THEN
        REPEAT
          IntegerStr := IntegerStr + COPYSTR(Formula,1,1);
          Formula := COPYSTR(Formula,2);
          IF Formula = '' THEN
            EXIT(FALSE);
        UNTIL NOT (COPYSTR(Formula,1,1) IN ['0'..'9'])
      ELSE
        EXIT(AllowNotInt);
      EVALUATE(Int,IntegerStr);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseType@1000000010(VAR Formula@1001 : Code[20];VAR Type@1000 : ' ,Period,Fiscal Year') : Boolean;
    BEGIN
      CASE ReadToken(Formula) OF
        Text102:
          Type := Type::Period;
        Text103:
          Type := Type::"Fiscal Year";
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseRange@1000000009(VAR Formula@1002 : Code[20];VAR FromType@1001 : 'Int,CP,LP';VAR FromInt@1004 : Integer;VAR ToType@1006 : 'Int,CP,LP';VAR ToInt@1005 : Integer) : Boolean;
    BEGIN
      FromType := FromType::CP;
      ToType := ToType::CP;

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseToken(Formula,'[') THEN
        EXIT(FALSE);

      IF NOT ParseIndex(Formula,FromType,FromInt) THEN
        EXIT(FALSE);
      IF Formula = '' THEN
        EXIT(FALSE);

      IF COPYSTR(Formula,1,1) = '.' THEN BEGIN
        IF NOT ParseToken(Formula,'..') THEN
          EXIT(FALSE);
        IF NOT ParseIndex(Formula,ToType,ToInt) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        ToType := FromType;
        ToInt := FromInt;
      END;

      IF NOT ParseToken(Formula,']') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseIndex@1000000008(VAR Formula@1002 : Code[20];VAR IndexType@1001 : 'Int,CP,LP';VAR Index@1004 : Integer) : Boolean;
    BEGIN
      IF Formula = '' THEN
        EXIT(FALSE);

      IF ParseInt(Formula,Index,FALSE) THEN
        IndexType := IndexType::Int
      ELSE
        CASE ReadToken(Formula) OF
          Text104:
            IndexType := IndexType::CP;
          Text105:
            IndexType := IndexType::LP;
          ELSE
            EXIT(FALSE);
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseToken@1000000007(VAR Formula@1000 : Code[20];Token@1001 : Code[20]) : Boolean;
    BEGIN
      IF COPYSTR(Formula,1,STRLEN(Token)) <> Token THEN
        EXIT(FALSE);
      Formula := COPYSTR(Formula,STRLEN(Token) + 1);
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE ReadToken@1000000006(VAR Formula@1000 : Code[20]) : Code[20];
    VAR
      Token@1001 : Code[20];
      p@1002 : Integer;
    BEGIN
      FOR p := 1 TO STRLEN(Formula) DO BEGIN
        IF COPYSTR(Formula,p,1) IN ['[',']','.'] THEN BEGIN
          Formula := COPYSTR(Formula,STRLEN(Token) + 1);
          EXIT(Token);
        END;
        Token := Token + COPYSTR(Formula,p,1);
      END;

      Formula := '';
      EXIT(Token);
    END;

    BEGIN
    END.
  }
}

