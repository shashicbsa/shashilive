OBJECT Table 5050 Contact
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00;
    Version List=NAVW17.10,NAVAPAC7.10;
  }
  PROPERTIES
  {
    Permissions=TableData 5065=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               RMSetup.GET;

               IF "No." = '' THEN BEGIN
                 RMSetup.TESTFIELD("Contact Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF NOT SkipDefaults THEN BEGIN
                 IF "Salesperson Code" = '' THEN
                   "Salesperson Code" := RMSetup."Default Salesperson Code";
                 IF "Territory Code" = '' THEN
                   "Territory Code" := RMSetup."Default Territory Code";
                 IF "Country/Region Code" = '' THEN
                   "Country/Region Code" := RMSetup."Default Country/Region Code";
                 IF "Language Code" = '' THEN
                   "Language Code" := RMSetup."Default Language Code";
                 IF "Correspondence Type" = "Correspondence Type"::" " THEN
                   "Correspondence Type" := RMSetup."Default Correspondence Type";
                 IF "Salutation Code" = '' THEN
                   IF Type = Type::Company THEN
                     "Salutation Code" := RMSetup."Def. Company Salutation Code"
                   ELSE
                     "Salutation Code" := RMSetup."Default Person Salutation Code";
               END;

               TypeChange;

               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    OnModify=BEGIN
               OnModify(xRec);
             END;

    OnDelete=VAR
               Todo@1000 : Record 5080;
               SegLine@1001 : Record 5077;
               ContIndustGrp@1002 : Record 5058;
               ContactWebSource@1003 : Record 5060;
               ContJobResp@1004 : Record 5067;
               ContMailingGrp@1005 : Record 5056;
               ContProfileAnswer@1006 : Record 5089;
               RMCommentLine@1007 : Record 5061;
               ContAltAddr@1008 : Record 5051;
               ContAltAddrDateRange@1009 : Record 5052;
               InteractLogEntry@1010 : Record 5065;
               Opp@1011 : Record 5092;
               DOPaymentCreditCard@1017 : Record 827;
               CampaignTargetGrMgt@1016 : Codeunit 7030;
             BEGIN
               DOPaymentCreditCard.DeleteByContact(Rec);

               Todo.SETCURRENTKEY("Contact Company No.","Contact No.",Closed,Date);
               Todo.SETRANGE("Contact Company No.","Company No.");
               Todo.SETRANGE("Contact No.","No.");
               Todo.SETRANGE(Closed,FALSE);
               IF Todo.FIND('-') THEN
                 ERROR(Text000,TABLECAPTION,"No.");

               SegLine.SETCURRENTKEY("Contact No.");
               SegLine.SETRANGE("Contact No.","No.");
               IF SegLine.FINDFIRST THEN
                 ERROR(Text001,TABLECAPTION,"No.");

               Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
               Opp.SETRANGE("Contact Company No.","Company No.");
               Opp.SETRANGE("Contact No.","No.");
               Opp.SETRANGE(Status,Opp.Status::"Not Started",Opp.Status::"In Progress");
               IF Opp.FIND('-') THEN
                 ERROR(Text002,TABLECAPTION,"No.");

               CASE Type OF
                 Type::Company:
                   BEGIN
                     ContBusRel.SETRANGE("Contact No.","No.");
                     ContBusRel.DELETEALL;
                     ContIndustGrp.SETRANGE("Contact No.","No.");
                     ContIndustGrp.DELETEALL;
                     ContactWebSource.SETRANGE("Contact No.","No.");
                     ContactWebSource.DELETEALL;
                     DuplMgt.RemoveContIndex(Rec,FALSE);
                     InteractLogEntry.SETCURRENTKEY("Contact Company No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","No.");
                     IF InteractLogEntry.FIND('-') THEN
                       REPEAT
                         CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
                         CLEAR(InteractLogEntry."Contact Company No.");
                         CLEAR(InteractLogEntry."Contact No.");
                         InteractLogEntry.MODIFY;
                       UNTIL InteractLogEntry.NEXT = 0;

                     Cont.RESET;
                     Cont.SETCURRENTKEY("Company No.");
                     Cont.SETRANGE("Company No.","No.");
                     Cont.SETRANGE(Type,Type::Person);
                     IF Cont.FIND('-') THEN
                       REPEAT
                         Cont.DELETE(TRUE);
                       UNTIL Cont.NEXT = 0;

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     IF Opp.FIND('-') THEN
                       REPEAT
                         CLEAR(Opp."Contact No.");
                         CLEAR(Opp."Contact Company No.");
                         Opp.MODIFY;
                       UNTIL Opp.NEXT = 0;

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     IF Todo.FIND('-') THEN
                       REPEAT
                         CLEAR(Todo."Contact No.");
                         CLEAR(Todo."Contact Company No.");
                         Todo.MODIFY;
                       UNTIL Todo.NEXT = 0;
                   END;
                 Type::Person:
                   BEGIN
                     ContJobResp.SETRANGE("Contact No.","No.");
                     ContJobResp.DELETEALL;

                     InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
                     InteractLogEntry.SETRANGE("Contact No.","No.");
                     InteractLogEntry.MODIFYALL("Contact No.","Company No.");

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     Opp.MODIFYALL("Contact No.","Company No.");

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     Todo.SETRANGE("Contact No.","No.");
                     Todo.MODIFYALL("Contact No.","Company No.");
                   END;
               END;

               ContMailingGrp.SETRANGE("Contact No.","No.");
               ContMailingGrp.DELETEALL;

               ContProfileAnswer.SETRANGE("Contact No.","No.");
               ContProfileAnswer.DELETEALL;

               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::Contact);
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.SETRANGE("Sub No.",0);
               RMCommentLine.DELETEALL;

               ContAltAddr.SETRANGE("Contact No.","No.");
               ContAltAddr.DELETEALL;

               ContAltAddrDateRange.SETRANGE("Contact No.","No.");
               ContAltAddrDateRange.DELETEALL;
               PostCodeCheck.DeleteAddressID(DATABASE::Contact,Rec.GETPOSITION,0);
             END;

    OnRename=BEGIN
               VALIDATE("Lookup Contact No.");

               PostCodeCheck.MoveAddressID(
                 DATABASE::Contact,xRec.GETPOSITION,0,DATABASE::Contact,Rec.GETPOSITION,0);
             END;

    CaptionML=[ENU=Contact;
               ENA=Contact];
    LookupPageID=Page5052;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."Contact Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENA=No.] }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                NameBreakdown;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENA=Name] }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              ENA=Search Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENA=Name 2] }
    { 5   ;   ;Address             ;Text50        ;OnValidate=VAR
                                                                Contact@1500000 : Text[90];
                                                              BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::Contact,Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              ENA=Address] }
    { 6   ;   ;Address 2           ;Text50        ;OnValidate=VAR
                                                                Contact@1500000 : Text[90];
                                                              BEGIN
                                                                PostCodeCheck.ValidateAddress(
                                                                  CurrFieldNo,DATABASE::Contact,Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Address 2;
                                                              ENA=Address 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                Contact@1500000 : Text[90];
                                                              BEGIN
                                                                PostCodeCheck.ValidateCity(
                                                                  CurrFieldNo,DATABASE::Contact,Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENA=City] }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENA=Phone No.] }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              ENA=Telex No.] }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              ENA=Territory Code] }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENA=Currency Code] }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENA=Language Code] }
    { 29  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENA=Salesperson Code] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENA=Country/Region Code] }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE (Table Name=CONST(Contact),
                                                                                                       No.=FIELD(No.),
                                                                                                       Sub No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENA=Comment];
                                                   Editable=No }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENA=Last Date Modified];
                                                   Editable=No }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENA=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENA=Telex Answer Back] }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Contact);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENA=Exemption Certificate No.] }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENA=Picture];
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                Contact@1500000 : Text[90];
                                                              BEGIN
                                                                PostCodeCheck.ValidatePostCode(
                                                                  CurrFieldNo,DATABASE::Contact,Rec.GETPOSITION,0,
                                                                  Name,"Name 2",Contact,Address,"Address 2",City,"Post Code",County,"Country/Region Code");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENA=Post Code] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENA=State] }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=BEGIN
                                                                IF ("Search E-Mail" = UPPERCASE(xRec."E-Mail")) OR ("Search E-Mail" = '') THEN
                                                                  "Search E-Mail" := "E-Mail";
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENA=E-Mail] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENA=Home Page] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENA=No. Series] }
    { 5050;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  TypeChange;
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENA=Type];
                                                   OptionCaptionML=[ENU=Company,Person;
                                                                    ENA=Company,Person];
                                                   OptionString=Company,Person }
    { 5051;   ;Company No.         ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=VAR
                                                                Opp@1000 : Record 5092;
                                                                OppEntry@1001 : Record 5093;
                                                                Todo@1002 : Record 5080;
                                                                InteractLogEntry@1003 : Record 5065;
                                                                SegLine@1005 : Record 5077;
                                                                SalesHeader@1004 : Record 36;
                                                              BEGIN
                                                                IF "Company No." = xRec."Company No." THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Person);

                                                                SegLine.SETCURRENTKEY("Contact No.");
                                                                SegLine.SETRANGE("Contact No.","No.");
                                                                IF SegLine.FINDFIRST THEN
                                                                  ERROR(Text012,FIELDCAPTION("Company No."));

                                                                IF Cont.GET("Company No.") THEN
                                                                  InheritCompanyToPersonData(Cont,xRec."Company No." = '')
                                                                ELSE
                                                                  CLEAR("Company Name");

                                                                IF Cont.GET("No.") THEN BEGIN
                                                                  IF xRec."Company No." <> '' THEN BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    ContBusRel.RESET;
                                                                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                    ContBusRel.SETRANGE("Contact No.",xRec."Company No.");
                                                                    SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
                                                                    SalesHeader.SETRANGE("Sell-to Contact No.","No.");
                                                                    IF ContBusRel.FINDFIRST THEN
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",ContBusRel."No.")
                                                                    ELSE
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",'');
                                                                    IF SalesHeader.FIND('-') THEN
                                                                      REPEAT
                                                                        SalesHeader."Sell-to Contact No." := xRec."Company No.";
                                                                        IF SalesHeader."Sell-to Contact No." = SalesHeader."Bill-to Contact No." THEN
                                                                          SalesHeader."Bill-to Contact No." := xRec."Company No.";
                                                                        SalesHeader.MODIFY;
                                                                      UNTIL SalesHeader.NEXT = 0;
                                                                    SalesHeader.RESET;
                                                                    SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
                                                                    SalesHeader.SETRANGE("Bill-to Contact No.","No.");
                                                                    SalesHeader.MODIFYALL("Bill-to Contact No.",xRec."Company No.");
                                                                  END ELSE BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",'');
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact Company No.","Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",'');
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",'');
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact Company No.","Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",'');
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                  END;
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Company No.;
                                                              ENA=Company No.] }
    { 5052;   ;Company Name        ;Text50        ;CaptionML=[ENU=Company Name;
                                                              ENA=Company Name];
                                                   Editable=No }
    { 5053;   ;Lookup Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Company THEN
                                                                  "Lookup Contact No." := ''
                                                                ELSE
                                                                  "Lookup Contact No." := "No.";
                                                              END;

                                                   CaptionML=[ENU=Lookup Contact No.;
                                                              ENA=Lookup Contact No.];
                                                   Editable=No }
    { 5054;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=First Name;
                                                              ENA=First Name] }
    { 5055;   ;Middle Name         ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=Middle Name;
                                                              ENA=Middle Name] }
    { 5056;   ;Surname             ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=Surname;
                                                              ENA=Surname] }
    { 5058;   ;Job Title           ;Text30        ;CaptionML=[ENU=Job Title;
                                                              ENA=Job Title] }
    { 5059;   ;Initials            ;Text30        ;CaptionML=[ENU=Initials;
                                                              ENA=Initials] }
    { 5060;   ;Extension No.       ;Text30        ;CaptionML=[ENU=Extension No.;
                                                              ENA=Extension No.] }
    { 5061;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              ENA=Mobile Phone No.] }
    { 5062;   ;Pager               ;Text30        ;CaptionML=[ENU=Pager;
                                                              ENA=Pager] }
    { 5063;   ;Organizational Level Code;Code10   ;TableRelation="Organizational Level";
                                                   CaptionML=[ENU=Organizational Level Code;
                                                              ENA=Organisational Level Code] }
    { 5064;   ;Exclude from Segment;Boolean       ;CaptionML=[ENU=Exclude from Segment;
                                                              ENA=Exclude from Segment] }
    { 5065;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENA=Date Filter] }
    { 5066;   ;Next To-do Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min(To-do.Date WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                     Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                     Closed=CONST(No),
                                                                                     System To-do Type=CONST(Contact Attendee)));
                                                   CaptionML=[ENU=Next To-do Date;
                                                              ENA=Next To-do Date];
                                                   Editable=No }
    { 5067;   ;Last Date Attempted ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Initiated By=CONST(Us),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=[ENU=Last Date Attempted;
                                                              ENA=Last Date Attempted];
                                                   Editable=No }
    { 5068;   ;Date of Last Interaction;Date      ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Attempt Failed=CONST(No),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=[ENU=Date of Last Interaction;
                                                              ENA=Date of Last Interaction];
                                                   Editable=No }
    { 5069;   ;No. of Job Responsibilities;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Job Responsibility" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Job Responsibilities;
                                                              ENA=No. of Job Responsibilities];
                                                   Editable=No }
    { 5070;   ;No. of Industry Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Industry Group" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=[ENU=No. of Industry Groups;
                                                              ENA=No. of Industry Groups];
                                                   Editable=No }
    { 5071;   ;No. of Business Relations;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Business Relation" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=[ENU=No. of Business Relations;
                                                              ENA=No. of Business Relations];
                                                   Editable=No }
    { 5072;   ;No. of Mailing Groups;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Mailing Group" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Mailing Groups;
                                                              ENA=No. of Mailing Groups];
                                                   Editable=No }
    { 5073;   ;External ID         ;Code20        ;CaptionML=[ENU=External ID;
                                                              ENA=External ID] }
    { 5074;   ;No. of Interactions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Interaction Log Entry" WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                                    Canceled=CONST(No),
                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                    Date=FIELD(Date Filter),
                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=[ENU=No. of Interactions;
                                                              ENA=No. of Interactions];
                                                   Editable=No }
    { 5076;   ;Cost (LCY)          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Cost (LCY)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                               Canceled=CONST(No),
                                                                                                               Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                               Date=FIELD(Date Filter),
                                                                                                               Postponed=CONST(No)));
                                                   CaptionML=[ENU=Cost (LCY);
                                                              ENA=Cost (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5077;   ;Duration (Min.)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Duration (Min.)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                                    Canceled=CONST(No),
                                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=[ENU=Duration (Min.);
                                                              ENA=Duration (Min.)];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 5078;   ;No. of Opportunities;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=[ENU=No. of Opportunities;
                                                              ENA=No. of Opportunities];
                                                   Editable=No }
    { 5079;   ;Estimated Value (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Estimated Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                      Contact Company No.=FIELD(Company No.),
                                                                                                                      Estimated Close Date=FIELD(Date Filter),
                                                                                                                      Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                      Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=[ENU=Estimated Value (LCY);
                                                              ENA=Estimated Value (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5080;   ;Calcd. Current Value (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Calcd. Current Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                           Contact Company No.=FIELD(Company No.),
                                                                                                                           Estimated Close Date=FIELD(Date Filter),
                                                                                                                           Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                           Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=[ENU=Calcd. Current Value (LCY);
                                                              ENA=Calcd. Current Value (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5082;   ;Opportunity Entry Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Sales Cycle Code=FIELD(Sales Cycle Filter),
                                                                                                Sales Cycle Stage=FIELD(Sales Cycle Stage Filter),
                                                                                                Salesperson Code=FIELD(Salesperson Filter),
                                                                                                Campaign No.=FIELD(Campaign Filter),
                                                                                                Action Taken=FIELD(Action Taken Filter),
                                                                                                Estimated Value (LCY)=FIELD(Estimated Value Filter),
                                                                                                Calcd. Current Value (LCY)=FIELD(Calcd. Current Value Filter),
                                                                                                Completed %=FIELD(Completed % Filter),
                                                                                                Chances of Success %=FIELD(Chances of Success % Filter),
                                                                                                Probability %=FIELD(Probability % Filter),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Close Opportunity Code=FIELD(Close Opportunity Filter)));
                                                   CaptionML=[ENU=Opportunity Entry Exists;
                                                              ENA=Opportunity Entry Exists];
                                                   Editable=No }
    { 5083;   ;To-do Entry Exists  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(To-do WHERE (Contact Company No.=FIELD(Company No.),
                                                                                  Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                  Team Code=FIELD(Team Filter),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  Campaign No.=FIELD(Campaign Filter),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Status=FIELD(To-do Status Filter),
                                                                                  Priority=FIELD(Priority Filter),
                                                                                  Closed=FIELD(To-do Closed Filter)));
                                                   CaptionML=[ENU=To-do Entry Exists;
                                                              ENA=To-do Entry Exists];
                                                   Editable=No }
    { 5084;   ;Salesperson Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Filter;
                                                              ENA=Salesperson Filter] }
    { 5085;   ;Campaign Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign Filter;
                                                              ENA=Campaign Filter] }
    { 5087;   ;Action Taken Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Action Taken Filter;
                                                              ENA=Action Taken Filter];
                                                   OptionCaptionML=[ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                                    ENA=" ,Next,Previous,Updated,Jumped,Won,Lost"];
                                                   OptionString=[ ,Next,Previous,Updated,Jumped,Won,Lost] }
    { 5088;   ;Sales Cycle Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle";
                                                   CaptionML=[ENU=Sales Cycle Filter;
                                                              ENA=Sales Cycle Filter] }
    { 5089;   ;Sales Cycle Stage Filter;Integer   ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle Stage".Stage WHERE (Sales Cycle Code=FIELD(Sales Cycle Filter));
                                                   CaptionML=[ENU=Sales Cycle Stage Filter;
                                                              ENA=Sales Cycle Stage Filter] }
    { 5090;   ;Probability % Filter;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Probability % Filter;
                                                              ENA=Probability % Filter];
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5091;   ;Completed % Filter  ;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Completed % Filter;
                                                              ENA=Completed % Filter];
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5092;   ;Estimated Value Filter;Decimal     ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Estimated Value Filter;
                                                              ENA=Estimated Value Filter];
                                                   AutoFormatType=1 }
    { 5093;   ;Calcd. Current Value Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Calcd. Current Value Filter;
                                                              ENA=Calcd. Current Value Filter];
                                                   AutoFormatType=1 }
    { 5094;   ;Chances of Success % Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Chances of Success % Filter;
                                                              ENA=Chances of Success % Filter];
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5095;   ;To-do Status Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=To-do Status Filter;
                                                              ENA=To-do Status Filter];
                                                   OptionCaptionML=[ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                                    ENA=Not Started,In Progress,Completed,Waiting,Postponed];
                                                   OptionString=Not Started,In Progress,Completed,Waiting,Postponed }
    { 5096;   ;To-do Closed Filter ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=To-do Closed Filter;
                                                              ENA=To-do Closed Filter] }
    { 5097;   ;Priority Filter     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Priority Filter;
                                                              ENA=Priority Filter];
                                                   OptionCaptionML=[ENU=Low,Normal,High;
                                                                    ENA=Low,Normal,High];
                                                   OptionString=Low,Normal,High }
    { 5098;   ;Team Filter         ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Team;
                                                   CaptionML=[ENU=Team Filter;
                                                              ENA=Team Filter] }
    { 5099;   ;Close Opportunity Filter;Code10    ;FieldClass=FlowFilter;
                                                   TableRelation="Close Opportunity Code";
                                                   CaptionML=[ENU=Close Opportunity Filter;
                                                              ENA=Close Opportunity Filter] }
    { 5100;   ;Correspondence Type ;Option        ;CaptionML=[ENU=Correspondence Type;
                                                              ENA=Correspondence Type];
                                                   OptionCaptionML=[ENU=" ,Hard Copy,E-Mail,Fax";
                                                                    ENA=" ,Hard Copy,E-Mail,Fax"];
                                                   OptionString=[ ,Hard Copy,E-Mail,Fax] }
    { 5101;   ;Salutation Code     ;Code10        ;TableRelation=Salutation;
                                                   CaptionML=[ENU=Salutation Code;
                                                              ENA=Salutation Code] }
    { 5102;   ;Search E-Mail       ;Code80        ;CaptionML=[ENU=Search E-Mail;
                                                              ENA=Search E-Mail] }
    { 5104;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              ENA=Last Time Modified] }
    { 5105;   ;E-Mail 2            ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail 2;
                                                              ENA=E-Mail 2] }
    { 11620;  ;ABN                 ;Text11        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Company);
                                                                ContBusRel.RESET;
                                                                ContBusRel.SETCURRENTKEY("Link to Table");
                                                                ContBusRel.SETRANGE("Contact No.","No.");
                                                                ContBusRel.SETFILTER(
                                                                  "Link to Table",'%1|%2',
                                                                  ContBusRel."Link to Table"::Customer,
                                                                  ContBusRel."Link to Table"::Vendor);
                                                                IF ContBusRel.FIND('-') THEN
                                                                  REPEAT
                                                                    CASE ContBusRel."Link to Table" OF
                                                                      ContBusRel."Link to Table"::Customer:
                                                                        BEGIN
                                                                          IF ContBusRel."No." = '' THEN
                                                                            ABNManagement.CheckABN(ABN,0);
                                                                        END;
                                                                      ContBusRel."Link to Table"::Vendor:
                                                                        BEGIN
                                                                          IF ContBusRel."No." = '' THEN
                                                                            ABNManagement.CheckABN(ABN,1);
                                                                        END;
                                                                    END;
                                                                  UNTIL ContBusRel.NEXT = 0;
                                                                ABNManagement.CheckABN(ABN,3);
                                                                IF ABN = '' THEN
                                                                  Registered := FALSE;
                                                              END;

                                                   CaptionML=[ENU=ABN;
                                                              ENA=ABN];
                                                   Numeric=Yes }
    { 11621;  ;Registered          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Company);
                                                                IF Registered THEN
                                                                  TESTFIELD(ABN);
                                                              END;

                                                   CaptionML=[ENU=Registered;
                                                              ENA=Registered] }
    { 11622;  ;ABN Division Part No.;Text3        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Company);
                                                              END;

                                                   CaptionML=[ENU=ABN Division Part No.;
                                                              ENA=ABN Division Part No.];
                                                   Numeric=Yes }
    { 17100;  ;IRD No.             ;Text30        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Company);
                                                              END;

                                                   CaptionML=[ENU=IRD No.;
                                                              ENA=ACN (Australian Company Number)] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Company Name,Company No.,Type,Name       }
    {    ;Company No.                              }
    {    ;Territory Code                           }
    {    ;Salesperson Code                         }
    {    ;VAT Registration No.                     }
    {    ;Search E-Mail                            }
    {    ;Name                                    ;KeyGroups=SearchCol }
    {    ;City                                    ;KeyGroups=SearchCol }
    {    ;Post Code                               ;KeyGroups=SearchCol }
    {    ;Phone No.                               ;KeyGroups=SearchCol }
    {    ;ABN,Type                                 }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Type,City,Post Code,Phone No.   }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the %2 record of the %1 because there are one or more to-dos open.;ENA=You cannot delete the %2 record of the %1 because there are one or more to-dos open.';
      Text001@1001 : TextConst 'ENU=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.;ENA=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.';
      Text002@1002 : TextConst 'ENU=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.;ENA=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.';
      Text003@1003 : TextConst 'ENU=%1 cannot be changed because one or more interaction log entries are linked to the contact.;ENA=%1 cannot be changed because one or more interaction log entries are linked to the contact.';
      Text005@1005 : TextConst 'ENU=%1 cannot be changed because one or more to-dos are linked to the contact.;ENA=%1 cannot be changed because one or more to-dos are linked to the contact.';
      Text006@1006 : TextConst 'ENU=%1 cannot be changed because one or more opportunities are linked to the contact.;ENA=%1 cannot be changed because one or more opportunities are linked to the contact.';
      Text007@1007 : TextConst 'ENU=%1 cannot be changed because there are one or more related people linked to the contact.;ENA=%1 cannot be changed because there are one or more related people linked to the contact.';
      Text009@1009 : TextConst 'ENU=The %2 record of the %1 has been created.;ENA=The %2 record of the %1 has been created.';
      Text010@1010 : TextConst 'ENU=The %2 record of the %1 is not linked with any other table.;ENA=The %2 record of the %1 is not linked with any other table.';
      RMSetup@1012 : Record 5079;
      Cont@1013 : Record 5050;
      ContBusRel@1014 : Record 5054;
      PostCode@1011 : Record 225;
      DuplMgt@1015 : Codeunit 5060;
      NoSeriesMgt@1016 : Codeunit 396;
      UpdateCustVendBank@1017 : Codeunit 5055;
      CampaignMgt@1050 : Codeunit 7030;
      PostCodeCheck@1500000 : Codeunit 28000;
      ABNManagement@1500001 : Codeunit 11600;
      ContChanged@1018 : Boolean;
      SkipDefaults@1019 : Boolean;
      Text012@1020 : TextConst 'ENU=You cannot change %1 because one or more unlogged segments are assigned to the contact.;ENA=You cannot change %1 because one or more unlogged segments are assigned to the contact.';
      Text019@1022 : TextConst 'ENU=The %2 record of the %1 already has the %3 with %4 %5.;ENA=The %2 record of the %1 already has the %3 with %4 %5.';
      Text020@1021 : TextConst 'ENU=Do you want to create a contact %1 %2 as a customer using a customer template?;ENA=Do you want to create a contact %1 %2 as a customer using a customer template?';
      Text021@1023 : TextConst 'ENU=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.;ENA=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.';
      HideValidationDialog@1032 : Boolean;
      Text022@1034 : TextConst 'ENU=The creation of the customer has been aborted.;ENA=The creation of the customer has been aborted.';
      Text029@1045 : TextConst 'ENU=The total length of first name, middle name and surname is %1 character(s)longer than the maximum length allowed for the Name field.;ENA=The total length of first name, middle name and surname is %1 character(s)longer than the maximum length allowed for the Name field.';
      Text032@1048 : TextConst 'ENU=The length of %1 is %2 character(s)longer than the maximum length allowed for the %1 field.;ENA=The length of %1 is %2 character(s)longer than the maximum length allowed for the %1 field.';
      Text033@1008 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENA=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';

    PROCEDURE OnModify@4(xRec@1005 : Record 5050);
    VAR
      OldCont@1001 : Record 5050;
    BEGIN
      "Last Date Modified" := TODAY;
      "Last Time Modified" := TIME;

      IF Type = Type::Company THEN BEGIN
        IF (Name <> xRec.Name) OR
           ("Search Name" <> xRec."Search Name") OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Phone No." <> xRec."Phone No.") OR
           ("Telex No." <> xRec."Telex No.") OR
           ("Territory Code" <> xRec."Territory Code") OR
           ("Currency Code" <> xRec."Currency Code") OR
           ("Language Code" <> xRec."Language Code") OR
           ("Salesperson Code" <> xRec."Salesperson Code") OR
           ("Country/Region Code" <> xRec."Country/Region Code") OR
           ("Fax No." <> xRec."Fax No.") OR
           ("Telex Answer Back" <> xRec."Telex Answer Back") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Post Code" <> xRec."Post Code") OR
           (County <> xRec.County) OR
           ("E-Mail" <> xRec."E-Mail") OR
           ("Home Page" <> xRec."Home Page") OR
           ("IRD No." <> xRec."IRD No.") OR
           (ABN <> xRec.ABN) OR
           ("ABN Division Part No." <> xRec."ABN Division Part No.") OR
           (Registered <> xRec.Registered)
        THEN
          UpdateCustVendBank.RUN(Rec);

        RMSetup.GET;
        Cont.RESET;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE("Company No.","No.");
        Cont.SETRANGE(Type,Type::Person);
        IF Cont.FIND('-') THEN
          REPEAT
            ContChanged := FALSE;
            OldCont := Cont;
            IF Name <> xRec.Name THEN BEGIN
              Cont."Company Name" := Name;
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Salesperson Code" AND
               (xRec."Salesperson Code" <> "Salesperson Code") AND
               (xRec."Salesperson Code" = Cont."Salesperson Code")
            THEN BEGIN
              Cont."Salesperson Code" := "Salesperson Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Territory Code" AND
               (xRec."Territory Code" <> "Territory Code") AND
               (xRec."Territory Code" = Cont."Territory Code")
            THEN BEGIN
              Cont."Territory Code" := "Territory Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Country/Region Code" AND
               (xRec."Country/Region Code" <> "Country/Region Code") AND
               (xRec."Country/Region Code" = Cont."Country/Region Code")
            THEN BEGIN
              Cont."Country/Region Code" := "Country/Region Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Language Code" AND
               (xRec."Language Code" <> "Language Code") AND
               (xRec."Language Code" = Cont."Language Code")
            THEN BEGIN
              Cont."Language Code" := "Language Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Address Details" THEN BEGIN
              IF xRec.IdenticalAddress(Cont) THEN BEGIN
                IF xRec.Address <> Address THEN BEGIN
                  Cont.Address := Address;
                  ContChanged := TRUE;
                END;
                IF xRec."Address 2" <> "Address 2" THEN BEGIN
                  Cont."Address 2" := "Address 2";
                  ContChanged := TRUE;
                END;
                IF xRec."Post Code" <> "Post Code" THEN BEGIN
                  Cont."Post Code" := "Post Code";
                  ContChanged := TRUE;
                END;
                IF xRec.City <> City THEN BEGIN
                  Cont.City := City;
                  ContChanged := TRUE;
                END;
                IF xRec.County <> County THEN BEGIN
                  Cont.County := County;
                  ContChanged := TRUE;
                END;
              END;
            END;
            IF RMSetup."Inherit Communication Details" THEN BEGIN
              IF (xRec."Phone No." <> "Phone No.") AND (xRec."Phone No." = Cont."Phone No.") THEN BEGIN
                Cont."Phone No." := "Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex No." <> "Telex No.") AND (xRec."Telex No." = Cont."Telex No.") THEN BEGIN
                Cont."Telex No." := "Telex No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Fax No." <> "Fax No.") AND (xRec."Fax No." = Cont."Fax No.") THEN BEGIN
                Cont."Fax No." := "Fax No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex Answer Back" <> "Telex Answer Back") AND (xRec."Telex Answer Back" = Cont."Telex Answer Back") THEN BEGIN
                Cont."Telex Answer Back" := "Telex Answer Back";
                ContChanged := TRUE;
              END;
              IF (xRec."E-Mail" <> "E-Mail") AND (xRec."E-Mail" = Cont."E-Mail") THEN BEGIN
                Cont.VALIDATE("E-Mail","E-Mail");
                ContChanged := TRUE;
              END;
              IF (xRec."Home Page" <> "Home Page") AND (xRec."Home Page" = Cont."Home Page") THEN BEGIN
                Cont."Home Page" := "Home Page";
                ContChanged := TRUE;
              END;
              IF (xRec."Extension No." <> "Extension No.") AND (xRec."Extension No." = Cont."Extension No.") THEN BEGIN
                Cont."Extension No." := "Extension No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Mobile Phone No." <> "Mobile Phone No.") AND (xRec."Mobile Phone No." = Cont."Mobile Phone No.") THEN BEGIN
                Cont."Mobile Phone No." := "Mobile Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec.Pager <> Pager) AND (xRec.Pager = Cont.Pager) THEN BEGIN
                Cont.Pager := Pager;
                ContChanged := TRUE;
              END;
            END;
            IF ContChanged THEN BEGIN
              Cont.OnModify(OldCont);
              Cont.MODIFY;
            END;
          UNTIL Cont.NEXT = 0;

        IF (Name <> xRec.Name) OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Post Code" <> xRec."Post Code") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Phone No." <> xRec."Phone No.")
        THEN
          CheckDupl;
      END;
    END;

    PROCEDURE TypeChange@1();
    VAR
      InteractLogEntry@1000 : Record 5065;
      Opp@1001 : Record 5092;
      Todo@1002 : Record 5080;
      CampaignTargetGrMgt@1003 : Codeunit 7030;
    BEGIN
      RMSetup.GET;

      InteractLogEntry.LOCKTABLE;
      Todo.LOCKTABLE;
      Opp.LOCKTABLE;
      Cont.LOCKTABLE;
      InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
      InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
      InteractLogEntry.SETRANGE("Contact No.","No.");
      IF InteractLogEntry.FINDFIRST THEN
        ERROR(Text003,FIELDCAPTION(Type));
      Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
      Todo.SETRANGE("Contact Company No.","Company No.");
      Todo.SETRANGE("Contact No.","No.");
      IF Todo.FINDFIRST THEN
        ERROR(Text005,FIELDCAPTION(Type));
      Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
      Opp.SETRANGE("Contact Company No.","Company No.");
      Opp.SETRANGE("Contact No.","No.");
      IF Opp.FINDFIRST THEN
        ERROR(Text006,FIELDCAPTION(Type));

      CASE Type OF
        Type::Company:
          BEGIN
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("Organizational Level Code",'');
              TESTFIELD("No. of Job Responsibilities",0);
            END;
            "First Name" := '';
            "Middle Name" := '';
            Surname := '';
            "Job Title" := '';
            "Company No." := "No.";
            "Company Name" := Name;
            "Salutation Code" := RMSetup."Def. Company Salutation Code";
          END;
        Type::Person:
          BEGIN
            CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
            Cont.RESET;
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.","No.");
            Cont.SETRANGE(Type,Type::Person);
            IF Cont.FIND('-') THEN
              ERROR(Text007,FIELDCAPTION(Type));
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("No. of Business Relations",0);
              TESTFIELD("No. of Industry Groups",0);
              TESTFIELD("Currency Code",'');
              TESTFIELD("VAT Registration No.",'');
            END;
            IF "Company No." = "No." THEN BEGIN
              "Company No." := '';
              "Company Name" := '';
              "Salutation Code" := RMSetup."Default Person Salutation Code";
              NameBreakdown;
            END;
          END;
      END;
      VALIDATE("Lookup Contact No.");

      IF Cont.GET("No.") THEN BEGIN
        IF Type = Type::Company THEN
          CheckDupl
        ELSE
          DuplMgt.RemoveContIndex(Rec,FALSE);
      END;
    END;

    PROCEDURE AssistEdit@2(OldCont@1000 : Record 5050) : Boolean;
    BEGIN
      WITH Cont DO BEGIN
        Cont := Rec;
        RMSetup.GET;
        RMSetup.TESTFIELD("Contact Nos.");
        IF NoSeriesMgt.SelectSeries(RMSetup."Contact Nos.",OldCont."No. Series","No. Series") THEN BEGIN
          RMSetup.GET;
          RMSetup.TESTFIELD("Contact Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Cont;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE CreateCustomer@3(CustomerTemplate@1006 : Code[10]);
    VAR
      Cust@1000 : Record 18;
      ContComp@1001 : Record 5050;
      CustTemplate@1003 : Record 5105;
      DefaultDim@1005 : Record 352;
      DefaultDim2@1004 : Record 352;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CustomerTemplate <> '' THEN
        CustTemplate.GET(CustomerTemplate);

      CLEAR(Cust);
      Cust.SetInsertFromContact(TRUE);
      Cust.INSERT(TRUE);
      Cust.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Customer;
      ContBusRel."No." := Cust."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateCustomer(ContComp,ContBusRel);

      Cust.GET(ContBusRel."No.");
      Cust.VALIDATE(Name,"Company Name");
      Cust.MODIFY;

      IF CustTemplate.Code <> '' THEN BEGIN
        Cust."Territory Code" := "Territory Code";
        Cust."Currency Code" := ContComp."Currency Code";
        Cust."Country/Region Code" := "Country/Region Code";
        Cust."Customer Posting Group" := CustTemplate."Customer Posting Group";
        Cust."Customer Price Group" := CustTemplate."Customer Price Group";
        Cust."Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
        Cust."Customer Disc. Group" := CustTemplate."Customer Disc. Group";
        Cust."Allow Line Disc." := CustTemplate."Allow Line Disc.";
        Cust."Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
        Cust."VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
        Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
        Cust."Payment Method Code" := CustTemplate."Payment Method Code";
        Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";
        Cust.MODIFY;

        DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
        DefaultDim.SETRANGE("No.",CustTemplate.Code);
        IF DefaultDim.FIND('-') THEN
          REPEAT
            CLEAR(DefaultDim2);
            DefaultDim2.INIT;
            DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
            DefaultDim2."No." := Cust."No.";
            DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
            DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
            DefaultDim2."Value Posting" := DefaultDim."Value Posting";
            DefaultDim2.INSERT(TRUE);
          UNTIL DefaultDim.NEXT = 0;
      END;

      UpdateQuotes(Cust);
      CampaignMgt.ConverttoCustomer(Rec,Cust);
      MESSAGE(Text009,Cust.TABLECAPTION,Cust."No.");
    END;

    PROCEDURE CreateVendor@7();
    VAR
      Vend@1000 : Record 23;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");

      CLEAR(Vend);
      Vend.SetInsertFromContact(TRUE);
      Vend.INSERT(TRUE);
      Vend.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Vendors";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Vendor;
      ContBusRel."No." := Vend."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);

      MESSAGE(Text009,Vend.TABLECAPTION,Vend."No.");
    END;

    PROCEDURE CreateBankAccount@8();
    VAR
      BankAcc@1000 : Record 270;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");

      CLEAR(BankAcc);
      BankAcc.SetInsertFromContact(TRUE);
      BankAcc.INSERT(TRUE);
      BankAcc.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Bank Accs.";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::"Bank Account";
      ContBusRel."No." := BankAcc."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateBankAccount(ContComp,ContBusRel);

      MESSAGE(Text009,BankAcc.TABLECAPTION,BankAcc."No.");
    END;

    PROCEDURE CreateCustomerLink@5();
    VAR
      Cust@1001 : Record 18;
      ContBusRel@1000 : Record 5054;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      CreateLink(
        PAGE::"Customer Link",
        RMSetup."Bus. Rel. Code for Customers",
        ContBusRel."Link to Table"::Customer);

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("Contact No.","Company No.");
      IF ContBusRel.FINDFIRST THEN
        IF Cust.GET(ContBusRel."No.") THEN
          UpdateQuotes(Cust);
    END;

    PROCEDURE CreateVendorLink@6();
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
      CreateLink(
        PAGE::"Vendor Link",
        RMSetup."Bus. Rel. Code for Vendors",
        ContBusRel."Link to Table"::Vendor);
    END;

    PROCEDURE CreateBankAccountLink@9();
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");
      CreateLink(
        PAGE::"Bank Account Link",
        RMSetup."Bus. Rel. Code for Bank Accs.",
        ContBusRel."Link to Table"::"Bank Account");
    END;

    PROCEDURE CreateLink@11(CreateForm@1000 : Integer;BusRelCode@1001 : Code[10];Table@1002 : 'Customer,Vendor,Bank Account');
    VAR
      TempContBusRel@1003 : TEMPORARY Record 5054;
    BEGIN
      TempContBusRel."Contact No." := "Company No.";
      TempContBusRel."Business Relation Code" := BusRelCode;
      TempContBusRel."Link to Table" := Table;
      TempContBusRel.INSERT;
      PAGE.RUNMODAL(CreateForm,TempContBusRel);
      TempContBusRel.DELETEALL;
    END;

    PROCEDURE CreateInteraction@10();
    VAR
      SegmentLine@1000 : TEMPORARY Record 5077;
    BEGIN
      SegmentLine.CreateInteractionFromContact(Rec);
    END;

    PROCEDURE ShowCustVendBank@12();
    VAR
      ContBusRel@1000 : Record 5054;
      FormSelected@1001 : Boolean;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      BankAcc@1004 : Record 270;
    BEGIN
      FormSelected := TRUE;

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","Company No.");
      ContBusRel.SETFILTER("No.",'<>''''');

      CASE ContBusRel.COUNT OF
        0:
          ERROR(Text010,TABLECAPTION,"No.");
        1:
          ContBusRel.FINDFIRST;
        ELSE
          FormSelected := PAGE.RUNMODAL(PAGE::"Contact Business Relations",ContBusRel) = ACTION::LookupOK;
      END;

      IF FormSelected THEN
        CASE ContBusRel."Link to Table" OF
          ContBusRel."Link to Table"::Customer:
            BEGIN
              Cust.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Customer Card",Cust);
            END;
          ContBusRel."Link to Table"::Vendor:
            BEGIN
              Vend.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Vendor Card",Vend);
            END;
          ContBusRel."Link to Table"::"Bank Account":
            BEGIN
              BankAcc.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Bank Account Card",BankAcc);
            END;
        END;
    END;

    PROCEDURE NameBreakdown@13();
    VAR
      NamePart@1000 : ARRAY [30] OF Text[250];
      TempName@1001 : Text[250];
      FirstName250@1004 : Text[250];
      i@1002 : Integer;
      NoOfParts@1003 : Integer;
    BEGIN
      IF Type = Type::Company THEN
        EXIT;

      TempName := Name;
      WHILE STRPOS(TempName,' ') > 0 DO BEGIN
        IF STRPOS(TempName,' ') > 1 THEN BEGIN
          i := i + 1;
          NamePart[i] := COPYSTR(TempName,1,STRPOS(TempName,' ') - 1);
        END;
        TempName := COPYSTR(TempName,STRPOS(TempName,' ') + 1);
      END;
      i := i + 1;
      NamePart[i] := TempName;
      NoOfParts := i;

      "First Name" := '';
      "Middle Name" := '';
      Surname := '';
      FOR i := 1 TO NoOfParts DO BEGIN
        IF (i = NoOfParts) AND (NoOfParts > 1) THEN BEGIN
          IF STRLEN(NamePart[i]) > MAXSTRLEN(Surname) THEN
            ERROR(Text032,FIELDCAPTION(Surname),STRLEN(NamePart[i]) - MAXSTRLEN(Surname));
          Surname := NamePart[i]
        END ELSE
          IF (i = NoOfParts - 1) AND (NoOfParts > 2) THEN BEGIN
            IF STRLEN(NamePart[i]) > MAXSTRLEN("Middle Name") THEN
              ERROR(Text032,FIELDCAPTION("Middle Name"),STRLEN(NamePart[i]) - MAXSTRLEN("Middle Name"));
            "Middle Name" := NamePart[i]
          END ELSE BEGIN
            FirstName250 := DELCHR("First Name" + ' ' + NamePart[i],'<',' ');
            IF STRLEN(FirstName250) > MAXSTRLEN("First Name") THEN
              ERROR(Text032,FIELDCAPTION("First Name"),STRLEN(FirstName250) - MAXSTRLEN("First Name"));
            "First Name" := FirstName250;
          END;
      END;
    END;

    PROCEDURE SetSkipDefault@15(Defaults@1000 : Boolean);
    BEGIN
      SkipDefaults := NOT Defaults;
    END;

    PROCEDURE IdenticalAddress@16(VAR Cont@1000 : Record 5050) : Boolean;
    BEGIN
      EXIT(
        (Address = Cont.Address) AND
        ("Address 2" = Cont."Address 2") AND
        ("Post Code" = Cont."Post Code") AND
        (City = Cont.City))
    END;

    PROCEDURE ActiveAltAddress@17(ActiveDate@1000 : Date) : Code[10];
    VAR
      ContAltAddrDateRange@1001 : Record 5052;
    BEGIN
      ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
      ContAltAddrDateRange.SETRANGE("Contact No.","No.");
      ContAltAddrDateRange.SETRANGE("Starting Date",0D,ActiveDate);
      ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',ActiveDate,0D);
      IF ContAltAddrDateRange.FINDLAST THEN
        EXIT(ContAltAddrDateRange."Contact Alt. Address Code");

      EXIT('');
    END;

    PROCEDURE CalculatedName@14() NewName@1000 : Text[50];
    VAR
      NewName92@1001 : Text[92];
    BEGIN
      IF "First Name" <> '' THEN
        NewName92 := "First Name";
      IF "Middle Name" <> '' THEN
        NewName92 := NewName92 + ' ' + "Middle Name";
      IF Surname <> '' THEN
        NewName92 := NewName92 + ' ' + Surname;

      NewName92 := DELCHR(NewName92,'<',' ');

      IF STRLEN(NewName92) > MAXSTRLEN(Name) THEN
        ERROR(Text029,STRLEN(NewName92) - MAXSTRLEN(Name));

      NewName := COPYSTR(NewName92,1,STRLEN(NewName92));
    END;

    PROCEDURE UpdateSearchName@22();
    BEGIN
      IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
        "Search Name" := Name;
    END;

    PROCEDURE AddText@20(Text@1000 : Text[249]) : Text[250];
    BEGIN
      IF Text <> '' THEN
        EXIT(Text + ' ');
    END;

    PROCEDURE CheckDupl@21();
    BEGIN
      IF RMSetup."Maintain Dupl. Search Strings" THEN
        DuplMgt.MakeContIndex(Rec);
      IF GUIALLOWED THEN
        IF DuplMgt.DuplicateExist(Rec) THEN BEGIN
          MODIFY;
          COMMIT;
          DuplMgt.LaunchDuplicateForm(Rec);
        END;
    END;

    PROCEDURE FindCustomerTemplate@23() FindCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1003 : Record 5105;
      ContCompany@1002 : Record 5050;
    BEGIN
      CustTemplate.RESET;
      CustTemplate.SETRANGE("Territory Code","Territory Code");
      CustTemplate.SETRANGE("Country/Region Code","Country/Region Code");
      IF ContCompany.GET("Company No.") THEN
        CustTemplate.SETRANGE("Currency Code",ContCompany."Currency Code");

      IF CustTemplate.COUNT = 1 THEN BEGIN
        CustTemplate.FINDFIRST;
        EXIT(CustTemplate.Code);
      END;
    END;

    PROCEDURE ChooseCustomerTemplate@27() ChooseCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1000 : Record 5105;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CONFIRM(Text020,TRUE,"No.",Name) THEN BEGIN
        IF PAGE.RUNMODAL(0,CustTemplate) = ACTION::LookupOK THEN
          EXIT(CustTemplate.Code);

        ERROR(Text022);
      END;
    END;

    PROCEDURE UpdateQuotes@29(Customer@1000 : Record 18);
    VAR
      SalesHeader@1003 : Record 36;
      Cont@1004 : Record 5050;
      SalesLine@1001 : Record 37;
    BEGIN
      Cont.SETCURRENTKEY("Company No.");
      Cont.SETRANGE("Company No.","Company No.");

      IF Cont.FIND('-') THEN
        REPEAT
          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Document Type","Sell-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Sell-to Contact No.",Cont."No.");
          IF SalesHeader.FIND('-') THEN
            REPEAT
              SalesHeader."Sell-to Customer No." := Customer."No.";
              SalesHeader."Sell-to Customer Template Code" := '';
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;

          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Bill-to Contact No.",Cont."No.");
          IF SalesHeader.FIND('-') THEN
            REPEAT
              SalesHeader."Bill-to Customer No." := Customer."No.";
              SalesHeader."Bill-to Customer Template Code" := '';
              SalesHeader."Salesperson Code" := Customer."Salesperson Code";
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;
        UNTIL Cont.NEXT = 0;
    END;

    PROCEDURE GetSalutation@18(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10]) : Text[260];
    VAR
      SalutationFormula@1005 : Record 5069;
      NamePart@1004 : ARRAY [5] OF Text[50];
      SubStr@1003 : Text[30];
      i@1002 : Integer;
    BEGIN
      IF NOT SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) THEN
        ERROR(Text021,LanguageCode,"No.");
      SalutationFormula.TESTFIELD(Salutation);

      CASE SalutationFormula."Name 1" OF
        SalutationFormula."Name 1"::"Job Title":
          NamePart[1] := "Job Title";
        SalutationFormula."Name 1"::"First Name":
          NamePart[1] := "First Name";
        SalutationFormula."Name 1"::"Middle Name":
          NamePart[1] := "Middle Name";
        SalutationFormula."Name 1"::Surname:
          NamePart[1] := Surname;
        SalutationFormula."Name 1"::Initials:
          NamePart[1] := Initials;
        SalutationFormula."Name 1"::"Company Name":
          NamePart[1] := "Company Name";
      END;

      CASE SalutationFormula."Name 2" OF
        SalutationFormula."Name 2"::"Job Title":
          NamePart[2] := "Job Title";
        SalutationFormula."Name 2"::"First Name":
          NamePart[2] := "First Name";
        SalutationFormula."Name 2"::"Middle Name":
          NamePart[2] := "Middle Name";
        SalutationFormula."Name 2"::Surname:
          NamePart[2] := Surname;
        SalutationFormula."Name 2"::Initials:
          NamePart[2] := Initials;
        SalutationFormula."Name 2"::"Company Name":
          NamePart[2] := "Company Name";
      END;

      CASE SalutationFormula."Name 3" OF
        SalutationFormula."Name 3"::"Job Title":
          NamePart[3] := "Job Title";
        SalutationFormula."Name 3"::"First Name":
          NamePart[3] := "First Name";
        SalutationFormula."Name 3"::"Middle Name":
          NamePart[3] := "Middle Name";
        SalutationFormula."Name 3"::Surname:
          NamePart[3] := Surname;
        SalutationFormula."Name 3"::Initials:
          NamePart[3] := Initials;
        SalutationFormula."Name 3"::"Company Name":
          NamePart[3] := "Company Name";
      END;

      CASE SalutationFormula."Name 4" OF
        SalutationFormula."Name 4"::"Job Title":
          NamePart[4] := "Job Title";
        SalutationFormula."Name 4"::"First Name":
          NamePart[4] := "First Name";
        SalutationFormula."Name 4"::"Middle Name":
          NamePart[4] := "Middle Name";
        SalutationFormula."Name 4"::Surname:
          NamePart[4] := Surname;
        SalutationFormula."Name 4"::Initials:
          NamePart[4] := Initials;
        SalutationFormula."Name 4"::"Company Name":
          NamePart[4] := "Company Name";
      END;

      CASE SalutationFormula."Name 5" OF
        SalutationFormula."Name 5"::"Job Title":
          NamePart[5] := "Job Title";
        SalutationFormula."Name 5"::"First Name":
          NamePart[5] := "First Name";
        SalutationFormula."Name 5"::"Middle Name":
          NamePart[5] := "Middle Name";
        SalutationFormula."Name 5"::Surname:
          NamePart[5] := Surname;
        SalutationFormula."Name 5"::Initials:
          NamePart[5] := Initials;
        SalutationFormula."Name 5"::"Company Name":
          NamePart[5] := "Company Name";
      END;

      FOR i := 1 TO 5 DO
        IF NamePart[i] = '' THEN BEGIN
          SubStr := '%' + FORMAT(i) + ' ';
          IF STRPOS(SalutationFormula.Salutation,SubStr) > 0 THEN
            SalutationFormula.Salutation :=
              DELSTR(SalutationFormula.Salutation,STRPOS(SalutationFormula.Salutation,SubStr),3);
        END;

      EXIT(STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],NamePart[5]))
    END;

    PROCEDURE InheritCompanyToPersonData@24(Cont@1000 : Record 5050;KeepPersonalData@1001 : Boolean);
    BEGIN
      "Company Name" := Cont.Name;

      RMSetup.GET;
      IF RMSetup."Inherit Salesperson Code" THEN
        "Salesperson Code" := Cont."Salesperson Code";
      IF RMSetup."Inherit Territory Code" THEN
        "Territory Code" := Cont."Territory Code";
      IF RMSetup."Inherit Country/Region Code" THEN
        "Country/Region Code" := Cont."Country/Region Code";
      IF RMSetup."Inherit Language Code" THEN
        "Language Code" := Cont."Language Code";
      IF RMSetup."Inherit Address Details" AND
         ((NOT KeepPersonalData) OR
          (Cont.Address + Cont."Address 2" + Cont.County + Cont."Post Code" + Cont.City <> ''))
      THEN BEGIN
        Address := Cont.Address;
        "Address 2" := Cont."Address 2";
        "Post Code" := Cont."Post Code";
        City := Cont.City;
        County := Cont.County;
      END;
      IF RMSetup."Inherit Communication Details" THEN BEGIN
        IF (Cont."Phone No." <> '') OR NOT KeepPersonalData THEN
          "Phone No." := Cont."Phone No.";
        IF (Cont."Telex No." <> '') OR NOT KeepPersonalData THEN
          "Telex No." := Cont."Telex No.";
        IF (Cont."Fax No." <> '') OR NOT KeepPersonalData THEN
          "Fax No." := Cont."Fax No.";
        IF (Cont."Telex Answer Back" <> '') OR NOT KeepPersonalData THEN
          "Telex Answer Back" := Cont."Telex Answer Back";
        IF (Cont."E-Mail" <> '') OR NOT KeepPersonalData THEN
          VALIDATE("E-Mail",Cont."E-Mail");
        IF (Cont."Home Page" <> '') OR NOT KeepPersonalData THEN
          "Home Page" := Cont."Home Page";
        IF (Cont."Extension No." <> '') OR NOT KeepPersonalData THEN
          "Extension No." := Cont."Extension No.";
        IF (Cont."Mobile Phone No." <> '') OR NOT KeepPersonalData THEN
          "Mobile Phone No." := Cont."Mobile Phone No.";
        IF (Cont.Pager <> '') OR NOT KeepPersonalData THEN
          Pager := Cont.Pager;
        IF (Cont."Correspondence Type" <> "Correspondence Type"::" ") OR NOT KeepPersonalData THEN
          "Correspondence Type" := Cont."Correspondence Type";
      END;
      CALCFIELDS("No. of Industry Groups","No. of Business Relations");
    END;

    PROCEDURE SetHideValidationDialog@26(NewHideValidationDialog@1000 : Boolean) : Boolean;
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE DisplayMap@36();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Contact,GETPOSITION)
      ELSE
        MESSAGE(Text033);
    END;

    PROCEDURE ProcessNameChange@37();
    VAR
      ContBusRel@1000 : Record 5054;
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
    BEGIN
      UpdateSearchName;

      IF Type = Type::Company THEN
        "Company Name" := Name;

      IF Type = Type::Person THEN BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("Contact No.","Company No.");
        IF ContBusRel.FINDFIRST THEN
          IF Cust.GET(ContBusRel."No.") THEN
            IF Cust."Primary Contact No." = "No." THEN BEGIN
              Cust.Contact := Name;
              Cust.MODIFY;
            END;

        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
        IF ContBusRel.FINDFIRST THEN
          IF Vend.GET(ContBusRel."No.") THEN
            IF Vend."Primary Contact No." = "No." THEN BEGIN
              Vend.Contact := Name;
              Vend.MODIFY;
            END;
      END;
    END;

    BEGIN
    END.
  }
}

