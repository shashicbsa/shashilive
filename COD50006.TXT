OBJECT Codeunit 50006 FA Disposal Batch
{
  OBJECT-PROPERTIES
  {
    Date=01/11/16;
    Time=14:09:38;
    Modified=Yes;
    Version List=FaDis1.0,YIMMIAFP,UPG13R2DEV;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            Doc_No@1000000000 : Code[20];
            Trans_Date@1000000004 : Date;
            Dim1@1000000010 : Code[10];
            Dim2@1000000011 : Code[10];
            Dim3@1000000026 : Code[10];
            GenLed_Setup@1000000012 : Record 98;
            Dim_Value@1000000013 : Record 349;
            Curr_Code@1000000014 : Code[10];
            Curry@1000000015 : Record 4;
            "G/L_Account"@1000000017 : Code[20];
            "G/L"@1000000018 : Record 15;
            Amount@1000000019 : Decimal;
            Bl_date@1000000021 : Date;
            Account_Type@1000000022 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';
            Account_No@1000000023 : Code[20];
            Credit_Amt@1000000024 : Decimal;
            Debit_Amt@1000000025 : Decimal;
            Bank_Acc@1000000001 : Record 270;
            CurrExc@1000000002 : Record 330;
            "Amount(Lcy)"@1000000006 : Decimal;
            Narration@1000000003 : Code[250];
            "G/L Entry"@1000000005 : Record 17;
            GenJnlLine@1000000007 : Record 81;
            LocalRecIFDimMapSetup@1000000008 : Record 60066;
            LocalIntRes@1000000009 : Integer;
          BEGIN

            //IF ISCLEAR(DateformatCheck) THEN  //UPG13R2DEV
            //UPG13C.begin
            //CREATE(DateformatCheck);
            //CREATE(DateformatCheck,TRUE,TRUE);  //UPG13R2DEV
            //UPG13C.end


            DateformatCheck := DateformatCheck.DateTimeFormatCheck; //UPG13R2DEV
            Ch:=9;
            Master_Setup.GET;

            //FileName := CommonDialogMgt.OpenFile(text006,'',1,'',0);
            FileName := Master_Setup."Interface File Path" + '\' + Master_Setup."FA Disposal";
            IF FileName = '' THEN
              EXIT;

            LogFile := Master_Setup."Interface File Path" + '\' + 'LOG-' + Master_Setup."FA Disposal";
            F1.CREATE(LogFile);
            F1.CREATEOUTSTREAM(Outstreamobj);
            F1.TEXTMODE(TRUE);

            Entry_No := 1;

            IF NOT (F.OPEN(FileName)) THEN
            BEGIN
             F1.CLOSE;
             EXIT;
            END;




            F.CREATEINSTREAM(Instreamobj);

            WHILE NOT Instreamobj.EOS DO BEGIN

              Instreamobj.READTEXT(B,20);
              EVALUATE(Doc_No,B);
                IF Doc_No = '' THEN
                  Error_Doc := TRUE
                ELSE BEGIN
                  GenJnlLine.RESET;
                  GenJnlLine.SETCURRENTKEY(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name",
                                   GenJnlLine."Posting Date",GenJnlLine."Document No.");

                  GenJnlLine.SETRANGE(GenJnlLine."Journal Template Name",Master_Setup."FA Template Name");
                  GenJnlLine.SETRANGE(GenJnlLine."Journal Batch Name",Master_Setup."FA Batch Disposal");
                  GenJnlLine.SETRANGE(GenJnlLine."Document No.",Doc_No);
                   IF GenJnlLine.FINDFIRST THEN
                     Error_Doc1 := TRUE;

                  "G/L Entry".SETCURRENTKEY("G/L Entry"."Journal Batch Name","G/L Entry"."Reason Code","G/L Entry"."Document No.");
                  "G/L Entry".SETRANGE("G/L Entry"."Reason Code",Master_Setup."FA Template Name");
                  "G/L Entry".SETRANGE("G/L Entry"."Journal Batch Name",Master_Setup."FA Batch Disposal");
                  "G/L Entry".SETRANGE("G/L Entry"."Document No.",Doc_No);
                    IF "G/L Entry".FINDFIRST THEN
                      Error_Doc1 := TRUE;
                END;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              IF EVALUATE(Line_No,B) THEN BEGIN
                IF FORMAT(Line_No) = '' THEN
                  Error_Line := TRUE;
              END ELSE
                Error_Line := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              IF EVALUATE(Account_Type,B) THEN BEGIN
                IF FORMAT(Account_Type) = '' THEN
                  Error_Opt := TRUE;
              END ELSE
                Error_Opt := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              EVALUATE(Account_No,B);
                IF Account_No <> '' THEN BEGIN
                  CASE Account_Type OF
                    Account_Type::"G/L Account": BEGIN
                      IF NOT GL_Acc.GET(Account_No) THEN
                        Error_Acc := TRUE;
                    END;
                    Account_Type::"Bank Account": BEGIN
                      IF NOT Bank_Acc.GET(Account_No) THEN
                        Error_Acc := TRUE;
                    END;
                  END;
                END ELSE
                  Error_Acc := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              IF NOT EVALUATE(Debit_Amt,B) THEN
                Error_Debit := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,20);
              IF NOT EVALUATE(Credit_Amt,B) THEN
                Error_Credit := TRUE;

              IF (Debit_Amt) + (Credit_Amt) = 0 THEN
                Error_Amt := TRUE;

              Amount := Amount + Debit_Amt - Credit_Amt;
              //Dimension value new concept.start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              {
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Dim1,B);
              IF Dim1 <> '' THEN BEGIN
                GenLed_Setup.GET;
                Dim_Value.RESET;
                Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Global Dimension 1 Code");
                Dim_Value.SETRANGE(Dim_Value.Name,Dim1);
                IF NOT Dim_Value.FINDFIRST THEN
                  Error_Dim1 := TRUE;
              END ELSE BEGIN
                GLSetup.RESET;
                GLSetup.GET;
                DefaultDimension.RESET;
                IF (Account_Type = Account_Type::"G/L Account") THEN
                  DefaultDimension.SETRANGE(DefaultDimension."No.",Account_No);
                IF DefaultDimension.FINDFIRST THEN
                  IF (DefaultDimension."Dimension Code"=GLSetup."Global Dimension 1 Code") THEN
                    Error_Dim1 := TRUE;
              END;
              }//Dimension value new concept.previous code blocked
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Dim1,B);
              IF Dim1 <> '' THEN BEGIN
                IF LocalRecIFDimMapSetup.GET THEN;
                IF LocalRecIFDimMapSetup.FA THEN BEGIN
                  LocalIntRes := GetDim1Value(Dim1);
                  IF (LocalIntRes = 1) THEN
                    Error_Dim1 := TRUE;
                END ELSE BEGIN
                  GenLed_Setup.GET;
                  Dim_Value.RESET;
                  Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Global Dimension 1 Code");
                  Dim_Value.SETRANGE(Dim_Value.Name,Dim1);
                  IF NOT Dim_Value.FINDFIRST THEN
                    Error_Dim1 := TRUE;
                END;
              END ELSE BEGIN
                GLSetup.RESET;
                GLSetup.GET;
                DefaultDimension.RESET;
                IF (Account_Type = Account_Type::"G/L Account") THEN
                  DefaultDimension.SETRANGE(DefaultDimension."No.",Account_No);
                IF DefaultDimension.FINDFIRST THEN
                  IF (DefaultDimension."Dimension Code"=GLSetup."Global Dimension 1 Code") THEN
                    Error_Dim1 := TRUE;
              END;

              //Dimension value new concept.end<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Dim2,B);
                IF Dim2 <> '' THEN BEGIN
                  GenLed_Setup.GET;
                  Dim_Value.RESET;
                  Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Global Dimension 2 Code");
                  Dim_Value.SETRANGE(Dim_Value.Name,Dim2);
                  IF NOT Dim_Value.FINDFIRST THEN
                    Error_Dim2 := TRUE;
                END ELSE
                  Error_Dim2 := TRUE;
              //Dimension value new concept.start>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              {
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Dim3,B);
                IF Dim3 <> '' THEN BEGIN
                  GenLed_Setup.GET;
                  Dim_Value.RESET;
                  Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Shortcut Dimension 3 Code");
                  Dim_Value.SETRANGE(Dim_Value.Name,Dim3);
                  IF NOT Dim_Value.FINDFIRST THEN
                    Error_Dim3 := TRUE;
                END ELSE
                  Error_Dim3 := TRUE;
              }////Dimension value new concept. previous code commented
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Dim3,B);
              IF Dim3 <> '' THEN BEGIN
                IF LocalRecIFDimMapSetup.GET THEN;
                IF LocalRecIFDimMapSetup.FA THEN BEGIN
                  LocalIntRes := GetDim3Value(Dim3);
                  IF (LocalIntRes = 1) THEN
                    Error_Dim3 := TRUE;
                END ELSE BEGIN
                  GenLed_Setup.GET;
                  Dim_Value.RESET;
                  Dim_Value.SETRANGE(Dim_Value."Dimension Code",GenLed_Setup."Shortcut Dimension 3 Code");
                  Dim_Value.SETRANGE(Dim_Value.Name,Dim3);
                  IF NOT Dim_Value.FINDFIRST THEN
                    Error_Dim3 := TRUE;
                END;
              END ELSE
                Error_Dim3 := TRUE;

              //Dimension value new concept.end<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,10);
              EVALUATE(Curr_Code,B);
                IF Curr_Code <> '' THEN BEGIN
                  Curry.RESET;
                  IF NOT Curry.GET(Curr_Code) THEN
                    Error_Curr := TRUE;
                END ELSE
                  Error_CurrBlank := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,11);
              IF EVALUATE(Trans_Date,B) THEN BEGIN
                //OK:=DateformatCheck.CHECK(B);  //UPG13R2DEV
                OK := DateformatCheck.checkDateTime(DateTrim(B));  //UPG13R2DEV
                IF NOT (OK) THEN
                  Error_TransDate := TRUE;
              END ELSE
                Error_TransDate := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,11);
              IF EVALUATE(Bl_date,B) THEN BEGIN
                //OK:=DateformatCheck.CHECK(B);  //UPG13R2DEV
                OK := DateformatCheck.checkDateTime(DateTrim(B));  //UPG13R2DEV
                IF NOT (OK) THEN
                  Error_BLBlank := TRUE;
              END ELSE
                Error_BL := TRUE;

              Instreamobj.READTEXT(B,1);
              Instreamobj.READTEXT(B,250);
              EVALUATE(Narration,B);



            //  IF NOT (Error_Curr or Error_CurrBlank) then;
            // Check with multiple Condition of Currency and BlDate
            // we need to check if currecny code is defined then there must bo BL exits for that record.

              CurrExc.RESET;
              CurrExc.SETRANGE(CurrExc."Starting Date",Bl_date);
              CurrExc.SETRANGE(CurrExc."Currency Code",Curr_Code);
              IF CurrExc.FINDFIRST THEN BEGIN
                "Debit_Amt(Lcy)" := ROUND(Debit_Amt * CurrExc."Relational Exch. Rate Amount",3);
                "Credit_Amt(Lcy)":= ROUND(Credit_Amt * CurrExc."Relational Exch. Rate Amount",3);
                "Amount(Lcy)" := "Amount(Lcy)" + "Debit_Amt(Lcy)" - "Credit_Amt(Lcy)";
              END;

              IF (Error_Doc OR Error_TransDate OR Error_BL OR Error_Debit OR Error_Credit OR Error_Opt OR Error_Acc
                  OR Error_Line OR Error_Curr OR Error_Dim1 OR Error_Doc1) THEN BEGIN
                Flag := TRUE;
                IF Error_Doc THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Document No.');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;

                IF Error_Doc1 THEN BEGIN
                  Outstreamobj.WRITETEXT('! Duplicacy In Document No.');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;


                IF Error_TransDate THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Posting Date');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                END;

                IF Error_BL THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Bill Date');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Opt THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Account Type');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Acc THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Account Number');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Debit THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Debit Amount');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Credit THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Credit amount');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Line THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Line No');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Curr THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Currency');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

                IF Error_Dim1 THEN BEGIN
                  Outstreamobj.WRITETEXT('! Error In Dimmension Code 1 : if FA is true in IF Dimension Mapping Setup page then check' +
                  'in Interface Dimension Mapping page otherwise check in Dimension Values page');
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                END;

              END ELSE BEGIN
                IF (Error_CurrBlank OR Error_BLBlank OR Error_Dim2 OR Error_Dim3) THEN BEGIN

                  Outstreamobj.WRITETEXT(FORMAT(Entry_No));
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));

                  IF Error_CurrBlank THEN BEGIN
                    Outstreamobj.WRITETEXT('Process SucessFully with Currency Code Blank');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_BLBlank THEN BEGIN
                    Outstreamobj.WRITETEXT('Process SucessFully with B/l Date blank');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Dim2 THEN BEGIN
                    Outstreamobj.WRITETEXT('Process SucessFully with Blank Dimmension Code 2');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                  IF Error_Dim3 THEN BEGIN
                    Outstreamobj.WRITETEXT('Process SucessFully with Blank Dimmension Code 3 :  if FA is true in IF Dimension Mapping Setup page then check' +
                    'in Interface Dimension Mapping page otherwise check in Dimension Values page');
                    Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<CHAR>'));
                  END;

                END ELSE
                 BEGIN
                  Outstreamobj.WRITETEXT(FORMAT(Entry_No));
                  Outstreamobj.WRITETEXT(FORMAT(Ch,2,'<char>'));
                  Outstreamobj.WRITETEXT('Process SucessFully');
                 END;
              END;
              Entry_No := Entry_No +1;
              Instreamobj.READTEXT(B,1);
              Outstreamobj.WRITETEXT();
              ResetAll();
            END;
            IF (Amount + "Amount(Lcy)") <> 0 THEN BEGIN
              Flag := TRUE;
              Outstreamobj.WRITETEXT('! Error In Total Amount');
            END;
            F1.CLOSE;

            IF NOT Flag THEN BEGIN
              Master_Setup.UploadDataGl(FileName,Master_Setup."FA Template Name",Master_Setup."FA Batch Disposal");
              DisposalReport.RUN;
            END;
          END;

  }
  CODE
  {
    VAR
      Instreamobj@1000000001 : InStream;
      Outstreamobj@1000000034 : OutStream;
      B@1000000004 : Text[250];
      Flag@1000000006 : Boolean;
      FileName@1102201000 : Text[250];
      text006@1102201002 : TextConst 'ENU=Import Text File';
      F@1000000000 : File;
      F1@1000000033 : File;
      Error_Doc@1000000002 : Boolean;
      Sales_interface@1000000010 : Record 50010;
      Entry_No@1000000013 : Integer;
      Error_TransDate@1000000017 : Boolean;
      Error_Dim1@1000000020 : Boolean;
      Error_Dim2@1000000021 : Boolean;
      Error_Dim3@1000000047 : Boolean;
      Error_Curr@1000000022 : Boolean;
      Error_Amount@1000000025 : Boolean;
      Error_BL@1000000027 : Boolean;
      Error_BLBlank@1000000005 : Boolean;
      Master_Setup@1000000030 : Record 50008;
      LogFile@1000000031 : Text[250];
      Ch@1000000032 : Char;
      Error_Doc1@1000000038 : Boolean;
      Line_No@1000000039 : Integer;
      Error_Line@1000000040 : Boolean;
      Error_Opt@1000000041 : Boolean;
      Error_Acc@1000000042 : Boolean;
      GL_Acc@1000000043 : Record 15;
      Error_Credit@1000000044 : Boolean;
      Error_Debit@1000000045 : Boolean;
      Error_Amt@1000000046 : Boolean;
      Error_CurrBlank@1000000003 : Boolean;
      "Debit_Amt(Lcy)"@1000000008 : Decimal;
      "Credit_Amt(Lcy)"@1000000007 : Decimal;
      DisposalReport@1000000009 : Report 50021;
      DateformatCheck@1000000011 : DotNet "'DateTimeFun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.DateTimeFun.DateTimeFormatCheck";
      OK@1000000012 : Boolean;
      DefaultDimension@1000000014 : Record 352;
      GLSetup@1000000015 : Record 98;

    PROCEDURE ResetAll@1000000000();
    BEGIN
      Error_Doc := FALSE;
      Error_TransDate := FALSE;
      Error_Dim1 := FALSE;
      Error_Dim2 := FALSE;
      Error_Dim3 := FALSE;
      Error_Curr := FALSE;
      Error_BL := FALSE;
      Error_BLBlank := FALSE;
      Error_CurrBlank := FALSE;
      "Debit_Amt(Lcy)" := 0;
      "Credit_Amt(Lcy)" := 0;
      Error_Acc := FALSE;
      Error_Line := FALSE;
      Error_Opt := FALSE;
      Error_Doc1 := FALSE;
    END;

    PROCEDURE DateTrim@1102159001(ADate@1102159001 : Text) : Text[250];
    BEGIN
      EXIT(DELSTR(ADate,STRLEN(ADate),1));
    END;

    PROCEDURE GetDim1Value@1000000002(Dimension1@1000000000 : Code[10]) Result : Integer;
    VAR
      LocalRecIfDimMapp@1000000001 : Record 60065;
    BEGIN

      LocalRecIfDimMapp.RESET;
      LocalRecIfDimMapp.SETRANGE("Dimension Name",LocalRecIfDimMapp."Dimension Name"::"SHOP CODE");
      LocalRecIfDimMapp.SETRANGE("Old YIMM Code",Dimension1);
      IF NOT LocalRecIfDimMapp.FINDSET THEN
        Result := 1
      ELSE
        Result := 0;
    END;

    PROCEDURE GetDim3Value@1000000001(Dimension3@1000000000 : Code[10]) LocalIntReturnRes : Integer;
    VAR
      LocalRecIFDimMap@1000000001 : Record 60065;
    BEGIN
      LocalRecIFDimMap.RESET;
      LocalRecIFDimMap.SETRANGE("Dimension Name",LocalRecIFDimMap."Dimension Name"::"SELLING EXPENSES");
      LocalRecIFDimMap.SETRANGE("Old YIMM Code",Dimension3);
      IF LocalRecIFDimMap.FINDFIRST THEN
        LocalIntReturnRes := 1
      ELSE
        LocalIntReturnRes := 0;
    END;

    BEGIN
    {
      //YIMMIAFP
      1) Insert Date Check (Automation for date Check is included)
      2) INSERT CUSTOMER MASTER CHECK IN LOG FILE
      3) CHANGE SELECTION OF DIMMENSION FROM CODE TO NAME
      4) MAKE PROVISION FOR CAPTURING WHT ARED CODE IN INTERFACE FILE
      5) MAKE PROVISION FOR CAPTURING NARRATION IN INTERFACE FILE
      //UPG13R2DEV
      Modifications for 2013R2DB. Dotnet variable "DateFormatCheck" is modified. Also "DateTrim" function is created to remove a space in Date fields in interface files.

      [UPG13R2DEV]
      [SIGN]  : SV
      [REF]   : Dimension value new concept
      [DESC]  : Dimension value new concept.New mapping table introduced and will be used(based on setup) untill all other systems are updated to use new dimension values.
                After all other system updated mapping will be obsolate
    }
    END.
  }
}

