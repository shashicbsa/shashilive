OBJECT Report 50057 Suggest Vendor Adjustments
{
  OBJECT-PROPERTIES
  {
    Date=02/21/15;
    Time=13:31:48;
    Modified=Yes;
    Version List=YIMMDEVIP1.0,SMDEV1.0;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                    VendorLedgEntryTemp.DELETEALL;
                END;

    OnPostReport=BEGIN

                   COMMIT;
                   IF NOT VendorLedgEntryTemp.ISEMPTY THEN
                     IF CONFIRM(Text024) THEN
                      // FORM.RUNMODAL(0,VendorLedgEntryTemp);   YIMMDEVIP1.0
                       PAGE.RUNMODAL(0,VendorLedgEntryTemp);
                 END;

  }
  DATASET
  {
    { 1102159001;;DataItem;                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.)
                                 ORDER(Ascending)
                                 WHERE(No.=FILTER(VDRF-09-01-0002|VDRF-09-01-0001));
               OnPreDataItem=BEGIN

                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF PostingDate = 0D THEN
                                 ERROR(Text001);
                               //IF GenJnlLine2."Bal. Account No." = '' THEN
                               //  ERROR(Text026);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               SeveralCurrencies := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = BankPmtType::" ") OR
                                   SummarizePerVend) AND
                                   (NextDocNo = '')
                               THEN
                                 ERROR(Text002);




                               //YIMMNSVPST
                               IF ((BalAccType = BalAccType::"Bank Account") AND
                                     (BalAccNo = ''))
                               THEN
                                 ERROR(Text025);
                               //YIMMNSVPEN

                               IF ((BankPmtType = BankPmtType::"Manual Check") AND
                                   NOT SummarizePerVend AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(
                                   Text017+
                                   Text018,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),SELECTSTR(BankPmtType + 1,Text023));

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT
                                    CONFIRM(
                                      Text003+
                                      Text004,FALSE,
                                      WORKDATE)
                                 THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Customer);

                               OriginalAmtAvailable := AmountAvailable;
                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
                               SummarizePerDim := SelectedDim.FIND('-') AND SummarizePerVend;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  GetVendLedgEntries(TRUE,FALSE);
                                  GetVendLedgEntries(FALSE,FALSE);
                                  CheckAmounts(FALSE);
                                END;

               OnPostDataItem=BEGIN

                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FIND('-') THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      GetVendLedgEntries(TRUE,FALSE);
                                      GetVendLedgEntries(FALSE,FALSE);
                                      CheckAmounts(FALSE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window.OPEN(Text007);
                                  IF FIND('-') THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      GetVendLedgEntries(TRUE,TRUE);
                                      GetVendLedgEntries(FALSE,TRUE);
                                      CheckAmounts(TRUE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                //JnlLineDim.LOCKTABLE;  //YIMMDEVIP1.0 code comment
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FIND('+') THEN BEGIN
                                  FirstLineNo := GenJnlLine."Line No.";
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1102159001;;Container;
                  Name=Options;
                  ContainerType=ContentArea }

      { 1102159003;1;Field  ;
                  Name=Due Date;
                  SourceExpr=LastDueDateToPayReq }

      { 1102159004;1;Field  ;
                  Name=PostingDate;
                  SourceExpr=PostingDate }

      { 1102159005;1;Field  ;
                  CaptionML=ENU=Starting Document No.;
                  SourceExpr=NextDocNo }

      { 1102159002;1;Field  ;
                  CaptionML=ENU=New Doc. No. per Line;
                  SourceExpr=DocNoPerLine }

      { 1102159006;1;Field  ;
                  CaptionML=ENU=Type of Transaction;
                  SourceExpr="Type of Transaction" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Vend2@1102159043 : Record 18;
      GenJnlTemplate@1102159042 : Record 80;
      GenJnlBatch@1102159041 : Record 232;
      GenJnlLine@1102159040 : Record 81;
      GenJnlLine2@1102159038 : Record 81;
      VendLedgEntry@1102159037 : Record 21;
      GLAcc@1102159036 : Record 15;
      BankAcc@1102159035 : Record 270;
      PayableVendLedgEntry@1102159034 : TEMPORARY Record 50005;
      OldTempPaymentBuffer@1102159032 : TEMPORARY Record 50006;
      SelectedDim@1102159031 : Record 369;
      VendorLedgEntryTemp@1102159030 : TEMPORARY Record 21;
      GenJnlPostLine@1102159029 : Codeunit 12;
      NoSeriesMgt@1102159028 : Codeunit 396;
      VendEntryEdit@1102159027 : Codeunit 103;
      DimMgt@1102159026 : Codeunit 408;
      Window@1102159025 : Dialog;
      UsePaymentDisc@1102159024 : Boolean;
      PostingDate@1102159023 : Date;
      LastDueDateToPayReq@1102159022 : Date;
      NextDocNo@1102159021 : Code[20];
      AmountAvailable@1102159020 : Decimal;
      OriginalAmtAvailable@1102159019 : Decimal;
      UsePriority@1102159018 : Boolean;
      SummarizePerVend@1102159017 : Boolean;
      SummarizePerDim@1102159016 : Boolean;
      SummarizePerDimText@1102159015 : Text[250];
      FirstLineNo@1102159014 : Integer;
      LastLineNo@1102159013 : Integer;
      NextEntryNo@1102159012 : Integer;
      StopPayments@1102159011 : Boolean;
      DocNoPerLine@1102159010 : Boolean;
      BankPmtType@1102159009 : ' ,Computer Check,Manual Check';
      BalAccType@1102159008 : 'G/L Account,Customer,Vendor,Bank Account';
      BalAccNo@1102159007 : Code[20];
      MessageText@1102159006 : Text[250];
      GenJnlLineInserted@1102159005 : Boolean;
      SeveralCurrencies@1102159004 : Boolean;
      "Type of Transaction"@1102159003 : ' ,Selling In,Selling Out,Direct,Indirect,Adm.MKT,Free Service,Claim,Promotion,Sharing,Import,FA,Others,Imacs,Propac,Gport,TMS,Other YMKI,Propac Ex.,Intrst_Deposit';
      FLAG@1102159002 : Boolean;
      VendNo@1102159001 : Code[20];
      Text000@1102159070 : TextConst 'ENU=Please enter the last payment date.';
      Text001@1102159069 : TextConst 'ENU=Please enter the posting date.';
      Text002@1102159068 : TextConst 'ENU=Please enter a Starting Document No.';
      Text003@1102159067 : TextConst 'ENU=The payment date is earlier than %1.\\';
      Text004@1102159066 : TextConst 'ENU=Do you still want to run the batch job?';
      Text005@1102159065 : TextConst 'ENU=The batch job was interrupted.';
      Text006@1102159064 : TextConst 'ENU=Processing entities     #1##########';
      Text007@1102159063 : TextConst 'ENU=Processing entities for payment discounts #1##########';
      Text008@1102159062 : TextConst 'ENU=Inserting payment journal lines #1##########';
      Text009@1102159061 : TextConst 'ENU=%1 must be G/L Account or Bank Account.';
      Text010@1102159060 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.';
      Text011@1102159059 : TextConst 'ENU=Use Entity Priority must be activated when the value in the Amount Available field is not 0.';
      Text012@1102159058 : TextConst 'ENU=Starting Document No. must contain a number.';
      Text013@1102159057 : TextConst 'ENU=Use Entity Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.';
      Text014@1102159056 : TextConst 'ENU=Payment to vendor %1';
      Text015@1102159055 : TextConst 'ENU=Payment of %1 %2';
      Text016@1102159054 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3."';
      Text017@1102159053 : TextConst 'ENU="When %1 = %2 and you have not placed a check mark in the Summarize per Entity field,\"';
      Text018@1102159052 : TextConst 'ENU=then you must place a check mark in New Doc. No. per Line.';
      Text019@1102159051 : TextConst 'ENU=You have only created suggested entity payment lines for the %1 %2.\';
      Text020@1102159050 : TextConst 'ENU=There are, however, other open entity ledger entries in currencies other than %2.';
      Text021@1102159049 : TextConst 'ENU=There are no other open entity ledger entries in other currencies.';
      Text022@1102159048 : TextConst 'ENU=You have created suggested entity payment lines for all currencies.';
      Text023@1102159047 : TextConst 'ENU=" ,Computer Check,Manual Check"';
      Text024@1102159046 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the posting date in the Suggest Entity Payments batch job request window. Do you want to see the entries?';
      Text025@1102159045 : TextConst 'ENU=Please enter the Bank Account No.';
      Text026@1102159044 : TextConst 'ENU=Please enter Bank account No.';
      TempPaymentBuffer@1102159033 : Record 50006;

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : ' ,Computer Check,Manual Check');
    BEGIN

      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Customer No.",Customer."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      //VendLedgEntry.SETRANGE(Positive,Positive); //SMDEV1.0

      //SMDEV1.0.begin
      IF Positive THEN
      VendLedgEntry.SETRANGE(VendLedgEntry.Positive,TRUE)
      ELSE
      VendLedgEntry.SETRANGE(VendLedgEntry.Positive,FALSE);
      //SMDEV1.0.end

      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq+1,12319999D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');
      //YIMMATOPST
      IF "Type of Transaction" <> 0 THEN
        VendLedgEntry.SETRANGE("Type Of Transaction","Type of Transaction");
      //YIMMATOPEN
      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          SaveAmount;
          IF (VendLedgEntry."Accepted Pmt. Disc. Tolerance") OR
            (VendLedgEntry."Accepted Payment Tolerance" <> 0)
          THEN BEGIN
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
            VendLedgEntry."Accepted Payment Tolerance" := 0;
            VendEntryEdit.RUN(VendLedgEntry);
          END;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    BEGIN
      WITH GenJnlLine DO BEGIN
        VALIDATE("Posting Date",PostingDate);
      // "Document Type" := "Document Type"::Payment;    //YIMM
        "Account Type" := "Account Type"::Customer;
        Vend2.GET(VendLedgEntry."Customer No.");
        Vend2.CheckBlockedCustOnJnls(Vend2,"Document Type",FALSE);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Customer Posting Group";
        "Salespers./Purch. Code" := Vend2."Salesperson Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
       { IF GenJnlPostLine.CheckCalcPmtDiscGenJnlCust(GenJnlLine,VendLedgEntry,0,FALSE)
        THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";  //YIMMDEVIP1.0 code comment
        VALIDATE(Amount);   }
        Amount := -VendLedgEntry."Remaining Amount";   //YIMMDEVIP1.0 code comment//nk
        VALIDATE(Amount); //nk

      END;


      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Customer.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Customer No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);

      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";

      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Customer."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        PrevCurrency := PayableVendLedgEntry."Currency Code";
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF (CurrencyBalance < 0) AND (PrevCurrency <> '') THEN BEGIN                                     // Issue 23 Naresh {AND (PrevCurrency <> '')}
              PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
              PayableVendLedgEntry.DELETEALL;
              PayableVendLedgEntry.SETRANGE("Currency Code");
            END ELSE
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             //(AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")  //SMDEV1.0
             (AmountAvailable >= CurrencyBalance - PayableVendLedgEntry."Amount (LCY)")  //SMDEV1.0
          THEN
            //CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"  //SMDEV1.0
            CurrencyBalance := CurrencyBalance - PayableVendLedgEntry."Amount (LCY)"  //SMDEV1.0
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;

        //YIMMCHST

        //IF CurrencyBalance < 0 THEN BEGIN
          //PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
          //PayableVendLedgEntry.DELETEALL;
          //PayableVendLedgEntry.SETRANGE("Currency Code");
        //END ELSE
          //IF OriginalAmtAvailable > 0 THEN
            //AmountAvailable := AmountAvailable - CurrencyBalance;
        //IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          //StopPayments := TRUE;

        //YIMMCHEN

      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine3@1000 : Record 81;
      TempDimBuf@1002 : Record 360;
      DimBufMgt@1003 : Codeunit 411;
      EntryNo@1004 : Integer;
      SalesInvHeader@1102159002 : Record 112;
      SalesCrMemoHeader@1102159001 : Record 114;
    BEGIN

      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      IF BalAccType = BalAccType::"Bank Account" THEN BEGIN
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      END;

      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            IF VendLedgEntry."Posting Date" <= PostingDate THEN BEGIN
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Customer No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";

      //SMDEV1.0.begin
      //YIMMRPRENO
              TempPaymentBuffer."Vend Ledg. Entry Description":=VendLedgEntry.Description;

      //YIMMRPRENO


      //YIMMRBDTL

              TempPaymentBuffer."Bank Code":=VendLedgEntry."Bank Code";
              TempPaymentBuffer."Bank Account No":=VendLedgEntry."Bank Account No";
              TempPaymentBuffer."Vend/Cust Bank Name":=VendLedgEntry."Vend/Cust Bank Name";
              TempPaymentBuffer."Bank Address":=VendLedgEntry."Bank Address";
              TempPaymentBuffer.BeniName:=VendLedgEntry.BeniName;

              IF (VendLedgEntry."Document Type"=VendLedgEntry."Document Type"::Invoice) THEN
                IF SalesInvHeader.GET(VendLedgEntry."Document No.") THEN
                  TempPaymentBuffer.CustomerName:=SalesInvHeader."Sell-to Customer Name";


              IF (VendLedgEntry."Document Type"=VendLedgEntry."Document Type"::"Credit Memo") THEN
                IF SalesCrMemoHeader.GET(VendLedgEntry."Document No.") THEN
                  TempPaymentBuffer.CustomerName:=SalesCrMemoHeader."Sell-to Customer Name";

      //YIMMRBDTL
      //SMDEV1.0.end

              IF SummarizePerDim THEN BEGIN
                TempDimBuf.RESET;
                TempDimBuf.DELETEALL;
                IF SelectedDim.FIND('-') THEN
                  REPEAT
                   { IF LedgEntryDim.GET(
                         DATABASE::"Cust. Ledger Entry",VendLedgEntry."Entry No.",SelectedDim."Dimension Code")
                    THEN BEGIN
                      TempDimBuf."Table ID" := LedgEntryDim."Table ID";
                      TempDimBuf."Dimension Code" := LedgEntryDim."Dimension Code";
                      TempDimBuf."Dimension Value Code" := LedgEntryDim."Dimension Value Code";
                      TempDimBuf.INSERT;
                    END;   }
                  UNTIL SelectedDim.NEXT = 0;
                EntryNo := DimBufMgt.FindDimensions(TempDimBuf);
                IF EntryNo = 0 THEN
                  EntryNo := DimBufMgt.InsertDimensions(TempDimBuf);
                TempPaymentBuffer."Dimension Entry No." := EntryNo;
                TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
              END ELSE BEGIN
                TempPaymentBuffer."Dimension Entry No." := 0;
                TempPaymentBuffer."Global Dimension 1 Code" := '';
                TempPaymentBuffer."Global Dimension 2 Code" := '';
              END;

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              IF SummarizePerVend THEN BEGIN
                TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
               IF TempPaymentBuffer.FIND THEN BEGIN
                  TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                  TempPaymentBuffer.MODIFY;
                END ELSE BEGIN
                 TempPaymentBuffer."Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window.UPDATE(1,VendLedgEntry."Customer No.");
                  TempPaymentBuffer.INSERT;
                END;
                VendLedgEntry.TESTFIELD("Applies-to ID",'');
                VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
              END ELSE BEGIN
                GenJnlLine3.RESET;
                GenJnlLine3.SETCURRENTKEY(
                  "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
                FLAG:=TRUE;
                GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Vendor);
                GenJnlLine3.SETRANGE("Account No.",VendLedgEntry."Customer No.");
                GenJnlLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry."Document Type");
                GenJnlLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry."Document No.");
                IF GenJnlLine3.FIND('-') THEN
                BEGIN
                 FLAG:=FALSE
                 // GenJnlLine3.FIELDERROR(
                 //   "Applies-to Doc. No.",
                 //   STRSUBSTNO(
                 //     Text016,
                 //     VendLedgEntry."Document Type",VendLedgEntry."Document No.",
                 //     VendLedgEntry."Customer No."));


                END;
                TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;

      //YIMMNVPGST
                TempPaymentBuffer."Posting Group" := VendLedgEntry."Customer Posting Group";
      //YIMMNVPGEN
      //YIMMATOPST
                TempPaymentBuffer."Type Of Transaction" := VendLedgEntry."Type Of Transaction";
      //YIMMATOPEN
                Window.UPDATE(1,VendLedgEntry."Customer No.");
                IF FLAG THEN
                TempPaymentBuffer.INSERT;

              END;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendEntryEdit.RUN(VendLedgEntry);

            END ELSE BEGIN
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            END;

          UNTIL PayableVendLedgEntry.NEXT = 0;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      TempPaymentBuffer.SETCURRENTKEY("Document No.");
      IF TempPaymentBuffer.FIND('-') THEN
        REPEAT

          //Code Is Written to generate Doc No on the basis on Vendor Number  YIMMST

          IF (VendNo <> '') AND (VendNo <> TempPaymentBuffer."Vendor No.") THEN
            NextDocNo := INCSTR(NextDocNo);

          //END Of Code Written YIMMEN

          WITH GenJnlLine DO BEGIN
            INIT;
            Window.UPDATE(1,TempPaymentBuffer."Vendor No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            VALIDATE("Posting Date",PostingDate);
      //      "Document Type" := "Document Type"::Payment;          //YIMM
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            IF SummarizePerVend THEN
              "Document No." := TempPaymentBuffer."Document No."
            ELSE
              IF DocNoPerLine THEN BEGIN
                IF TempPaymentBuffer.Amount < 0 THEN
                  "Document Type" := "Document Type"::Refund;  //SMDEV1.0 //nk
                  //"Document Type" := "Document Type"::Payment;  //SMDEV1.0  //nk

                "Document No." := NextDocNo;
                //NextDocNo := INCSTR(NextDocNo); //YIMM
              END ELSE BEGIN
                IF (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") AND
                  (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
                THEN
                  "Document No." := OldTempPaymentBuffer."Document No."
                ELSE BEGIN
                  "Document No." := NextDocNo;
                  //NextDocNo := INCSTR(NextDocNo);   //YIMM
                  OldTempPaymentBuffer := TempPaymentBuffer;
                  OldTempPaymentBuffer."Document No." := "Document No.";
                END;
              END;
            GenJnlLine.VALIDATE("Document No."); //YIMMAREF
            "Account Type" := "Account Type"::Customer;
            VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
            "Bank Payment Type" := BankPmtType;
            IF SummarizePerVend THEN BEGIN
              "Applies-to ID" := "Document No.";
              Description := STRSUBSTNO(Text014,TempPaymentBuffer."Vendor No.");
            END ELSE
              Description :=COPYSTR(
                (STRSUBSTNO(
                  Text015,
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
                  TempPaymentBuffer."Vend Ledg. Entry Description",
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No.")),1,50);

      //SMDEV1.0.begin
      //YIMMRBDTL
             GenJnlLine."Bank Account No.":=TempPaymentBuffer."Bank Account No";
             GenJnlLine."Customer/Vendor Bank":=TempPaymentBuffer."Bank Code";
             GenJnlLine."Bank Name Cust/Vend":=TempPaymentBuffer."Vend/Cust Bank Name";
             GenJnlLine."Bank Address":=TempPaymentBuffer."Bank Address";
             GenJnlLine.BeniName:=TempPaymentBuffer.BeniName;
      //YIMMRBDTL
      //SMDEV1.0.end


            "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";
            VALIDATE(Amount,TempPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";


      //YIMMNVPGST
            "Posting Group" := TempPaymentBuffer."Posting Group";
            "CV_Ledger_Entry No.":=TempPaymentBuffer."Vendor Ledg. Entry No.";
      //YIMMNVPGEN
      //YIMMATOPST
            "Type Of Transaction" := TempPaymentBuffer."Type Of Transaction";
      //YIMMATOPEN
             INSERT;
            GenJnlLineInserted := TRUE;
            {JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
            JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
            JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
            JnlLineDim.SETRANGE("Journal Line No.","Line No.");
            JnlLineDim.DELETEALL; } //YIMMDEVIP1.0 Code cmmnt

           { IF SummarizePerVend THEN BEGIN
              TempDimBuf.RESET;
              TempDimBuf.DELETEALL;
              DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",TempDimBuf);
             { DimMgt.MoveDimBufToJnlLineDim(
                  TempDimBuf,JnlLineDim,DATABASE::"Gen. Journal Line",
                  "Journal Template Name","Journal Batch Name","Line No.");  } //YIMMDEVIP1.0 code cmmnt
            END ELSE BEGIN
            //  LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
            //  LedgEntryDim.SETRANGE("Entry No.",TempPaymentBuffer."Vendor Ledg. Entry No.");
            //  DimMgt.MoveLedgEntryDimToJnlLineDim(
            //    LedgEntryDim,JnlLineDim,DATABASE::"Gen. Journal Line",
                "Journal Template Name","Journal Batch Name","Line No.",0); }    //YIMMDEVIP1.0 Code Commnt
                      END;
          //END;
          VendNo := TempPaymentBuffer."Vendor No.";
        UNTIL TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 50005);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN

             TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code")

      //YIMMNSVPST
          ELSE

          TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");
      //YIMMNSVPEN
        END;
    END;

    LOCAL PROCEDURE ShowMessage@15(VAR Text@1000 : Text[250]);
    BEGIN
      IF (Text <> '') AND GenJnlLineInserted THEN
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 50005);
    VAR
      BankAcc@1003 : Record 270;
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record 50005;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN BEGIN
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            IF TmpPayableVendLedgEntry.FIND('-') THEN
              REPEAT
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              UNTIL TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies OR TmpPayableVendLedgEntry2.FIND('-');

            IF SeveralCurrencies THEN
              MessageText :=
                STRSUBSTNO(
                   Text019+
                   Text020,
                    BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            ELSE
              MessageText :=
                STRSUBSTNO(
                  Text019+
                  Text021,
                   BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          END ELSE
            MessageText := Text022;
        END;
    END;

    LOCAL PROCEDURE UpdateEnabled@5();
    BEGIN
      IF SummarizePerVend THEN
       // RequestOptionsForm.SummarizePerDimText.ENABLED := TRUE  YIMMDEVIP1.0
      //ELSE     YIMMDEVIP1.0
       // RequestOptionsForm.SummarizePerDimText.ENABLED := FALSE;    YIMMDEVIP1.0
    END;

    BEGIN
    {
      //YIMMDEVIP1.0
      Point No-23 IDR Currencies data not showing.
      //SMDEV1.0
      Code Modified as per single master concept.
      Table 50006 is used instead of Table 371
    }
    END.
  }
  RDLDATA
  {
  }
}

