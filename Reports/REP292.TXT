OBJECT Report 292 Copy Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=01/09/16;
    Time=11:07:49;
    Modified=Yes;
    Version List=NAVW17.10,NAVAPAC7.10,SMDEV1.0,YIMMDEVIP1.0;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Document;
               ENA=Copy Sales Document];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  ActualCreditMemoLoc@1102159001 : Boolean;
                BEGIN
                  ActualCreditMemoLoc := SalesHeader.ActualCreditMemo; //YIMMDEVIP1.0
                  SalesSetup.GET;
                  CopyDocMgt.SetProperties(
                    IncludeHeader,RecalculateLines,FALSE,FALSE,FALSE,SalesSetup."Exact Cost Reversing Mandatory",FALSE);
                  CopyDocMgt.CopySalesDoc(DocType,DocNo,SalesHeader);
                  WITH SalesHeader DO BEGIN
                    IF ReplacePostDate OR ReplaceDocDate THEN BEGIN
                      IF ReplacePostDate THEN
                        VALIDATE("Posting Date",PostingDate);
                      IF ReplaceDocDate THEN
                        VALIDATE("Document Date",PostingDate);
                      MODIFY;
                    END;
                    //YIMMDEVIP1.0-Start
                    UID := USERID;
                    Interfaced := FALSE;
                    MODIFY;
                    //YIMMDEVIP1.0-End
                    GLSetup.GET;
                    IF ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
                       GLSetup.GSTEnabled(FromSalesHeader."Document Date")
                    THEN BEGIN
                      CASE DocType OF
                        DocType::Quote,DocType::"Blanket Order",DocType::Order,DocType::Invoice,DocType::"Credit Memo",DocType::"Return Order":
                          BEGIN
                            "Adjustment Applies-to" := FromSalesHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromSalesHeader."Document Date");
                          END;
                        DocType::"Posted Shipment":
                          BEGIN
                            "Adjustment Applies-to" := FromSalesShptHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromSalesShptHeader."Document Date");
                          END;
                        DocType::"Posted Invoice":
                          BEGIN
                            "Adjustment Applies-to" := FromSalesInvHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromSalesInvHeader."Document Date");
                          END;
                        DocType::"Posted Credit Memo":
                          BEGIN
                            "Adjustment Applies-to" := FromSalesCrMemoHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromSalesCrMemoHeader."Document Date");
                          END;
                        DocType::"Posted Return Receipt":
                          BEGIN
                            "Adjustment Applies-to" := FromReturnRcptHeader."No.";
                            "BAS Adjustment" := BASManagement.CheckBASPeriod("Document Date",FromReturnRcptHeader."Document Date");
                          END;
                      END;
                      MODIFY;
                    END;
                    //YIMMDEVIP1.0.begin
                    ActualCreditMemo := ActualCreditMemoLoc;
                    MODIFY;
                    //YIMMDEVIP1.0.end
                  END;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF DocNo <> '' THEN BEGIN
                     CASE DocType OF
                       DocType::Quote:
                         IF FromSalesHeader.GET(FromSalesHeader."Document Type"::Quote,DocNo) THEN;
                       DocType::"Blanket Order":
                         IF FromSalesHeader.GET(FromSalesHeader."Document Type"::"Blanket Order",DocNo) THEN;
                       DocType::Order:
                         IF FromSalesHeader.GET(FromSalesHeader."Document Type"::Order,DocNo) THEN;
                       DocType::Invoice:
                         IF FromSalesHeader.GET(FromSalesHeader."Document Type"::Invoice,DocNo) THEN;
                       DocType::"Return Order":
                         IF FromSalesHeader.GET(FromSalesHeader."Document Type"::"Return Order",DocNo) THEN;
                       DocType::"Credit Memo":
                         IF FromSalesHeader.GET(FromSalesHeader."Document Type"::"Credit Memo",DocNo) THEN;
                       DocType::"Posted Shipment":
                         IF FromSalesShptHeader.GET(DocNo) THEN
                           FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
                       DocType::"Posted Invoice":
                         IF FromSalesInvHeader.GET(DocNo) THEN
                           FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
                       DocType::"Posted Return Receipt":
                         IF FromReturnRcptHeader.GET(DocNo) THEN
                           FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
                       DocType::"Posted Credit Memo":
                         IF FromSalesCrMemoHeader.GET(DocNo) THEN
                           FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
                     END;
                     IF FromSalesHeader."No." = '' THEN
                       DocNo := '';
                   END;
                   ValidateDocNo;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENA=Options] }

      { 3   ;2   ;Field     ;
                  Name=DocumentType;
                  CaptionML=[ENU=Document Type;
                             ENA=Document Type];
                  OptionCaptionML=[ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo;
                                   ENA=Quote,Blanket Order,Order,Invoice,Return Order,CR/Adj Note,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted CR/Adj Note];
                  SourceExpr=DocType;
                  Visible=False;
                  OnValidate=BEGIN
                               DocNo := '';
                               ValidateDocNo;
                             END;
                              }

      { 8   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=[ENU=Document No.;
                             ENA=Document No.];
                  SourceExpr=DocNo;
                  OnValidate=BEGIN
                               ValidateDocNo;
                             END;

                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  Name=SellToCustNo;
                  CaptionML=[ENU=Entity No.;
                             ENA=Sell-to Customer No.];
                  SourceExpr=FromSalesHeader."Sell-to Customer No.";
                  Editable=FALSE }

      { 7   ;2   ;Field     ;
                  Name=SellToCustName;
                  CaptionML=[ENU=Entity Name;
                             ENA=Sell-to Customer Name];
                  SourceExpr=FromSalesHeader."Sell-to Customer Name";
                  Editable=FALSE }

      { 1   ;2   ;Field     ;
                  Name=IncludeHeader_Options;
                  CaptionML=[ENU=Include Header;
                             ENA=Include Header];
                  SourceExpr=IncludeHeader;
                  OnValidate=BEGIN
                               ValidateIncludeHeader;
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=RecalculateLines;
                  CaptionML=[ENU=Recalculate Lines;
                             ENA=Recalculate Lines];
                  SourceExpr=RecalculateLines;
                  OnValidate=BEGIN
                               IF (DocType = DocType::"Posted Shipment") OR (DocType = DocType::"Posted Return Receipt") THEN
                                 RecalculateLines := TRUE;
                             END;
                              }

      { 1450002;2;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             ENA=Posting Date];
                  SourceExpr=PostingDate }

      { 1450001;2;Field     ;
                  Name=ReplacePostDate;
                  CaptionML=[ENU=Replace Posting Date;
                             ENA=Replace Posting Date];
                  SourceExpr=ReplacePostDate;
                  OnValidate=BEGIN
                               IF ReplacePostDate THEN
                                 ReplaceDocDate := ReplacePostDate;
                             END;
                              }

      { 1450000;2;Field     ;
                  Name=ReplaceDocDate;
                  CaptionML=[ENU=Replace Document Date;
                             ENA=Replace Document Date];
                  SourceExpr=ReplaceDocDate;
                  OnValidate=BEGIN
                               IF ReplacePostDate THEN
                                 ReplaceDocDate := ReplacePostDate;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SalesHeader@1007 : Record 36;
      FromSalesHeader@1010 : Record 36;
      FromSalesShptHeader@1012 : Record 110;
      FromSalesInvHeader@1014 : Record 112;
      FromReturnRcptHeader@1016 : Record 6660;
      FromSalesCrMemoHeader@1018 : Record 114;
      SalesSetup@1003 : Record 311;
      GLSetup@1500001 : Record 98;
      PostCodeCheck@1500000 : Codeunit 28000;
      CopyDocMgt@1008 : Codeunit 6620;
      BASManagement@1500002 : Codeunit 11601;
      DocType@1026 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocNo@1027 : Code[20];
      IncludeHeader@1028 : Boolean;
      RecalculateLines@1029 : Boolean;
      Text000@1000 : TextConst 'ENU=The price information may not be reversed correctly, if you copy a %1. If possible copy a %2 instead or use %3 functionality.;ENA=The price information may not be reversed correctly, if you copy a %1. If possible copy a %2 instead or use %3 functionality.';
      Text001@1001 : TextConst 'ENU=Undo Shipment;ENA=Undo Shipment';
      Text002@1002 : TextConst 'ENU=Undo Return Receipt;ENA=Undo Return Receipt';
      Text003@1004 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo;ENA=Quote,Blanket Order,Order,Invoice,Return Order,CR/Adj Note,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted CR/Adj Note';
      ReplacePostDate@1500005 : Boolean;
      ReplaceDocDate@1500004 : Boolean;
      PostingDate@1500003 : Date;
      ReasonCode@1102159001 : Code[20];
      P@1102159002 : Boolean;
      UIDLoc@1000000000 : Code[50];

    PROCEDURE SetSalesHeader@2(VAR NewSalesHeader@1000 : Record 36);
    BEGIN
      NewSalesHeader.TESTFIELD("No.");
      SalesHeader := NewSalesHeader;
      //YIMMDEVIP1.0
      IF (SalesHeader."Reason Code" = 'SALRT') AND (SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo") THEN
       DocType := DocType :: "Posted Credit Memo";
      IF (SalesHeader."Reason Code" = 'SALRT') AND (SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice) THEN
       DocType := DocType :: "Posted Credit Memo";
      IF (SalesHeader."Reason Code" = 'NORMAL') AND (SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo") THEN
       DocType := DocType :: "Posted Invoice";
      IF (SalesHeader."Reason Code" = 'NORMAL') AND (SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice) THEN
       DocType := DocType :: "Posted Invoice";
      //YIMMDEVIP1.0
    END;

    LOCAL PROCEDURE ValidateDocNo@10();
    VAR
      DocType2@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      IF DocNo = '' THEN
        FromSalesHeader.INIT
      ELSE
        IF FromSalesHeader."No." = '' THEN BEGIN
          FromSalesHeader.INIT;
          CASE DocType OF
            DocType::Quote,
            DocType::"Blanket Order",
            DocType::Order,
            DocType::Invoice,
            DocType::"Return Order",
            DocType::"Credit Memo":
              FromSalesHeader.GET(CopyDocMgt.SalesHeaderDocType(DocType),DocNo);
            DocType::"Posted Shipment":
              BEGIN
                FromSalesShptHeader.GET(DocNo);
                FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
                IF SalesHeader."Document Type" IN
                   [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"]
                THEN BEGIN
                  DocType2 := DocType2::"Posted Invoice";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text001);
                END;
              END;
            DocType::"Posted Invoice":
              BEGIN
                FromSalesInvHeader.GET(DocNo);
                UIDLoc :='';                 //nk
                UIDLoc := FromSalesHeader.UID;   //nk
                FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Sales Invoice Header",FromSalesInvHeader.GETPOSITION,
                  DATABASE::"Sales Header",FromSalesHeader.GETPOSITION);
                FromSalesHeader.UID := UIDLoc;       //nk
              END;
            DocType::"Posted Return Receipt":
              BEGIN
                FromReturnRcptHeader.GET(DocNo);
                FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
                IF SalesHeader."Document Type" IN
                   [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
                THEN BEGIN
                  DocType2 := DocType2::"Posted Credit Memo";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text002);
                END;
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Return Receipt Header",FromReturnRcptHeader.GETPOSITION,
                  DATABASE::"Sales Header",FromSalesHeader.GETPOSITION);
              END;
            DocType::"Posted Credit Memo":
              BEGIN
                UIDLoc :='';                 //nk
                UIDLoc := FromSalesHeader.UID;   //nk
                FromSalesCrMemoHeader.GET(DocNo);
                FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
                PostCodeCheck.CopyAllAddressID(
                  DATABASE::"Sales Cr.Memo Header",FromSalesCrMemoHeader.GETPOSITION,
                  DATABASE::"Sales Header",FromSalesHeader.GETPOSITION);
                FromSalesHeader.UID := UIDLoc;       //nk
              END;
          END;
        END;
      FromSalesHeader."No." := '';

      IncludeHeader :=
        (DocType IN [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) AND
        ((DocType = DocType::"Posted Credit Memo") <>
         (SalesHeader."Document Type" IN
          [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"])) AND
        (SalesHeader."Bill-to Customer No." IN [FromSalesHeader."Bill-to Customer No.",'']);
      ValidateIncludeHeader;
    END;

    LOCAL PROCEDURE LookupDocNo@3();
    BEGIN
      CASE DocType OF
        DocType::Quote,
        DocType::"Blanket Order",
        DocType::Order,
        DocType::Invoice,
        DocType::"Return Order",
        DocType::"Credit Memo":
          BEGIN
            FromSalesHeader.FILTERGROUP := 0;
            FromSalesHeader.SETRANGE(FromSalesHeader."Reason Code",ReasonCode);//SMDEV1.0
            FromSalesHeader.SETRANGE("Document Type",CopyDocMgt.SalesHeaderDocType(DocType));
            IF SalesHeader."Document Type" = CopyDocMgt.SalesHeaderDocType(DocType) THEN
              FromSalesHeader.SETFILTER("No.",'<>%1',SalesHeader."No.");
            FromSalesHeader.FILTERGROUP := 2;
            FromSalesHeader."Document Type" := CopyDocMgt.SalesHeaderDocType(DocType);
            FromSalesHeader."No." := DocNo;
            IF (DocNo = '') AND (SalesHeader."Sell-to Customer No." <> '') THEN
              IF FromSalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.") THEN BEGIN
                FromSalesHeader."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                IF FromSalesHeader.FIND('=><') THEN;
              END;
            IF (P) AND (ReasonCode = 'SALRT') AND (DocType = DocType::"Credit Memo") THEN
              IF PAGE.RUNMODAL(63045,FromSalesHeader) = ACTION::LookupOK THEN
                DocNo := FromSalesHeader."No.";
            IF (P) AND (ReasonCode = 'SALRT') AND (DocType = DocType::Invoice) THEN
              IF PAGE.RUNMODAL(63044,FromSalesHeader) = ACTION::LookupOK THEN
                DocNo := FromSalesHeader."No.";
            IF (NOT P) AND (ReasonCode = 'NORMAL') AND (DocType = DocType::"Credit Memo") THEN
              IF PAGE.RUNMODAL(63035,FromSalesHeader) = ACTION::LookupOK THEN
                DocNo := FromSalesHeader."No.";
            IF (NOT P) AND (ReasonCode = 'NORMAL') AND (DocType = DocType::Invoice) THEN
              IF PAGE.RUNMODAL(45,FromSalesHeader) = ACTION::LookupOK THEN
                DocNo := FromSalesHeader."No.";
          END;
        DocType::"Posted Shipment":
          BEGIN
            FromSalesShptHeader."No." := DocNo;
            IF (DocNo = '') AND (SalesHeader."Sell-to Customer No." <> '') THEN
              IF FromSalesShptHeader.SETCURRENTKEY("Sell-to Customer No.") THEN BEGIN
                FromSalesShptHeader."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                IF FromSalesShptHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromSalesShptHeader) = ACTION::LookupOK THEN
              DocNo := FromSalesShptHeader."No.";
          END;
        DocType::"Posted Invoice":
          BEGIN
            FromSalesInvHeader."No." := DocNo;
            IF (DocNo = '') AND (SalesHeader."Sell-to Customer No." <> '') THEN
              IF FromSalesInvHeader.SETCURRENTKEY("Sell-to Customer No.") THEN BEGIN
                FromSalesInvHeader."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                IF FromSalesInvHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromSalesInvHeader) = ACTION::LookupOK THEN
              DocNo := FromSalesInvHeader."No.";
          END;
        DocType::"Posted Return Receipt":
          BEGIN
            FromReturnRcptHeader."No." := DocNo;
            IF (DocNo = '') AND (SalesHeader."Sell-to Customer No." <> '') THEN
              IF FromReturnRcptHeader.SETCURRENTKEY("Sell-to Customer No.") THEN BEGIN
                FromReturnRcptHeader."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                IF FromReturnRcptHeader.FIND('=><') THEN;
              END;
            IF PAGE.RUNMODAL(0,FromReturnRcptHeader) = ACTION::LookupOK THEN
              DocNo := FromReturnRcptHeader."No.";
          END;
        DocType::"Posted Credit Memo":
          BEGIN
            FromSalesCrMemoHeader."No." := DocNo;
            IF (DocNo = '') AND (SalesHeader."Sell-to Customer No." <> '') THEN
              IF FromSalesCrMemoHeader.SETCURRENTKEY("Sell-to Customer No.") THEN BEGIN
                FromSalesCrMemoHeader."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                IF FromSalesCrMemoHeader.FIND('=><') THEN;
              END;
            //IF PAGE.RUNMODAL(0,FromSalesCrMemoHeader) = ACTION::LookupOK THEN
            //  DocNo := FromSalesCrMemoHeader."No.";

      //

            //MESSAGE(ReasonCode);                                             //nk
            IF ReasonCode = 'SALRT' THEN
              IF PAGE.RUNMODAL(63042,FromSalesCrMemoHeader) = ACTION::LookupOK THEN
                DocNo := FromSalesCrMemoHeader."No.";
            IF ReasonCode = 'NORMAL' THEN
              IF PAGE.RUNMODAL(0,FromSalesCrMemoHeader) = ACTION::LookupOK THEN
                DocNo := FromSalesCrMemoHeader."No.";
      //

          END;
      END;
      ValidateDocNo;
    END;

    LOCAL PROCEDURE ValidateIncludeHeader@4();
    BEGIN
      RecalculateLines :=
        (DocType IN [DocType::"Posted Shipment",DocType::"Posted Return Receipt"]) OR NOT IncludeHeader;
    END;

    PROCEDURE InitializeRequest@1(NewDocType@1001 : Option;NewDocNo@1000 : Code[20];NewIncludeHeader@1002 : Boolean;NewRecalcLines@1003 : Boolean);
    BEGIN
      DocType := NewDocType;
      DocNo := NewDocNo;
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalcLines;
    END;

    PROCEDURE PassReasonCode@1102159001(ReasonC@1102159001 : Code[20];Check@1102159002 : Boolean);
    BEGIN
      ReasonCode := ReasonC;
      P := Check;
    END;

    BEGIN
    {
      //SMDEV1.0
        Updated All Customer No Captions with Entity No Captions.
        Created a new Function named PassReasonCode
        Added Code to Filter at lookup of Document No based on Reason Code.
        Created a Global varaible named ReasonCode.
        Created a Global Variable named P to check Purchase & sales.
      //YIMMDEVIP1.0
      Point No-18
      Copy Document functionality for Sales Invoice-YMMWJ to YIMM case.
      Added code in function "SetSalesHeader" to view respective posted documents while using Copy Document functionality.
      Added Code for ActualCreditMemo filter issue
      Add code to flow User id of correction creator.
    }
    END.
  }
  RDLDATA
  {
  }
}

